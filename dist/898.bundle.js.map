{"version":3,"file":"898.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/ant-colony/AntPath.ts","webpack://trading-game/./src/projects/ant-colony/ColonyState.ts","webpack://trading-game/./src/projects/ant-colony/index.ts","webpack://trading-game/./src/views/projects/ant-colony/AntColonyComponent.tsx"],"sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import { ColonyState } from \"./ColonyState\";\r\n\r\nexport class AntPath {\r\n    constructor(public path: number[], public cost: number) {\r\n\r\n    }\r\n\r\n    static runPath(state: ColonyState, signalPower: number, distPower: number, start: number) {\r\n        const hitmap = [];\r\n        const path = [start];\r\n        let pathCost = 0;\r\n        let index = start;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            hitmap.push(i === start);\r\n        }\r\n\r\n        for(let i = 0; i < state.points.length - 1; i++) {\r\n            let next = this.runStep(state, signalPower, distPower, hitmap, index);\r\n            pathCost += state.distance(index, next);\r\n            path.push(next);\r\n            index = next;\r\n            hitmap[next] = true;\r\n        }\r\n\r\n        return new AntPath(path, pathCost);\r\n    }\r\n\r\n    static runStep(state: ColonyState, signalPower: number, distPower: number, hitmap: boolean[], index: number) {\r\n        let pathWeights = [];\r\n        let weightSum = 0;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            if(index === i || hitmap[i]) pathWeights[i] = 0;\r\n            else {\r\n                let weight = Math.pow(1/state.distance(index, i), distPower) * Math.pow(state.weight(index, i), signalPower);\r\n                pathWeights.push( weight );\r\n                weightSum += weight;\r\n            }\r\n        }\r\n        let randomChoice = Math.random() * weightSum;\r\n        for(let i = 0; i < pathWeights.length; i++) {\r\n            if(hitmap[i]) continue;\r\n            randomChoice -= pathWeights[i];\r\n            if(randomChoice <= 0) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport class ColonyState {\r\n    public points: Point[];\r\n    public signals: number[][];\r\n    public distances: number[][];\r\n    public maxDist: number;\r\n\r\n    constructor(pts: Point[])\r\n    {\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    private initSignals () {\r\n        this.signals = [];\r\n        this.distances = [];\r\n\r\n        this.maxDist = 0;\r\n        for(let from = 0; from < this.points.length; from++){\r\n            let row = [];\r\n            let distRow = [];\r\n            for(let to = from + 1; to < this.points.length; to++){\r\n                row.push(1);\r\n                let dist = Point.subtract(this.points[from], this.points[to]).Length();\r\n                distRow.push(dist);\r\n                if(dist > this.maxDist) this.maxDist = dist;\r\n            }\r\n            this.signals.push(row);\r\n            this.distances.push(distRow);\r\n        }\r\n    }\r\n\r\n    setPoints(pts: Point[]){\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    clearWeights() {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    multWeights(mult: number) {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] *= mult;\r\n            }\r\n        }\r\n    }\r\n\r\n    addWeights(path: number[], weight: number) {\r\n        for(let i = 0; i < path.length; i++) {\r\n            let j = (i + 1) % path.length;\r\n            this.weight(path[i], path[j], Math.max(0, Math.min(1, this.weight(path[i], path[j]) + weight)));\r\n        }\r\n    }\r\n\r\n    weight(from: number, to: number): number;\r\n    weight(from: number, to: number, value: number): void;\r\n    weight(from: number, to: number, value?: number): number | void {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        if(value === undefined) {\r\n            return this.signals[i1][i2];\r\n        }\r\n        else {\r\n            if(isNaN(value)) throw \"WHAT\";\r\n            this.signals[i1][i2] = value;\r\n        }\r\n    }\r\n\r\n    distance(from: number, to: number): number {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        return this.distances[i1][i2];\r\n    }\r\n\r\n    point(index: number): Point;\r\n    point(index: number, point: Point) : void;\r\n    point(index: number, point ?: Point) : void | Point {\r\n        if(point === undefined) return this.points[index];\r\n        this.points[index] = point;\r\n    }\r\n}","import { findMax, findMin, max, min } from \"../../LinqLike\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport { AntPath } from \"./AntPath\";\r\nimport { ColonyState } from \"./ColonyState\";\r\nimport { IRenderSettings } from \"./IRenderSettings\";\r\nlet currentPaintLoop = -1;\r\n\r\n\r\nexport default function Run(settings: IRenderSettings, cvs: HTMLCanvasElement) {\r\n    stopPaintLoop();\r\n    ResizeCanvas(cvs, 800, 600);\r\n    const ctx = cvs.getContext('2d');\r\n\r\n    let state = init(cvs, ctx, settings.numPts);\r\n    paintLoop(cvs, ctx, settings, state);\r\n}\r\n\r\nexport function Cleanup() {\r\n    stopPaintLoop();\r\n}\r\n\r\nfunction stopPaintLoop() {\r\n    totalMinPath = null;\r\n    if(currentPaintLoop !== -1)\r\n        clearTimeout(currentPaintLoop);\r\n}\r\n\r\nlet totalMinPath: AntPath | null = null;\r\nfunction paintLoop(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, settings: IRenderSettings, state: ColonyState) {\r\n    const minPath = tick(settings, state);\r\n    if(totalMinPath === null || minPath.cost < totalMinPath.cost)\r\n        totalMinPath = minPath;\r\n    draw(canvas, ctx, state, minPath.path, totalMinPath.path);\r\n    // TS thinks setTimeout returns a NodeJS.Timeout (?)\r\n    currentPaintLoop = <number><any>setTimeout(() => paintLoop(canvas, ctx, settings, state), settings.delayPerFrame);\r\n}\r\n\r\nfunction tick(settings: IRenderSettings, state: ColonyState): AntPath {\r\n    let ants = [];\r\n    for(let i = 0; i < settings.numAnts; i++) {\r\n        ants.push(AntPath.runPath(state, settings.signalPower, settings.distancePower, 0));\r\n    }\r\n\r\n    state.multWeights(settings.signalDecay);\r\n\r\n    let maxSignalGain = 1 / settings.numAnts;\r\n    let shortestPath = findMin(ants, ant => ant.cost);\r\n    let longestPath = max(ants, ant => ant.cost);\r\n    for(const ant of ants) {\r\n        let antWeight: number;\r\n        if(shortestPath.cost === longestPath)\r\n            antWeight = 1;\r\n        else \r\n            antWeight = 1 - ((ant.cost - shortestPath.cost) / (longestPath - shortestPath.cost));\r\n        state.addWeights(ant.path, antWeight * maxSignalGain);\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction init(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, numPts: number): ColonyState {\r\n    const points = [];\r\n    for(let i = 0; i < numPts; i++) {\r\n        points.push(new Point(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height)));\r\n    }\r\n    drawPoints(canvas, ctx, points);\r\n    let state = new ColonyState(points);\r\n    return state;\r\n}\r\n\r\nfunction drawPoints(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, points: Point[]) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    ctx.fillStyle = '#aaa';\r\n    ctx.beginPath();\r\n    for(let i = 0; i < points.length; i++) {\r\n        const point = points[i];\r\n        ctx.moveTo(point.x, point.y);\r\n        ctx.ellipse(point.x, point.y, 3, 3, 0, 0, Math.PI * 2);\r\n    }\r\n    ctx.fill();\r\n}\r\n\r\nfunction draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: ColonyState, currentBestPath?: number[], globalBestPath?: number[]) {\r\n    drawPoints(canvas, ctx, state.points);\r\n    ctx.strokeStyle = '#aaa';\r\n    for(let i = 0; i < state.points.length; i++) {\r\n        for(let j = 0; j < state.points.length; j++) {\r\n            if(i === j) continue;\r\n            ctx.beginPath();\r\n            ctx.lineWidth = state.weight(i, j) * 5;\r\n            ctx.moveTo(state.point(i).x, state.point(i).y);\r\n            ctx.lineTo(state.point(j).x, state.point(j).y);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'green';\r\n    if(currentBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(currentBestPath[0]).x, state.point(currentBestPath[0]).y);\r\n        for(let i = 1; i < currentBestPath.length; i++) {\r\n            ctx.lineTo(state.point(currentBestPath[i]).x, state.point(currentBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'red';\r\n    if(globalBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(globalBestPath[0]).x, state.point(globalBestPath[0]).y);\r\n        for(let i = 1; i < globalBestPath.length; i++) {\r\n            ctx.lineTo(state.point(globalBestPath[i]).x, state.point(globalBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport Run, { Cleanup } from '../../../projects/ant-colony/index';\r\nimport { IRenderSettings } from '../../../projects/ant-colony/IRenderSettings';\r\n\r\nexport default function AntColonyComponent() {\r\n    let ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    let [state, setState] = React.useState<IRenderSettings>({\r\n        numPts: 100,\r\n        signalDecay: 0.7,\r\n        signalPower: 1.2,\r\n        distancePower: 4,\r\n        delayPerFrame: 6,\r\n        numAnts: 30,\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        Run(state, ref.current);\r\n        return Cleanup;\r\n    }, [state, ref]);\r\n\r\n    return <div className='flex row'>\r\n        <canvas id='canvas' ref={ref} />\r\n        <div className='flex col'>\r\n            <AntColonyValueSliderComponent label='Number of Points: ' value={state.numPts} onChange={v => setState({...state, numPts: v})} min={3} max={200} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Number of Ants: ' value={state.numAnts} onChange={v => setState({...state, numAnts: v})} min={1} max={100} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Signal Decay: ' value={state.signalDecay} onChange={v => setState({...state, signalDecay: v})} min={0} max={1} step={0.1} type='float' />\r\n            <AntColonyValueSliderComponent label='Signal Power: ' value={state.signalPower} onChange={v => setState({...state, signalPower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Distance Power: ' value={state.distancePower} onChange={v => setState({...state, distancePower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Delay per Frame: ' value={state.delayPerFrame} onChange={v => setState({...state, delayPerFrame: v})} min={6} max={600} step={30} type='number' />\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction AntColonyValueSliderComponent(props: {label: string, value: number, onChange: (value: number) => void, min: number, max: number, step: number, type: 'float' | 'number'}) {\r\n    return <div>\r\n        <label>{props.label}</label>\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type='range' min={props.min} max={props.max} step={props.step} />\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type={props.type} min={props.min} max={props.max} />\r\n    </div>;\r\n}"],"names":["Point","constructor","x","y","angle","distance","Math","cos","sin","LengthSq","Dot","this","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","Direction","atan2","AddWith","nx","ny","splitArgs","MultWith","undefined","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","rotate","theta","fromAngle","AntPath","path","cost","state","signalPower","distPower","start","hitmap","pathCost","index","i","points","push","next","runStep","pathWeights","weightSum","weight","pow","randomChoice","random","ColonyState","initSignals","signals","distances","maxDist","from","row","distRow","to","dist","setPoints","clearWeights","j","multWeights","mult","addWeights","value","i1","i2","isNaN","point","currentPaintLoop","Run","settings","cvs","stopPaintLoop","ctx","getContext","paintLoop","canvas","numPts","floor","width","height","drawPoints","init","Cleanup","totalMinPath","clearTimeout","minPath","ants","numAnts","runPath","distancePower","signalDecay","maxSignalGain","shortestPath","ant","longestPath","antWeight","tick","currentBestPath","globalBestPath","strokeStyle","beginPath","lineWidth","moveTo","lineTo","stroke","draw","setTimeout","delayPerFrame","fillStyle","fillRect","clientWidth","clientHeight","ellipse","PI","fill","AntColonyComponent","ref","setState","current","className","id","AntColonyValueSliderComponent","label","onChange","v","step","type","props","ev","target","valueAsNumber"],"sourceRoot":""}