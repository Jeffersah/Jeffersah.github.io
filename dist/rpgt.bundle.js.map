{"version":3,"file":"rpgt.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common-assets/arrows.png","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/rpgt/Constants.ts","webpack://trading-game/./src/projects/common-assets/rpg1.png","webpack://trading-game/./src/projects/common-assets/wizard16.png","webpack://trading-game/./src/projects/common/Iterate.ts","webpack://trading-game/./src/projects/rpgt/world/World.ts","webpack://trading-game/./src/projects/rpgt/SheetGraphic.ts","webpack://trading-game/./src/projects/rpgt/world/Cell.ts","webpack://trading-game/./src/projects/common/assets/FileResource.ts","webpack://trading-game/./src/projects/rpgt/index.ts"],"sourcesContent":["export default __webpack_public_path__ + \"bbb298f00b41bbd627d27aa0529a20ba.png\";","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","export const TILES_WIDE = 28;\r\nexport const TILES_HIGH = 28;\r\nexport const TILE_SIZE = 16;","export default __webpack_public_path__ + \"42ace1eb95edbc899165c10bb9cc20ab.png\";","export default __webpack_public_path__ + \"e5352b303b79e08de36a8c4248cdbb28.png\";","\r\nexport interface ILoopControl {\r\n    break(): void;\r\n}\r\n\r\nexport function IterateRange(start: number, end: number, handle: (value: number, control: ILoopControl) => void): void {\r\n    let breakIteration = false;\r\n    const loopControl = {\r\n        break: () => {\r\n            breakIteration = true;\r\n        }\r\n    };\r\n\r\n    if (end === start) {\r\n        handle(start, loopControl);\r\n        return;\r\n    }\r\n\r\n    const direction = end > start ? 1 : -1;\r\n    const finalValue = end + direction;\r\n\r\n    for (let i = start; i !== finalValue && !breakIteration; i += direction) {\r\n        handle(i, loopControl);\r\n    }\r\n}","import Cell from './Cell';\r\nimport Rect from '../../common/position/Rectangle';\r\nimport Point from '../../common/position/Point';\r\nimport { Direction } from '../../common/position/Direction';\r\nimport { IterateRange } from '../../common/Iterate';\r\nimport * as Const from '../Constants';\r\nimport { createContext } from 'react';\r\nimport { ResizeCanvas } from '../../common/CanvasHelpers';\r\n\r\nexport default class World {\r\n    cells: Cell[][];\r\n\r\n    public prerender: HTMLCanvasElement;\r\n\r\n    constructor(public width: number, public height: number, generateCell: () => Cell) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            const col = [];\r\n            for (let y = 0; y < height; y++) {\r\n                col.push(generateCell());\r\n            }\r\n            this.cells.push(col);\r\n        }\r\n\r\n        this.prerender = document.getElementById('world_prerender') as HTMLCanvasElement;\r\n    }\r\n\r\n    updatePrerender() {\r\n        ResizeCanvas(this.prerender, Const.TILE_SIZE * this.width, Const.TILE_SIZE * this.height);\r\n        const pctx = this.prerender.getContext('2d');\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.cells[x][y].paint(pctx, x * Const.TILE_SIZE, y * Const.TILE_SIZE);\r\n            }\r\n        }\r\n    }\r\n\r\n    tryMoveEntity(pos: Rect, vel: Point, onChecked?: (x: number, y: number) => void): void {\r\n        const xDirection = vel.x >= 0 ? Direction.Right : Direction.Left;\r\n        const yDirection = vel.y >= 0 ? Direction.Down : Direction.Up;\r\n        if (vel.x !== 0) {\r\n            const startXTile = Math.floor(pos.edge(xDirection) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.edge(xDirection) + vel.x) / Const.TILE_SIZE);\r\n            const startYTile = Math.floor(pos.edge(Direction.Up) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.edge(Direction.Down) - 1) / Const.TILE_SIZE);\r\n\r\n            let xColision: number | undefined;\r\n            IterateRange(startXTile, endXTile, (x, ctrl) => {\r\n                for (let y = startYTile; y <= endYTile; y++) {\r\n                    if (x < 0 || x >= this.width) {\r\n                        xColision = x;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        xColision = x;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (xColision === undefined) {\r\n                pos.x += vel.x;\r\n            } else {\r\n                if (vel.x >= 0) pos.x = xColision * Const.TILE_SIZE - pos.w;\r\n                else pos.x = (xColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n        if (vel.y !== 0) {\r\n            const startYTile = Math.floor(pos.edge(yDirection) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.edge(yDirection) + vel.y) / Const.TILE_SIZE);\r\n            const startXTile = Math.floor(pos.edge(Direction.Left) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.edge(Direction.Right) - 1) / Const.TILE_SIZE);\r\n\r\n            let yColision: number | undefined;\r\n            IterateRange(startYTile, endYTile, (y, ctrl) => {\r\n                for (let x = startXTile; x <= endXTile; x++) {\r\n                    if (y < 0 || y >= this.height) {\r\n                        yColision = y;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        yColision = y;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (yColision === undefined) {\r\n                pos.y += vel.y;\r\n            } else {\r\n                if (vel.y >= 0) pos.y = yColision * Const.TILE_SIZE - pos.h;\r\n                else pos.y = (yColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n    }\r\n}","import { IGraphic } from './IGraphic';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\n\r\nexport default class SheetGraphic implements IGraphic {\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(public sheet: SpriteSheet, private tileX: number, private tileY: number) {\r\n        this.width = sheet.spriteWidth;\r\n        this.height = sheet.spriteHeight;\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number, tw: number, th: number): void {\r\n        this.sheet.render(ctx, tx, ty, tw, th, this.tileX, this.tileY);\r\n    }\r\n\r\n}","import { IGraphic } from '../IGraphic';\r\nimport * as Const from '../Constants';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport SheetGraphic from '../SheetGraphic';\r\n\r\nconst GRASS_TILES: [number, number][] =\r\n[\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [7, 1],\r\n    [7, 1],\r\n    [10, 1],\r\n    [10, 2],\r\n    [9, 2]\r\n];\r\n\r\nexport default class Cell {\r\n    constructor(public pathable: boolean, public graphic: IGraphic) {\r\n\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number) {\r\n        this.graphic.paint(ctx, tx, ty, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    }\r\n\r\n    static GrassFloor(sheet: SpriteSheet): Cell {\r\n        const grassCoords = GRASS_TILES[Math.floor(Math.random() * GRASS_TILES.length)];\r\n        return new Cell(true, new SheetGraphic(sheet, grassCoords[0], grassCoords[1]));\r\n    }\r\n\r\n    static RockWall(sheet: SpriteSheet): Cell {\r\n        return new Cell(false, new SheetGraphic(sheet, 7, 24));\r\n    }\r\n}","import Axios from 'axios-observable';\r\n\r\nexport class FileResource<T> {\r\n    public body: T;\r\n    constructor(fileUrl: string, private onload: () => void) {\r\n        Axios.get(fileUrl).subscribe(data => {\r\n            this.body = data.data as T;\r\n            this.onload();\r\n        });\r\n    }\r\n}","import * as Const from './Constants';\r\nimport AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport arrowsUrl from '../common-assets/arrows.png';\r\nimport tilesUrl from '../common-assets/rpg1.png';\r\nimport wizardUrl from '../common-assets/wizard16.png';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport World from './world/World';\r\nimport Cell from './world/Cell';\r\nimport Rect from '../common/position/Rectangle';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { FileResource } from '../common/assets/FileResource';\r\n\r\nconst CAMERA_SLOWDOWN_FACTOR = 3;\r\n\r\nlet assets: {\r\n    tiles: SpriteSheet,\r\n    wizard: SpriteSheet,\r\n    arrows: SpriteSheet,\r\n    tilesets: FileResource<any>\r\n};\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\n\r\nlet world: World;\r\n\r\nlet keys: KeyboardManager;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    assets = {\r\n        tiles: new SpriteSheet(16, 16, tilesUrl, assetLoader.registerAssetLoadCallback()),\r\n        wizard: new SpriteSheet(16, 16, wizardUrl, assetLoader.registerAssetLoadCallback()),\r\n        arrows: new SpriteSheet(16, 16, arrowsUrl, assetLoader.registerAssetLoadCallback()),\r\n        tilesets: new FileResource('../dist/assets/rpgtest/tilesets.json', assetLoader.registerAssetLoadCallback()),\r\n    };\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    world = new World(Const.TILES_WIDE * 2, Const.TILES_HIGH * 2, () => {\r\n        if (Math.random() <= 0.15) {\r\n            return Cell.RockWall(assets.tiles);\r\n        }\r\n        else {\r\n            return Cell.GrassFloor(assets.tiles);\r\n        }\r\n    });\r\n    world.updatePrerender();\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    ctx = canvas.getContext('2d');\r\n    const scaleHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.TILE_SIZE * Const.TILES_WIDE, Const.TILE_SIZE * Const.TILES_HIGH, true, () => { return; });\r\n    tick();\r\n}\r\n\r\nconst camPos = new Point(0, 0);\r\nconst playerPos = new Rect(0, 0, 14, 14);\r\nlet toggle = false;\r\nfunction tick() {\r\n    ctx.clearRect(0, 0, Const.TILES_WIDE * Const.TILE_SIZE, Const.TILES_HIGH * Const.TILE_SIZE);\r\n    NearestNeighborScaling(ctx);\r\n    ctx.save();\r\n    let cx = 0;\r\n    let cy = 0;\r\n    if (world.width > Const.TILES_WIDE) {\r\n        cx = Math.max(0, Math.min((world.width - Const.TILES_WIDE) * Const.TILE_SIZE, playerPos.x - (Const.TILE_SIZE * Const.TILES_WIDE / 2)));\r\n    }\r\n    if (world.height > Const.TILES_HIGH) {\r\n        cy = Math.max(0, Math.min((world.height - Const.TILES_HIGH) * Const.TILE_SIZE, playerPos.y - (Const.TILE_SIZE * Const.TILES_HIGH / 2)));\r\n    }\r\n\r\n    camPos.multWith(CAMERA_SLOWDOWN_FACTOR, CAMERA_SLOWDOWN_FACTOR)\r\n          .addWith(cx, cy)\r\n          .divideWith(CAMERA_SLOWDOWN_FACTOR + 1, CAMERA_SLOWDOWN_FACTOR + 1);\r\n\r\n    ctx.translate(-camPos.x, -camPos.y);\r\n    ctx.drawImage(world.prerender, 0, 0);\r\n    keys.update();\r\n\r\n    ctx.fillStyle = 'blue';\r\n    ctx.fillRect(playerPos.x, playerPos.y, playerPos.w, playerPos.h);\r\n    const vel = new Point(0, 0);\r\n    if (keys.isKeyDown('a')) {\r\n        vel.x = -3;\r\n    }\r\n    if (keys.isKeyDown('d')) {\r\n        vel.x = 3;\r\n    }\r\n    if (keys.isKeyDown('w')) {\r\n        vel.y = -3;\r\n    }\r\n    if (keys.isKeyDown('s')) {\r\n        vel.y = 3;\r\n    }\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.globalAlpha = 0.6;\r\n    world.tryMoveEntity(playerPos, vel, (tx, ty) => {\r\n        ctx.fillRect(tx * Const.TILE_SIZE, ty * Const.TILE_SIZE, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    });\r\n    ctx.globalAlpha = 1;\r\n\r\n    toggle = !toggle;\r\n    if (toggle) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 10, 10);\r\n    }\r\n    ctx.restore();\r\n    requestAnimationFrame(() => tick());\r\n}"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","TILE_SIZE","IterateRange","start","end","handle","breakIteration","loopControl","break","direction","finalValue","i","World","width","height","generateCell","cells","x","col","y","prerender","document","getElementById","updatePrerender","pctx","getContext","paint","tryMoveEntity","pos","vel","onChecked","xDirection","Direction","yDirection","startXTile","Math","floor","edge","endXTile","startYTile","endYTile","xColision","ctrl","pathable","w","yColision","h","SheetGraphic","sheet","tileX","tileY","spriteWidth","spriteHeight","ctx","tx","ty","tw","th","render","GRASS_TILES","Cell","graphic","static","grassCoords","random","length","FileResource","fileUrl","onload","subscribe","data","body","assets","world","Run","assetLoader","AssetLoader","tiles","SpriteSheet","registerAssetLoadCallback","wizard","arrows","tilesets","onAllFinished","assetLoadDone","RockWall","GrassFloor","canvas","NearestNeighborScalingHelper","tick","camPos","Point","playerPos","toggle","clearRect","save","cx","cy","max","min","multWith","addWith","divideWith","CAMERA_SLOWDOWN_FACTOR","translate","drawImage","fillStyle","fillRect","globalAlpha","restore","requestAnimationFrame"],"sourceRoot":""}