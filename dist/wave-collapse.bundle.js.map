{"version":3,"file":"wave-collapse.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/wave-collapse/assets/TileInfo.ts","webpack://trading-game/./src/projects/wave-collapse/AdjacencyMap.ts","webpack://trading-game/./src/projects/wave-collapse/assets/isotiles.png","webpack://trading-game/./src/projects/wave-collapse/Generator.ts","webpack://trading-game/./src/projects/wave-collapse/index.ts","webpack://trading-game/./src/views/projects/wave-collapse/WaveCollapseComponent.tsx"],"sourcesContent":["\r\nexport interface ITileInfo {\r\n    tile: [number, number];\r\n    edges: number[];\r\n\r\n    // If omitted, bottom = edges but 0 => 'any'\r\n    bottom?: (number[]|'any')[];\r\n    // If omitted, top = edges but 2 => 'any'\r\n    top?: (number[]|'any')[];\r\n}\r\n\r\nexport function getTop(ti: ITileInfo): (number[]|'any')[] {\r\n    return ti.top ?? ti.edges.map(t => t === 2 ? 'any' : [t]);\r\n}\r\n\r\nexport function getBottom(ti: ITileInfo): (number[]|'any')[] { \r\n    return ti.bottom ?? ti.edges.map(t => t === 0 ? 'any' : [t]);\r\n}\r\n\r\nexport function canStack(bottom: (number[]|'any')[], top: (number[]|'any')[]){\r\n    for(let i = 0; i < bottom.length; i++)\r\n    {\r\n        if(bottom[i] === 'any' || top[i] === 'any') continue;\r\n        if(bottom[i].length === 0 || top[i].length === 0) return false;\r\n        if(!hasIntersection(bottom[i] as number[], top[i] as number[])) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction hasIntersection(a: number[], b: number[]){\r\n    for(let i = 0; i < a.length; i++)\r\n    {\r\n        if(b.indexOf(a[i]) !== -1) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst TileInfos: ITileInfo[] = [\r\n    { \r\n        tile: [0, 0],\r\n        edges: [2, 2, 2, 2]\r\n    },\r\n    { \r\n        tile: [1, 0],\r\n        edges: [1, 0, 1, 0]\r\n    },\r\n    {\r\n        tile: [2, 0],\r\n        edges: [0, 1, 0, 1]\r\n    },\r\n    {\r\n        tile: [3, 0],\r\n        edges: [1, 0, 0, 0],\r\n        bottom: [[1, 2], 'any', [1, 2], 'any'],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [4, 0],\r\n        edges: [0, 0, 1, 0],\r\n        bottom: [[1, 2], 'any', [1, 2], 'any'],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [5, 0],\r\n        edges: [0, 1, 0, 0],\r\n        bottom: ['any', [1, 2], 'any', [1, 2]],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [6, 0],\r\n        edges: [0, 0, 0, 1],\r\n        bottom: ['any', [1, 2], 'any', [1, 2]],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [7, 0],\r\n        edges: [1, 1, 1, 1]\r\n    },\r\n    {\r\n        tile: [0, 1],\r\n        edges: [1, 1, 0, 1]\r\n    },\r\n    {\r\n        tile: [1, 1],\r\n        edges: [1, 1, 1, 0]\r\n    },\r\n    {\r\n        tile: [2, 1],\r\n        edges: [0, 1, 1, 1]\r\n    },\r\n    {\r\n        tile: [3, 1],\r\n        edges: [1, 0, 1, 1]\r\n    },\r\n    {\r\n        tile: [4, 1],\r\n        edges: [1, 1, 0, 0]\r\n    },\r\n    {\r\n        tile: [5, 1],\r\n        edges: [0, 1, 1, 0]\r\n    },\r\n    {\r\n        tile: [6, 1],\r\n        edges: [0, 0, 1, 1]\r\n    },\r\n    {\r\n        tile: [7, 1],\r\n        edges: [1, 0, 0, 1]\r\n    },\r\n    {\r\n        tile: [0, 2],\r\n        edges: [1, 0, 2, 0]\r\n    },\r\n    {\r\n        tile: [1, 2],\r\n        edges: [0, 1, 0, 2]\r\n    },\r\n    {\r\n        tile: [2, 2],\r\n        edges: [2, 0, 1, 0],\r\n    },\r\n    {\r\n        tile: [3, 2],\r\n        edges: [0, 2, 0, 1],\r\n    },\r\n    { \r\n        tile: [4, 2],\r\n        edges: [1, 0, 1, 0],\r\n        bottom: [[1,2],[1,2],[1,2],[1,2]],\r\n    },\r\n    {\r\n        tile: [5, 2],\r\n        edges: [0, 1, 0, 1],\r\n        bottom: [[1,2],[1,2],[1,2],[1,2]],\r\n    },\r\n    {\r\n        tile: [5, 3],\r\n        edges: [0, 0, 0, 0]\r\n    },\r\n]\r\n\r\n\r\nexport default TileInfos;","import { canStack, getBottom, getTop, ITileInfo } from \"./assets/TileInfo\";\r\n\r\nexport default interface ITileNeighborInfo {\r\n    id: number,\r\n    // x+, y+, x-, y-, z+, z-\r\n    neighbors: number[][],\r\n}\r\n\r\nexport const NeighborDirections = [\r\n    { x: 1, y: 0, z: 0 },\r\n    { x: 0, y: 1, z: 0 },\r\n    { x: -1, y: 0, z: 0 },\r\n    { x: 0, y: -1, z: 0 },\r\n    { x: 0, y: 0, z: 1 },\r\n    { x: 0, y: 0, z: -1 },\r\n]\r\n\r\nexport function GenerateNeighborInfo(tiles: ITileInfo[]) {\r\n    const result: ITileNeighborInfo[] = [];\r\n    tiles.forEach(tile => {\r\n        let neighborInfo: ITileNeighborInfo = {\r\n            id: result.length,\r\n            neighbors: [[], [], [], [], [], []],\r\n        };\r\n\r\n        for(let otherId = 0; otherId < tiles.length; otherId++){\r\n            let otherTile = tiles[otherId];\r\n            for(let dir = 0; dir < 4; dir++) {\r\n                if(otherTile.edges[(dir + 2)%4] === tile.edges[dir])\r\n                {\r\n                    neighborInfo.neighbors[dir].push(otherId);\r\n                }\r\n            }\r\n            if(canStack(getTop(otherTile), getBottom(tile))) {\r\n                neighborInfo.neighbors[4].push(otherId);\r\n            }\r\n            \r\n            if(canStack(getTop(tile), getBottom(otherTile))) {\r\n                neighborInfo.neighbors[5].push(otherId);\r\n            }\r\n        }\r\n\r\n        for(var i = 0; i < neighborInfo.neighbors.length; i++){\r\n            neighborInfo.neighbors[i].sort((a, b) => a - b);\r\n        }\r\n        result.push(neighborInfo);\r\n    });\r\n\r\n    return result;\r\n}","export default __webpack_public_path__ + \"c169d19bb90720608b4e6ba8299edfb4.png\";","import ITileNeighborInfo, { NeighborDirections } from \"./AdjacencyMap\";\r\n\r\nexport type WaveCell = number | number[];\r\nexport type WaveFunction = WaveCell[][][];\r\n\r\nexport function CreateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number)\r\n{\r\n    let defaultCell = [];\r\n    for(let i = 0; i < neighborInfos.length; i++) { defaultCell.push(i); }\r\n\r\n    let waveFunction: WaveFunction = [];\r\n    for(let x = 0; x < xSize; x++) {\r\n        let plane = [];\r\n        for(let y = 0; y < ySize; y++) {\r\n            let row = [];\r\n            for(let z = 0; z < zSize; z++) {\r\n                row.push([...defaultCell]);\r\n            }\r\n            plane.push(row);\r\n        }\r\n        waveFunction.push(plane);\r\n    }\r\n    return waveFunction;\r\n}\r\n\r\nexport function GenerateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number) {\r\n    let waveFunction = CreateChunk(neighborInfos, xSize, ySize, zSize);\r\n\r\n    while(!Step(neighborInfos, waveFunction)){}\r\n\r\n    return waveFunction as number[][][];\r\n}\r\n\r\nexport function Step(neighborInfos: ITileNeighborInfo[], waveFunction: WaveFunction) {\r\n    let minCount = Infinity;\r\n    let minCells: {x: number, y: number, z: number}[] = [];\r\n    for(let x = 0; x < waveFunction.length; x++) {\r\n        for(let y = 0; y < waveFunction[x].length; y++) {\r\n            for(let z = 0; z < waveFunction[x][y].length; z++) {\r\n                if(!isFinalizedCell(waveFunction[x][y][z])){\r\n                    let count = (waveFunction[x][y][z] as number[]).length;\r\n                    if(count < minCount) {\r\n                        minCount = count;\r\n                        minCells = [{x, y, z}];\r\n                    }\r\n                    else if(count === minCount) {\r\n                        minCells.push({x, y, z});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!isFinite(minCount)) { return true; }\r\n\r\n    let chosenIndex = Math.floor(Math.random() * minCells.length);\r\n    let {x, y, z} = minCells[chosenIndex];\r\n    let waveCell = waveFunction[x][y][z];\r\n    let options = getPossibilities(waveCell);\r\n    let chosen = options[Math.floor(Math.random() * options.length)];\r\n\r\n    waveFunction[x][y][z] = chosen;\r\n\r\n    PropagateChanges(neighborInfos, waveFunction, x, y, z);\r\n    return false;\r\n}\r\n\r\nfunction PropagateChanges(neighborInfos: ITileNeighborInfo[],waveFunction: WaveFunction, x: number, y: number, z: number)\r\n{\r\n    let stack = [{x, y, z}];\r\n    while(stack.length > 0) {\r\n        let {x, y, z} = stack.pop();\r\n        let waveCell = waveFunction[x][y][z];\r\n\r\n        for(let directionIndex = 0; directionIndex < 6; directionIndex++) {\r\n            let direction = NeighborDirections[directionIndex];\r\n            if(x + direction.x < 0 || y + direction.y < 0 || z + direction.z < 0 || x + direction.x >= waveFunction.length || y + direction.y >= waveFunction[x].length || z + direction.z >= waveFunction[x][y].length) {\r\n                continue;\r\n            }\r\n\r\n            let neighborCell = waveFunction[x + direction.x][y + direction.y][z + direction.z];\r\n\r\n            let newNeighbor = tryAdjustNeighbor(neighborInfos, waveCell, neighborCell, directionIndex);\r\n            if(newNeighbor !== null) {\r\n                waveFunction[x + direction.x][y + direction.y][z + direction.z] = newNeighbor;\r\n                stack.push({x: x + direction.x, y: y + direction.y, z: z + direction.z});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction tryAdjustNeighbor(neighborInfos: ITileNeighborInfo[], cell: WaveCell, neighbor: WaveCell, direction: number): null | WaveCell {\r\n    if(isFinalizedCell(neighbor)) {\r\n        return null;\r\n    }\r\n\r\n    let options: number[] = [];\r\n\r\n    getPossibilities(cell).forEach(self => {\r\n        let neighborInfo = neighborInfos[self];\r\n        let results = neighborInfo.neighbors[direction];\r\n        results.forEach(result => {\r\n            if(options.indexOf(result) === -1) options.push(result);\r\n        });\r\n    });\r\n\r\n    let other = getPossibilities(neighbor);\r\n    let diff = false;\r\n    for(var i = other.length - 1; i >= 0; i--) {\r\n        if(options.indexOf(other[i]) === -1) {\r\n            other.splice(i, 1);\r\n            diff = true;\r\n        }\r\n    }\r\n\r\n    if(diff) {\r\n        if(other.length === 1) {\r\n            return other[0];\r\n        }\r\n        else if(other.length === 0) {\r\n            return options[0];\r\n        }\r\n        else {\r\n            return other;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport function getPossibilities(waveCell: WaveCell){\r\n    if(isFinalizedCell(waveCell)) {\r\n        return [waveCell];\r\n    }\r\n    else {\r\n        return waveCell;\r\n    }\r\n}\r\nexport function isFinalizedCell(waveCell: WaveCell): waveCell is number {\r\n    return typeof waveCell === 'number';\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport { NearestNeighborScaling } from \"../common/CanvasHelpers\";\r\nimport NearestNeighborScalingHelper from \"../common/NearestNeighborScalingHelper\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport ITileNeighborInfo, { GenerateNeighborInfo } from \"./AdjacencyMap\";\r\nimport tileUrl from './assets/isotiles.png'\r\nimport TileInfos, { ITileInfo } from \"./assets/TileInfo\";\r\nimport { CreateChunk, GenerateChunk, getPossibilities, isFinalizedCell, Step, WaveFunction } from \"./Generator\";\r\n\r\nlet spriteSheet: SpriteSheet;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    spriteSheet = new SpriteSheet(32, 32, tileUrl, assetLoader.registerAssetLoadCallback());\r\n\r\n    assetLoader.onAllFinished(() => Start());\r\n}\r\n\r\nfunction Start(){\r\n    const neighbors = GenerateNeighborInfo(TileInfos);\r\n\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    let tiles = CreateChunk(neighbors, 40, 40, 1);\r\n\r\n\r\n    let scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, 1200, 800, true, () => Paint(TileInfos, spriteSheet, tiles, ctx));\r\n\r\n    tickLoop(TileInfos, neighbors, spriteSheet, tiles, ctx);\r\n}\r\n\r\nfunction tickLoop(tileInfos: ITileInfo[], neighborInfos: ITileNeighborInfo[], assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    Paint(tileInfos, assets, cells, ctx);\r\n\r\n    if(!Step(neighborInfos, cells)){\r\n        requestAnimationFrame(() => tickLoop(tileInfos, neighborInfos, assets, cells, ctx));\r\n    }\r\n}\r\n\r\n\r\nfunction Paint(tileInfos: ITileInfo[], assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(0, 0, 1200, 800);\r\n\r\n    let origin = [600, 800];\r\n\r\n    for(let z = 0; z < cells[0][0].length; z++){\r\n        // ctx.globalAlpha = 1-(z / cells[0][0].length);\r\n        for(let x = cells.length - 1; x >= 0; x--) {\r\n            for(let y = cells[x].length - 1; y >= 0; y--) {\r\n                let options = getPossibilities(cells[x][y][z]);\r\n\r\n                if(options.length <= 12) {\r\n                    if(options.length === 0) continue;\r\n\r\n                    ctx.globalAlpha = 1 / options.length;\r\n                    let tx = (x-y) * 16;\r\n                    let ty = -(x+y) * 8 - z*16;\r\n                    \r\n                    for(const cell of options) {\r\n                        let tileInfo = tileInfos[cell];\r\n                        let sprite = assets.getSprite(tileInfo.tile[0], tileInfo.tile[1], 32, 32);\r\n\r\n                        sprite.draw(ctx, new Rect(tx + origin[0], ty + origin[1], 32, 32), 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport Run from '../../../projects/wave-collapse';\r\n\r\nexport default function WaveCollapseComponent() {\r\n    React.useEffect(() => Run());\r\n    return <div style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}>\r\n        <canvas id='canvas' style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}></canvas>\r\n    </div>;\r\n}"],"names":["getTop","ti","top","edges","map","t","getBottom","bottom","canStack","i","length","hasIntersection","a","b","indexOf","tile","NeighborDirections","x","y","z","tryAdjustNeighbor","neighborInfos","cell","neighbor","direction","isFinalizedCell","options","getPossibilities","forEach","self","neighbors","result","push","other","diff","splice","waveCell","spriteSheet","Run","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished","tiles","neighborInfo","id","otherId","otherTile","dir","sort","GenerateNeighborInfo","TileInfo","canvas","document","getElementById","ctx","getContext","xSize","ySize","zSize","defaultCell","waveFunction","plane","row","CreateChunk","NearestNeighborScalingHelper","Paint","tickLoop","Start","tileInfos","assets","cells","minCount","Infinity","minCells","count","isFinite","chosenIndex","Math","floor","random","chosen","stack","pop","directionIndex","newNeighbor","PropagateChanges","Step","requestAnimationFrame","clearRect","origin","globalAlpha","tx","ty","tileInfo","getSprite","draw","WaveCollapseComponent","style","left","right","position"],"sourceRoot":""}