{"version":3,"sources":["webpack:///./src/projects/bullets/const.ts","webpack:///./src/projects/bullets/assets/bullets_entities.png","webpack:///./src/projects/bullets/assets/Ships.png","webpack:///./src/projects/bullets/assets/Flares.png","webpack:///./src/projects/bullets/Player.ts","webpack:///./src/projects/bullets/ETeam.ts","webpack:///./src/projects/bullets/GameState.ts","webpack:///./src/projects/common/interpolation/Interpolated.ts","webpack:///./src/projects/bullets/Effects/SingleExplosion.ts","webpack:///./src/projects/common/interpolation/TimingFunction.ts","webpack:///./src/projects/common/interpolation/InterpolationFunction.ts","webpack:///./src/projects/common/interpolation/Keyframes.ts","webpack:///./src/projects/bullets/Effects/Explosion.ts","webpack:///./src/projects/common/Angle.ts","webpack:///./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack:///./src/projects/common/position/Line.ts","webpack:///./src/projects/common/position/Bounds.ts","webpack:///./src/projects/bullets/Ship.ts","webpack:///./src/projects/common/assets/AnimationControl.ts","webpack:///./src/projects/bullets/data/parsing/parsers.ts","webpack:///./src/projects/bullets/Effects/EffectControl.ts","webpack:///./src/projects/bullets/Effects/EffectFuncs.ts","webpack:///./src/projects/bullets/weapons/Weapon.ts","webpack:///./src/projects/bullets/weapons/WeaponGroup.ts","webpack:///./src/projects/bullets/weapons/WeaponTimer.ts","webpack:///./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack:///./src/projects/bullets/ai/IDebugMarker.ts","webpack:///./src/projects/bullets/ai/ShipAI.ts","webpack:///./src/projects/bullets/ai/BroadsideAI.ts","webpack:///./src/projects/bullets/ai/FighterAI.ts","webpack:///./src/projects/bullets/ai/IShipAI.ts","webpack:///./src/projects/bullets/data/parsing/weapons.ts","webpack:///./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack:///./src/projects/bullets/index.ts","webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/common/position/Angle.ts"],"names":["PHYS","sprites","this","position","Point","velocity","angularVelocity","rotation","engineDeflect","tgtDeflect","keys","isKeyDown","isEngineOn","Math","min","max","vDirection","atan2","y","x","diffDir","Angle","relativeAngle","diffPerc","PI","friction","abs","MultWith","cos","sin","vTotal","Length","vAngle","Direction","anglePullAmt","AddWith","ctx","save","rotrender","floor","random","render","restore","ETeam","player","Player","Entities","neutral","ally","enemy","Effects","update","i","length","tick","splice","updateEntities","entities","drawEntities","draw","originPoint","team","maxRange","ships","undefined","filter","item","currentHp","rangeSq","s","subtract","LengthSq","shipsAndRanges","map","ship","range","sort","a","b","Interpolated","timingFunction","InterpolationTimer","totalTime","elapsedTime","animation","sample","outerRadius","innerRadius","fillColor","timing","outer","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","p","pi","pc","numberInterpolator","fastColorInterpolator","Color","rgb","r","g","EvenlySpacedKeyframes","interpolator","args","arguments","percPer","keyframes","addKeyFrame","start","time","value","push","keyIndex","sampleRange","samplePerc","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","anyStillRunning","angle","norm","normalize","from","to","relativeNormalize","EFlareConditions","end","interpolate","denom","parallelIntersection","percentA","percentB","basis","ray","getBasisValue","pt","Dot","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","size","origin","relativePoints","dist","fromAngle","add","getVertecies","idx","arr","line","edges","getEdges","minLinePerc","colision","intersection","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","Multiply","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","accuteAngle","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","initial","queue","scaleFactor","isSprite","sourceSize","source","src","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","numFrames","effects","effectArgs","effect","type","CreateEffect","shipDef","turretAngle","actualAnchor","offset","Clone","SubtractWith","imgControl","result","rotate","getWeaponAnchorAngle","self","possibleTargets","location","getWeaponLocation","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","getWeaponCurrentAngle","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shootAnimation","enqueue","play","shootEffect","spawnEffect","realPoint","realRot","timer","weapons","burstAllWeapons","targets","acqCount","findNearestShips","getTeam","acq","acquireTargets","bi","onShoot","burstIndex","shoot","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","atlas","srcPoint","turnAccel","buildAi","getSprite","jsonWeaponGroup","w","burstAll","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","direction","tgt","DebugLine","point2","markers","doDebug","debug","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","debugPoint","tgtPoints","tangent","debugLine","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","angleBetween","deltaHeading","AllAIGenerators","fighter","broadside","parseWeaponGroupDefinition","json","defs","imgAtlases","weaponJson","isWeapon","def","console","error","parseWeaponDefinition","buildAllDefinitions","animationData","key","animations","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","log","definitions","canvas","document","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","buildShip","repaintLoop","gameState","fillRect","focusPoint","translate","ty","tx","repaint","requestAnimationFrame","onLoadDone","loadJson","distance","sqrt","p1","p2","other","len","nx","ny","splitArgs","sy","slice","theta","vals","h","v","hsv","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","KeyState","changes","indexOf","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","change","storeKeys","storeChanges","element","watcher","prvState","currentState","Update","isKeyUp","sourceOffset","frame","scale","drawImage","image","loop","PlayingAnimation","maxTime","currentTime","frameNumber","spriteUrl","onload","createElement","loadFinished","sourceRotation","frameCount","twoPi"],"mappings":"sJAAe,EACJ,IADI,EAEH,I,wBCFG,MAA0B,uCCA1B,MAA0B,uCCA1B,MAA0B,uC,gBCOzC,MAAMA,EACY,GADZA,EAEW,GAFXA,EAGQ,KAHRA,EAIQ,IAJRA,EAMc,IANdA,EAQa,KARbA,EASkB,KATlBA,EAUQ,IAVRA,EAWW,KAXXA,EAYY,IAGH,MAAM,EAUjB,YAAoBC,GAAA,KAAAA,UAChBC,KAAKC,SAAW,IAAIC,EAAA,EAAM,EAAG,GAC7BF,KAAKG,SAAW,IAAID,EAAA,EAAM,EAAG,GAC7BF,KAAKI,gBAAkB,EACvBJ,KAAKK,SAAW,EAChBL,KAAKM,cAAgB,EACrBN,KAAKO,WAAa,EAGtB,KAAKC,GACGA,EAAKC,UAAU,KACfT,KAAKU,YAAa,EAElBV,KAAKU,YAAa,EAGlBF,EAAKC,UAAU,KACfT,KAAKO,WAAa,EACXC,EAAKC,UAAU,KACtBT,KAAKO,YAAc,EAEnBP,KAAKO,WAAa,EAGlBP,KAAKO,YAAcP,KAAKM,cACxBN,KAAKM,cAAgBK,KAAKC,IAAIZ,KAAKM,cAAgBR,EAAqBE,KAAKO,YAE7EP,KAAKM,cAAgBK,KAAKE,IAAIb,KAAKM,cAAgBR,EAAqBE,KAAKO,YAGjF,MAAMO,EAAaH,KAAKI,MAAMf,KAAKG,SAASa,EAAGhB,KAAKG,SAASc,GACvDC,EAAUC,EAAA,EAAMC,cAAcpB,KAAKK,SAAUS,GAC7CO,EAAWH,EAAUP,KAAKW,GAEhCtB,KAAKI,iBAAmBN,EACxBE,KAAKI,iBAAmBJ,KAAKO,WAAaT,EAAqBE,KAAKM,cAAgBR,GAA2BE,KAAKU,WAAa,EAAI,GAErIV,KAAKK,UAAYL,KAAKI,gBAEtB,MAAMmB,GAAY,EAAIZ,KAAKa,IAAIH,IAAavB,EAAiBa,KAAKa,IAAIH,GAAavB,EACnFE,KAAKG,SAASsB,SAASF,EAAUA,GAE7BvB,KAAKU,aACLV,KAAKG,SAASc,GAAKnB,EAAoBa,KAAKe,IAAI1B,KAAKK,UACrDL,KAAKG,SAASa,GAAKlB,EAAoBa,KAAKgB,IAAI3B,KAAKK,WAGzD,IAAIuB,EAAS5B,KAAKG,SAAS0B,SACvBC,EAAS9B,KAAKG,SAAS4B,YAEvBH,GAAU9B,IACV8B,EAAS9B,GAGb,IAAIkC,EAAerB,KAAKgB,IAAIT,GAC5Bc,GAAgBrB,KAAKC,IAAIgB,EAAS9B,EAAmB,GACrDkC,GAAgBlC,EAEhBgC,GAAUE,EACVhC,KAAKG,SAASc,EAAIN,KAAKe,IAAII,GAAUF,EACrC5B,KAAKG,SAASa,EAAIL,KAAKgB,IAAIG,GAAUF,EAGrC5B,KAAKC,SAASgC,QAAQjC,KAAKG,UAG/B,OAAO+B,GACHA,EAAIC,OACJ,YAAmBD,EAAKlC,KAAKC,SAASgB,EAAGjB,KAAKC,SAASe,EAAG,EAAG,EAAGhB,KAAKK,SAAWM,KAAKW,GAAK,GACtFtB,KAAKU,YACLV,KAAKD,QAAQqC,UAAUF,EAAK,EAAG,GAAI,EAAG,GAAIvB,KAAK0B,MAAM,EAAI1B,KAAK2B,UAAW,EAAGtC,KAAKM,cAAgBK,KAAKW,GAAK,EAAG,EAAG,GAEjHtB,KAAKO,WAAa,EAElBP,KAAKD,QAAQqC,UAAUF,EAAK,EAAG,EAAG,EAAG,GAAIvB,KAAK0B,MAAsB,EAAhB1B,KAAK2B,UAAe,EAAG,EAAG,EAAG,GAE5EtC,KAAKO,WAAa,GAEvBP,KAAKD,QAAQqC,UAAUF,EAAK,EAAG,EAAG,EAAG,GAAI,EAAIvB,KAAK0B,MAAsB,EAAhB1B,KAAK2B,UAAe,EAAG,EAAG,EAAG,GAEzFtC,KAAKD,QAAQwC,OAAOL,EAAK,EAAG,EAAG,EAAG,GAAI,EAAG,GACzCA,EAAIM,W,IChHAC,E,SAAZ,SAAYA,GAER,mBACA,qBACA,yBAJJ,CAAYA,MAAK,KCOF,MAAM,EAKjB,YAAYC,EAAuBlC,GAAA,KAAAA,OAC/BR,KAAK2C,OAASD,EACd1C,KAAK4C,SAAgB,GACrB5C,KAAK4C,SAASH,EAAMI,SAAW,GAC/B7C,KAAK4C,SAASH,EAAMK,MAAQ,GAC5B9C,KAAK4C,SAASH,EAAMM,OAAS,GAC7B/C,KAAKgD,QAAU,GAGZ,OACHhD,KAAKQ,KAAKyC,SACV,IAAI,IAAIC,EAAIlD,KAAKgD,QAAQG,OAAS,EAAGD,GAAK,EAAGA,IACtClD,KAAKgD,QAAQE,GAAGE,QACfpD,KAAKgD,QAAQK,OAAOH,EAAG,GAE/BlD,KAAKsD,eAAetD,KAAK4C,SAASH,EAAMI,UACxC7C,KAAKsD,eAAetD,KAAK4C,SAASH,EAAMK,OACxC9C,KAAKsD,eAAetD,KAAK4C,SAASH,EAAMM,QAGpC,eAAeQ,GACnB,IAAI,IAAIL,EAAIK,EAASJ,OAAS,EAAGD,GAAK,EAAGA,IACjCK,EAASL,GAAGE,KAAKpD,KAAKQ,KAAMR,OAC5BuD,EAASF,OAAOH,EAAG,GAIxB,KAAKhB,GACRlC,KAAKwD,aAAatB,EAAKlC,KAAK4C,SAASH,EAAMI,UAC3C7C,KAAKwD,aAAatB,EAAKlC,KAAK4C,SAASH,EAAMK,OAC3C9C,KAAKwD,aAAatB,EAAKlC,KAAK4C,SAASH,EAAMM,QAC3C,IAAI,IAAIG,EAAI,EAAGA,EAAIlD,KAAKgD,QAAQG,OAAQD,IACpClD,KAAKgD,QAAQE,GAAGO,KAAKvB,GAIrB,aAAaA,EAA+BqB,GAChD,IAAI,IAAIL,EAAIK,EAASJ,OAAS,EAAGD,GAAK,EAAGA,IACrCK,EAASL,GAAGX,OAAOL,GAIpB,iBAAiBwB,EAAoBC,EAAaC,GAErD,IAAIC,QADsBC,IAATH,EAAqB,IAAI3D,KAAK4C,SAASH,EAAMK,SAAU9C,KAAK4C,SAASH,EAAMM,UAAW/C,KAAK4C,SAASH,EAAMI,UAAY7C,KAAK4C,SAASe,IACvHI,OAAOC,QAAmCF,IAApBE,EAAMC,WAC1D,QAAgBH,IAAbF,EAAwB,CACvB,MAAMM,EAAUN,EAAWA,EAC3BC,EAAQA,EAAME,OAAOI,GAAKjE,EAAA,EAAMkE,SAASD,EAAElE,SAAUyD,GAAaW,YAAcH,GAEpF,MAAMI,EAAiBT,EAAMU,IAAIC,IAAQ,CAAGA,OAAMC,MAAOvE,EAAA,EAAMkE,SAASI,EAAKvE,SAAUyD,GAAaW,cAEpG,OADAC,EAAeI,KAAK,CAACC,EAAGC,IAAMD,EAAEF,MAAQG,EAAEH,OACnCH,EAAeC,IAAIJ,GAAKA,EAAEK,OC7DlC,MAAMK,EACT,YAAmBJ,EAA4BK,GAA5B,KAAAL,QAA4B,KAAAK,kBAK5C,MAAMC,EAET,YAAmBC,GAAA,KAAAA,YACfhF,KAAKiF,YAAc,EAEvB,OAEI,OADAjF,KAAKiF,cACEjF,KAAKiF,aAAejF,KAAKgF,UAEpC,OAAUE,GACN,OAAOA,EAAUT,MAAMU,OAAOD,EAAUJ,eAAe9E,KAAKiF,YAAcjF,KAAKgF,aCdhF,MAAM,EAIT,YACW/E,EACAmF,EACAC,EACAC,EACPN,GAJO,KAAA/E,WACA,KAAAmF,cACA,KAAAC,cACA,KAAAC,YAGPtF,KAAKuF,OAAS,IAAIR,EAAmBC,GAGzC,OACI,OAAOhF,KAAKuF,OAAOnC,OAEvB,KAAKlB,GACD,MAAMsD,EAAQxF,KAAKuF,OAAOJ,OAAOnF,KAAKoF,aAChCK,EAAQzF,KAAKuF,OAAOJ,OAAOnF,KAAKqF,aAChCK,EAAO1F,KAAKuF,OAAOJ,OAAOnF,KAAKsF,WACrCpD,EAAIyD,YACJzD,EAAI0D,IAAI5F,KAAKC,SAASgB,EAAGjB,KAAKC,SAASe,EAAGwE,EAAO,EAAa,EAAV7E,KAAKW,IAAQ,GAC9DmE,GAAS,GACRvD,EAAI0D,IAAI5F,KAAKC,SAASgB,EAAGjB,KAAKC,SAASe,EAAGyE,EAAO,EAAa,EAAV9E,KAAKW,IAAQ,GAErEY,EAAI2D,YACJ3D,EAAI4D,UAAYJ,EAAKK,WACrB7D,EAAIwD,QC/BL,MAAMM,EAAkB,CAC3BC,OAASC,GAAaA,EACtBC,MAAQD,GAAavF,KAAKE,IAAIF,KAAKC,IAAIsF,EAAG,GAAI,GAC9CE,OAAQC,EAAO,EAAG,GAAK,GACvBC,QAASD,EAAO,EAAG,GAAK,IAGrB,SAASA,KAAUE,GACtB,OAAQL,GAGZ,SAASM,EAAUC,EAAWF,EAAeG,EAAYC,GACrD,OAAU,IAAPA,EAAiBJ,EAAIG,GACjBF,EAAUC,EAAGF,EAAKG,EAAIC,EAAK,IAAM,EAAEF,GAAKD,EAAUC,EAAGF,EAAKG,EAAK,EAAGC,EAAK,GAAKF,EAL7DD,CAAUN,EAAGK,EAAK,EAAGA,EAAIpD,Q,YCN5C,MAAMyD,EAAoD,CAACjC,EAAGC,EAAG6B,IAAM9B,GAAKC,EAAED,GAAG8B,EAE3EI,EAAsD,CAAClC,EAAEC,EAAE6B,IACpEK,EAAA,EAAMC,IACFH,EAAmBjC,EAAEqC,IAAKpC,EAAEoC,IAAKP,GACjCG,EAAmBjC,EAAEsC,IAAKrC,EAAEqC,IAAKR,GACjCG,EAAmBjC,EAAEC,IAAKA,EAAEA,IAAK6B,ICJlC,SAASS,EAAyBC,KAA4CC,QACnDtD,IAA3BqD,EAAaE,YACZD,EAAK/D,OAAO,EAAG,EAAW8D,GAC1BA,OAAerD,GAGnB,IACIwD,EAAU,GADEF,EAAKjE,OAAS,GAE1BoE,EAAY,IAAI,EAAaH,EAAK,GAAID,GAC1C,IAAI,IAAIjE,EAAI,EAAGA,EAAIkE,EAAKjE,OAAQD,IAC5BqE,EAAUC,YAAYF,EAAUpE,EAAGkE,EAAKlE,IAE5C,OAAOqE,EAGJ,MAAM,EAKT,YAAYE,EAAUN,GAElB,QAAoBrD,IAAjBqD,EACC,GAAqB,iBAAZ,EACLnH,KAAKmH,aAAoBP,MACtB,SAAiC9C,IAAb2D,EAAOT,EAK9B,KAAM,gCAHNhH,KAAKmH,aAAoBN,OAM7B7G,KAAKmH,aAAeA,EAExBnH,KAAKQ,KAAO,CAAC,CAACkH,KAAM,EAAGC,MAAOF,IAG3B,YAAYC,EAAcC,GAC7B,IAAI,IAAIzE,EAAI,EAAGA,EAAIlD,KAAKQ,KAAK2C,OAAQD,IAEjC,GAAGwE,EAAO1H,KAAKQ,KAAK0C,GAAGwE,KAEnB,YADA1H,KAAKQ,KAAK6C,OAAOH,EAAG,EAAG,CAACwE,OAAMC,UAItC3H,KAAKQ,KAAKoH,KAAK,CAACF,OAAMC,UAGnB,OAAOlB,GACV,GAAwB,IAArBzG,KAAKQ,KAAK2C,OAAc,OAAOnD,KAAKQ,KAAK,GAAGmH,MAG/C,IADA,IAAIE,EAAW,EACT7H,KAAKQ,KAAKqH,EAAW,GAAGH,KAAOjB,GAAKoB,EAAW,EAAI7H,KAAKQ,KAAK2C,QAC/D0E,IAGJ,IAAIC,EAAc9H,KAAKQ,KAAKqH,EAAW,GAAGH,KAAO1H,KAAKQ,KAAKqH,GAAUH,KACjEK,GAActB,EAAIzG,KAAKQ,KAAKqH,GAAUH,MAAQI,EAElD,OAAO9H,KAAKmH,aAAanH,KAAKQ,KAAKqH,GAAUF,MAAO3H,KAAKQ,KAAKqH,EAAW,GAAGF,MAAOI,ICxDpF,MAAM,EAMT,YACW9H,EACA+H,EACAC,EACAC,EACAC,EACAC,EACAC,GANA,KAAApI,WACA,KAAA+H,iBACA,KAAAC,iBACA,KAAAC,YACA,KAAAC,aACA,KAAAC,gBACA,KAAAC,mBAVH,KAAAC,kBAAoB,EACpB,KAAAC,kBAAoB,EAYxB,MAAMC,EAAK7H,KAAK0B,MAAM6F,EAAUO,SAAS9H,KAAK2B,WAC9CtC,KAAK0I,WAAa,IAAIC,MAAMH,GAC5BxI,KAAK4I,oBAGT,oBACI,KAAiC,IAA3B5I,KAAKsI,mBAA2BtI,KAAKuI,kBAAoBvI,KAAK0I,WAAWvF,QAC3EnD,KAAKsI,kBAAoBtI,KAAKmI,WAC9BnI,KAAK6I,aAIb,aACI,MAAMC,EAAK9I,KAAKC,SAASgB,EAAIjB,KAAKgI,eAAeS,SAAS9H,KAAK2B,UACzDyG,EAAK/I,KAAKC,SAASe,EAAIhB,KAAKiI,eAAeQ,SAAS9H,KAAK2B,UACzD0G,EAAWhJ,KAAKoI,cAAcK,SAAS9H,KAAK2B,UAC5C8C,EAAcpF,KAAKqI,iBAAiBI,SAAS9H,KAAK2B,UAClD2G,EAAsB7D,EAAc,EAE1CpF,KAAK0I,WAAW1I,KAAKuI,qBAAuB,IAAI,EAC5C,IAAIrI,EAAA,EAAM4I,EAAIC,GACd,IAAIlE,EAAqBqC,EAAsB+B,EAAqB7D,GAAcY,EAAgBC,QAClG,IAAIpB,EAAqBqC,GAAuB+B,EAAqB7D,GAAcY,EAAgBM,SACnG,IAAIzB,EAAoBqC,EAAsBJ,EAAA,EAAMC,IAAI,EAAG,EAAG,IAAMD,EAAA,EAAMC,IAAI,EAAG,EAAG,GAAID,EAAA,EAAMC,IAAI,GAAK,GAAK,IAAKf,EAAgBC,QACjI+C,GAIR,OACI,IAAIE,GAAkB,EACtB,IAAI,IAAIhG,EAAI,EAAGA,EAAIlD,KAAKuI,kBAAmBrF,IACb,OAAvBlD,KAAK0I,WAAWxF,SAAsCY,IAAvB9D,KAAK0I,WAAWxF,KAC3ClD,KAAK0I,WAAWxF,GAAGE,OAClBpD,KAAK0I,WAAWxF,GAAK,KAErBgG,GAAkB,GAM9B,OAFAlJ,KAAKsI,oBACyB,IAA3BtI,KAAKsI,mBAAyBtI,KAAK4I,qBAC7BM,GAAmBlJ,KAAKuI,oBAAsBvI,KAAK0I,WAAWvF,OAE3E,KAAKjB,GACD,IAAI,IAAIgB,EAAI,EAAGA,EAAIlD,KAAKuI,kBAAmBrF,IACb,OAAvBlD,KAAK0I,WAAWxF,SAAsCY,IAAvB9D,KAAK0I,WAAWxF,IAC9ClD,KAAK0I,WAAWxF,GAAGO,KAAKvB,I,oBCtEzB,MAAM,EAEjB,iBAAiBiH,GAGb,OAFAA,GAAmB,EAAVxI,KAAKW,IACH,IAAG6H,GAAmB,EAAVxI,KAAKW,IACrB6H,EAIX,yBAAyBA,GACrB,IAAIC,EAAO,EAAMC,UAAUF,GAC3B,OAAGC,GAAQzI,KAAKW,GACL8H,EAAiB,EAAVzI,KAAKW,GAEZ8H,EAIf,mBAAmBE,EAAcC,GAC7B,OAAO,EAAMC,kBAAkBD,EAAKD,GAGxC,oBAAoBA,EAAaC,GAC7B,OAAO5I,KAAKI,MAAMwI,EAAGvI,EAAIsI,EAAKtI,EAAGuI,EAAGtI,EAAIqI,EAAKrI,I,ICrBzCwI,E,QCDG,MAAM,EAEjB,YAAmBhC,EAAqBiC,GAArB,KAAAjC,QAAqB,KAAAiC,MAKxC,MACI,OAAOxJ,EAAA,EAAMkE,SAASpE,KAAK0J,IAAK1J,KAAKyH,OAGzC,WACI,OAAOvH,EAAA,EAAMyJ,YAAY3J,KAAKyH,MAAOzH,KAAK0J,IAAK,IAGnD,YAAYjD,GACR,OAAOvG,EAAA,EAAMyJ,YAAY3J,KAAKyH,MAAOzH,KAAK0J,IAAKjD,GAGnD,oBAAoB9B,EAASC,GACzB,MAAMgF,GAASjF,EAAE8C,MAAMxG,EAAI0D,EAAE+E,IAAIzI,IAAM2D,EAAE6C,MAAMzG,EAAI4D,EAAE8E,IAAI1I,IAAM2D,EAAE8C,MAAMzG,EAAI2D,EAAE+E,IAAI1I,IAAM4D,EAAE6C,MAAMxG,EAAI2D,EAAE8E,IAAIzI,GAEzG,GAAa,IAAV2I,EACC,OAAO,EAAKC,qBAAqBlF,EAAGC,GAKxC,MAAO,CAAEkF,WAHUnF,EAAE8C,MAAMxG,EAAI2D,EAAE6C,MAAMxG,IAAM2D,EAAE6C,MAAMzG,EAAI4D,EAAE8E,IAAI1I,IAAM2D,EAAE8C,MAAMzG,EAAI4D,EAAE6C,MAAMzG,IAAM4D,EAAE6C,MAAMxG,EAAI2D,EAAE8E,IAAIzI,IAAM2I,EAGpGG,WAFApF,EAAE+E,IAAIzI,EAAI0D,EAAE8C,MAAMxG,IAAM0D,EAAE8C,MAAMzG,EAAI4D,EAAE6C,MAAMzG,IAAM2D,EAAE+E,IAAI1I,EAAI2D,EAAE8C,MAAMzG,IAAM2D,EAAE8C,MAAMxG,EAAI2D,EAAE6C,MAAMxG,IAAM2I,GAKnH,4BAA4BjF,EAASC,GACzC,MAAMoF,EAAQrF,EAAEsF,MAAMZ,YACtB,SAASa,EAAcC,GACnB,OAAOjK,EAAA,EAAMkK,IAAIlK,EAAA,EAAMkE,SAAS+F,EAAIxF,EAAE8C,OAAQuC,GAElD,IAAIK,EAAS,IAAIC,EAAA,EAAMJ,EAAcvF,EAAE8C,OAAQyC,EAAcvF,EAAE+E,MAC3Da,EAAS,IAAID,EAAA,EAAMJ,EAActF,EAAE6C,OAAQyC,EAActF,EAAE8E,MAE3Dc,EAAQH,EAAOI,cAAcF,EAAO3J,KACpC8J,EAAQL,EAAOI,cAAcF,EAAO1J,KAExC,OAAGF,KAAKa,IAAIgJ,IAAU7J,KAAKa,IAAIkJ,GACpB,CAAEZ,SAAUU,EAAOT,SAAU,GAE7B,CAAED,SAAUY,EAAOX,SAAU,IC7CjC,MAAM,EACjB,YAAmB9J,EAAwB0K,EAAoBC,EAAsBvK,GAAlE,KAAAJ,WAAwB,KAAA0K,OAAoB,KAAAC,SAAsB,KAAAvK,WAKrF,eACI,IAAIwK,EAAiB,CACjB,IAAI3K,EAAA,EAAM,EAAG,GACb,IAAIA,EAAA,EAAMF,KAAK2K,KAAK1J,EAAG,GACvB,IAAIf,EAAA,EAAMF,KAAK2K,KAAK1J,EAAGjB,KAAK2K,KAAK3J,GACjC,IAAId,EAAA,EAAM,EAAGF,KAAK2K,KAAK3J,IAU3B,OAPA6J,EAAiBA,EAAetG,IAAI4F,GAAMjK,EAAA,EAAMkE,SAAS+F,EAAInK,KAAK4K,SAClEC,EAAiBA,EAAetG,IAAI4F,IAChC,MAAMhB,EAAQxI,KAAKI,MAAMoJ,EAAGnJ,EAAGmJ,EAAGlJ,GAC5B6J,EAAOX,EAAGtI,SAChB,OAAO3B,EAAA,EAAM6K,UAAU5B,EAAQnJ,KAAKK,SAAUyK,KAElDD,EAAiBA,EAAetG,IAAI4F,GAAMjK,EAAA,EAAM8K,IAAIb,EAAInK,KAAKC,WACtD4K,EAGX,WACI,OAAO7K,KAAKiL,eAAe1G,IAAI,CAAC4F,EAAIe,EAAKC,IAAQ,IAAI,EAAKhB,EAAIgB,GAAKD,EAAM,GAAKC,EAAIhI,UAGtF,qBAAqBiI,GACjB,IAAIC,EAAQrL,KAAKsL,WACbC,EAA6B,KACjC,IAAI,IAAIrI,EAAI,EAAGA,EAAImI,EAAMlI,OAAQD,IAAK,CAClC,IAAIsI,EAAW,EAAKC,aAAaL,EAAMC,EAAMnI,IACzCsI,EAAS1B,UAAY,GACrB0B,EAAS1B,SAAW,GACpB0B,EAASzB,UAAY,GACrByB,EAASzB,SAAW,IACH,OAAhBwB,GAAwBC,EAAS1B,SAAWyB,KACzCA,EAAcC,EAAS1B,UAGnC,OAAOyB,GC/BR,MAAM,EAST,YACWG,EACAzL,EACAI,EACAsL,EACChI,EACAiI,GALD,KAAAF,aACA,KAAAzL,WACA,KAAAI,WACA,KAAAsL,KACC,KAAAhI,OACA,KAAAiI,eACJ5L,KAAK6L,SAAW,EAChB7L,KAAK8L,UAAY9L,KAAK+L,WAAa/L,KAAKgM,SAAW,EACnDhM,KAAKiE,UAAYjE,KAAK0L,WAAWO,MACjCjM,KAAKkM,OAASlM,KAAK0L,WAAWQ,OAAO3H,IAAI4H,GAAKA,EAAEC,SAGxD,YACI,OAAO,IAAI,EAAOpM,KAAKC,SAAUD,KAAK0L,WAAWf,KAAMzK,EAAA,EAAMmM,SAASrM,KAAK0L,WAAWd,OAAQ5K,KAAK0L,WAAWf,MAAO3K,KAAKK,UAG9H,KAAKG,EAAuB8L,GACxB,MAAM,OAAEC,EAAM,WAAEC,GAAexM,KAAK2L,GAAGc,OAAOH,EAAItM,MAClD,IAAI0M,EAAqB,EACzB,GAAGH,EAASvM,KAAK6L,UAAY7L,KAAK0L,WAAWiB,UAAY,EAAG,CAExD,IAAIC,EAAQ5M,KAAK6L,SAAWU,EAC5BvM,KAAK+L,WAAapL,KAAKC,IAAI,EAAGgM,EAAQ5M,KAAK0L,WAAWiB,WACtDD,GAAsB1M,KAAK+L,WAC3B/L,KAAK6L,UAAY7L,KAAK+L,WAAa/L,KAAK0L,WAAWiB,eAChD,GAAGJ,EAASvM,KAAK6L,SAAU,CAE1Be,EAAQL,EAASvM,KAAK6L,SAC1B7L,KAAK8L,UAAYnL,KAAKC,IAAI,EAAGgM,EAAQ5M,KAAK0L,WAAWmB,UACrDH,EAAqB1M,KAAK8L,UAC1B9L,KAAK6L,UAAY7L,KAAK8L,UAAY9L,KAAK0L,WAAWmB,SAGtD,IAAI,IAAI3J,EAAI,EAAGA,EAAIlD,KAAK4L,aAAazI,OAAQD,IACzClD,KAAK4L,aAAa1I,GAAGE,KAAKkJ,EAAItM,MAIlC,IAAI8M,EAAU,EAAMC,YAAY/M,KAAKK,SAAUmM,GAE3CQ,EAAgBrM,KAAKsM,KAAKH,GAC9BA,EAAUnM,KAAKa,IAAIsL,GACnB9M,KAAKgM,SAAWrL,KAAKC,IAAIkM,EAAU9M,KAAK0L,WAAWwB,YAAa,GAAKF,EAErE,IAAI,IAAI9J,EAAI,EAAGA,EAAIlD,KAAKkM,OAAO/I,OAAQD,IACnClD,KAAKkM,OAAOhJ,GAAGE,KAAKsJ,EAAoB1M,KAAKgM,UAQjD,OALAhM,KAAKK,UAAYL,KAAKgM,SAAWhM,KAAK0L,WAAWwB,YAE9ClN,KAAK6L,UAAY,EAAG7L,KAAK6L,SAAWlL,KAAKC,IAAIZ,KAAK6L,SAAU7L,KAAK0L,WAAWyB,UAC1EnN,KAAK6L,SAAWlL,KAAKE,IAAIb,KAAK6L,UAAY7L,KAAK0L,WAAWyB,UAC/DnN,KAAKC,SAASgC,QAAQ/B,EAAA,EAAM6K,UAAU/K,KAAKK,SAAUL,KAAK6L,WACnD7L,KAAKiE,UAAY,EAG5B,OAAO/B,GACH,IAAI,IAAIgB,EAAI,EAAGA,EAAIlD,KAAKkM,OAAO/I,OAAQD,IACnClD,KAAKkM,OAAOhJ,GAAGO,KAAKvB,EAAKlC,KAAKC,SAAUD,KAAK0L,WAAWd,OAAQ5K,KAAK0L,WAAWf,KAAM3K,KAAKK,UAG/F,IAAI,IAAI6C,EAAI,EAAGA,EAAIlD,KAAK4L,aAAazI,OAAQD,IACzClD,KAAK4L,aAAa1I,GAAGO,KAAKvB,EAAKlC,MAEnCA,KAAK0L,WAAW0B,OAAO3J,KAAKvB,EAAKlC,KAAKC,SAAUD,KAAK0L,WAAWf,KAAM3K,KAAKK,UAE3EL,KAAK2L,GAAG0B,UAAUnL,EAAKlC,MAG3B,UACI,OAAOA,KAAK2D,MCzFb,MAAM,EAIT,YAAY2J,EAAyC3C,GACjD3K,KAAKuN,MAAQ,CAACD,QACFxJ,IAAT6G,EACC3K,KAAKwN,YAAc,IAAItN,EAAA,EAAM,EAAG,GAE5BuN,EAASH,GACbtN,KAAKwN,YAAc,IAAItN,EAAA,EAAMyK,EAAK1J,EAAIqM,EAAQI,WAAWzM,EAAG0J,EAAK3J,EAAIsM,EAAQI,WAAW1M,GAGxFhB,KAAKwN,YAAc,IAAItN,EAAA,EAAMyK,EAAK1J,EAAIqM,EAAQK,OAAOD,WAAWzM,EAAG0J,EAAK3J,EAAIsM,EAAQK,OAAOD,WAAW1M,GAI9G,KAAK4M,GACD5N,KAAKuN,MAAQ,CAACK,GAGlB,QAAQA,GACJ5N,KAAKuN,MAAM3F,KAAKgG,GAGpB,QACOH,EAASzN,KAAKuN,MAAM,KAIhBvN,KAAKuN,MAAM,GAAGnK,SAHjBpD,KAAK6N,UAOb,UACO7N,KAAKuN,MAAMpK,OAAS,GACnBnD,KAAKuN,MAAMlK,OAAO,EAAG,GAI7B,OAAOnB,EAA+BiI,EAAW2D,GAC7C9N,KAAKuN,MAAM,GAAG9J,KAAKvB,EAAKiI,EAAInK,KAAK+N,cAAc/N,KAAKuN,MAAM,IAAKO,GAG3D,cAAcF,GAClB,OAAGH,EAASG,GAAa1N,EAAA,EAAMmM,SAASuB,EAAIF,WAAY1N,KAAKwN,aACjDtN,EAAA,EAAMmM,SAASuB,EAAID,OAAOD,WAAY1N,KAAKwN,cAI/D,SAASC,EAASG,GACd,YAAqC9J,IAAhB8J,EAAKhD,OCjDvB,SAASoD,EAAeC,GAC3B,OAAO,IAAI/N,EAAA,EAAM+N,EAAI,GAAIA,EAAI,IAG1B,SAASC,EAAeD,GAC3B,OAAO,IAAI3D,EAAA,EAAM2D,EAAI,GAAIA,EAAI,IAO1B,SAASE,EAAgBC,EAA8BC,GAC1D,OAAO,IAAI,IAAYA,EAAQD,EAAME,MAAON,EAAeI,EAAMG,WAAYP,EAAeI,EAAMI,SAAUR,EAAeI,EAAMxD,QAAS,GAGvI,SAAS6D,EAAoBC,EAAgCL,GAChE,OAAOA,EAAQK,EAAKJ,MAAMK,aACtBX,EAAeU,EAAKE,WACpBZ,EAAeU,EAAKG,WACpBb,EAAeU,EAAK9D,QACpB8D,EAAKI,WCtBE,MAAM,EAEjB,cACI9O,KAAK+O,QAAU,GAGnB,YAAYC,EAAwB7E,EAAW2D,GAC3C9N,KAAK+O,QAAQnH,KCNd,SAAsBqH,EAAqB9E,EAAW2D,GACzD,OAAOmB,EAAOC,MACV,IAAK,YACD,OAAO,IAAI,EAAU/E,EACjB+D,EAAee,EAAOjH,gBACtBkG,EAAee,EAAOhH,gBACtBiG,EAAee,EAAO/G,WACtB+G,EAAO9G,WACP+F,EAAee,EAAO7G,eACtB8F,EAAee,EAAO5G,oBDHZ8G,CAAaH,EAAY7E,IAG/C,OACI,IAAI,IAAIjH,EAAIlD,KAAK+O,QAAQ5L,OAAS,EAAGD,GAAK,EAAGA,IACtClD,KAAK+O,QAAQ7L,GAAGE,QAAQpD,KAAK+O,QAAQ1L,OAAOH,EAAG,GAI1D,KAAKhB,GACD,IAAI,IAAIgB,EAAI,EAAGA,EAAIlD,KAAK+O,QAAQ5L,OAAQD,IACpClD,KAAK+O,QAAQ7L,GAAGO,KAAKvB,IEM1B,MAAM,GAMT,YAAmBkF,EAAmBgI,GAAnB,KAAAhI,OACfpH,KAAKqP,YAAc,EACnBrP,KAAKsP,aAAetP,KAAKoH,KAAKmI,OAAOC,QACrCxP,KAAKsP,aAAaG,aAAavP,EAAA,EAAMmM,SAAS+C,EAAQxE,OAAQwE,EAAQzE,YACnD7G,IAAhBsD,EAAKgG,SACJpN,KAAK0P,WAAa,IAAI,EAAiBtI,EAAKgG,SAEhDpN,KAAK+O,QAAU,IAAI,EAGvB,kBAAkBvK,GACd,MAAMmL,EAAS3P,KAAKsP,aAAaM,OAAOpL,EAAKnE,UAE7C,OADAsP,EAAO1N,QAAQuC,EAAKvE,UACb0P,EAEX,qBAAqBnL,GACjB,OAAOxE,KAAKoH,KAAK/G,SAAWmE,EAAKnE,SAErC,sBAAsBmE,GAClB,OAAOxE,KAAKqP,YAAcrP,KAAK6P,qBAAqBrL,GAMxD,KAAKsL,EAAYC,G,MAEb/P,KAAK+O,QAAQ3L,OACE,QAAf,EAAApD,KAAK0P,kBAAU,SAAEtM,OAEjB,MAAM4M,EAAWhQ,KAAKiQ,kBAAkBH,GAaxC,GAVAC,EAAkBA,EAAgBhM,OAAO0C,IACrC,MAAMyJ,EAAQhQ,EAAA,EAAMkE,SAASqC,EAAGuJ,GAAU3L,WAC1C,YAC4BP,IAAvB9D,KAAKoH,KAAK+I,UACND,EAAQlQ,KAAKoH,KAAK+I,SAAWnQ,KAAKoH,KAAK+I,WAE3CD,EAAQlQ,KAAKoH,KAAK3C,MAAQzE,KAAKoH,KAAK3C,aAIrBX,IAArB9D,KAAKoH,KAAKgJ,OAAsB,CAC/B,GAA8B,IAA3BL,EAAgB5M,OAAc,OAAO,KACxC,MAAMkN,EAAcrQ,KAAK6P,qBAAqBC,GAG9C,IAAI,IAAI5M,EAAI,EAAGA,EAAI6M,EAAgB5M,OAAQD,IAAK,CAE5C,MAAMoN,EAAgBpQ,EAAA,EAAMkE,SAAS2L,EAAgB7M,GAAI4M,EAAK7P,UAAU8B,YAElEwO,EAAiB,EAAMxD,YAAYsD,EAAaC,GAEtD,GAAG3P,KAAKa,IAAI+O,GAAkBvQ,KAAKoH,KAAKoJ,iBACpC,OAAOT,EAAgB7M,GAE/B,OAAO,KAEN,CACD,GAA8B,IAA3B6M,EAAgB5M,OAIf,OAFGnD,KAAKqP,YAAc,EAAGrP,KAAKqP,aAAe1O,KAAKC,IAAIZ,KAAKqP,YAAarP,KAAKoH,KAAKgJ,OAAOK,UACjFzQ,KAAKqP,YAAc,IAAGrP,KAAKqP,aAAe1O,KAAKC,IAAID,KAAKa,IAAIxB,KAAKqP,aAAcrP,KAAKoH,KAAKgJ,OAAOK,WACjG,KAGX,MAAMJ,EAAcrQ,KAAK6P,qBAAqBC,GACxC3G,EAAQnJ,KAAK0Q,sBAAsBZ,GAEzC,IAAIa,EAAuB,KACvBC,EAAsB,EACtBC,EAA4B,EAC5BC,EAA8B,EAGlC,IAAI,IAAI5N,EAAI,EAAGA,EAAI6M,EAAgB5M,OAAQD,IAAK,CAC5C,MAAMoN,EAAgBpQ,EAAA,EAAMkE,SAAS2L,EAAgB7M,GAAI4M,EAAK7P,UAAU8B,YAClEwO,EAAiB,EAAMxD,YAAYsD,EAAaC,IACxC,OAAXK,GAAmBhQ,KAAKa,IAAI+O,GAAkB5P,KAAKa,IAAIoP,MACtDD,EAASZ,EAAgB7M,GACzB0N,EAAcL,EACX5P,KAAKa,IAAI+O,GAAkBvQ,KAAKoH,KAAKgJ,OAAOW,UAE3CF,EAAoB7Q,KAAKoH,KAAKgJ,OAAOW,SAAWpQ,KAAKsM,KAAKsD,GAC1DO,EAAsBR,GAGtBO,EAAoBC,EAAsBR,GAMtD,MAAMC,EAAiB,EAAMxD,YAAY5D,EAAO0H,GAC7ClQ,KAAKa,IAAI+O,GAAkBvQ,KAAKoH,KAAKgJ,OAAOK,WAC3CzQ,KAAKqP,aAAekB,GAGxB,MAAMS,EAAmBhR,KAAK0Q,sBAAsBZ,GAC9CmB,EAAgB,EAAMlE,YAAYiE,EAAkBF,GAE1D,OAAGnQ,KAAKa,IAAIyP,GAAiBjR,KAAKoH,KAAKoJ,iBAAyBG,EACpD,MAKpB,MAAMrE,EAAewD,QAEMhM,IAApB9D,KAAK0P,iBAAyD5L,IAA7B9D,KAAKoH,KAAK8J,iBAC1ClR,KAAK0P,WAAWyB,QAAQnR,KAAKoH,KAAK8J,eAAehM,UAAUkM,KAAKpR,KAAKoH,KAAK8J,iBAC1ElR,KAAK0P,WAAWyB,QAAQnR,KAAKoH,KAAKgG,cAETtJ,IAA1B9D,KAAKoH,KAAKiK,aAA2BrR,KAAK+O,QAAQuC,YAAYtR,KAAKoH,KAAKiK,YAAarR,KAAKiQ,kBAAkBH,GAAO9P,KAAK0Q,sBAAsBZ,IAGrJ,OAAO5N,EAA+BsC,GAClC,QAAuBV,IAApB9D,KAAK0P,WAA0B,OAClC,MAAM6B,EAAYvR,KAAKiQ,kBAAkBzL,GACzC,IAAIgN,EAAUxR,KAAK0Q,sBAAsBlM,GACzCxE,KAAK0P,WAAWnN,OAAOL,EAAKqP,EAAWC,GACvCxR,KAAK+O,QAAQtL,KAAKvB,IChJnB,MAAM,GAET,YAAmBuP,EAA4BC,EAAmBC,GAA/C,KAAAF,QAA4B,KAAAC,UAC3C1R,KAAK2R,gBAAkBA,WAM3B,eAAenN,EAAYoN,GACvB,IAAIC,EAAW,EACf,IAAI,IAAI3O,EAAI,EAAGA,EAAIlD,KAAK0R,QAAQvO,OAAQD,IAC4B,OAA7DlD,KAAK0R,QAAQxO,GAAGE,KAAKoB,EAAMoN,EAAQrN,IAAI2B,GAAKA,EAAEjG,YAC7C4R,IAGR,OAAOA,EAGX,KAAKvF,EAAewD,GAChB,MAAM8B,EAAUtF,EAAGwF,iBAAiBhC,EAAK7P,SAAU6P,EAAKiC,YAActP,EAAMM,MAAQN,EAAMK,KAAOL,EAAMM,MAAO/C,KAAK0R,QAAQ,GAAGtK,KAAK3C,OAC7HuN,EAAMhS,KAAKiS,eAAenC,EAAM8B,GAEtC5R,KAAKyR,MAAMrO,KAAK4O,EAAM,EAAGE,GAAMlS,KAAKmS,QAAQD,EAAI5F,EAAIwD,IAGxD,QAAQsC,EAAoB9F,EAAe9H,GACvC,GAAIxE,KAAK2R,gBAGL,IAAI,IAAIzO,EAAI,EAAGA,EAAIlD,KAAK0R,QAAQvO,OAAQD,IACpClD,KAAK0R,QAAQxO,GAAGmP,MAAM/F,EAAI9H,QAH9BxE,KAAK0R,QAAQU,EAAapS,KAAK0R,QAAQvO,QAAQkP,MAAM/F,EAAI9H,GAQjE,KAAKtC,EAA+B4N,GAChC,IAAI,IAAI5M,EAAI,EAAGA,EAAIlD,KAAK0R,QAAQvO,OAAQD,IACpClD,KAAK0R,QAAQxO,GAAGX,OAAOL,EAAK4N,IC1CjC,MAAMwC,GAYT,YAAYlL,GACRmL,OAAOC,OAAOxS,KAAMoH,GACpBpH,KAAKyS,mBAAoB,EACzBzS,KAAK0S,cAAgB1S,KAAKsI,kBAAoBtI,KAAK2S,kBAAoB,EAG3E,aACI,OAAO3S,KAAKyS,kBAGhB,WACI,OAAQzS,KAAKyS,mBAA4C,IAAvBzS,KAAK0S,cAG3C,QACI,QAAG1S,KAAK4S,aACJ5S,KAAKyS,mBAAoB,EACzBzS,KAAK0S,cAAgB1S,KAAK6S,WAC1B7S,KAAKsI,kBAAoB,GAClB,GAKf,KAAKwK,EAAsBX,GAEvB,GADGW,GAAa9S,KAAKqS,QAClBrS,KAAKyS,kBACJ,GAA8B,IAA3BzS,KAAKsI,kBAAyB,CAE7B,IAAI,IAAIyK,EAAQ,EAAGA,EAAQ/S,KAAKgT,cAAeD,IAC3CZ,EAAQnS,KAAK2S,kBAAmBI,GAEpC/S,KAAK2S,oBACF3S,KAAK2S,oBAAsB3S,KAAKiT,YAE/BjT,KAAK0S,cAAgB1S,KAAK6S,WAC1B7S,KAAK2S,kBAAoB,EACzB3S,KAAKyS,mBAAoB,GAEzBzS,KAAKsI,kBAAoBtI,KAAKmI,gBAIlCnI,KAAKsI,yBAEqB,IAAvBtI,KAAK0S,eAEZ1S,KAAK0S,iBCxDV,MAAM,GAGT,YACIQ,EACOvI,EACPwI,EACA3E,EACO5D,EACAqB,EACAY,EACAF,EACAQ,EACAiG,EACAlG,EACAhB,EACAwF,EACA2B,GAZA,KAAA1I,OAGA,KAAAC,SACA,KAAAqB,QACA,KAAAY,WACA,KAAAF,YACA,KAAAQ,WACA,KAAAiG,YACA,KAAAlG,cACA,KAAAhB,SACA,KAAAwF,UACA,KAAA2B,UACPrT,KAAKoN,OAAS8F,EAAMI,UAAUH,EAAU3E,EAAS5D,GAGrD,UAAUjH,EAAa1D,EAAiBI,GACpC,OAAO,IAAI,EACPL,KACAC,EACAI,UAAY,EACZL,KAAKqT,UACL1P,EACA3D,KAAK0R,QAAQnN,IACTgP,GAAmB,IAAI,GACnB,IAAIjB,GAAYiB,EAAgB9B,OAChC8B,EAAgB7B,QAAQnN,IAAIiP,GAAK,IAAI,GAAOA,EAAGxT,OAC/CuT,EAAgBE,cXxCpC,SAAYhK,GACR,gBACA,kBACA,sBACA,wBAJJ,CAAYA,MAAgB,KAOrB,MAAM,GAUT,YACWvE,EACAqK,EACAlP,EACPqT,EACAC,EACAC,GALO,KAAA1O,YACA,KAAAqK,SACA,KAAAlP,WAMHL,KAAK0T,WADiB,iBAAjB,EACa,CAAmBA,GAECA,EAE1C1T,KAAK4T,WAAaA,UAAc,EAChC5T,KAAK2T,WAAaA,UAAc,EAChC3T,KAAK6T,QAAU3O,EAAUkM,KAAK,IAAI,GAClCpR,KAAK8T,cAAe,EAGxB,QAEI,OADe,IAAI,GAAgB9T,KAAKkF,UAAWlF,KAAKuP,OAAQvP,KAAKK,SAAUL,KAAK0T,WAAY1T,KAAK2T,WAAY3T,KAAK4T,YAI1H,KAAKG,EAAeC,GAChBhU,KAAK8T,cAAe,EACpB,IAAI,IAAI5Q,EAAI,EAAGA,EAAIlD,KAAK0T,WAAWvQ,OAAQD,IAEvC,OAAOlD,KAAK0T,WAAWxQ,IACnB,KAAKuG,EAAiBwK,MAClBjU,KAAK8T,aAAe9T,KAAK8T,cAAgBC,EAAQ/T,KAAK2T,WACtD,MACJ,KAAKlK,EAAiByK,OAClBlU,KAAK8T,aAAe9T,KAAK8T,cAAgBC,GAAS/T,KAAK2T,WACvD,MACJ,KAAKlK,EAAiB0K,SAClBnU,KAAK8T,aAAe9T,KAAK8T,cAAgBE,GAAQhU,KAAK2T,WACtD,MACJ,KAAKlK,EAAiB2K,UAClBpU,KAAK8T,aAAe9T,KAAK8T,cAAgBE,EAAOhU,KAAK2T,WAIjE3T,KAAKqU,OAASL,EAAOhU,KAAK4T,WACvB5T,KAAK8T,cAAc9T,KAAK6T,QAAQzQ,OAGvC,KAAKlB,EAA+B8N,EAAiBsE,EAAmBC,EAAiBlU,GACrF,IAAIL,KAAK8T,aAAc,OACvB,IAAIvC,EAAYvR,KAAKuP,OAAOC,QAC5B+B,EAAU9B,aAAavP,EAAA,EAAMmM,SAASiI,EAAYC,IAClDhD,EAAYA,EAAU3B,OAAOvP,GAC7BkR,EAAUtP,QAAQ+N,GAClB,IAAIwB,EAAUxR,KAAKqU,OAASrU,KAAKK,SAAWA,EAC5CL,KAAK6T,QAAQpQ,KAAKvB,EAAKqP,EAAWvR,KAAKkF,UAAUwI,WAAY8D,IYrE9D,MAAMgD,GACT,YAAmBC,EAAqBC,EAAuBC,GAA5C,KAAAF,QAAqB,KAAAC,QAAuB,KAAAC,SAG/D,KAAKzS,G,QACDA,EAAI0S,YAAwB,QAAb,EAAG5U,KAAK0U,aAAK,QAAI,MAChCxS,EAAIyD,YACJzD,EAAI0D,IAAI5F,KAAKyU,MAAMxT,EAAGjB,KAAKyU,MAAMzT,EAAc,QAAb,EAAEhB,KAAK2U,cAAM,QAAI,GAAI,EAAa,EAAVhU,KAAKW,IAC/DY,EAAI2S,UAIL,MAAMC,GACT,YAAmBL,EAAqBC,EAAuBC,GAA5C,KAAAF,QAAqB,KAAAC,QAAuB,KAAAC,SAG/D,KAAKzS,G,QACD,MAAMyS,EAAoB,QAAd,EAAG3U,KAAK2U,cAAM,QAAI,GAC9BzS,EAAI0S,YAAwB,QAAb,EAAG5U,KAAK0U,aAAK,QAAI,MAChCxS,EAAIyD,YACJzD,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,EAAI2T,GACjDzS,EAAI8S,OAAOhV,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,EAAI2T,GACjDzS,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,EAAI2T,GACjDzS,EAAI8S,OAAOhV,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,EAAI2T,GACjDzS,EAAI2S,UAIL,MAAMI,GACT,YAAmBR,EAAqBC,EAAuBC,GAA5C,KAAAF,QAAqB,KAAAC,QAAuB,KAAAC,SAG/D,KAAKzS,G,QACD,MAAMyS,EAAoB,QAAd,EAAG3U,KAAK2U,cAAM,QAAI,GAC9BzS,EAAI0S,YAAwB,QAAb,EAAG5U,KAAK0U,aAAK,QAAI,MAChCxS,EAAIyD,YACJzD,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAGjB,KAAKyU,MAAMzT,EAAI2T,GACxCzS,EAAI8S,OAAOhV,KAAKyU,MAAMxT,EAAGjB,KAAKyU,MAAMzT,EAAI2T,GACxCzS,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,GAC7CkB,EAAI8S,OAAOhV,KAAKyU,MAAMxT,EAAI0T,EAAQ3U,KAAKyU,MAAMzT,GAC7CkB,EAAI2S,UAKL,MAAM,GACT,YAAmBJ,EAAqBS,EAA0BR,EAAuBC,GAAtE,KAAAF,QAAqB,KAAAS,YAA0B,KAAAR,QAAuB,KAAAC,SAGzF,KAAKzS,G,QACDA,EAAI0S,YAAwB,QAAb,EAAG5U,KAAK0U,aAAK,QAAI,MAChCxS,EAAIyD,YACJzD,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAGjB,KAAKyU,MAAMzT,GACpC,MAAMmU,EAAMjV,EAAA,EAAM8K,IAAIhL,KAAKyU,MAAOvU,EAAA,EAAM6K,UAAU/K,KAAKkV,UAAsB,QAAb,EAAElV,KAAK2U,cAAM,QAAI,KACjFzS,EAAI8S,OAAOG,EAAIlU,EAAGkU,EAAInU,GACtBkB,EAAI2S,UAKL,MAAMO,GACT,YAAmBX,EAAqBY,EAAsBX,GAA3C,KAAAD,QAAqB,KAAAY,SAAsB,KAAAX,QAG9D,KAAKxS,G,MACDA,EAAI0S,YAAwB,QAAb,EAAG5U,KAAK0U,aAAK,QAAI,MAChCxS,EAAIyD,YACJzD,EAAI6S,OAAO/U,KAAKyU,MAAMxT,EAAGjB,KAAKyU,MAAMzT,GACpCkB,EAAI8S,OAAOhV,KAAKqV,OAAOpU,EAAGjB,KAAKqV,OAAOrU,GACtCkB,EAAI2S,UCpEL,MAAe,GAGlB,YAAYzN,G,MACRpH,KAAKsV,QAAU,GACftV,KAAKuV,QAAqB,QAAd,EAAGnO,aAAI,EAAJA,EAAMoO,aAAK,SAK9B,MAAMA,GACExV,KAAKuV,SACTvV,KAAKsV,QAAQ1N,KAAK4N,GAEtB,WAAWrL,EAAWuK,EAAeC,GACjC3U,KAAKwV,MAAM,IAAIhB,GAAWrK,EAAIuK,EAAOC,IAEzC,WAAWxK,EAAWuK,EAAeC,GACjC3U,KAAKwV,MAAM,IAAIV,GAAW3K,EAAIuK,EAAOC,IAEzC,UAAUxK,EAAWuK,EAAeC,GAChC3U,KAAKwV,MAAM,IAAIP,GAAU9K,EAAIuK,EAAOC,IAExC,SAASxK,EAAWhB,EAAeuL,EAAe5J,GAC9C9K,KAAKwV,MAAM,IAAI,GAASrL,EAAIhB,EAAOuL,EAAO5J,IAE9C,UAAUX,EAAWsL,EAAYf,GAC7B1U,KAAKwV,MAAM,IAAIJ,GAAUjL,EAAIsL,EAAKf,IAGtC,UAAUxS,EAA+BsC,GACrC,GAA2B,IAAxBxE,KAAKsV,QAAQnS,OAAhB,CACA,IAAI,IAAID,EAAI,EAAGA,EAAIlD,KAAKsV,QAAQnS,OAAQD,IACpClD,KAAKsV,QAAQpS,GAAGO,KAAKvB,GAEzBlC,KAAKsV,QAAU,KC5BvB,MAAMI,GAAc,CAChBC,YAAa,IACbC,YAAa,IACbC,WAAY,GACZL,OAAO,GAEI,MAAM,WAAoB,GAErC,YAAYpO,GACR0O,MAAM1O,GACNpH,KAAKoH,KAAO,OAAH,wBAAQsO,IAAgBtO,GAGrC,OAAOkF,EAAe9H,GAClB,MAAMuR,EAAiBzJ,EAAG3J,OAAO1C,SAC3B+V,EAAa9V,EAAA,EAAMkE,SAAS2R,EAAgBvR,EAAKvE,UACjDgW,EAAiBzR,EAAKnE,SACtB6V,EAAgBF,EAAWjU,YAC3BoU,EAAkB,CACpB,EAAM9M,UAAU6M,EAAiBvV,KAAKW,GAAK,GAC3C,EAAM+H,UAAU6M,EAAiBvV,KAAKW,GAAK,IAG/C,GAAG0U,EAAW3R,WAAarE,KAAKoH,KAAKuO,YAAc3V,KAAKoH,KAAKuO,YAAa,CACtE,MAAMS,EAAe,CACjB,EAAM/M,UAAU6M,EAA2B,EAAVvV,KAAKW,GAAS,GAC/C,EAAM+H,UAAU6M,EAA2B,EAAVvV,KAAKW,GAAS,IAE7C+U,EAAYrW,KAAKoH,KAAKuO,YAE5B3V,KAAKsW,WAAWP,EAAgB,SAAUM,GAC1C,MAAME,EAAYH,EAAa7R,IAAIiS,GAAWtW,EAAA,EAAM8K,IAAIxG,EAAKvE,SAAUC,EAAA,EAAM6K,UAAUyL,EAASH,KAChG,IAAI,IAAInT,EAAI,EAAGA,EAAIqT,EAAUpT,OAAQD,IACjClD,KAAKyW,UAAUjS,EAAKvE,SAAUsW,EAAUrT,IAE5C,MACMwT,EAAcC,GAAcV,EADdM,EAAUhS,IAAI4Q,GAAOjV,EAAA,EAAMkE,SAAS+Q,EAAK3Q,EAAKvE,UAAU8B,cAG5E,MAAO,CACHwK,OAAQ/H,EAAKkH,WAAWyB,SACxBX,WAAYkK,GAEb,GAAIV,EAAW3R,WAAarE,KAAKoH,KAAKwO,YAAc5V,KAAKoH,KAAKwO,YAAa,CAC9E,MAAMS,GAAarW,KAAKoH,KAAKuO,YAAc3V,KAAKoH,KAAKwO,aAAa,EAElE5V,KAAKsW,WAAWP,OAAgBjS,EAAWuS,GAC3C,MAAME,EAAYJ,EAAgB5R,IAAIiS,GAAWtW,EAAA,EAAM8K,IAAI+K,EAAgB7V,EAAA,EAAM6K,UAAUyL,EAASH,KACpG,IAAI,IAAInT,EAAI,EAAGA,EAAIqT,EAAUpT,OAAQD,IACjClD,KAAKsW,WAAWC,EAAUrT,IAE9B,MACMwT,EAAcC,GAAcV,EADdM,EAAUhS,IAAI4Q,GAAOjV,EAAA,EAAMkE,SAAS+Q,EAAK3Q,EAAKvE,UAAU8B,cAG5E,MAAO,CACHwK,OAAQ/H,EAAKkH,WAAWyB,SACxBX,WAAYkK,GAEb,CAEH1W,KAAKsW,WAAWP,EAAgB,QAAS/V,KAAKoH,KAAKuO,aACnD3V,KAAKsW,WAAWP,EAAgB,SAAU/V,KAAKoH,KAAKwO,aACpD,MAAMgB,EAAgBD,GAAcV,EAAgBE,GACpD,MAAO,CACH5J,OAAQ/H,EAAKkH,WAAWyB,SAAWnN,KAAKoH,KAAKyO,WAC7CrJ,WAAYoK,KAM5B,SAASD,GAAcE,EAAqBC,GACxC,MAAMC,EAAmBD,EAAevS,IAAIoM,GAAU,EAAM5D,YAAY8J,EAAalG,IACrF,IAAIqG,EAAaD,EAAiB,GAC9BE,EAAeH,EAAe,GAClC,IAAI,IAAI5T,EAAI,EAAGA,EAAI6T,EAAiB5T,OAAQD,IACrCvC,KAAKa,IAAIuV,EAAiB7T,IAAMvC,KAAKa,IAAIwV,KACxCA,EAAaD,EAAiB7T,GAC9B+T,EAAeH,EAAe5T,IAGtC,OAAO+T,ECxFI,MAAM,WAAiB,GAClC,cACInB,QAGJ,OAAOxJ,EAAe9H,GAClB,IACImM,EADUrE,EAAGwF,iBAAiBtN,EAAKvE,SAAUuE,EAAKuN,YAActP,EAAMM,MAAQN,EAAMK,KAAOL,EAAMM,OAChF,GAErB,QAAce,IAAX6M,EAEC,MAAO,CAACnE,WAAY,EAAGD,OAAQ,GAGnC,MAAMC,EAAa,EAAM0K,aAAa1S,EAAKvE,SAAU0Q,EAAO1Q,UAEtDkX,EAAe,EAAMpK,YAAYvI,EAAKnE,SAAUmM,GAGtD,MAAO,CAAED,QAFQ,EAAI5L,KAAKE,IAAI,EAAGF,KAAKC,IAAI,EAAGD,KAAKa,IAAI2V,GAAgBxW,KAAKW,MAE/CkD,EAAKkH,WAAWyB,SAAUX,WAAYA,ICfnE,MAAM4K,GAA2E,CACpFC,QAAUjQ,GAAS,IAAI,GACvBkQ,UAAYlQ,GAAS,IAAI,GAAkBA,UAAQ,KCLhD,SAASmQ,GAA2BC,EAAwBC,EAA0CC,GACzG,MAAO,CACHjG,MAAO+F,EAAK/F,MACZC,QAAS8F,EAAK9F,QAAQnN,IAAIoT,GAKlC,SAA+BH,EAA4CC,EAA0CC,GACjH,GAoCJ,SAAkBF,GACd,YAA6B1T,IAAhB0T,EAAM/S,MArChBmT,CAASJ,GAAO,CACf,IAAIpK,OAAkCtJ,EAItC,YAHmBA,IAAhB0T,EAAKpK,SACJA,EAASe,EAAgBqJ,EAAKpK,OAAQsK,IAEnC,CACHnI,OAAQvB,EAAewJ,EAAKjI,QAC5BnC,OAAQA,EACR/M,SAAUmX,EAAKnX,SACf+P,OAAQoH,EAAKpH,OACbI,iBAAkBgH,EAAKhH,iBACvBL,SAAUqH,EAAKrH,SACf1L,MAAO+S,EAAK/S,OAGf,CACD,MAAMoT,EAAMJ,EAAKD,EAAK9L,iBACX5H,IAAR+T,GACCC,QAAQC,MAAM,yBAA2BP,EAAK9L,WAAa,6BAE/D,IAAI0B,OAAkCtJ,EAItC,YAHkBA,IAAf+T,EAAIzK,SACHA,EAASe,EAAgB0J,EAAIzK,OAAQsK,IAElC,CACHnI,OAAQvB,EAAewJ,EAAKjI,QAC5BnC,OAAQA,EACR/M,SAAUmX,EAAKnX,SACf+P,OAAQyH,EAAIzH,OACZI,iBAAkBqH,EAAIrH,iBACtBL,SAAU0H,EAAI1H,SACd1L,MAAOoT,EAAIpT,QArCyBuT,CAAsBL,EAAYF,EAAMC,IAChFjE,SAAU+D,EAAK/D,UCIhB,SAASwE,GAAoBT,EAA4BE,GAC5D,MAAMQ,EAAwD,GAC9D,IAAI,IAAIC,KAAOX,EAAKY,WAChBF,EAAcC,GAAO1J,EAAmB+I,EAAKY,WAAWD,GAAMT,GAElE,OAAOF,EAAK3T,MAAMU,IAAIsT,GAK1B,SAA6BA,EAA0BQ,EAA0CX,GAC7F,MAAMY,EAAkC,GACxC,IAAI,IAAIpV,EAAI,EAAGA,EAAI2U,EAAI3L,OAAO/I,OAAQD,IACtC,CACI,MAAMqV,EAAQV,EAAI3L,OAAOhJ,GACnBgC,EAAwC,iBAArBqT,EAAe,UAAiBF,EAAME,EAAMrT,WAAauJ,EAAmB8J,EAAMrT,UAAWwS,GAEtHY,EAAa1Q,KAAK,IAAI,GAClB1C,EACA8I,EAAeuK,EAAMhJ,QACNgJ,EAAMlY,SbpBdM,KAAKW,GAAK,EaqBjBiX,EAAMC,UACND,EAAM5E,WACN4E,EAAM3E,aAId,MAAM6E,EAASrB,GAAgBS,EAAIlM,IAGnC,OAAO,IAAI,GACP+L,EAAWG,EAAIzK,OAAOkB,MACtBN,EAAe6J,EAAIlN,MACnBqD,EAAe6J,EAAIzK,OAAOmB,WAC1BP,EAAe6J,EAAIzK,OAAOoB,SAC1BR,EAAe6J,EAAIzK,OAAOxC,QAC1BiN,EAAIa,GACJb,EAAIhL,SACJgL,EAAIlL,UACJkL,EAAI1K,SACJ0K,EAAIzE,UACJyE,EAAIc,aACJL,EACAT,EAAIjM,aAAarH,IAAIqU,IAAQ,MACzB,OAAArB,GAA2BqB,EAA4B,QAAvB,EAAEf,EAAIgB,yBAAiB,QAAI,GAAInB,KAhBzD,IAAMe,EAAOZ,EAAIiB,WAtB3BC,CAAoBlB,EAAKK,EAAeR,ICQhD,IAAI,GACAsB,GACAC,GAEW,SAASC,KACpB,MAAMC,EAAc,IAAIC,EAAA,EAClBC,EAAc,IAAIC,EAAA,EAAY,EAAG,GAAI,EAAgBH,EAAYI,6BACjEC,EAAY,IAAIC,EAAA,EAAY,EAAcN,EAAYI,6BACtDG,EAAa,IAAID,EAAA,EAAY,EAAeN,EAAYI,6BAC9D,GAAU,CACN,MAASC,EACT,OAAUE,GAGdP,EAAYQ,cAAc,IAG9B,SAAkBN,GACd,iCAGEO,KAAKjS,IACHmQ,QAAQ+B,IAAI,4BACZ,MAAMC,EAAc7B,GAA+CtQ,EAAO,KAKlF,SAAoB0R,EAA0BS,GAC1C,MAAMC,EAASC,SAASC,eAAe,UACjC/X,EAAM6X,EAAOG,WAAW,MAC9BlB,GAAgB,IAAImB,EAAA,EAA6BJ,EAAQ7X,EAAK,EAAa,GAAc,EAAM,QAC/F,YAAuBA,GAEvB+W,GAAa,GAAe,MAAE3F,UAAU,IAAIpT,EAAA,EAAM,GAAI,GAAI,IAAIA,EAAA,EAAM,GAAI,IAAK,IAAIA,EAAA,EAAM,GAAK,IAE5F,MAAMM,EAAO,IAAI4Z,EAAA,EAAgBJ,SAASK,MAAM,GAC1C3X,EAAS,IAAI,EAAO2W,GAEpB/M,EAAK,IAAI,EAAU5J,EAAQlC,GAEjC8L,EAAGtJ,QAAQ4E,KAAK,IAAI,EAChB,IAAI1H,EAAA,EAAM,EAAG,GACb,IAAI2E,EAAqBqC,EAAsB,EAAG,IAAKlB,EAAgBC,QACvE,IAAIpB,EAAqBqC,GAAuB,GAAI,IAAKlB,EAAgBM,SACzE,IAAIzB,EAAoBqC,EAAsBJ,EAAA,EAAMC,IAAI,EAAG,EAAG,IAAMD,EAAA,EAAMC,IAAI,EAAG,EAAG,GAAID,EAAA,EAAMC,IAAI,GAAK,GAAK,IAAKf,EAAgBC,QACjI,MAGJqG,EAAGtJ,QAAQ4E,KAAK,IAAI,EAChB,IAAI1H,EAAA,EAAM,IAAK,GACf,IAAI,KAAO,GAAI,IACf,IAAI,KAAO,GAAI,IACf,IAAI,IAAM,GAAI,IACd,EACA,IAAI,IAAM,GAAI,IACd,IAAI,IAAM,GAAI,MAElB,IAAI,IAAIgD,EAAI,EAAGA,EAAI4W,EAAY3W,OAAQD,IAAI,CACvC,MAAMS,EAAOT,EAAI,GAAM,EAAIT,EAAMM,MAAQN,EAAMK,KAC/CwJ,EAAG1J,SAASe,GAAMiE,KAAKkS,EAAY5W,GAAGoX,UAAU3W,EAAM,IAAIzD,EAAA,GAAO,KAAOgD,EAAE,GAAI,GAAIvC,KAAK2B,SAAW3B,KAAKW,GAAK,KAMpH,SAASiZ,EAAYC,EAAsB9X,EAAgBlC,EAAuBuZ,EAA2B7X,GACzG1B,EAAKyC,SACLuX,EAAUpX,OACVV,EAAOU,KAAK5C,GAKhB,SAAiBga,EAAsB9X,EAAgBqX,EAA2B7X,GAC9E,YAAuBA,GACvBA,EAAI4D,UAAY,QAChB5D,EAAIuY,SAAS,EAAG,EAAG,EAAa,GAChCvY,EAAIC,OAEJ,MAAMuY,EAAaxa,EAAA,EAAM8K,IAAItI,EAAOzC,SAAUC,EAAA,EAAMmM,SAAS3J,EAAOvC,SAAU,KAE9E+B,EAAIyY,YAAYD,EAAWzZ,EAAI,EAAc,KAAMyZ,EAAW1Z,EAAI,EAAe,IACjFkB,EAAI4D,UAAY,OAKhB,IAAK,IAAI8U,EAHY,IAGPja,KAAK0B,OAAOqY,EAAW1Z,EAAI,EAAe,GAHnC,KAGsE4Z,GAHtE,IAG4Eja,KAAK0B,OAAOqY,EAAW1Z,EAAI,EAAe,GAHtH,KAGyJ4Z,GAHzJ,IAIjB1Y,EAAIuY,SAASC,EAAWzZ,EAAI,EAAc,EAAG2Z,EAAI,EAAa,GAGlE,IAAK,IAAIC,EAPY,IAOPla,KAAK0B,OAAOqY,EAAWzZ,EAAI,EAAc,GAPlC,KAOqE4Z,GAPrE,IAO2Ela,KAAK0B,OAAOqY,EAAWzZ,EAAI,EAAc,GAPpH,KAOuJ4Z,GAPvJ,IAQjB3Y,EAAIuY,SAASI,EAAIH,EAAW1Z,EAAI,EAAe,EAAG,EAAG,GAGzD0B,EAAOH,OAAOL,GAEdsY,EAAU/W,KAAKvB,GAEfA,EAAIM,UA9BJsY,CAAQN,EAAW9X,EAAQqX,EAAQ7X,GACnC6Y,sBAAsB,IAAMR,EAAYC,EAAW9X,EAAQlC,EAAMuZ,EAAQ7X,IARzEqY,CAAYjO,EAAI5J,EAAQlC,EAAMuZ,EAAQ7X,GAvClC8Y,CAAW3B,EAAaS,KAVImB,CAAS5B,M,gCC3C7C,kCAAe,MAAMnZ,EAMjB,YAAmBe,EAAkBD,GAAlB,KAAAC,IAAkB,KAAAD,IAJrC,cACI,OAAO,IAAId,EAAM,EAAE,GAOhB,iBAAiBiJ,EAAe+R,GACnC,OAAO,IAAIhb,EAAMS,KAAKe,IAAIyH,IAAU+R,UAAY,GAAIva,KAAKgB,IAAIwH,IAAU+R,UAAY,IAGhF,WACH,OAAOhb,EAAMkK,IAAIpK,KAAMA,MAGpB,SACH,OAAOW,KAAKwa,KAAKnb,KAAKqE,YAGnB,QACH,OAAO,IAAInE,EAAMF,KAAKiB,EAAGjB,KAAKgB,GAG3B,SACH,OAAO,IAAId,GAAOF,KAAKiB,GAAIjB,KAAKgB,GAG7B,gBAGH,OAFAhB,KAAKiB,GAAKjB,KAAKiB,EACfjB,KAAKgB,GAAKhB,KAAKgB,EACRhB,KAGJ,WAAWob,EAAWC,GACzB,OAAOD,EAAGna,EAAIoa,EAAGpa,EAAIma,EAAGpa,EAAIqa,EAAGra,EAG5B,QAAQsa,GACX,OAAOpb,EAAMkK,IAAIpK,KAAMsb,GAGpB,YACH,IAAIC,EAAMvb,KAAK6B,SACf,OAAO3B,EAAMmM,SAASrM,KAAM,EAAIub,GAG7B,YACH,OAAO5a,KAAKI,MAAMf,KAAKgB,EAAGhB,KAAKiB,GAK5B,QAAQqa,EAAqBta,GAChC,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GAGxC,OAFAhB,KAAKiB,GAAKua,EACVxb,KAAKgB,GAAKya,EACHzb,KAKJ,SAASsb,EAAqBta,GACjC,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GAGxC,OAFAhB,KAAKiB,GAAKua,EACVxb,KAAKgB,GAAKya,EACHzb,KAKJ,aAAasb,EAAqBta,GACrC,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GAGxC,OAFAhB,KAAKiB,GAAKua,EACVxb,KAAKgB,GAAKya,EACHzb,KAKJ,WAAWsb,EAAqBta,GACnC,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GAGxC,OAFAhB,KAAKiB,GAAKua,EACVxb,KAAKgB,GAAKya,EACHzb,KAGJ,OAAOsb,GACV,OAAOtb,KAAKiB,IAAMqa,EAAMra,GAAKjB,KAAKgB,IAAMsa,EAAMta,EAMlD,WAAW4M,EAAY0N,EAAqBta,GACxC,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GACxC,OAAO,IAAId,EAAM0N,EAAI3M,EAAIua,EAAI5N,EAAI5M,EAAIya,GAKzC,gBAAgB7N,EAAY0N,EAAqBta,GAC7C,MAAOC,EAAGua,EAAIxa,EAAGya,GAAMC,EAAUJ,EAAOta,GACxC,OAAO,IAAId,EAAM0N,EAAI3M,EAAIua,EAAI5N,EAAI5M,EAAIya,GAKzC,gBAAgB9W,EAAUC,EAAiB+W,GACvC,YAAW7X,IAAP6X,EACO,IAAIzb,EAAMyE,EAAE1D,EAAK2D,EAAcD,EAAE3D,EAAI2a,QAEtB7X,IAAhBc,EAAU3D,EACT,IAAIf,EAAMyE,EAAE1D,EAAK2D,EAAY3D,EAAG0D,EAAE3D,EAAK4D,EAAY5D,GAEnD,IAAId,EAAMyE,EAAE1D,EAAK2D,EAAcD,EAAE3D,EAAK4D,GAIrD,mBAAmBD,EAAUC,EAAU6B,GACnC,OAAO,IAAIvG,EAAMyE,EAAE1D,GAAK2D,EAAE3D,EAAI0D,EAAE1D,GAAKwF,EAAG9B,EAAE3D,GAAK4D,EAAE5D,EAAI2D,EAAE3D,GAAKyF,GAGhE,oBAAoB9B,EAAUC,GAC1B,OAAGD,EAAE1D,GAAK2D,EAAE3D,GAAK0D,EAAE3D,GAAK4D,EAAE5D,EAAU2D,EACjCC,EAAE3D,GAAK0D,EAAE1D,GAAK2D,EAAE5D,GAAK2D,EAAE3D,EAAU4D,EAC7B,IAAI1E,EAAMS,KAAKC,IAAI+D,EAAE1D,EAAG2D,EAAE3D,GAAIN,KAAKC,IAAI+D,EAAE3D,EAAG4D,EAAE5D,IAGzD,oBAAoB2D,EAAUC,GAC1B,OAAGD,EAAE1D,GAAK2D,EAAE3D,GAAK0D,EAAE3D,GAAK4D,EAAE5D,EAAU2D,EACjCC,EAAE3D,GAAK0D,EAAE1D,GAAK2D,EAAE5D,GAAK2D,EAAE3D,EAAU4D,EAC7B,IAAI1E,EAAMS,KAAKE,IAAI8D,EAAE1D,EAAG2D,EAAE3D,GAAIN,KAAKE,IAAI8D,EAAE3D,EAAG4D,EAAE5D,IAGzD,cAAcuF,EAAcL,GACxB,OAAkB,IAAfK,EAAIpD,OAAqBoD,EAAI,GACT,IAAfA,EAAIpD,OAAqBjD,EAAM8K,IAAI9K,EAAMmM,SAAS9F,EAAI,GAAIL,GAAIhG,EAAMmM,SAAS9F,EAAI,GAAI,EAAEL,IACxFhG,EAAM8K,IACT9K,EAAMmM,SAASnM,EAAMmG,OAAOE,EAAIqV,MAAM,GAAI1V,GAAIA,GAC9ChG,EAAMmM,SAASnM,EAAMmG,OAAOE,EAAIqV,MAAM,EAAGrV,EAAIpD,OAAS,GAAI+C,GAAI,EAAEA,IAGxE,OAAO2V,GACH,MAAM1S,EAAQxI,KAAKI,MAAMf,KAAKgB,EAAGhB,KAAKiB,GAChCsa,EAAMvb,KAAK6B,SACjB,OAAO3B,EAAM6K,UAAU5B,EAAQ0S,EAAON,IAI9C,SAASG,EAAUza,EAAiBD,GAChC,YAAS8C,IAAN9C,EAAwB,CAAEC,EAAWA,EAAGA,EAAGD,EAAWC,EAAGD,GACrD,CAACC,EAAWA,EAAGD,O,gCC1J1B,kCAAO,MAAM8F,EAIT,YAAYgV,GACHA,EAAaC,GAAMD,EAAa3X,GAAM2X,EAAaE,GACpDhc,KAAKic,IAAMH,EACX9b,KAAK+G,SAAMjD,IAGX9D,KAAK+G,IAAM+U,EACX9b,KAAKic,SAAMnY,GAUZ,WAAWkD,EAAWC,EAAWrC,GACpC,OAAO,IAAIkC,EAAM,CAAEE,IAAGC,IAAGrC,MAStB,WAAWmX,EAAW5X,EAAW6X,GACpC,OAAO,IAAIlV,EAAM,CAAEiV,IAAG5X,IAAG6X,MAKtB,EAAEA,GAEL,GADAhc,KAAKkc,cACKpY,IAANkY,EAIA,OAAOhc,KAAK+G,IAAIC,EAHhBhH,KAAK+G,IAAIC,EAAIgV,EACbhc,KAAKic,SAAMnY,EAQZ,EAAEkY,GAEL,GADAhc,KAAKkc,cACKpY,IAANkY,EAIA,OAAOhc,KAAK+G,IAAIE,EAHhBjH,KAAK+G,IAAIE,EAAI+U,EACbhc,KAAKic,SAAMnY,EAQZ,EAAEkY,GAEL,GADAhc,KAAKkc,cACKpY,IAANkY,EAIA,OAAOhc,KAAK+G,IAAInC,EAHhB5E,KAAK+G,IAAInC,EAAIoX,EACbhc,KAAKic,SAAMnY,EAQZ,EAAEkY,GAEL,GADAhc,KAAKmc,cACKrY,IAANkY,EAIA,OAAOhc,KAAKic,IAAIF,EAHhB/b,KAAKic,IAAIF,EAAIC,EACbhc,KAAKic,SAAMnY,EAQZ,EAAEkY,GAEL,GADAhc,KAAKmc,cACKrY,IAANkY,EAIA,OAAOhc,KAAKic,IAAI9X,EAHhBnE,KAAKic,IAAI9X,EAAI6X,EACbhc,KAAKic,SAAMnY,EAQZ,EAAEkY,GAEL,GADAhc,KAAKmc,cACKrY,IAANkY,EAIA,OAAOhc,KAAKic,IAAID,EAHhBhc,KAAKic,IAAID,EAAIA,EACbhc,KAAKic,SAAMnY,EAMX,eAAesY,GACnB,MAAMC,GAAKD,EAAiB,EAAbpc,KAAKic,IAAIF,GAAS,EACjC,OAAO/b,KAAKic,IAAID,EAAIhc,KAAKic,IAAID,EAAIhc,KAAKic,IAAI9X,EAAIxD,KAAKE,IAAIF,KAAKC,IAAIyb,EAAG,EAAIA,EAAG,GAAI,GAI1E,cACavY,IAAb9D,KAAK+G,KACL/G,KAAKsc,UAGL,UACJtc,KAAK+G,IAAM,CACPC,EAAGhH,KAAKuc,eAAe,GACvBtV,EAAGjH,KAAKuc,eAAe,GACvB3X,EAAG5E,KAAKuc,eAAe,IAIvB,cACazY,IAAb9D,KAAKic,KACLjc,KAAKwc,UAGL,UACJ,MAAM,EAACxV,EAAC,EAAEC,EAAC,EAAErC,GAAK5E,KAAK+G,IACjB0V,EAAK9b,KAAKE,IAAImG,EAAGC,EAAGrC,GACpB8X,EAAK/b,KAAKC,IAAIoG,EAAGC,EAAGrC,GAC1B,IAAImX,EAAIU,IAAOC,EAAK,EACdD,IAAOzV,GAAKC,EAAIrC,IAAM6X,EAAKC,GAC3BD,IAAOxV,EAAI,GAAKrC,EAAIoC,IAAMyV,EAAKC,GAC/B,GAAK1V,EAAIC,IAAMwV,EAAKC,GAE1B,IADAX,GAAK,EACEA,EAAI,GACPA,IAEJ/b,KAAKic,IAAM,CACPF,IACA5X,EAAGsY,IAAOC,EAAK,GAAKD,EAAKC,GAAMD,EAC/BT,EAAGS,GAIJ,WAEH,OADAzc,KAAKkc,SACE,OAASlc,KAAK2c,OAAO3c,KAAK+G,IAAIC,GAAK,KAAOhH,KAAK2c,OAAO3c,KAAK+G,IAAIE,GAAK,KAAOjH,KAAK2c,OAAO3c,KAAK+G,IAAInC,GAAK,IAGxG,OAAOgY,GACX,OAAOjc,KAAK0B,MAAkB,IAAZua,M,kEC1JX,MAAMC,EACjB,YAAmBrc,EAAuBsc,GAAvB,KAAAtc,OAAuB,KAAAsc,UAInC,UAAU3E,GACb,OAAmC,IAA5BnY,KAAKQ,KAAKuc,QAAQ5E,GAGtB,QAAQA,GACX,OAAmC,IAA5BnY,KAAKQ,KAAKuc,QAAQ5E,ICLlB,MAAM,EAIjB,YAAmB6E,EAAsCC,GAAtC,KAAAD,kBAAsC,KAAAC,mBAC3BnZ,IAArB9D,KAAKid,cACNjd,KAAKid,aAAc,GAEvBD,EAAgBE,iBAAiB,UAAWb,GAAKrc,KAAKmd,UAAUd,IAChEW,EAAgBE,iBAAiB,QAASb,GAAKrc,KAAKod,QAAQf,IAE5Drc,KAAKqd,SAAW,GAChBrd,KAAK8c,QAAU,GAGX,UAAU3E,GACVnY,KAAKid,aAELnF,QAAQ+B,IAAI1B,EAAIA,MAGP,IADDnY,KAAKqd,SAASN,QAAQ5E,EAAIA,OAElCnY,KAAK8c,QAAQlV,KAAK,CAAEuQ,IAAKA,EAAIA,IAAKmF,OAAQ,UAC1Ctd,KAAKqd,SAASzV,KAAKuQ,EAAIA,MAIvB,QAAQA,GACZnY,KAAK8c,QAAQlV,KAAK,CAAEuQ,IAAKA,EAAIA,IAAKmF,OAAQ,YAC1C,MAAMpS,EAAMlL,KAAKqd,SAASN,QAAQ5E,EAAIA,KACtCnY,KAAKqd,SAASha,OAAO6H,EAAK,GAGvB,SACH,MAAMqS,EAAYvd,KAAKqd,SACjBG,EAAexd,KAAK8c,QAK1B,OAHA9c,KAAKqd,SAAWE,EAAU3B,QAC1B5b,KAAK8c,QAAU,GAER,IAAID,EAASU,EAAWC,IC5CxB,MAAM,EAMjB,YAAYC,EAAsBR,GAC9Bjd,KAAK0d,QAAU,IAAI,EAAWD,EAASR,GACvCjd,KAAK2d,SAAW3d,KAAK4d,aAAe5d,KAAK0d,QAAQG,SAG9C,SACH7d,KAAK2d,SAAW3d,KAAK4d,aACrB5d,KAAK4d,aAAe5d,KAAK0d,QAAQG,SAG9B,UAAU1F,GACb,OAAOnY,KAAK4d,aAAand,UAAU0X,GAGhC,QAAQA,GACX,OAAOnY,KAAK4d,aAAaE,QAAQ3F,GAG9B,aAAaA,GAChB,OAAOnY,KAAK4d,aAAand,UAAU0X,IAAQnY,KAAK2d,SAASG,QAAQ3F,GAG9D,cAAcA,GACjB,OAAOnY,KAAK4d,aAAaE,QAAQ3F,IAAQnY,KAAK2d,SAASld,UAAU0X,GAG9D,UACH,OAAOnY,KAAK4d,aAAad,W,gHCjC1B,MAAM,EAGT,YAAmB5J,EAA2B6K,EAA4BrQ,EAA0BoB,EAAmBlE,GAApG,KAAAsI,QAA2B,KAAA6K,eAA4B,KAAArQ,aAA0B,KAAAoB,YAChG9O,KAAK4K,OAASA,UAAU,IAAI1K,EAAA,EAAM,EAAE,GAGxC,KAAKgC,EAA+BjC,EAAiB0K,EAAaqT,EAAe3d,GAC7E6B,EAAIC,OACJD,EAAIyY,UAAU1a,EAASgB,EAAGhB,EAASe,QACnB8C,IAAbzD,GACC6B,EAAI0N,OAAOvP,GACf6B,EAAI+b,MAAMtT,EAAK1J,EAAG0J,EAAK3J,GACvBkB,EAAIyY,WAAW3a,KAAK4K,OAAO3J,GAAIjB,KAAK4K,OAAO5J,GAC3CkB,EAAIgc,UAAUle,KAAKkT,MAAMiL,MAAOne,KAAK+d,aAAa9c,EAAI+c,EAAQhe,KAAK0N,WAAWzM,EAAGjB,KAAK+d,aAAa/c,EAAGhB,KAAK0N,WAAWzM,EAAGjB,KAAK0N,WAAW1M,EAAG,EAAG,EAAG,EAAG,GACrJkB,EAAIM,UAIR,KAAK4E,EAAqCgX,G,MACtC,YAA8Cta,IAApBsD,EAAMlC,UACrB,IAAImZ,EAAiBre,KAA6BoH,EAAMkX,QAA0C,QAAhC,EAAsBlX,EAAMgX,YAAI,UAGlG,IAAIC,EAAiBre,KAAcoH,EAAMgX,aAWrD,MAAMC,EAET,YAAmB1Q,EAAgC2Q,EAAwBF,GAAxD,KAAAzQ,SAAgC,KAAA2Q,UAAwB,KAAAF,OAEvEpe,KAAKue,YAAc,EAGvB,OAEI,OADAve,KAAKue,gBACFve,KAAKue,YAAcve,KAAKse,WAGpBte,KAAKoe,OAAMpe,KAAKue,YAAc,IAC1B,GAIf,KAAKrc,EAA+BjC,EAAiB0K,EAAatK,GAC9D,MAAMme,EAAc7d,KAAK0B,MAAMrC,KAAKue,YAAcve,KAAK2N,OAAOmB,UAAY9O,KAAKse,SAC/Ete,KAAK2N,OAAOlK,KAAKvB,EAAKjC,EAAU0K,EAAM6T,EAAane,ICtDpD,MAAM,EAET,YAAYoe,EAA2BC,GAAA,KAAAA,SACnC1e,KAAKme,MAAQnE,SAAS2E,cAAc,OACpC3e,KAAKme,MAAMvQ,IAAM6Q,EACjBze,KAAKme,MAAMjB,iBAAiB,OAAQ,IAAMld,KAAK4e,gBAG3C,eACJ5e,KAAK0e,SAGT,UAAUX,EAAqBrQ,EAAmB9C,EAAgBiU,GAC9D,OAAO,IAAI,EAAY7e,KAAM+d,EAAcrQ,EAAY9C,EAAQiU,GAGnE,aAAatP,EAAe7B,EAAmB9C,EAAekU,GAC1D,OAAO,IAAI,EAAgB9e,KAAMuP,EAAQ7B,EAAYoR,EAAYlU,IAIlE,MAAM,EAIT,YAAmBsI,EAA2B6K,EAA4BrQ,EAAmB9C,EAAgBiU,GAA1F,KAAA3L,QAA2B,KAAA6K,eAA4B,KAAArQ,aACtE1N,KAAK4K,OAASA,UAAU,IAAI1K,EAAA,EAAM,EAAE,GACpCF,KAAK6e,eAAiBA,UAAkB,EAG5C,KAAK3c,EAA+BjC,EAAiB0K,EAAatK,GAC9D6B,EAAIC,OACJD,EAAIyY,UAAU1a,EAASgB,EAAGhB,EAASe,GACnCkB,EAAI0N,QAAQvP,UAAY,GAAKL,KAAK6e,gBAClC3c,EAAI+b,MAAMtT,EAAK1J,EAAG0J,EAAK3J,GACvBkB,EAAIyY,WAAW3a,KAAK4K,OAAO3J,GAAIjB,KAAK4K,OAAO5J,GAC3CkB,EAAIgc,UAAUle,KAAKkT,MAAMiL,MAAOne,KAAK+d,aAAa9c,EAAGjB,KAAK+d,aAAa/c,EAAGhB,KAAK0N,WAAWzM,EAAGjB,KAAK0N,WAAW1M,EAAG,EAAG,EAAG,EAAG,GACzHkB,EAAIM,a,gCCxCZ,wCAAMuc,EAAkB,EAAVpe,KAAKW,GAEJ,MAAMH,EACjB,iBAAiBgI,GAGb,OAFAA,GAAgB4V,GACJ,IAAG5V,GAAS4V,GACjB5V,EAGX,yBAAyBA,GAOrB,OANAA,GAAgB4V,GACJpe,KAAKW,GACb6H,GAAS4V,EACH5V,GAAUxI,KAAKW,KACrB6H,GAAS4V,GAEN5V,EAGX,qBAAqBxE,EAAWC,GAC5B,OAAOzD,EAAMqI,kBAAkB7E,EAAIC","file":"bullets.bundle.js","sourcesContent":["export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.MultWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.Length();\r\n        let vAngle = this.velocity.Direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.AddWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Point from \"../common/position/Point\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n\r\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\r\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\r\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\r\n        if(maxRange !== undefined) {\r\n            const rangeSq = maxRange * maxRange;\r\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).LengthSq() <= rangeSq);\r\n        }\r\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).LengthSq() }));\r\n        shipsAndRanges.sort((a, b) => a.range - b.range);\r\n        return shipsAndRanges.map(s => s.ship);\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { Keyframes } from './Keyframes';\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { exception } from \"console\";\r\nimport { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(interpolator.arguments === undefined) {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.Clone();\r\n        realPoint.SubtractWith(Point.Multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.AddWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.Dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.Length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\nimport { Weapon } from \"./weapons/Weapon\";\r\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    public currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam,\r\n        private weaponGroups: WeaponGroup[]) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.Multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].tick(gs, this);\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.AddWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].draw(ctx, this);\r\n        }\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n\r\n        this.ai.debugDraw(ctx, this);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { PlayingAnimation } from \"./SpriteAnimation\";\r\nimport { AtlasSprite } from \"./SpriteAtlas\";\r\n\r\nexport class AnimationControl {\r\n    queue: (PlayingAnimation | AtlasSprite)[];\r\n    scaleFactor: Point;\r\n\r\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\r\n        this.queue = [initial];\r\n        if(size === undefined) {\r\n            this.scaleFactor = new Point(1, 1);\r\n        }\r\n        else if(isSprite(initial)) {\r\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\r\n        }\r\n        else {\r\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\r\n        }\r\n    }\r\n\r\n    play(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue = [src];\r\n    }\r\n\r\n    enqueue(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.push(src);\r\n    }\r\n\r\n    tick() {\r\n        if(isSprite(this.queue[0])) {\r\n            this.advance();\r\n        }\r\n        else {\r\n            if(this.queue[0].tick()) this.advance();\r\n        }\r\n    }\r\n\r\n    advance() {\r\n        if(this.queue.length > 1) {\r\n            this.queue.splice(0, 1);\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\r\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\r\n    }\r\n\r\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\r\n        if(isSprite(src)) return Point.Multiply(src.sourceSize, this.scaleFactor);\r\n        else return Point.Multiply(src.source.sourceSize, this.scaleFactor);\r\n    }\r\n}\r\n\r\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\r\n    return (<AtlasSprite>src).origin !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport Point from \"../../../common/position/Point\";\r\nimport { Range } from '../../../common/Range';\r\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\r\n\r\nexport function parseJsonPoint(jpt: [number, number]) {\r\n    return new Point(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonRange(jpt: [number, number]) {\r\n    return new Range(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonAngle(input: number) {\r\n    return input * Math.PI * 2;\r\n}\r\n\r\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\r\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\r\n}\r\n\r\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\r\n    return atlases[anim.file].getAnimation(\r\n        parseJsonPoint(anim.imgOffset),\r\n        parseJsonPoint(anim.frameSize),\r\n        parseJsonPoint(anim.origin),\r\n        anim.numFrames\r\n    );\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { CreateEffect } from \"./EffectFuncs\";\r\n\r\nexport default class EffectControl {\r\n    public effects: IEffect[];\r\n    constructor() {\r\n        this.effects = [];\r\n    }\r\n\r\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\r\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\r\n    }\r\n\r\n    tick() {\r\n        for(let i = this.effects.length - 1; i >= 0; i --) {\r\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.effects.length; i++) {\r\n            this.effects[i].draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { parseJsonRange } from \"../data/parsing/parsers\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Explosion } from \"./Explosion\";\r\n\r\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\r\n    switch(effect.type) {\r\n        case \"explosion\":\r\n            return new Explosion(pt, \r\n                parseJsonRange(effect.burstXVariance),\r\n                parseJsonRange(effect.burstYVariance),\r\n                parseJsonRange(effect.numBursts),\r\n                effect.burstDelay,\r\n                parseJsonRange(effect.burstLifetime),\r\n                parseJsonRange(effect.burstOuterRadius));\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\r\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport EffectControl from \"../Effects/EffectControl\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\r\n\r\nexport interface IWeaponArgs {\r\n    offset: Point;\r\n    sprite?: AtlasSprite;\r\n    shootAnimation?: ISpriteAnimationArgs;\r\n    shootEffect?: IJsonEffect;\r\n\r\n    rotation: number;\r\n\r\n    turret?: {\r\n        maxAngle: number;\r\n        turnRate: number;\r\n    }\r\n\r\n    acquisitionAngle: number;\r\n    minRange?: number;\r\n    range: number;\r\n}\r\n\r\nexport class Weapon {\r\n    turretAngle: number;\r\n    actualAnchor: Point;\r\n    imgControl ?: AnimationControl;\r\n    effects: EffectControl;\r\n\r\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\r\n        this.turretAngle = 0;\r\n        this.actualAnchor = this.args.offset.Clone();\r\n        this.actualAnchor.SubtractWith(Point.Multiply(shipDef.origin, shipDef.size));\r\n        if(args.sprite !== undefined) {\r\n            this.imgControl = new AnimationControl(args.sprite);\r\n        }\r\n        this.effects = new EffectControl();\r\n    }\r\n\r\n    getWeaponLocation(ship: Ship): Point {\r\n        const result = this.actualAnchor.rotate(ship.rotation);\r\n        result.AddWith(ship.position);\r\n        return result;\r\n    }\r\n    getWeaponAnchorAngle(ship: Ship) {\r\n        return this.args.rotation + ship.rotation;\r\n    }\r\n    getWeaponCurrentAngle(ship: Ship) {\r\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\r\n    }\r\n\r\n    /**\r\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\r\n     */\r\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\r\n\r\n        this.effects.tick();\r\n        this.imgControl?.tick();\r\n\r\n        const location = this.getWeaponLocation(self);\r\n\r\n        // Filter down targets to those in range\r\n        possibleTargets = possibleTargets.filter(p => {\r\n            const pDist = Point.subtract(p, location).LengthSq();\r\n            return (\r\n                (this.args.minRange === undefined || \r\n                    (pDist > this.args.minRange * this.args.minRange)\r\n                ) &&\r\n                (pDist < this.args.range * this.args.range)\r\n            );\r\n        });\r\n\r\n        if(this.args.turret === undefined) {\r\n            if(possibleTargets.length === 0) return null; // No target in range.\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n\r\n            // I have no turret, fire if anyone is in spray range\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                // Find absolute direction to target\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                // Find angle to target relative to turret anchor angle\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                // Check if relAngle is less than the spray angle (he's in range)\r\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\r\n                    return possibleTargets[i];\r\n            }\r\n            return null;\r\n        }\r\n        else {\r\n            if(possibleTargets.length === 0) {\r\n                // No targets. Return to angle 0.\r\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\r\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\r\n                return null;\r\n            }\r\n\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n            const angle = this.getWeaponCurrentAngle(self);\r\n\r\n            let target: Point | null = null;\r\n            let targetAngle: number = 0;\r\n            let targetTurretAngle: number = 0;\r\n            let targetAbsoluteAngle: number = 0;\r\n\r\n            // Choose the target closest to anchor angle\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\r\n                    target = possibleTargets[i];\r\n                    targetAngle = turretRelAngle;\r\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\r\n                        // Target is outside of firing arc, we'll need to aim as close as possible\r\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\r\n                        targetAbsoluteAngle = angleToTarget;\r\n                    } else {\r\n                        // If we choose this target, we'll aim right at them\r\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\r\n                    }\r\n                }\r\n            }\r\n            // target is not null. If it was, we'd've exited earlier.\r\n            // Turn gun towards target\r\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\r\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\r\n                this.turretAngle += turretRelAngle;\r\n            }\r\n\r\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\r\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\r\n\r\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\r\n            else return null;\r\n        }\r\n    }\r\n\r\n    /** TODO: SHOOT */\r\n    shoot(gs: GameState, self: Ship) {\r\n        // Play the shoot animation, if necessary\r\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\r\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\r\n            this.imgControl.enqueue(this.args.sprite);\r\n        }\r\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\r\n        if(this.imgControl === undefined) return;\r\n        const realPoint = this.getWeaponLocation(ship);\r\n        let realRot = this.getWeaponCurrentAngle(ship);\r\n        this.imgControl.render(ctx, realPoint, realRot);\r\n        this.effects.draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\r\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\r\n\r\nexport interface IWeaponGroupArgs {\r\n    timer: IWeaponTimingArgs,\r\n    weapons: IWeaponArgs[],\r\n    burstAll?: boolean\r\n}\r\n\r\nexport class WeaponGroup {\r\n    burstAllWeapons: boolean;\r\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\r\n        this.burstAllWeapons = burstAllWeapons ?? true;\r\n    }\r\n\r\n    /** Call once per tick, makes all turrets attempt to acquire targets\r\n     * @returns the number of weapons which have acquired targets\r\n     */\r\n    acquireTargets(ship: Ship, targets: Ship[]): number {\r\n        let acqCount = 0;\r\n        for(let i = 0; i < this.weapons.length; i++){\r\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\r\n                acqCount++;\r\n            }\r\n        }\r\n        return acqCount;\r\n    }\r\n\r\n    tick(gs: GameState, self: Ship) {\r\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\r\n        const acq = this.acquireTargets(self, targets);\r\n\r\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\r\n    }\r\n\r\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\r\n        if(!this.burstAllWeapons) {\r\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\r\n        } else {\r\n            for(let i = 0; i < this.weapons.length; i++) {\r\n                this.weapons[i].shoot(gs, ship);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\r\n        for(let i = 0; i < this.weapons.length; i++) {\r\n            this.weapons[i].render(ctx, self);\r\n        }\r\n    }\r\n}","export interface IWeaponTimingArgs {\r\n    reloadTime: number;\r\n\r\n    burstCount: number;\r\n    burstDelay: number;\r\n\r\n    shotsPerBurst: number;\r\n}\r\n\r\nexport class WeaponTimer implements IWeaponTimingArgs {\r\n    public reloadTime: number; \r\n    public burstCount: number;\r\n    public burstDelay: number; \r\n    public shotsPerBurst: number;\r\n\r\n    private currentlyShooting: boolean;\r\n\r\n    public currentReload: number;\r\n    public currentBurstDelay: number;\r\n    public currentBurstIndex: number;\r\n\r\n    constructor(args: IWeaponTimingArgs) {\r\n        Object.assign(this, args);\r\n        this.currentlyShooting = false;\r\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\r\n    }\r\n\r\n    isShooting(): boolean {\r\n        return this.currentlyShooting;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this.currentlyShooting && this.currentReload === 0;\r\n    }\r\n\r\n    shoot(): boolean {\r\n        if(this.canShoot()){\r\n            this.currentlyShooting = true;\r\n            this.currentReload = this.reloadTime;\r\n            this.currentBurstDelay = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\r\n        if(shouldShoot) this.shoot();\r\n        if(this.currentlyShooting) {\r\n            if(this.currentBurstDelay === 0) {\r\n                // Fire burst\r\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\r\n                    onShoot(this.currentBurstIndex, shell);\r\n                }\r\n                this.currentBurstIndex++;\r\n                if(this.currentBurstIndex === this.burstCount) {\r\n                    // Done burst! Reset and start reload\r\n                    this.currentReload = this.reloadTime;\r\n                    this.currentBurstIndex = 0;\r\n                    this.currentlyShooting = false;\r\n                } else {\r\n                    this.currentBurstDelay = this.burstDelay;\r\n                }\r\n            } else {\r\n                // Timedown for burst\r\n                this.currentBurstDelay --;\r\n            }\r\n        } else if (this.currentReload !== 0) {\r\n            // Timedown for reload\r\n            this.currentReload--;\r\n        }\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { Weapon } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\r\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public weapons: IWeaponGroupArgs[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(\r\n            this,\r\n            position,\r\n            rotation ?? 0,\r\n            this.buildAi(),\r\n            team,\r\n            this.weapons.map(\r\n                jsonWeaponGroup => new WeaponGroup(\r\n                    new WeaponTimer(jsonWeaponGroup.timer),\r\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\r\n                    jsonWeaponGroup.burstAll\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n","import Point from \"../../common/position/Point\";\r\n\r\nexport interface IDebugMarker {\r\n    draw(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class DebugPoint implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugCross implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\r\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugPlus implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y - radius);\r\n        ctx.lineTo(this.point.x, this.point.y + radius);\r\n        ctx.moveTo(this.point.x - radius, this.point.y);\r\n        ctx.lineTo(this.point.x + radius, this.point.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugRay implements IDebugMarker {\r\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\r\n        ctx.lineTo(tgt.x, tgt.y)\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugLine implements IDebugMarker {\r\n    constructor(public point: Point, public point2: Point, public color?: string) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        ctx.lineTo(this.point2.x, this.point2.y)\r\n        ctx.stroke();\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\r\n\r\nexport abstract class ShipAI {\r\n    markers: IDebugMarker[];\r\n    doDebug: boolean;\r\n    constructor(args ?: { debug?: boolean }) {\r\n        this.markers = [];\r\n        this.doDebug = args?.debug ?? false;\r\n    }\r\n\r\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n\r\n    debug(debug: IDebugMarker) {\r\n        if(!this.doDebug) return;\r\n        this.markers.push(debug);\r\n    }\r\n    debugPoint(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPoint(pt, color, radius));\r\n    }\r\n    debugCross(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugCross(pt, color, radius));\r\n    }\r\n    debugPlus(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPlus(pt, color, radius));\r\n    }\r\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\r\n        this.debug(new DebugRay(pt, angle, color, dist));\r\n    }\r\n    debugLine(pt: Point, pt2: Point, color?:string) {\r\n        this.debug(new DebugLine(pt, pt2, color));\r\n    }\r\n\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\r\n        if(this.markers.length === 0) return;\r\n        for(let i = 0; i < this.markers.length; i++) {\r\n            this.markers[i].draw(ctx);\r\n        }\r\n        this.markers = [];\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\r\nimport { IShipAI } from \"./IShipAI\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport interface IBroadsideAiArgs {\r\n    minDistance: number,\r\n    maxDistance: number,\r\n    orbitSpeed: number,\r\n    debug: boolean\r\n}\r\nconst defaultArgs = {\r\n    minDistance: 100,\r\n    maxDistance: 500,\r\n    orbitSpeed: 0.5,\r\n    debug: false,\r\n}\r\nexport default class BroadsideAI extends ShipAI {\r\n    private args: IBroadsideAiArgs;\r\n    constructor(args: Partial<IBroadsideAiArgs>) {\r\n        super(args);\r\n        this.args = { ...defaultArgs, ...args };\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const targetLocation = gs.Player.position;\r\n        const toLocation = Point.subtract(targetLocation, ship.position);\r\n        const currentHeading = ship.rotation;\r\n        const inwardHeading = toLocation.Direction();\r\n        const tangentHeadings = [\r\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\r\n            Angle.normalize(inwardHeading + (Math.PI / 2))\r\n        ];\r\n\r\n        if(toLocation.LengthSq() < this.args.minDistance * this.args.minDistance) {\r\n            const fleeHeadings = [\r\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\r\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\r\n            ];\r\n            const orbitDist = this.args.minDistance;\r\n            // Run away, but look for a tangent\r\n            this.debugPoint(targetLocation, 'orange', orbitDist);\r\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugLine(ship.position, tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else if (toLocation.LengthSq() > this.args.maxDistance * this.args.maxDistance) {\r\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\r\n            // Close the gap\r\n            this.debugPoint(targetLocation, undefined, orbitDist);\r\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugPoint(tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else {\r\n            // Orbit\r\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\r\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\r\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\r\n            return { \r\n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \r\n                tgtHeading: betterHeading\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\r\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\r\n    let minHeading = relativeHeadings[0];\r\n    let actualTarget = targetHeadings[0];\r\n    for(let i = 1; i < relativeHeadings.length; i++) {\r\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\r\n            minHeading = relativeHeadings[i];\r\n            actualTarget = targetHeadings[i];\r\n        }\r\n    }\r\n    return actualTarget;\r\n}","import Angle from \"../../common/Angle\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport default class FigherAI extends ShipAI {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\r\n        var target = nearest[0];\r\n\r\n        if(target === undefined) {\r\n            // Nothing to do, no ships.\r\n            return {tgtHeading: 0, tgtVel: 0};\r\n        }\r\n\r\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\n\r\nexport interface IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\r\n}\r\n\r\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\r\n    fighter: (args) => new FigherAI(),\r\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\r\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\r\n\r\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\r\n    return {\r\n        timer: json.timer,\r\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\r\n        burstAll: json.burstAll\r\n    }\r\n}\r\n\r\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\r\n    if(isWeapon(json)) {\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(json.sprite !== undefined) {\r\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: json.turret,\r\n            acquisitionAngle: json.acquisitionAngle,\r\n            minRange: json.minRange,\r\n            range: json.range\r\n        };\r\n    }\r\n    else {\r\n        const def = defs[json.definition];\r\n        if(def === undefined) {\r\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\r\n        }\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(def.sprite !== undefined) {\r\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: def.turret,\r\n            acquisitionAngle: def.acquisitionAngle,\r\n            minRange: def.minRange,\r\n            range: def.range\r\n        };\r\n    }\r\n}\r\n\r\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\r\n    return (<any>json).range !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { ShipDefinition } from \"./ShipDefinition\";\r\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\r\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\nimport { AllAIGenerators } from \"../ai/IShipAI\";\r\nimport { IWeaponArgs } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\r\nimport INamedCollection from \"../../common/INamedCollection\";\r\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\r\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\r\n\r\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\r\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\r\n    for(let key in json.animations) {\r\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\r\n    }\r\n    return json.ships.map(def => \r\n        parseShipDefinition(def, animationData, imgAtlases)\r\n    );\r\n}\r\n\r\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\r\n\r\n        parsedFlares.push(new FlareDefinition(\r\n            animation,\r\n            parseJsonPoint(flare.offset),\r\n            parseJsonAngle(flare.rotation),\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    const aiFunc = AllAIGenerators[def.ai];\r\n    const aiGen = () => aiFunc(def.aiParams);\r\n\r\n    return new ShipDefinition(\r\n        imgAtlases[def.sprite.file],\r\n        parseJsonPoint(def.size),\r\n        parseJsonPoint(def.sprite.srcOffset),\r\n        parseJsonPoint(def.sprite.srcSize),\r\n        parseJsonPoint(def.sprite.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        def.weaponGroups.map(group => \r\n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\r\n        aiGen\r\n    );\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\r\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\r\nimport INamedCollection from '../common/INamedCollection';\r\n\r\nlet atlases: INamedCollection<SpriteAtlas>;\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    atlases = {\r\n        \"Ships\": shipAtlas,\r\n        \"Flares\": flareAtlas\r\n    };\r\n\r\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\r\n}\r\n\r\nfunction loadJson(entitySheet: SpriteSheet){\r\n    import(\r\n        /* webpackChunkName: \"bullets-ship-definitions\" */\r\n        './data/shipDefinitions.json'\r\n    ).then(value => {\r\n        console.log('Got shipDefinitions.json');\r\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\r\n        onLoadDone(entitySheet, definitions);\r\n    });\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\r\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.Multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}"],"sourceRoot":""}