{"version":3,"file":"704.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/recurshooter/map/MapObstruction.ts","webpack://trading-game/./src/projects/recurshooter/map/MapInfo.ts","webpack://trading-game/./src/projects/recurshooter/RunGameScreen.ts","webpack://trading-game/./src/projects/recurshooter/Runner.ts","webpack://trading-game/./src/views/projects/recurshooter/RecursiveShooterComponent.tsx"],"sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from \"../../common/position/Point\";\r\n\r\nexport default class MapObstruction {\r\n    constructor(public bounds: Point[], public blockMove: boolean, public blockBullets: boolean) {\r\n\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport MapObstruction from \"./MapObstruction\";\r\n\r\nexport class MapInfo {\r\n    constructor(public recursePosition: { center: Point, scale: number, rotation: number }, public obstructions: MapObstruction[]) {\r\n    }\r\n}\r\n\r\nconst defaultMap = new MapInfo(\r\n    { center: new Point(400, 300), scale: 0.25, rotation: 0},\r\n    [\r\n        new MapObstruction([new Point(0, 0), new Point(100, 0), new Point(100, 600), new Point(0, 600)], true, true),\r\n        new MapObstruction([new Point(700, 0), new Point(800, 0), new Point(800, 600), new Point(700, 600)], true, true),\r\n    ]\r\n);\r\nexport default defaultMap;","import { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport IScreen from \"./IScreen\";\r\nimport {MapInfo} from \"./map/MapInfo\";\r\n\r\nconst USE_CACHED_RENDER = true;\r\n\r\nexport default class RunGameScreen implements IScreen {\r\n\r\n    private offscreenCanvas: HTMLCanvasElement;\r\n    private offscreenCtx: CanvasRenderingContext2D;\r\n\r\n    private recursionArgs: {\r\n        offset: Point,\r\n        rotation: number,\r\n        scale: number\r\n    };\r\n\r\n    constructor(private map: MapInfo) {\r\n    }\r\n\r\n    update(): void {\r\n        \r\n    }\r\n\r\n    initOffscreenCanvas(canvas: HTMLCanvasElement) {\r\n        this.offscreenCanvas = document.createElement('canvas');\r\n        ResizeCanvas(this.offscreenCanvas, canvas.width, canvas.height);\r\n        this.offscreenCtx = this.offscreenCanvas.getContext('2d');\r\n    }\r\n    \r\n    draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D): void {\r\n        if(this.offscreenCanvas === null || this.offscreenCanvas === undefined)\r\n            this.initOffscreenCanvas(canvas);\r\n        if(USE_CACHED_RENDER)\r\n            this.renderWorld(this.offscreenCanvas, this.offscreenCtx);\r\n        ctx.save();\r\n        this.recursiveRender(this.offscreenCanvas, canvas, ctx);\r\n        ctx.restore();\r\n    }\r\n\r\n    recursiveRender(src: HTMLCanvasElement, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < 8; i++){\r\n            if(USE_CACHED_RENDER)\r\n                ctx.drawImage(src, 0, 0, canvas.width, canvas.height);\r\n            else\r\n                this.renderWorld(canvas, ctx);\r\n            ctx.translate(-400, -300);\r\n            ctx.scale(this.map.recursePosition.scale, this.map.recursePosition.scale);\r\n            ctx.rotate(this.map.recursePosition.rotation);\r\n\r\n            const tgtPoint = this.map.recursePosition.center.rotate(-this.map.recursePosition.rotation).MultWith(1/this.map.recursePosition.scale, 1/this.map.recursePosition.scale);\r\n\r\n            ctx.translate(tgtPoint.x, tgtPoint.y);\r\n        }\r\n    }\r\n\r\n    renderWorld(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, 800, 600);\r\n        ctx.beginPath();\r\n        for(const obstruction of this.map.obstructions) {\r\n            ctx.moveTo(obstruction.bounds[0].x, obstruction.bounds[0].y);\r\n            for(let i = 1; i <= obstruction.bounds.length; i++) {\r\n                ctx.lineTo(obstruction.bounds[i % obstruction.bounds.length].x, obstruction.bounds[i % obstruction.bounds.length].y);\r\n            }\r\n        }\r\n        ctx.fillStyle = '#006';\r\n        ctx.strokeStyle = 'blue';\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n}","import { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport IScreen from \"./IScreen\";\r\nimport defaultMap from \"./map/MapInfo\";\r\nimport RunGameScreen from \"./RunGameScreen\";\r\n\r\nexport default class Runner {\r\n    ctx: CanvasRenderingContext2D;\r\n    private repaintTimer: number;\r\n    private screen: IScreen;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        ResizeCanvas(canvas, 800, 600);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.repaintTimer = -1;\r\n\r\n        this.screen = new RunGameScreen(defaultMap);\r\n    }\r\n\r\n    start() {\r\n        this.runTick();\r\n    }\r\n\r\n    private runTick() {\r\n        this.tick();\r\n        this.repaintTimer = requestAnimationFrame(this.runTick.bind(this));\r\n    }\r\n\r\n    tick() {\r\n        this.screen.update(s => {\r\n            this.screen = s;\r\n        });\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.screen.draw(this.canvas, this.ctx);\r\n        this.ctx.restore();\r\n    }\r\n\r\n    stop() {\r\n        if(this.repaintTimer !== -1) {\r\n            cancelAnimationFrame(this.repaintTimer);\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport Runner from '../../../projects/recurshooter/Runner';\r\n\r\nexport default function RecursiveShooterComponent() {\r\n    const ref = React.useRef<HTMLCanvasElement>();\r\n    React.useEffect(()=>{\r\n        const runner = new Runner(ref.current);\r\n        runner.start();\r\n        return ()=>runner.stop();\r\n    }, [ref.current]);\r\n    return <canvas ref={ref} />;\r\n}\r\n"],"names":["Point","constructor","x","y","angle","distance","Math","cos","sin","LengthSq","Dot","this","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","Direction","atan2","AddWith","nx","ny","splitArgs","MultWith","undefined","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","rotate","theta","fromAngle","MapObstruction","bounds","blockMove","blockBullets","recursePosition","obstructions","center","scale","rotation","RunGameScreen","map","update","initOffscreenCanvas","canvas","offscreenCanvas","document","createElement","width","height","offscreenCtx","getContext","draw","ctx","renderWorld","save","recursiveRender","restore","i","drawImage","translate","tgtPoint","fillStyle","fillRect","beginPath","obstruction","moveTo","lineTo","strokeStyle","fill","stroke","Runner","repaintTimer","screen","start","runTick","tick","requestAnimationFrame","bind","s","stop","cancelAnimationFrame","RecursiveShooterComponent","ref","runner","current"],"sourceRoot":""}