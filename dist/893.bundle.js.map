{"version":3,"file":"893.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/HexWorld.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const MAP_SIZE = 6;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);","export default __webpack_public_path__ + \"81cce123ff2af92952a4c56e73756c3e.png\";","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\n\r\nexport default class Assets {\r\n    tiles: SpriteSheet;\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n    }\r\n\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport HexWorld from \"./HexWorld\";\r\nimport * as C from \"./Constants\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: HexWorld, pt: Point): void;\r\n    abstract Draw(ctx: CanvasRenderingContext2D, assets: Assets, world: HexWorld, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n    public spriteSheetTilePosition: Point;\r\n\r\n    constructor(typeId: number, spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n        this.spriteSheetTilePosition = spriteSheetPosition;\r\n    }\r\n\r\n    override AfterWorldLoad(world: HexWorld, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override Draw(ctx: CanvasRenderingContext2D, assets: Assets, world: HexWorld, pt: Point): void {\r\n        assets.tiles.render(\r\n            ctx,\r\n            pt.x * C.PIX_PER_CELL_X + (pt.y * C.PIX_PER_CELL_Y.x) + C.MAP_CENTER_POSITION.x,\r\n            (pt.y * C.PIX_PER_CELL_Y.y) + C.MAP_CENTER_POSITION.y,\r\n            C.TILE_WIDTH,\r\n            C.TILE_HEIGHT,\r\n            this.spriteSheetTilePosition.x,\r\n            this.spriteSheetTilePosition.y\r\n        )\r\n    }\r\n}\r\n\r\nexport class Floor extends SimpleCell {\r\n    constructor() {\r\n        super(0, new Point(0,0), true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n\r\nexport class Lava extends SimpleCell {\r\n    constructor() {\r\n        super(1, new Point(1,0), false);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n        if(!entity.isFlying)\r\n            entity.TakeDamage(999);\r\n    }\r\n}\r\n\r\nexport class DownStairs extends SimpleCell {\r\n    constructor() {\r\n        super(2, new Point(5, 0), true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport HexCell, { Floor, Lava } from \"./HexCell\";\r\n\r\nexport default class HexWorld {\r\n\r\n    cells: HexCell[][] = [];\r\n\r\n    constructor(public size: number) {\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: HexCell[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                let cell = new Floor();\r\n                row.push(cell);\r\n            }\r\n            this.cells.push(row);\r\n        }\r\n\r\n        for(let dy = -size+1; dy <= size-1; dy++) {\r\n            const row = this.size - 1 + dy;\r\n            const rowLength = this.size * 2 - 1 - Math.abs(dy);\r\n            const firstX = -Math.min(row, this.size - 1);\r\n            for(let dx = 0; dx < rowLength; dx++) {\r\n                let [x, y] = this.coordsToArray(dx + firstX, dy);\r\n                let cell = this.cells[y][x];\r\n                cell.AfterWorldLoad(this, new Point(dx + firstX, dy));\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, assets: Assets) {\r\n        for(let dy = -this.size+1; dy <= this.size-1; dy++) {\r\n            const row = this.size - 1 + dy;\r\n            const rowLength = this.size * 2 - 1 - Math.abs(dy);\r\n            const firstX = -Math.min(row, this.size - 1);\r\n            for(let dx = 0; dx < rowLength; dx++) {\r\n                let [x, y] = this.coordsToArray(dx + firstX, dy);\r\n                let cell = this.cells[y][x];\r\n\r\n                cell.Draw(ctx, assets, this, new Point(dx + firstX, dy));\r\n            }\r\n        }\r\n    }\r\n\r\n    private coordsToArray(x: number, y: number): [number, number] {\r\n        const row = this.size - 1 + y;\r\n        const rowLength = this.size * 2 - 1 - Math.abs(y);\r\n        const firstX = -Math.min(row, this.size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport HexWorld from './HexWorld';\r\n\r\nexport default function Run(): (()=>void) {\r\n    let ctx: CanvasRenderingContext2D;\r\n    \r\n    let keys: KeyboardManager;\r\n    let scaleHelper: NearestNeighborScalingHelper;\r\n    \r\n    const assetLoader = new AssetLoader();\r\n    const assets = new Assets(assetLoader);\r\n\r\n    let world: HexWorld;\r\n\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n    \r\n    function assetLoadDone() {\r\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n        ctx = canvas.getContext('2d');\r\n        scaleHelper = new NearestNeighborScalingHelper(\r\n            canvas, \r\n            ctx, \r\n            C.MAP_PIXEL_SIZE, \r\n            C.MAP_PIXEL_SIZE, \r\n            true, \r\n            () => { return; }\r\n        );\r\n        world = new HexWorld(C.MAP_SIZE);\r\n        tick();\r\n    }\r\n    \r\n    function tick() {\r\n        NearestNeighborScaling(ctx);\r\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        world.draw(ctx, assets);\r\n\r\n\r\n        requestAnimationFrame(() => tick());\r\n    }\r\n\r\n    return (() => scaleHelper.Detatch());\r\n}\r\n","import * as React from 'react';\r\nimport Run from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>Run());\r\n    return <div className='rpgt rpgt_body full_body center'>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Point","x","y","angle","distance","Math","cos","sin","lengthSq","dot","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","direction","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","rotate","theta","fromAngle","PIX_PER_CELL_Y","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","Floor","typeId","pathable","isPathable","spriteSheetPosition","super","spriteSheetTilePosition","AfterWorldLoad","world","pt","Draw","ctx","assets","render","OnEntityStep","entity","HexWorld","size","cells","midRowLength","dy","row","dx","abs","cell","rowLength","firstX","coordsToArray","draw","Run","scaleHelper","assetLoader","AssetLoader","tick","clearRect","fillStyle","fillRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","id"],"sourceRoot":""}