{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/ant-colony/AntPath.ts","webpack:///./src/projects/ant-colony/ColonyState.ts","webpack:///./src/projects/ant-colony/index.ts","webpack:///./src/views/projects/ant-colony/AntColonyComponent.tsx"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","src","a","b","sy","undefined","p","min","max","theta","fromAngle","AntPath","path","cost","state","signalPower","distPower","start","hitmap","pathCost","index","i","points","length","push","next","runStep","pathWeights","weightSum","weight","pow","randomChoice","random","pts","initSignals","signals","distances","maxDist","from","row","distRow","to","dist","subtract","j","mult","value","i1","i2","isNaN","point","currentPaintLoop","Run","settings","cvs","totalMinPath","clearTimeout","ctx","getContext","paintLoop","canvas","minPath","ants","numAnts","runPath","distancePower","multWeights","signalDecay","maxSignalGain","shortestPath","ant","longestPath","antWeight","addWeights","tick","currentBestPath","globalBestPath","drawPoints","strokeStyle","beginPath","lineWidth","moveTo","lineTo","stroke","draw","setTimeout","delayPerFrame","numPts","floor","width","height","init","fillStyle","fillRect","clientWidth","clientHeight","ellipse","PI","fill","AntColonyComponent","ref","setState","current","className","id","AntColonyValueSliderComponent","label","onChange","v","step","type","props","ev","target","valueAsNumber"],"mappings":"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","file":"13.bundle.js","sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}","import { ColonyState } from \"./ColonyState\";\r\n\r\nexport class AntPath {\r\n    constructor(public path: number[], public cost: number) {\r\n\r\n    }\r\n\r\n    static runPath(state: ColonyState, signalPower: number, distPower: number, start: number) {\r\n        const hitmap = [];\r\n        const path = [start];\r\n        let pathCost = 0;\r\n        let index = start;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            hitmap.push(i === start);\r\n        }\r\n\r\n        for(let i = 0; i < state.points.length - 1; i++) {\r\n            let next = this.runStep(state, signalPower, distPower, hitmap, index);\r\n            pathCost += state.distance(index, next);\r\n            path.push(next);\r\n            index = next;\r\n            hitmap[next] = true;\r\n        }\r\n\r\n        return new AntPath(path, pathCost);\r\n    }\r\n\r\n    static runStep(state: ColonyState, signalPower: number, distPower: number, hitmap: boolean[], index: number) {\r\n        let pathWeights = [];\r\n        let weightSum = 0;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            if(index === i || hitmap[i]) pathWeights[i] = 0;\r\n            else {\r\n                let weight = Math.pow(1/state.distance(index, i), distPower) * Math.pow(state.weight(index, i), signalPower);\r\n                pathWeights.push( weight );\r\n                weightSum += weight;\r\n            }\r\n        }\r\n        let randomChoice = Math.random() * weightSum;\r\n        for(let i = 0; i < pathWeights.length; i++) {\r\n            if(hitmap[i]) continue;\r\n            randomChoice -= pathWeights[i];\r\n            if(randomChoice <= 0) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport class ColonyState {\r\n    public points: Point[];\r\n    public signals: number[][];\r\n    public distances: number[][];\r\n    public maxDist: number;\r\n\r\n    constructor(pts: Point[])\r\n    {\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    private initSignals () {\r\n        this.signals = [];\r\n        this.distances = [];\r\n\r\n        this.maxDist = 0;\r\n        for(let from = 0; from < this.points.length; from++){\r\n            let row = [];\r\n            let distRow = [];\r\n            for(let to = from + 1; to < this.points.length; to++){\r\n                row.push(1);\r\n                let dist = Point.subtract(this.points[from], this.points[to]).Length();\r\n                distRow.push(dist);\r\n                if(dist > this.maxDist) this.maxDist = dist;\r\n            }\r\n            this.signals.push(row);\r\n            this.distances.push(distRow);\r\n        }\r\n    }\r\n\r\n    setPoints(pts: Point[]){\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    clearWeights() {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    multWeights(mult: number) {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] *= mult;\r\n            }\r\n        }\r\n    }\r\n\r\n    addWeights(path: number[], weight: number) {\r\n        for(let i = 0; i < path.length; i++) {\r\n            let j = (i + 1) % path.length;\r\n            this.weight(path[i], path[j], Math.max(0, Math.min(1, this.weight(path[i], path[j]) + weight)));\r\n        }\r\n    }\r\n\r\n    weight(from: number, to: number): number;\r\n    weight(from: number, to: number, value: number): void;\r\n    weight(from: number, to: number, value?: number): number | void {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        if(value === undefined) {\r\n            return this.signals[i1][i2];\r\n        }\r\n        else {\r\n            if(isNaN(value)) throw \"WHAT\";\r\n            this.signals[i1][i2] = value;\r\n        }\r\n    }\r\n\r\n    distance(from: number, to: number): number {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        return this.distances[i1][i2];\r\n    }\r\n\r\n    point(index: number): Point;\r\n    point(index: number, point: Point) : void;\r\n    point(index: number, point ?: Point) : void | Point {\r\n        if(point === undefined) return this.points[index];\r\n        this.points[index] = point;\r\n    }\r\n}","import { findMax, findMin, max, min } from \"../../LinqLike\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport { AntPath } from \"./AntPath\";\r\nimport { ColonyState } from \"./ColonyState\";\r\nimport { IRenderSettings } from \"./IRenderSettings\";\r\nlet currentPaintLoop = -1;\r\n\r\n\r\nexport default function Run(settings: IRenderSettings, cvs: HTMLCanvasElement) {\r\n    stopPaintLoop();\r\n    ResizeCanvas(cvs, 800, 600);\r\n    const ctx = cvs.getContext('2d');\r\n\r\n    let state = init(cvs, ctx, settings.numPts);\r\n    paintLoop(cvs, ctx, settings, state);\r\n}\r\n\r\nfunction stopPaintLoop() {\r\n    totalMinPath = null;\r\n    if(currentPaintLoop !== -1)\r\n        clearTimeout(currentPaintLoop);\r\n}\r\n\r\nlet totalMinPath: AntPath | null = null;\r\nfunction paintLoop(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, settings: IRenderSettings, state: ColonyState) {\r\n    const minPath = tick(settings, state);\r\n    if(totalMinPath === null || minPath.cost < totalMinPath.cost)\r\n        totalMinPath = minPath;\r\n    draw(canvas, ctx, state, minPath.path, totalMinPath.path);\r\n    // TS thinks setTimeout returns a NodeJS.Timeout (?)\r\n    currentPaintLoop = <number><any>setTimeout(() => paintLoop(canvas, ctx, settings, state), settings.delayPerFrame);\r\n}\r\n\r\nfunction tick(settings: IRenderSettings, state: ColonyState): AntPath {\r\n    let ants = [];\r\n    for(let i = 0; i < settings.numAnts; i++) {\r\n        ants.push(AntPath.runPath(state, settings.signalPower, settings.distancePower, 0));\r\n    }\r\n\r\n    state.multWeights(settings.signalDecay);\r\n\r\n    let maxSignalGain = 1 / settings.numAnts;\r\n    let shortestPath = findMin(ants, ant => ant.cost);\r\n    let longestPath = max(ants, ant => ant.cost);\r\n    for(const ant of ants) {\r\n        let antWeight: number;\r\n        if(shortestPath.cost === longestPath)\r\n            antWeight = 1;\r\n        else \r\n            antWeight = 1 - ((ant.cost - shortestPath.cost) / (longestPath - shortestPath.cost));\r\n        state.addWeights(ant.path, antWeight * maxSignalGain);\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction init(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, numPts: number): ColonyState {\r\n    const points = [];\r\n    for(let i = 0; i < numPts; i++) {\r\n        points.push(new Point(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height)));\r\n    }\r\n    drawPoints(canvas, ctx, points);\r\n    let state = new ColonyState(points);\r\n    return state;\r\n}\r\n\r\nfunction drawPoints(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, points: Point[]) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    ctx.fillStyle = '#aaa';\r\n    ctx.beginPath();\r\n    for(let i = 0; i < points.length; i++) {\r\n        const point = points[i];\r\n        ctx.moveTo(point.x, point.y);\r\n        ctx.ellipse(point.x, point.y, 3, 3, 0, 0, Math.PI * 2);\r\n    }\r\n    ctx.fill();\r\n}\r\n\r\nfunction draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: ColonyState, currentBestPath?: number[], globalBestPath?: number[]) {\r\n    drawPoints(canvas, ctx, state.points);\r\n    ctx.strokeStyle = '#aaa';\r\n    for(let i = 0; i < state.points.length; i++) {\r\n        for(let j = 0; j < state.points.length; j++) {\r\n            if(i === j) continue;\r\n            ctx.beginPath();\r\n            ctx.lineWidth = state.weight(i, j) * 5;\r\n            ctx.moveTo(state.point(i).x, state.point(i).y);\r\n            ctx.lineTo(state.point(j).x, state.point(j).y);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'green';\r\n    if(currentBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(currentBestPath[0]).x, state.point(currentBestPath[0]).y);\r\n        for(let i = 1; i < currentBestPath.length; i++) {\r\n            ctx.lineTo(state.point(currentBestPath[i]).x, state.point(currentBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'red';\r\n    if(globalBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(globalBestPath[0]).x, state.point(globalBestPath[0]).y);\r\n        for(let i = 1; i < globalBestPath.length; i++) {\r\n            ctx.lineTo(state.point(globalBestPath[i]).x, state.point(globalBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport Run from '../../../projects/ant-colony/index';\r\nimport { IRenderSettings } from '../../../projects/ant-colony/IRenderSettings';\r\n\r\nexport default function AntColonyComponent() {\r\n    let ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    let [state, setState] = React.useState<IRenderSettings>({\r\n        numPts: 100,\r\n        signalDecay: 0.7,\r\n        signalPower: 1.2,\r\n        distancePower: 4,\r\n        delayPerFrame: 6,\r\n        numAnts: 30,\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        Run(state, ref.current);\r\n    }, [state, ref]);\r\n\r\n    return <div className='flex row'>\r\n        <canvas id='canvas' ref={ref} />\r\n        <div className='flex col'>\r\n            <AntColonyValueSliderComponent label='Number of Points: ' value={state.numPts} onChange={v => setState({...state, numPts: v})} min={3} max={200} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Number of Ants: ' value={state.numAnts} onChange={v => setState({...state, numAnts: v})} min={1} max={100} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Signal Decay: ' value={state.signalDecay} onChange={v => setState({...state, signalDecay: v})} min={0} max={1} step={0.1} type='float' />\r\n            <AntColonyValueSliderComponent label='Signal Power: ' value={state.signalPower} onChange={v => setState({...state, signalPower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Distance Power: ' value={state.distancePower} onChange={v => setState({...state, distancePower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Delay per Frame: ' value={state.delayPerFrame} onChange={v => setState({...state, delayPerFrame: v})} min={6} max={600} step={30} type='number' />\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction AntColonyValueSliderComponent(props: {label: string, value: number, onChange: (value: number) => void, min: number, max: number, step: number, type: 'float' | 'number'}) {\r\n    return <div>\r\n        <label>{props.label}</label>\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type='range' min={props.min} max={props.max} step={props.step} />\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type={props.type} min={props.min} max={props.max} />\r\n    </div>;\r\n}"],"sourceRoot":""}