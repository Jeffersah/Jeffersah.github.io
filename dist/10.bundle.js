(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{74:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var a={},l=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=l?Object.getOwnPropertyDescriptor(e,n):null;r&&(r.get||r.set)?Object.defineProperty(a,n,r):a[n]=e[n]}a.default=e,t&&t.set(e,a);return a}(a(0)),n=o(a(16)),r=o(a(77));function o(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(e){var a,l,n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l=this,(a=!(n=u(t).call(this,e))||"object"!==i(n)&&"function"!=typeof n?m(l):n).state={selected:a.parseValue(e.value,e.options)||{label:void 0===e.placeholder?"Select...":e.placeholder,value:""},isOpen:!1},a.mounted=!0,a.handleDocumentClick=a.handleDocumentClick.bind(m(a)),a.fireChangeEvent=a.fireChangeEvent.bind(m(a)),a}var a,o,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),a=t,(o=[{key:"componentWillReceiveProps",value:function(e){if(e.value){var t=this.parseValue(e.value,e.options);t!==this.state.selected&&this.setState({selected:t})}else this.setState({selected:{label:void 0===e.placeholder?"Select...":e.placeholder,value:""}})}},{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick,!1),document.addEventListener("touchend",this.handleDocumentClick,!1)}},{key:"componentWillUnmount",value:function(){this.mounted=!1,document.removeEventListener("click",this.handleDocumentClick,!1),document.removeEventListener("touchend",this.handleDocumentClick,!1)}},{key:"handleMouseDown",value:function(e){this.props.onFocus&&"function"==typeof this.props.onFocus&&this.props.onFocus(this.state.isOpen),"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this.props.disabled||this.setState({isOpen:!this.state.isOpen}))}},{key:"parseValue",value:function(e,t){var a;if("string"==typeof e)for(var l=0,n=t.length;l<n;l++)if("group"===t[l].type){var r=t[l].items.filter((function(t){return t.value===e}));r.length&&(a=r[0])}else void 0!==t[l].value&&t[l].value===e&&(a=t[l]);return a||e}},{key:"setValue",value:function(e,t){var a={selected:{value:e,label:t},isOpen:!1};this.fireChangeEvent(a),this.setState(a)}},{key:"fireChangeEvent",value:function(e){e.selected!==this.state.selected&&this.props.onChange&&this.props.onChange(e.selected)}},{key:"renderOption",value:function(e){var t,a=e.value;void 0===a&&(a=e.label||e);var n=e.label||e.value||e,o=a===this.state.selected.value||a===this.state.selected,s=(h(t={},"".concat(this.props.baseClassName,"-option"),!0),h(t,e.className,!!e.className),h(t,"is-selected",o),t),i=(0,r.default)(s);return l.default.createElement("div",{key:a,className:i,onMouseDown:this.setValue.bind(this,a,n),onClick:this.setValue.bind(this,a,n),role:"option","aria-selected":o?"true":"false"},n)}},{key:"buildMenu",value:function(){var e=this,t=this.props,a=t.options,n=t.baseClassName,r=a.map((function(t){if("group"===t.type){var a=l.default.createElement("div",{className:"".concat(n,"-title")},t.name),r=t.items.map((function(t){return e.renderOption(t)}));return l.default.createElement("div",{className:"".concat(n,"-group"),key:t.name,role:"listbox",tabIndex:"-1"},a,r)}return e.renderOption(t)}));return r.length?r:l.default.createElement("div",{className:"".concat(n,"-noresults")},"No options found")}},{key:"handleDocumentClick",value:function(e){this.mounted&&(n.default.findDOMNode(this).contains(e.target)||this.state.isOpen&&this.setState({isOpen:!1}))}},{key:"isValueSelected",value:function(){return"string"==typeof this.state.selected||""!==this.state.selected.value}},{key:"render",value:function(){var e,t,a,n,o,s=this.props,i=s.baseClassName,c=s.controlClassName,u=s.placeholderClassName,m=s.menuClassName,d=s.arrowClassName,p=s.arrowClosed,f=s.arrowOpen,g=s.className,y=this.props.disabled?"Dropdown-disabled":"",v="string"==typeof this.state.selected?this.state.selected:this.state.selected.label,w=(0,r.default)((h(e={},"".concat(i,"-root"),!0),h(e,g,!!g),h(e,"is-open",this.state.isOpen),e)),b=(0,r.default)((h(t={},"".concat(i,"-control"),!0),h(t,c,!!c),h(t,y,!!y),t)),E=(0,r.default)((h(a={},"".concat(i,"-placeholder"),!0),h(a,u,!!u),h(a,"is-selected",this.isValueSelected()),a)),k=(0,r.default)((h(n={},"".concat(i,"-menu"),!0),h(n,m,!!m),n)),x=(0,r.default)((h(o={},"".concat(i,"-arrow"),!0),h(o,d,!!d),o)),I=l.default.createElement("div",{className:E},v),S=this.state.isOpen?l.default.createElement("div",{className:k,"aria-expanded":"true"},this.buildMenu()):null;return l.default.createElement("div",{className:w},l.default.createElement("div",{className:b,onMouseDown:this.handleMouseDown.bind(this),onTouchEnd:this.handleMouseDown.bind(this),"aria-haspopup":"listbox"},I,l.default.createElement("div",{className:"".concat(i,"-arrow-wrapper")},f&&p?this.state.isOpen?f:p:l.default.createElement("span",{className:x}))),S)}}])&&c(a.prototype,o),s&&c(a,s),t}(l.Component);p.defaultProps={baseClassName:"Dropdown"};var f=p;t.default=f},77:function(e,t,a){var l;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var a={}.hasOwnProperty;function n(){for(var e=[],t=0;t<arguments.length;t++){var l=arguments[t];if(l){var r=typeof l;if("string"===r||"number"===r)e.push(l);else if(Array.isArray(l)&&l.length){var o=n.apply(null,l);o&&e.push(o)}else if("object"===r)for(var s in l)a.call(l,s)&&l[s]&&e.push(s)}}return e.join(" ")}e.exports?(n.default=n,e.exports=n):void 0===(l=function(){return n}.apply(t,[]))||(e.exports=l)}()},79:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var l=a(0);function n(e,t){const[a,n]=Object(l.useState)(e);return[a,e=>{t(e,a),n(e)}]}},88:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return R}));var l,n=a(0),r=a(74),o=a.n(r);!function(e){e[e.Decorative=0]="Decorative",e[e.Get=1]="Get",e[e.Compare=2]="Compare",e[e.Set=3]="Set",e[e.Swap=4]="Swap",e[e.CSwap=5]="CSwap"}(l||(l={}));var s=l;class i{constructor(e,t,a,l){this.array1=e,this.index1=t,this.array2=a,this.index2=l,this.type="compare",this.complexity=s.Compare}apply(e){}rollback(e){}}class h{constructor(e,t,a,l,n){this.srcArray=e,this.srcIndex=t,this.tgtArray=a,this.tgtIndex=l,this.replacedValue=n,this.type="copy",this.complexity=s.Set}apply(e){this.tgtArray.internalSet(this.tgtIndex,this.srcArray.internalGet(this.srcIndex).value)}rollback(e){this.tgtArray.internalSet(this.tgtIndex,this.replacedValue)}}class c{constructor(e,t,a){this.srcArray=e,this.srcIndex=t,this.tgtArray=a,this.type="push",this.complexity=s.Set}apply(e){this.tgtArray.internalPush(this.srcArray.internalGet(this.srcIndex).value)}rollback(e){this.tgtArray.internalPop()}}class u{constructor(e,t,a,l){this.srcArray=e,this.srcIndex=t,this.tgtArray=a,this.tgtIndex=l,this.type="swap",this.complexity=s.Swap}apply(e){const t=this.srcArray.internalGet(this.srcIndex).value;this.srcArray.internalSet(this.srcIndex,this.tgtArray.internalGet(this.tgtIndex).value),this.tgtArray.internalSet(this.tgtIndex,t)}rollback(e){this.apply(e)}}class m{constructor(e,t,a,l){this.state=e,this.array=t,this.value=a,this.index=l}compare(e){this.state.pushDelta(new i(this.array,this.index,e.array,e.index));const t=this.value-e.value;return 0===t?0:t<0?-1:1}}class d{constructor(e,t,a){this.array=e,this.startingSize=t,this.offset=a,this.type="createSubArray",this.complexity=s.Get}apply(e){this.array.internalFill(new Array(this.startingSize)),e.internalCreateArray(this.array)}rollback(e){e.internalRemoveArray(this.array)}}class p{constructor(e,t){this.array=e,this.endingData=t,this.type="deleteSubArray",this.complexity=s.Get}apply(e){e.internalRemoveArray(this.array)}rollback(e){this.array.internalFill(this.endingData),e.internalCreateArray(this.array)}}class f{constructor(e,t,a,l){this.state=e,this.arrayId=t,this.offset=a,this.data=[];for(let t=0;t<l.length;t++)this.data.push(new m(e,this,l[t],t))}length(){return this.data.length}get(e){return this.data[e]}swap(e,t){this.state.pushDelta(new u(this,e,this,t));const a=this.data[e].value;this.data[e].value=this.data[t].value,this.data[t].value=a}set(e,t){this.state.pushDelta(new h(t.array,t.index,this,e,this.data[e].value)),this.data[e].value=t.value}push(e){this.state.pushDelta(new c(e.array,e.index,this)),this.internalPush(e.value)}getDeleteDelta(){return new p(this,this.data.map(e=>e.value))}internalSet(e,t){this.data[e].value=t}internalPush(e){this.data.push(new m(this.state,this,e,this.data.length))}internalPop(){this.data.pop()}internalSwap(e,t){const a=this.data[e].value;this.data[e].value=this.data[t].value,this.data[t].value=a}internalGet(e){return this.data[e]}internalFill(e){this.data=[];for(let t=0;t<e.length;t++)this.data.push(new m(this.state,this,e[t],t))}}class g{constructor(e){this.initialValue=e,this.deltas=[],this.arrays=[new f(this,0,0,e)],this.maxValue=0;for(const t of e)t>this.maxValue&&(this.maxValue=t);this.nextArrayId=1,this.currentDeltaIndex=0,this.nextDecoratorId=0,this.requiresMemoryAllocation=!1,this.allArrayInfo=[{arrId:0,offset:0,length:e.length}]}pushDelta(e){this.deltas.push(e),this.currentDeltaIndex++}totalDeltas(){return this.deltas.length}deltaIndex(){return this.currentDeltaIndex}remainingStepsFwd(){return this.deltas.length-this.currentDeltaIndex}remainingStepsBack(){return this.currentDeltaIndex}seekTo(e){const t=Math.abs(e-this.currentDeltaIndex),a=e,l=this.deltas.length-e;a<=l&&a<=t&&(this.arrays=[this.arrays[0]],this.arrays[0].internalFill(this.initialValue),this.currentDeltaIndex=0),this.seekToInternal(e)}seekToInternal(e){for(;e>this.currentDeltaIndex;)this.apply();for(;e<this.currentDeltaIndex;)this.rollback()}apply(){if(this.currentDeltaIndex!==this.deltas.length)return this.deltas[this.currentDeltaIndex].apply(this),this.deltas[this.currentDeltaIndex++]}applyUntil(e,t){const a=[];for(let l=0;-1===e||l<e;l++){const e=this.apply();if(void 0===e)return a;if(a.push(e),e.complexity>=t)return a}return a}rollback(){if(0!==this.currentDeltaIndex)return this.deltas[--this.currentDeltaIndex].rollback(this),this.deltas[this.currentDeltaIndex]}rollbackUntil(e,t){const a=[];for(let l=0;-1===e||l<e;l++){const e=this.rollback();if(void 0===e)return a;if(a.push(e),e.complexity>=t)return a}return a}getArray(e){return this.arrays[e]}createArray(e,t){this.requiresMemoryAllocation=!0,this.allArrayInfo.push({arrId:this.nextArrayId,offset:t,length:e});const a=new f(this,this.nextArrayId++,t,new Array(void 0===e?0:e));return this.arrays.push(a),this.deltas.push(new d(a,null!=e?e:0,t)),a}deleteArray(e){this.deltas.push(e.getDeleteDelta()),this.internalRemoveArray(e)}internalCreateArray(e){this.arrays.push(e)}internalRemoveArray(e){for(let t=0;t<this.arrays.length;t++)if(this.arrays[t]===e)return void this.arrays.splice(t,1)}doesRequireMemory(){return this.requiresMemoryAllocation}}var y=a(11),v=a(13);function w(e,t,a,l,n,r){const o=n/t,s=r/e.maxValue;return(e,t)=>{const n=a+Math.floor(o*e),i=Math.floor(s*t);return{x:n,y:l+r-i,height:i}}}var b=a(79);const E=[new class{constructor(){this.name="Bar"}repaintArr(e,t,a,l,n,r,o){const s=n/t.length(),i=Math.max(Math.floor(s),1),h=w(e,t.length(),a,l,n,r);o.fillStyle="#333";for(let e=0;e<t.length();e++){const{x:a,y:l,height:n}=h(e,t.internalGet(e).value);o.fillRect(a,l,i,n)}o.fillStyle="white";for(let e=0;e<t.length();e++){const{x:a,y:n,height:s}=h(e,t.internalGet(e).value);o.fillRect(a,r+l-s-i,i,i)}}repaint(e,t,a,l){var n,r,o,s;t.fillStyle="black",t.fillRect(0,0,e.width,e.height);const i=a.getArray(0),h=e.width/i.length(),c=[],u=[],m={wx:0,wy:0,ww:e.width,wh:a.doesRequireMemory()?Math.floor(.8*e.height):e.height};let d=0;for(const t of a.allArrayInfo){const l=null!==(n=t.offset)&&void 0!==n?n:d,i=null!==(s=null!==(r=t.length)&&void 0!==r?r:null===(o=a.arrays.filter(e=>e.arrayId===t.arrId)[0])||void 0===o?void 0:o.length())&&void 0!==s?s:0;void 0===t.offset&&(d+=i);const p=0===t.arrId?m:{wx:Math.floor(l*h),wy:Math.floor(e.height-.2*e.height),ww:Math.floor(i*h),wh:Math.floor(.2*e.height)};u[t.arrId]=p,c[t.arrId]=w(a,t.length,p.wx,p.wy,p.ww,p.wh)}this.repaintArr(a,i,m.wx,m.wy,m.ww,m.wh,t);for(let e=1;e<a.arrays.length;e++){const l=u[a.arrays[e].arrayId];this.repaintArr(a,a.arrays[e],l.wx,l.wy,l.ww,l.wh,t)}const p=Math.floor(e.height/20);function f(e,t,a){return c[e](t,a)}t.strokeStyle="#D00",t.lineWidth=1;for(const e of l.filter(e=>"compare"===e.type)){const a=e;t.beginPath();const{x:l,y:n}=f(a.array1.arrayId,a.index1,a.array1.get(a.index1).value),{x:r,y:o}=f(a.array2.arrayId,a.index2,a.array2.get(a.index2).value),s=Math.min(n,o)-p;t.moveTo(l,n),t.bezierCurveTo(l,s,r,s,r,o),t.stroke()}t.strokeStyle="#F80",t.lineWidth=1;t.beginPath();for(const e of l.filter(e=>"copy"===e.type)){const a=e,{x:l,y:n}=f(a.srcArray.arrayId,a.srcIndex,a.srcArray.get(a.srcIndex).value),{x:r,y:o}=f(a.tgtArray.arrayId,a.tgtIndex,a.tgtArray.get(a.tgtIndex).value);t.moveTo(l-5,n-5),t.lineTo(l+5,n+5),t.moveTo(l+5,n-5),t.lineTo(l-5,n+5),t.moveTo(l,n),t.lineTo(r,o)}t.stroke(),t.strokeStyle="#F80",t.lineWidth=1,t.beginPath();for(const e of l.filter(e=>"push"===e.type)){const a=e,{x:l,y:n}=f(a.srcArray.arrayId,a.srcIndex,a.srcArray.get(a.srcIndex).value),{x:r,y:o}=f(a.tgtArray.arrayId,a.tgtArray.length()-1,a.tgtArray.get(a.tgtArray.length()-1).value);t.moveTo(l-5,n-5),t.lineTo(l+5,n+5),t.moveTo(l+5,n-5),t.lineTo(l-5,n+5),t.moveTo(l,n),t.lineTo(r,o)}t.stroke(),t.strokeStyle="#0f0",t.lineWidth=2;for(const e of l.filter(e=>"swap"===e.type)){const a=e;t.beginPath();const{x:l,y:n}=f(a.srcArray.arrayId,a.srcIndex,a.srcArray.get(a.srcIndex).value),{x:r,y:o}=f(a.tgtArray.arrayId,a.tgtIndex,a.tgtArray.get(a.tgtIndex).value),s=Math.min(n,o)-p;t.moveTo(l,n),t.bezierCurveTo(l,s,r,s,r,o),t.stroke()}}},new class{constructor(){this.name="Radial"}repaint(e,t,a,l){t.fillStyle="black",t.fillRect(0,0,e.width,e.height);const n=e.width/2,r=e.height/2,o=a.getArray(0),s=2*Math.PI/o.length();function i(e,t){const l=s*e,o=t/a.maxValue;return{x:Math.floor(n+Math.cos(l)*o*n),y:Math.floor(r+Math.sin(l)*o*r)}}t.fillStyle="#333",t.beginPath(),t.moveTo(n,r);const h=[];for(let e=0;e<o.length();e++){const{x:a,y:l}=i(e,o.internalGet(e).value);t.lineTo(a,l),h.push({x:a,y:l})}t.closePath(),t.fill(),t.fillStyle="white";for(let e=0;e<o.length();e++){const{x:a,y:l}=h[e];t.fillRect(a,l,1,1)}t.strokeStyle="#D00",t.lineWidth=1;for(const e of l.filter(e=>"compare"===e.type)){const a=e;t.beginPath();const{x:l,y:n}=i(a.index1,a.array1.get(a.index1).value),{x:r,y:o}=i(a.index2,a.array2.get(a.index2).value);t.moveTo(l,n),t.lineTo(r,o),t.stroke()}t.strokeStyle="#0f0",t.lineWidth=2;for(const e of l.filter(e=>"swap"===e.type)){const a=e;t.beginPath();const{x:l,y:n}=i(a.srcIndex,a.srcArray.get(a.srcIndex).value),{x:r,y:o}=i(a.tgtIndex,a.tgtArray.get(a.tgtIndex).value);t.moveTo(l,n),t.lineTo(r,o),t.stroke()}}}];let k,x;function I(e){const[t,a]=n.useState(e.state.deltaIndex()),[l,r]=Object(b.a)(E[0],t=>d(e.state,[],t)),[i,h]=n.useState(!1),[c,u]=n.useState(0);function m(){a(e.state.deltaIndex())}function d(e,t,a){void 0!==k&&void 0!==x&&void 0!==a&&a.repaint(k,x,e,t)}return n.useEffect(()=>{const t=document.getElementById("canvas");Object(v.b)(t,1024,800),k=t,x=t.getContext("2d"),d(e.state,[],l)},[]),n.useEffect(()=>{d(e.state,[],l)},[e.state]),function(e,t,a){const l=Object(n.useRef)(()=>{}),r=Object(n.useRef)(0),o=Object(n.useRef)(!1);Object(n.useEffect)(()=>{l.current=e},[e]),Object(n.useEffect)(()=>{function e(){l.current(),n()}function n(){if(a<=.25){const t=940,l=1-4*a,n=Math.floor(t*l)+60;r.current=setTimeout(e,n),o.current=!1}else r.current=requestAnimationFrame(e),o.current=!0}return t&&n(),()=>{o.current?cancelAnimationFrame(r.current):clearTimeout(r.current)}},[t,a])}(()=>{if(c<=.25){const t=e.state.applyUntil(10,s.Compare);m(),d(e.state,t,l)}else{const t=1/.75*(c-.25),a=Math.floor(75*t),n=[];for(let t=0;t<a;t++)n.push(...e.state.applyUntil(-1,s.Compare));m(),d(e.state,n,l)}0===e.state.remainingStepsFwd()&&h(!1)},i,c),n.createElement("div",{className:"flex row"},n.createElement("canvas",{id:"canvas"}),n.createElement("div",{className:"flex col"},n.createElement("div",{className:"flex row"},n.createElement("span",null,"Display:"),n.createElement(o.a,{options:E.map(e=>e.name),value:l.name,onChange:e=>r(Object(y.b)(E,t=>t.name===e.value))})),n.createElement("input",{type:"range",min:0,max:e.state.totalDeltas(),value:t,onChange:t=>{e.state.seekTo(t.target.valueAsNumber),m(),d(e.state,[],l)}}),n.createElement("span",null,"Step ",t," / ",e.state.totalDeltas()),n.createElement("div",{className:"flex row"},n.createElement("button",{onClick:()=>{e.state.seekTo(0),m(),d(e.state,[],l)}},"<<<"),n.createElement("button",{onClick:()=>{const t=e.state.rollbackUntil(-1,s.Set);m(),d(e.state,t,l)}},"<<"),n.createElement("button",{onClick:()=>{const t=[e.state.rollback()];m(),d(e.state,t,l)}},"<"),n.createElement("button",{onClick:()=>{const t=[e.state.apply()];m(),d(e.state,t,l)}},">"),n.createElement("button",{onClick:()=>{const t=e.state.applyUntil(-1,s.Set);m(),d(e.state,t,l)}},">>"),n.createElement("button",{onClick:()=>{e.state.seekTo(e.state.totalDeltas()),m(),d(e.state,[],l)}},">>>")),n.createElement("span",null,"Autoplay:"),n.createElement("div",{className:"flex row"},n.createElement("span",null,"Speed: "),n.createElement("input",{type:"range",min:0,max:1,step:.01,value:c,onChange:e=>u(e.target.valueAsNumber)}),n.createElement("button",{onClick:()=>h(!i)},i?"Pause":"Play"))))}class S{constructor(){this.name="SelectionSort"}sort(e,t){for(let e=0;e<t.length();e++){let a=t.get(e),l=e;for(let n=e+1;n<t.length();n++){const e=t.get(n);e.compare(a)<0&&(a=e,l=n)}l!==e&&t.swap(e,l)}}}function D(e,t,a,l){const r=null!=t?t:e.length,o=((null!=t?t:e.length)-e.length)/2,s=Object(y.d)(e,e=>e),i=Math.floor(r/2);return n.createElement("svg",{width:"100%",viewBox:-o+" 0 "+r+" "+i,style:{background:"#111"}},e.map((e,t)=>{var a;return n.createElement("g",{key:t},n.createElement("rect",{x:t,width:1,y:(1-e/s)*i,height:e/s*i,fill:null==l?"#222":null!==(a=l[t])&&void 0!==a?a:"#222"}),n.createElement("rect",{x:t,width:1,y:(1-e/s)*i,height:1,fill:"#CCC"}))}),null==a?n.createElement(n.Fragment,null):a.map((t,a)=>{var l,r;const o=(1-(e[t.from]-.5)/s)*i,h=(1-(e[t.to]-.5)/s)*i;return n.createElement("path",{key:a,fill:"transparent",strokeWidth:"0.1",stroke:t.color,d:`M ${t.from+.5} ${o} C ${t.from+.5} ${o-(null!==(l=t.arcHeight)&&void 0!==l?l:2)} ${t.to+.5} ${h-(null!==(r=t.arcHeight)&&void 0!==r?r:2)} ${t.to+.5} ${h}`})}))}class A{constructor(){this.name="HeapSort"}sort(e,t){for(let e=0;e<t.length();e++)this.upHeap(t,e);for(let e=t.length()-1;e>0;e--)t.swap(0,e),this.downHeap(t,e)}upHeap(e,t){for(;t>0;){const a=e.get(t),l=this.parentIndex(t),n=e.get(l);if(!(a.compare(n)>0))break;e.swap(t,l),t=l}}downHeap(e,t){let a=0;for(;a<t;){const l=this.childIndex(a);if(l>=t)return;let n=l;if(l+1<t&&e.get(n).compare(e.get(n+1))<=0&&n++,!(e.get(a).compare(e.get(n))<0))return;e.swap(a,n),a=n}}parentIndex(e){return Math.floor((e-1)/2)}childIndex(e){return 2*e+1}}class C{constructor(){this.name="Quicksort"}sort(e,t){this.recurse(t,0,t.length())}recurse(e,t,a){if(a-t<=1)return;const l=Math.floor(t+Math.random()*(a-t));e.swap(t,l);const n=e.get(t);let r=t+1,o=a-1;for(;r<=o;)e.get(r).compare(n)<0?r++:e.swap(r,o--);e.swap(t,o),this.recurse(e,t,o),this.recurse(e,o+1,a)}}class T{constructor(){this.name="QuickDualPivot"}sort(e,t){this.recurse(t,0,t.length())}recurse(e,t,a){if(a-t<=1)return;const l=Math.floor(t+Math.random()*(a-t));e.swap(t,l);const n=e.get(t);let r=t+1,o=t+1,s=a-1;for(;o<=s;)switch(e.get(o).compare(n)){case 0:o++;break;case-1:e.swap(r++,o++);break;case 1:e.swap(o,s--)}e.swap(t,s),this.recurse(e,t,r),this.recurse(e,o,a)}}class N{constructor(){this.name="WeakHeapSort"}sort(e,t){const a=new Array(t.length()).fill(!1);for(let e=t.length()-1;e>0;e--)this.fastUpheap(t,e,a);for(let e=t.length()-1;e>0;e--)t.swap(0,e),this.downHeap(t,a,e)}downHeap(e,t,a){this.downHeapSingle(e,1,t,a)}downHeapSingle(e,t,a,l){const n=a[t]?2*t+1:2*t;n<l&&this.downHeapSingle(e,n,a,l),e.get(0).compare(e.get(t))<0&&(a[t]=!a[t],e.swap(0,t))}fastUpheap(e,t,a){const l=this.fastDistinguishedAncestor(t);e.get(l).compare(e.get(t))<0&&(a[t]=!a[t],e.swap(l,t))}fastDistinguishedAncestor(e){if(0===e)return 0;for(;e%2==0;)e/=2;return Math.floor(e/2)}distinguishedAncestor(e,t){const a=Math.floor(e/2);return t[a]===(e%2==0)?a:this.distinguishedAncestor(a,t)}}class P{constructor(){this.name="SmoothSort",this.heapChildDist=[0,0,2],this.heapPrevDist=[1,1]}sort(e,t){const a=[];for(let e=0;e<t.length();e++)this.growHeap(t,a,e);for(let e=t.length()-1;e>=1;e--)this.shrinkHeap(t,a,e)}growHeap(e,t,a){if(t.length>=2&&t[t.length-2]===t[t.length-1]+1){const e=t[t.length-2]+1;t.pop(),t.pop(),t.push(e)}else t.length>0&&1===t[t.length-1]?t.push(0):t.push(1);this.trinkle(e,t,a,t.length-1)}shrinkHeap(e,t,a){const l=t.pop();this.hasChildren(l)&&(t.push(l-1),t.push(l-2),this.trinkle(e,t,this.leftChildIndex(a,l),t.length-2),this.trinkle(e,t,a-1,t.length-1))}trinkle(e,t,a,l){if(0!==l){let n=this.trinkleMax(e,a,t[l]);for(let r=l-1;r>=0;r--){const o=this.previousHeapIndex(a,t[l]);if(!(e.get(o).compare(n)>0))break;e.swap(o,a),a=o,l=r,n=this.trinkleMax(e,a,t[l])}}this.heapDown(e,a,t[l])}trinkleMax(e,t,a){if(this.hasChildren(a)){let l=e.get(t);const n=e.get(t-1);l=l.compare(n)>=0?l:n;const r=e.get(this.leftChildIndex(t,a));return l=l.compare(r)>=0?l:r,l}return e.get(t)}heapDown(e,t,a){if(!this.hasChildren(a))return;const l=this.leftChildIndex(t,a),n=t-1,r=a-1,o=a-2;e.get(l).compare(e.get(n))>0?this.heapDownCompare(e,t,l,r):this.heapDownCompare(e,t,n,o)}heapDownCompare(e,t,a,l){e.get(a).compare(e.get(t))>0&&(e.swap(t,a),this.heapDown(e,a,l))}hasChildren(e){return e>1}leftChildIndex(e,t){return e-this.getHeapChildDist(t)}previousHeapIndex(e,t){return e-this.getHeapPrevDist(t)}getHeapChildDist(e){for(;e>=this.heapChildDist.length;)this.heapChildDist.push(this.heapChildDist[this.heapChildDist.length-1]+this.heapChildDist[this.heapChildDist.length-2]);return this.heapChildDist[e]}getHeapPrevDist(e){for(;e>=this.heapPrevDist.length;)this.heapPrevDist.push(this.heapPrevDist[this.heapPrevDist.length-1]+this.heapPrevDist[this.heapPrevDist.length-2]+1);return this.heapPrevDist[e]}}class M{constructor(){this.name="InsertionSort"}sort(e,t){for(let e=2;e<t.length();e++)for(let a=e-1;a>=0&&!(t.get(a).compare(t.get(a+1))<0);a--)t.swap(a,a+1)}}var O=[new S,new M,new class{constructor(){this.name="CycleSort"}sort(e,t){const a=new Array(t.length());for(let e=0;e<a.length;e++)a[e]=!1;for(let e=0;e<t.length()-1;){if(a[e]){e++;continue}const l=t.get(e);let n=e;for(let a=e+1;a<t.length();a++)t.get(a).compare(l)<=0&&n++;for(;0===t.get(n).compare(l)&&n>e;)n--;n===e?e++:(t.swap(e,n),a[n]=!0)}}},new A,new N,new P,new C,new T,new class{constructor(){this.name="MergeSort"}sort(e,t){this.recurse(e,t,0,t.length())}recurse(e,t,a,l){if(l-a<=1)return;const n=a+Math.ceil((l-a)/2);this.recurse(e,t,a,n),this.recurse(e,t,n,l);const r=e.createArray(l-a,a);let o=a,s=n,i=0;for(;o<n&&s<l;)t.get(o).compare(t.get(s))<=0?(r.set(i,t.get(o)),o++,i++):(r.set(i,t.get(s)),s++,i++);for(;o<n;)r.set(i,t.get(o)),o++,i++;for(;s<l;)r.set(i,t.get(s)),s++,i++;for(let e=0;e<l-a;e++)t.set(e+a,r.get(e));e.deleteArray(r)}},new class{constructor(){this.name="MSD Radix (Binary)"}sort(e,t){let a=1;for(let e=0;e<t.length();e++){const l=t.get(e).value;for(;a<=l;)a<<=1}a>>=1,this.bmsdrx_recurse(t,0,t.length(),a)}bmsdrx_recurse(e,t,a,l){if(0===l||a<2)return;let n=t,r=t;for(;r<t+a;)0==(e.get(r).value&l)?(n!==r&&e.swap(n,r),n++,r++):r++;this.bmsdrx_recurse(e,t,n-t,l>>1),this.bmsdrx_recurse(e,n,r-n,l>>1)}},new class{constructor(){this.name="MSD Radix (Hex)"}sort(e,t){let a=15;for(let e=0;e<t.length();e++){const l=t.get(e).value;for(;a<l;)a<<=1}this.hmsdrx_recurse(e,t,0,t.length(),a)}hmsdrx_recurse(e,t,a,l,n){if(0===n||l<2)return;let r=0;for(;n>>r>15;)r++;const o=[];for(let t=0;t<16;t++)o.push(e.createArray());for(let e=a;e<a+l;e++){const a=t.get(e);o[(a.value&n)>>r].push(a)}let s=[],i=0;for(let e=0;e<16;e++){s.push(o[e].length());for(let l=0;l<o[e].length();l++)t.set(a+i++,o[e].get(l))}for(let t=0;t<16;t++)e.deleteArray(o[t]);i=0;for(let l=0;l<16;l++)0!==s[l]&&(this.hmsdrx_recurse(e,t,a+i,s[l],n>>4),i+=s[l])}}];var H=[new class{constructor(){this.name="Random"}generate(e,t){return Math.random()}},new class{constructor(){this.name="Reversed"}generate(e,t){return 1-e/t}},new class{constructor(){this.name="Near Sorted"}generate(e,t){let a=Math.floor(e+(Math.random()*(t/100)-t/50));return a<0&&(a=0),a>t&&(a=t),a/t}},new class{constructor(){this.name="Sinusoidal"}generate(e,t){const a=e/t;return Math.sin(2*a*Math.PI)/2+.5}}];var W={descriptor:{displayName:"Sorting Algorithms",getDescription:()=>n.createElement("div",null,n.createElement("h2",null,"Sorting algorithms"),n.createElement("p",null,"This project provides visualizations of various sorting algorithms, to hopefully make them easier to learn and understand. Also, it's just because I think they're neat."),n.createElement("h4",null,"What is a sorting algorithm?"),n.createElement("p",null,"Let's say you've got a bunch of data in an array. We'll visualize your array like a graph, as below:"),D([8,7,2,10,1,6,4,5,3,9],20),n.createElement("p",null,"The X-coordinate is it's position in the list, and the Y-coordinate is the items value. When we sort the array, we'll get a result like this:"),D([1,2,3,4,5,6,7,8,9,10],20),n.createElement("p",null,"All the elements are now in ascending order. We want to go from the random starting position to this sorted position as fast as possible, using only a few basic operations:"),n.createElement("hr",null),n.createElement("h5",null,"Compare"),n.createElement("p",null,"Sorting algorithms can compare two items to see which is greater. We visualize this with a red arc. For example, comparing the first and last elements would look like this:"),D([6,2,10],20,[{from:0,to:2,color:"#f00"}]),n.createElement("p",null,"Sorting algorithms generally can only compare two items at a time, and this is the only way they can tell what order two elements should fall into."),n.createElement("h5",null,"Swap"),n.createElement("p",null,"To move elements, algorithms generally have to swap two items. We represent this with a green arc."),D([6,2,10],20,[{from:0,to:2,color:"#0f0"}]),D([10,2,6],20),n.createElement("h5",null,"Get/Set"),n.createElement("p",null,"Algorithms can move items to/from extra storage, which we represent with an orange line, or just read a value and then set a value later. This happens rarely, as it means the algorithm is using additional storage space. The algorithms here try to avoid doing so to keep their operation apparent"),n.createElement("hr",null),n.createElement("h4",null,"How do we grade a sorting algorithm?"),n.createElement("p",null,"Sorting algorithms are usually rated in 'Big-O' notation, which tells you how well an algorithm works as the amount of data to sort grows. We're not going to talk much about big-O here, because I'm not a comp-sci teacher."),n.createElement("p",null,"Instead, we'll use an experimental approach. Better algorithms are those which sort the result with fewer total comparisons and swaps. We'll assume each compare/swap takes the same amount of time, and therefore, the fewer swaps/compares, the better."),n.createElement("p",null,'We can call this the "speed" of the sorting algorithm. "Faster" algorithms will use generally fewer comparisions than "slower" algorithms. However, this is not the only important consideration with algorithms. There are some others, such as:'),n.createElement("h4",null,"Stability"),n.createElement("p",null,"Stability is a property that some algorithms have, which means that if more than one element has the same value, they'll ",n.createElement("i",null,"always")," come out in the same order they went in. For example, sort the following, keeping an eye on the colored elements:"),D([3,2,3,3,6,3,1],16,void 0,["#533",null,"#353","#335",null,"#553",null]),n.createElement("p",null,"When sorted by a stable sort, the colored elements will be in the same order after the sort:"),D([1,2,3,3,3,3,6],16,void 0,[null,null,"#533","#353","#335","#553",null]),n.createElement("p",null,"When sorted by an unstable sort, you may get a result like this:"),D([1,2,3,3,3,3,6],16,void 0,[null,null,"#353","#533","#553","#335",null]),n.createElement("p",null,"The output will still be sorted, but the elements with the same value may be shuffled around. Stable sorts are nice because they allow you to sort the same array multiple times with multiple criteria do a 'sort by this, then by that' type of operation"),n.createElement("p",null,"For the purposes of our visualisation, however, stability doesn't really matter."),n.createElement("h4",null,"In-Place"),n.createElement("p",null,'An algorithm is "In-Place" if it always uses the same amount of memory, regardless of the amount of data it is sorting.'),n.createElement("p",null,"In-Placeness is a very useful attribute, as otherwise, a sorting algorithm may use a lot of memory when sorting large arrays."),n.createElement("p",null,"Unfortunately, because nothing is ever easy in CS, there are two different common definitions of in-place. The first is what I'll call \"Strictly in-place\", which is exactly as defined above. An algorithm uses a fixed amount of extra memory, which doesn't scale at all with the quantity of data being sorted."),n.createElement("p",null,'Many divide-and-conquer algorithms fail this requirement, but only because they are recursive, which requires allocating space on the stack. This stack-space allocation is sometimes considered "free", making these algorithms "In-Place" as long as they don\'t allocate additional memory outside of the stack growing. I\'ll call this "Loosely In-Place". Most algorithms which are "In Place" are "Looseley In-Place" as using a strict upper memory limit is quite restrictive.'),n.createElement("hr",null),n.createElement("p",null,"Well, that's enough of an info-dump. Poke around with some algorithms!"))},children:[{descriptor:{displayName:"Selection Sort",algorithm:new S,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Selection Sort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"Yes"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes")))),n.createElement("hr",null),n.createElement("p",null,"Selection sort is one of the basic sorting algorithms. It's probably one of the first solutions you'd think of to solve this problem."),n.createElement("p",null,"Selection sort finds the minimum element, and moves it to the beginning. Then it finds the next smallest, and moves it to the second index. Then the third smallest, and moves it to the third index, so on and so forth."),n.createElement("p",null,"This algorithm is very easy to write and very simple, but unfortunately, it's quite slow. For sorting large numbers of items, selection sort will spend a long time iterating over the whole array over and over again."))}}},{descriptor:{displayName:"Insertion Sort",algorithm:new M,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Insertion Sort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"Yes"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes")))),n.createElement("hr",null),n.createElement("p",null,"Insertion sort is one of the basic sorting algorithms. It's probably one of the first solutions you'd think of to solve this problem."),n.createElement("p",null,"Insertion sort grows a sorted array from left-to-right by shifting the next unsorted element left until it's in the right place."),n.createElement("p",null,"Insertion sort is quick for very small numbers of elements, but quickly becomes very slow as you sort larger arrays. For this reason, some algorithms will switch to insertion sort for very small input lists, but otherwise, you're better off with a different algorithm"),n.createElement("p",{style:{color:"#aaa"}},'Ok, technically, as implemented here, this is a "Gnome sort" and not an insertion sort. Real insertion sorts don\'t shift one element at a time, but rather binary search and then insert the sorted element at the correct location.'),n.createElement("p",{style:{color:"#888"}},"However, this implies you're inserting elements into a list which can grow as you push elements to it. In reality, inserting an element to the middle of the list will USUALLY result in the rest of the items being shifted right, one at a time."),n.createElement("p",{style:{color:"#666"}},'So, a "real" insertion sort would faster than as implemented here, but only measuring by number of comparisons, not swaps, and the way it is now I can write it in like, five lines of code, and I think that\'s neat.'),n.createElement("p",{style:{color:"#444"}},"And also, it's easier to follow what's happening without a binary search making things tricky. But anyway, this is getting pedantic, so I'm going to accelerate this fade out so you don't have to read any more"))}}},{descriptor:{displayName:"Heap Sort",algorithm:new A,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Heap Sort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"No"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes")))),n.createElement("hr",null),n.createElement("p",null,"There are many heap-like sorts, but the most basic of which is a heapsort as implemented here. Heap sorts are some of the very few sorting algorithms which are both very fast in the average case and also strictly in-place, requiring no additional memory, even on the stack."),n.createElement("p",null,"Heapsort works by building a heap from the array, and then repeatedly popping the root element of the array and moving it to the end of the array, and then trickling the new root down to an appropriate position"),n.createElement("p",{style:{color:"#aaa"}},"(Note: For this discussion of heaps, we'll treat our arrays as starting at 1. I know, it sounds blasphemous, but this is one of the very rare circumstances where starting at 1 makes things easier)"),n.createElement("p",null,'An array can "implicitly" be treated as a heap without too much difficulty. The first item (at index 1) is the "Root" of the heap, and has the maximum value.'),n.createElement("p",null,"Each item (including the root) at index [n] has two children, one at [2 * n], and one at [2 * n + 1], which must have values less than the parent. We can visualize the links between parents/children like this:"),D([10,6,6,5,5,5,5,3,3,3,3,3,3,3,3],void 0,[{from:0,to:1,color:"#f00",arcHeight:4},{from:0,to:2,color:"#f00",arcHeight:4},{from:1,to:3,color:"#f00",arcHeight:-3},{from:1,to:4,color:"#f00",arcHeight:-3},{from:2,to:5,color:"#0f0",arcHeight:-3},{from:2,to:6,color:"#0f0",arcHeight:-3},{from:3,to:7,color:"#f00",arcHeight:2},{from:3,to:8,color:"#f00",arcHeight:2},{from:4,to:9,color:"#0f0",arcHeight:2},{from:4,to:10,color:"#0f0",arcHeight:2},{from:5,to:11,color:"#00f",arcHeight:2},{from:5,to:12,color:"#00f",arcHeight:2},{from:6,to:13,color:"#ff0",arcHeight:2},{from:6,to:14,color:"#ff0",arcHeight:2}]),n.createElement("hr",null),n.createElement("h4",null,"Upheap:"),n.createElement("p",null,'Since each item has a value smaller than it\'s parent, the maximum value is always the root. First, we turn our input array into a heap by taking each element one at a time and performing an "Upheap" operation'),n.createElement("p",null,"To \"Upheap\" an item, we compare it with it's parent. If it's smaller, we're done. Otherwise, we swap it with it's parent and then try to upheap again, until either it's smaller than it's parent, or it's the new root, like so:"),D([6,6,5,5,5,5,3,3,3,3,3,3,3,3,10],void 0,[{from:6,to:14,color:"#0f0",arcHeight:2}]),D([6,6,5,5,5,5,10,3,3,3,3,3,3,3,3],void 0,[{from:2,to:6,color:"#0f0",arcHeight:2}]),D([6,6,10,5,5,5,5,3,3,3,3,3,3,3,3],void 0,[{from:0,to:2,color:"#0f0",arcHeight:2}]),D([10,6,6,5,5,5,5,3,3,3,3,3,3,3,3]),n.createElement("p",null,"Or like this:"),D([10,6,5,5,5,5,3,3,3,3,3,3,3,3,6],void 0,[{from:6,to:14,color:"#0f0",arcHeight:2}]),D([10,6,5,5,5,5,6,3,3,3,3,3,3,3,3],void 0,[{from:2,to:6,color:"#0f0",arcHeight:2}]),D([10,6,6,5,5,5,5,3,3,3,3,3,3,3,3],void 0,[{from:0,to:2,color:"#f00",arcHeight:2}]),D([10,6,6,5,5,5,5,3,3,3,3,3,3,3,3]),n.createElement("p",null,"Now we have a valid heap, which we'll use to sort the array."),n.createElement("hr",null),n.createElement("h4",null,"Downheap"),n.createElement("p",null,'Since the max item is the first item, we swap it to the end (where it belongs). We\'ll never look at that element again, and we treat the array as one-element smaller. Now the heap is invalid, as the root is too small, so we "Downheap" it to move it to a valid position, like this:'),n.createElement("p",null,"First, if it has no children, we're done. If it does have children, we look for a child greater than the parent item. If there is a greater child, we swap the parent and child, and then downheap the moved parent again"),n.createElement("p",null,"Using our heap constructed above, we would downheap like this:"),D([10,6,6,5,5,5,5,3,3,3,3,3,3,3,3],void 0,[{from:0,to:14,color:"#0f0"}]),D([3,6,6,5,5,5,5,3,3,3,3,3,3,3,10],void 0,[{from:0,to:1,color:"#f00"},{from:0,to:2,color:"#0f0"}],[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"#131"]),n.createElement("p",{style:{color:"#aaa"}},"(Note: we prioritize the right-child so that we hit the end of the array faster.)"),D([6,6,3,5,5,5,5,3,3,3,3,3,3,3,10],void 0,[{from:2,to:5,color:"#f00"},{from:2,to:6,color:"#0f0"}],[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"#131"]),D([6,6,5,5,5,5,3,3,3,3,3,3,3,3,10],void 0,[{from:6,to:13,color:"#f00"},{from:6,to:14,color:"#555"}],[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"#131"]),n.createElement("p",{style:{color:"#aaa"}},'(Note: At this point, this node only has one child. It\'s "other child" is already a correct value, so we count it as out-of-range)'),D([6,6,5,5,5,5,3,3,3,3,3,3,3,3,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"#131"]),n.createElement("p",null,"Now, we have a valid heap, except that the last element is in it's correct position. We can just swap and downheap again, shrinking the heap by another 1, so on and so forth. Each time we finish downheaping, we get closer to a sorted array, with a valid heap in front:"),D([6,6,5,5,5,5,3,3,3,3,3,3,3,3,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"#131"]),D([6,5,5,5,5,3,3,3,3,3,3,3,3,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,null,null,null,"#131","#131"]),D([5,5,5,5,3,3,3,3,3,3,3,3,6,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,null,null,"#131","#131","#131"]),D([5,5,5,3,3,3,3,3,3,3,3,5,6,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,null,"#131","#131","#131","#131"]),D([5,5,3,3,3,3,3,3,3,3,5,5,6,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,null,"#131","#131","#131","#131","#131"]),D([5,3,3,3,3,3,3,3,3,5,5,5,6,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,null,"#131","#131","#131","#131","#131","#131"]),D([3,3,3,3,3,3,3,3,5,5,5,5,6,6,10],void 0,void 0,[null,null,null,null,null,null,null,null,"#131","#131","#131","#131","#131","#131","#131"]),n.createElement("p",null,"And once the heap has only one element, you're done!"),D([3,3,3,3,3,3,3,3,5,5,5,5,6,6,10],void 0,void 0,["#131","#131","#131","#131","#131","#131","#131","#131","#131","#131","#131","#131","#131","#131","#131"]),n.createElement("hr",null),n.createElement("h4",null,"The bad part"),n.createElement("p",null,"While heapsort does work quite well on most data, it does have a problem in that building a heap can be slow if the data you're sorting is already nearly sorted. Heapsort doesn't take advantage of runs in the data, and ends up un-sorting the nearly-sorted data during the heap construction"))}},children:[{descriptor:{displayName:"Weak Heap Sort",algorithm:new N,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Weak Heap Sort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"No"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"No")))),n.createElement("hr",null),n.createElement("p",null,'Weak heap sort is a very fast, but somewhat complicated and non-in-place, variant of a heap sort. Instead of building a regular heap, it builds a "weak heap", which is a heap where every element in only the right child must be smaller than the parent, and where the root only has a right child.'),n.createElement("p",null,'Weak heaps can still be implmemented implicitly with an array (with one small exception, see "memory use" below) but the method by which this is achieved is different from a regular heap sort.'),n.createElement("p",null,'Like a regular heap sort, Weak Heap Sort first performs a bunch of "Upheap" operations to build a heap, and then repeatedly swaps the root and "Downheaps" to sort the array.'),n.createElement("p",{style:{color:"#aaa"}},n.createElement("i",null,"TODO: Actually write out a good description for weak heap sort")),n.createElement("h4",null,"Memory Use"),n.createElement("p",null,"Weak Heap Sort is no longer In-Place (Even Loosely), as it requires ",n.createElement("i",null,"one additional bit")," per item being sorted. That's not a ",n.createElement("i",null,"lot")," of memory, but it does violate in-placeness"),n.createElement("p",null,"These extra bits are used as flags per-element, which are used to simulate flipping an items left and right children without actually needing to rearrange the items in the array"))}}},{descriptor:{displayName:"Smooth Sort",algorithm:new P,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Smooth Sort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"No"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes")))),n.createElement("hr",null),n.createElement("p",null,"Smoothsort is a very fast heap-like sorting algorithm which uses a fibonacci heap instead of a typical binary heap to speed up heap construction"),n.createElement("p",{style:{color:"#aaa"}},n.createElement("i",null,"TODO: Actually write out a good description for smooth sort")))}}}]},{descriptor:{displayName:"Quicksort",algorithm:new C,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Quicksort"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"No"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes*")))),n.createElement("hr",null),n.createElement("p",null,"Quicksort, as the name implies, is a quick divide-and-conquer sorting algorithm."),n.createElement("p",null,"Quicksort first picks a pivot element. Different algorithms do this in slightly different ways, some pick the first element, some pick the last, some take a median of three elements."),n.createElement("p",{style:{color:"#aaa"}},"The implementation in the visualizer picks a random pivot element. For our example, we'll pick the first element, and mark it in yellow."),D([6,3,10,6,8,4,1,9,7,5,2],20,void 0,["#cc0"]),n.createElement("p",null,"Then, each other element is checked against the pivot. If it is less than the pivot, it's moved to the left. Otherwise, it's moved to the right."),D([6,3,2,5,1,4,8,9,7,6,10],20,void 0,["#cc0","#a00","#a00","#a00","#a00","#a00","#0a0","#0a0","#0a0","#0a0","#0a0"]),n.createElement("p",null,"This partitions the data between elements less than the pivot and elements greater than the pivot. The pivot is then swapped to the middle, which will be it's final location"),D([4,3,2,5,1,6,8,9,7,6,10],20,[{from:0,to:5,color:"#0f0"}],["#a00","#a00","#a00","#a00","#a00","#cc0","#0a0","#0a0","#0a0","#0a0","#0a0"]),n.createElement("p",null,"Now the array is split into three sections. The left is a smaller, unsorted array. The right is a smaller unsorted array. The middle is a pivot, which won't move again."),n.createElement("p",null,"That means we can just run this algorithm again, twice! We recursively quicksort the left side, then the right side. Each side will pick a pivot, split the list again, and then recurse."),n.createElement("p",null,"The list will keep subdividing and subdividing until each sub-list is 1 element long, at which point the list is sorted."),n.createElement("hr",null),n.createElement("p",null,"While quicksort is usually reasonably fast in the average case, it's not guaranteed to be fast in all cases. Bad choices of pivot can degrade the speed of quicksort down to the point of the trivial-slow algorithms, like Insertion and Selection sort."),n.createElement("p",null,'Also, quicksort can spend a lot of time recursively sorting small, nearly-sorted lists at the "bottom" of the recursion. For this reason, Quicksort is often implemented as a hybrid algorithm which may switch to insertion sort when the list being sorted gets small enough.'),n.createElement("p",{style:{color:"#aaa"}},"Quicksort is Loosely-In-Place. While it doesn't allocate any additional memory, its recursive nature leads to growing the stack. This can result in the stack overflowing when sorting a lot of data."))}},children:[{descriptor:{displayName:"Quicksort (Dual Pivot)",algorithm:new T,getDescription:function(){return n.createElement("div",null,n.createElement("h2",null,"Quicksort (Dual Pivot)"),n.createElement("table",{className:"sortAttributeTable"},n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,"Stable"),n.createElement("td",null,"No"),n.createElement("td",null,"In-Place"),n.createElement("td",null,"Yes*")))),n.createElement("hr",null),n.createElement("p",null,"Dual-Pivot Quicksort is very similar to regular quicksort, but it chooses two pivots and partitions the list into thirds instead of halves."),n.createElement("p",null,"For example, one iteration may look like this:"),D([4,3,2,5,1,6,7,6,8,9,10],20,void 0,["#a22","#a22","#a22","#a22","#a22","#cc0","#2a2","#2a2","#cc0","#22a","#22a"]),n.createElement("p",null,"The three sections are (<p1) (>=p1 & <p2) (>=p2)"),n.createElement("p",null,"Each of these sections is then recursively sorted, as in regular quicksort."),n.createElement("p",{style:{color:"#aaa"}},"Quicksort (even dual-pivot) is Loosely-In-Place. While it doesn't allocate any additional memory, its recursive nature leads to growing the stack. This can result in the stack overflowing when sorting a lot of data."))}}}]}]};function j(e){const[t,a]=n.useState(!0),[l,r]=n.useState(null);return n.useEffect(()=>{null!==l&&null!==l.algorithm&&e.sortChosen(l.algorithm)},[l]),t?n.createElement(n.Fragment,null,n.createElement("div",{style:{border:"1px solid black",background:"#111",padding:"0 16px 0 0",top:0,left:0,bottom:0,right:"66%",position:"absolute"},onClick:()=>r(null)},n.createElement("div",null,n.createElement(F,{tree:W,setDescriptor:r})),n.createElement(q,{descriptor:l,setDescriptor:r})),n.createElement("div",{style:{left:"34%",top:0,bottom:0,right:0,position:"absolute"}},n.createElement("button",{style:{width:34,height:18,padding:0,margin:0,position:"absolute"},onClick:()=>a(!1)},"<<"),e.children)):n.createElement("div",null,n.createElement("button",{style:{width:34,height:18,padding:0,margin:0,float:"left"},onClick:()=>a(!0)},">>"),e.children)}function F(e){var t,a;return n.createElement("div",null,n.createElement("a",{onClick:t=>{e.setDescriptor(e.tree.descriptor),t.preventDefault(),t.stopPropagation()}},e.tree.descriptor.displayName),n.createElement("div",{style:{marginLeft:15}},null!==(a=null===(t=e.tree.children)||void 0===t?void 0:t.map(t=>n.createElement(F,{key:t.descriptor.displayName,tree:t,setDescriptor:e.setDescriptor})))&&void 0!==a?a:[]))}function q(e){return null===e.descriptor?n.createElement(n.Fragment,null):n.createElement("div",{style:{border:"1px solid black",background:"#333",position:"absolute",left:"18px",top:0,right:0,bottom:0}},n.createElement("div",{style:{overflowY:"scroll",left:0,right:0,top:0,bottom:0,position:"absolute",padding:"0 12px"},onClick:e=>{e.preventDefault(),e.stopPropagation()}},e.descriptor.getDescription()))}function R(){const[e,t]=n.useState(1024),[a,l]=n.useState(1e3),[r,s]=n.useState(void 0),[i,h]=n.useState(void 0),[c,u]=n.useState(H[0]);return n.createElement("div",{style:{top:0,left:0,bottom:0,right:0,position:"absolute"}},n.createElement(j,{sortChosen:e=>s(e)},n.createElement(n.Fragment,null,n.createElement("div",{className:"flex col align-center"},n.createElement("div",{className:"flex col align-stretch"},n.createElement("div",{className:"flex row justify-space-between"},n.createElement("span",null,"Array Length:"),n.createElement("input",{type:"number",value:e,onChange:e=>t(e.target.valueAsNumber)})),n.createElement("div",{className:"flex row justify-space-between"},n.createElement("span",null,"Array Max:"),n.createElement("input",{type:"number",value:a,onChange:e=>l(e.target.valueAsNumber)})),n.createElement("div",null,n.createElement("span",null,"Data: "),n.createElement(o.a,{options:H.map(e=>e.name),value:c.name,onChange:e=>u(Object(y.b)(H,t=>t.name===e.value))})),n.createElement("div",null,"Algorithm: ",n.createElement(o.a,{options:O.map(e=>e.name),value:void 0===r?void 0:r.name,onChange:e=>s(Object(y.b)(O,t=>t.name===e.value))})),n.createElement("button",{disabled:e<=0||a<=0||void 0===r,onClick:function(){const t=new Array(e);for(let e=0;e<t.length;e++)t[e]=Math.floor(c.generate(e,t.length)*a);const l=new g(t);r.sort(l,l.getArray(0)),l.seekTo(0),h(l)}},"Go!"))),void 0===i?n.createElement(n.Fragment,null):n.createElement(n.Fragment,null,n.createElement("hr",null),n.createElement(I,{state:i})))))}}}]);
//# sourceMappingURL=10.bundle.js.map