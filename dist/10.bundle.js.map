{"version":3,"sources":["webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common/3d/Vector.ts","webpack:///./src/projects/raymarch/debuilder/GlslValue.ts","webpack:///./src/projects/raymarch/debuilder/DistanceEstimatePrimitives.ts","webpack:///./src/projects/common/3d/Quaternion.ts","webpack:///./src/projects/raymarch/index.ts","webpack:///./src/projects/raymarch/debuilder/DistanceEstimateBuilder.ts","webpack:///./src/views/projects/raymarch/RaymarchComponent.tsx"],"names":["KeyState","keys","changes","key","this","indexOf","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","Vector","x","y","z","other","Math","sqrt","lengthSq","multiply","sx","sy","sz","isVector","getxyz","dx","dy","dz","GlslSin","rate","min","max","GlslTimeVariable","GlslCos","timeFunc","glslFloatConst","n","asstr","toString","halfRange","midp","glslVec3Const","real","i","j","denom","Dot","a","b","axis","radians","cos","sin","len","length","point","inverse","inputQ","qOut","dglsl","primitive","nextTempVar","glsl","xd","yd","zd","glslc","normalX","normalY","normalZ","mtx","getTempVarName","rad","emitGlsl","scale","c","maxIterations","bailoutRange","symAxis","rXt","rYt","rZt","translate","fragmentShaderSource","cam","repaintCount","camRotation","moveKeys","camTurnRate","PI","lookKeys","main","canvas","document","getElementById","gl","getContext","alert","clearColor","clear","COLOR_BUFFER_BIT","shaderProgram","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","buffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","position","initBuffers","drawScene","KeyboardManager","body","renderLoop","program","update","doRepaint","dir","speed","rel","applyTransform","axisRotation","requestAnimationFrame","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","numComponents","type","FLOAT","normalize","stride","offset","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","uniform2fv","getUniformLocation","width","height","uniform3fv","uniform4fv","uniform1f","vertexCount","drawArrays","TRIANGLE_STRIP","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","RaymarchComponent","className","id"],"mappings":"4HAEe,MAAMA,EACjB,YAAmBC,EAAuBC,GAAvB,KAAAD,OAAuB,KAAAC,UAInC,UAAUC,GACb,OAAmC,IAA5BC,KAAKH,KAAKI,QAAQF,GAGtB,QAAQA,GACX,OAAmC,IAA5BC,KAAKH,KAAKI,QAAQF,ICLlB,MAAM,EAIjB,YAAmBG,EAAsCC,GAAtC,KAAAD,kBAAsC,KAAAC,mBAC3BC,IAArBJ,KAAKG,cACNH,KAAKG,aAAc,GAEvBD,EAAgBG,iBAAiB,UAAWC,GAAKN,KAAKO,UAAUD,IAChEJ,EAAgBG,iBAAiB,QAASC,GAAKN,KAAKQ,QAAQF,IAE5DN,KAAKS,SAAW,GAChBT,KAAKF,QAAU,GAGX,UAAUC,GACVC,KAAKG,aAELO,QAAQC,IAAIZ,EAAIA,MAGP,IADDC,KAAKS,SAASR,QAAQF,EAAIA,OAElCC,KAAKF,QAAQc,KAAK,CAAEb,IAAKA,EAAIA,IAAKc,OAAQ,UAC1Cb,KAAKS,SAASG,KAAKb,EAAIA,MAIvB,QAAQA,GACZC,KAAKF,QAAQc,KAAK,CAAEb,IAAKA,EAAIA,IAAKc,OAAQ,YAC1C,MAAMC,EAAMd,KAAKS,SAASR,QAAQF,EAAIA,KACtCC,KAAKS,SAASM,OAAOD,EAAK,GAGvB,SACH,MAAME,EAAYhB,KAAKS,SACjBQ,EAAejB,KAAKF,QAK1B,OAHAE,KAAKS,SAAWO,EAAUE,QAC1BlB,KAAKF,QAAU,GAER,IAAIF,EAASoB,EAAWC,IC5CxB,MAAM,EAMjB,YAAYE,EAAsBhB,GAC9BH,KAAKoB,QAAU,IAAI,EAAWD,EAAShB,GACvCH,KAAKqB,SAAWrB,KAAKsB,aAAetB,KAAKoB,QAAQG,SAG9C,SACHvB,KAAKqB,SAAWrB,KAAKsB,aACrBtB,KAAKsB,aAAetB,KAAKoB,QAAQG,SAG9B,UAAUxB,GACb,OAAOC,KAAKsB,aAAaE,UAAUzB,GAGhC,QAAQA,GACX,OAAOC,KAAKsB,aAAaG,QAAQ1B,GAG9B,aAAaA,GAChB,OAAOC,KAAKsB,aAAaE,UAAUzB,IAAQC,KAAKqB,SAASI,QAAQ1B,GAG9D,cAAcA,GACjB,OAAOC,KAAKsB,aAAaG,QAAQ1B,IAAQC,KAAKqB,SAASG,UAAUzB,GAG9D,UACH,OAAOC,KAAKsB,aAAaxB,W,gCClCjC,kCAAe,MAAM4B,EACjB,YAAmBC,EAAkBC,EAAkBC,GAApC,KAAAF,IAAkB,KAAAC,IAAkB,KAAAC,IAGvD,IAAIC,GACA,OAAO9B,KAAK2B,EAAIG,EAAMH,EAAI3B,KAAK4B,EAAIE,EAAMF,EAAI5B,KAAK6B,EAAIC,EAAMD,EAGhE,SACI,OAAOE,KAAKC,KAAKhC,KAAKiC,YAG1B,WACI,OAAOjC,KAAK2B,EAAI3B,KAAK2B,EAAI3B,KAAK4B,EAAI5B,KAAK4B,EAAI5B,KAAK6B,EAAI7B,KAAK6B,EAG7D,YACI,OAAO7B,KAAKkC,SAAS,EAAIlC,KAAKiC,YAElC,SACI,OAAO,IAAIP,GAAQ1B,KAAK2B,GAAI3B,KAAK4B,GAAI5B,KAAK6B,GAM9C,SAASM,EAAqBC,EAAcC,GACpCC,EAASH,KAETC,EAAKA,UAAcD,EACnBE,EAAKA,UAAcF,GAEvB,IAAKR,EAAGC,EAAGC,GAAKH,EAAOa,OAAOJ,EAAIC,EAAIC,GACtC,OAAO,IAAIX,EAAO1B,KAAK2B,EAAIA,EAAG3B,KAAK4B,EAAIA,EAAG5B,KAAK6B,EAAIA,GAKvD,IAAIW,EAAqBC,EAAcC,GACnC,IAAKf,EAAGC,EAAGC,GAAKH,EAAOa,OAAOC,EAAIC,EAAIC,GACtC,OAAO,IAAIhB,EAAO1B,KAAK2B,EAAIA,EAAG3B,KAAK4B,EAAIA,EAAG5B,KAAK6B,EAAIA,GAKvD,SAASW,EAAqBC,EAAcC,GACxC,IAAKf,EAAGC,EAAGC,GAAKH,EAAOa,OAAOC,EAAIC,EAAIC,GACtC,OAAO,IAAIhB,EAAO1B,KAAK2B,EAAIA,EAAG3B,KAAK4B,EAAIA,EAAG5B,KAAK6B,EAAIA,GAG/C,cAAcF,EAAoBC,EAAYC,GAClD,OAAGS,EAASX,GACD,CAACA,EAAEA,EAAGA,EAAEC,EAAGD,EAAEE,GAGb,CAACF,EAAGC,EAAGC,IAK1B,SAASS,EAASX,GACd,YAAsBvB,IAATuB,EAAGA,I,kGC7Db,SAASgB,EAAQC,EAAcC,EAAcC,GAGhD,OAAO,IAAIC,EAAiB,WAFL3C,IAARyC,GAAqB,EAAIA,OACjBzC,IAAR0C,EAAoB,EAAIA,EACYF,GAGhD,SAASI,EAAQJ,EAAcC,EAAcC,GAGhD,OAAO,IAAIC,EAAiB,WAFL3C,IAARyC,GAAqB,EAAIA,OACjBzC,IAAR0C,EAAoB,EAAIA,EACYF,GAGhD,MAAMG,EACT,YAAoBE,EAAgCJ,EAAoBC,EAAoBF,GAAxE,KAAAK,WAAgC,KAAAJ,MAAoB,KAAAC,MAAoB,KAAAF,QAQzF,SAASM,EAAeC,GAC3B,QAJ4C/C,IAIzB+C,EAJYF,SAaxB,CACH,MAAMG,EAAQD,EAAEE,WAChB,OAA4B,IAAxBD,EAAMnD,QAAQ,KAAoBmD,EAAQ,KACvCA,EAZY,CACnB,MACME,GADSH,EAAEL,IAAMK,EAAEN,KACC,EACpBU,GAAQJ,EAAEL,IAAMK,EAAEN,KAAO,EACzBD,EAAO,aAAaM,EAAeC,EAAEP,SAC3C,OAAQO,EAAEF,UACN,IAAK,MAAO,MAAO,OAAOL,mBAAsBM,EAAeI,QAAgBJ,EAAeK,KAC9F,IAAK,MAAO,MAAO,OAAOX,mBAAsBM,EAAeI,QAAgBJ,EAAeK,OCxBnG,SAASC,EAAc7B,EAAiBC,EAAiBC,GAC5D,MAAO,QAAUqB,EAAevB,GAAK,IAAMuB,EAAetB,GAAK,IAAMsB,EAAerB,GAAG,I,oBCL5E,MAAM,EACjB,YAAmB4B,EAAqBC,EAAkBC,EAAkBrD,GAAzD,KAAAmD,OAAqB,KAAAC,IAAkB,KAAAC,IAAkB,KAAArD,IAGrE,UACH,MAAMsD,EAAQ,EAAWC,IAAI7D,KAAMA,MACnC,OAAO,IAAI,EAAWA,KAAKyD,KAAOG,GAAQ5D,KAAK0D,EAAIE,GAAQ5D,KAAK2D,EAAIC,GAAQ5D,KAAKM,EAAIsD,GAGlF,WAAWE,EAAeC,GAC7B,OAAOD,EAAEL,KAAOM,EAAEN,KAAOK,EAAEJ,EAAIK,EAAEL,EAAII,EAAEH,EAAII,EAAEJ,EAAIG,EAAExD,EAAIyD,EAAEzD,EAGtD,oBAAoB0D,EAAcC,GACrC,MAAMC,EAAMnC,KAAKmC,IAAID,EAAU,GACzBE,EAAMpC,KAAKoC,IAAIF,EAAU,GACzBG,EAAMJ,EAAKK,SAEjB,OAAO,IAAI,EAAWH,EAAKC,EAAMH,EAAKrC,EAAIyC,EAAKD,EAAMH,EAAKpC,EAAIwC,EAAKD,EAAMH,EAAKnC,EAAIuC,GAG/E,gBAAgBN,EAAeC,GAClC,OAAO,IAAI,EACPD,EAAEL,KAAOM,EAAEN,KAAOK,EAAEJ,EAAIK,EAAEL,EAAII,EAAEH,EAAII,EAAEJ,EAAIG,EAAExD,EAAIyD,EAAEzD,EAClDwD,EAAEL,KAAOM,EAAEL,EAAII,EAAEJ,EAAIK,EAAEN,KAAOK,EAAEH,EAAII,EAAEzD,EAAIwD,EAAExD,EAAIyD,EAAEJ,EAClDG,EAAEL,KAAOM,EAAEJ,EAAIG,EAAEJ,EAAIK,EAAEzD,EAAIwD,EAAEH,EAAII,EAAEN,KAAOK,EAAExD,EAAIyD,EAAEL,EAClDI,EAAEL,KAAOM,EAAEzD,EAAIwD,EAAEJ,EAAIK,EAAEJ,EAAIG,EAAEH,EAAII,EAAEL,EAAII,EAAExD,EAAIyD,EAAEN,MAMhD,eAAea,GAClB,QAA4BlE,IAAvBkE,EAAcb,KACf,OAAO,EAAWvB,SAASlC,KAAM,EAAWkC,SAASoC,EAAqBtE,KAAKuE,YAE9E,CACD,MAAMC,EAAS,IAAI,EAAW,EAAIF,EAAiB3C,EAAI2C,EAAiB1C,EAAI0C,EAAiBzC,GACvF4C,EAAO,EAAWvC,SAASlC,KAAM,EAAWkC,SAASsC,EAAQxE,KAAKuE,YACxE,OAAO,IAAI7C,EAAA,EAAO+C,EAAKf,EAAGe,EAAKd,EAAGc,EAAKnE,KC/BnD,MAYMoE,EAXF,ICTW,MAGX,YAAoBC,GAAA,KAAAA,YADZ,KAAAC,YAAc,EAElB5E,KAAK6E,KAAO,2BAGN,iBACN,MAAO,IAAO7E,KAAK4E,cAIhB,SAASjD,EAAWC,EAAWC,GAElC,OADA7B,KAAK6E,MAAQ,qBAAqBrB,EAAc7B,EAAGC,EAAGC,OAAO2B,EAAc7B,EAAGC,EAAGC,YAC1E7B,KAGJ,OAAO8E,EAAYC,EAAYC,GAClC,MAAMC,EAAQzB,EAAcsB,EAAIC,EAAIC,GAEpC,OADAhF,KAAK6E,MAAQ,iBAAiBI,KAASA,UAAcA,SAC9CjF,KAGJ,OAEH,OADAA,KAAK6E,MAAQ,sBACN7E,KAGJ,OAEH,OADAA,KAAK6E,MAAQ,sBACN7E,KAGJ,OAEH,OADAA,KAAK6E,MAAQ,sBACN7E,KAGJ,QAAQkF,EAAuBC,EAAuBC,GACzD,MAAMH,GH/BqCrD,EG+BFuD,EH/BmBtD,EG+BVuD,EH9B/C,kBAAoBlC,EG8BSgC,GH9BW,IAAMhC,EAAetB,GAAK,IAAMsB,EAAerB,GAAK,MADhG,IAA4CD,EAAiBC,EGiC5D,OADA7B,KAAK6E,MAAQ,+BAA+BI,SAAaA,SAClDjF,KAGJ,IAAI4C,GACP,MAAMyC,EAAMrF,KAAKsF,iBACXrB,EAAU,iBAAmBf,EAAeN,GAOlD,OANA5C,KAAK6E,MAAQ,QAAQQ,+DAENpB,WAAiBA,8BAChBA,WAAiBA,+BAE3BoB,aACCrF,KAGJ,IAAI4C,GACP,MAAMyC,EAAMrF,KAAKsF,iBACXrB,EAAU,iBAAmBf,EAAeN,GAOlD,OANA5C,KAAK6E,MAAQ,QAAQQ,8BACXpB,iBAAuBA,oDAEvBA,gBAAsBA,+BAE1BoB,aACCrF,KAGJ,IAAI4C,GACP,MAAMyC,EAAMrF,KAAKsF,iBACXrB,EAAU,iBAAmBf,EAAeN,GAOlD,OANA5C,KAAK6E,MAAQ,QAAQQ,8BACXpB,WAAiBA,8BAChBA,WAAiBA,gEAGtBoB,aACCrF,KAIJ,GAAGuF,GACN,MAAMF,EAAMrF,KAAKsF,iBACXrB,EAAUf,EAAeqC,GAO/B,OANAvF,KAAK6E,MAAQ,QAAQQ,+DAENpB,WAAiBA,8BAChBA,WAAiBA,+BAE3BoB,aACCrF,KAGJ,GAAGuF,GACN,MAAMF,EAAMrF,KAAKsF,iBACXrB,EAAUf,EAAeqC,GAO/B,OANAvF,KAAK6E,MAAQ,QAAQQ,8BACXpB,iBAAuBA,oDAEvBA,gBAAsBA,+BAE1BoB,aACCrF,KAGJ,GAAGuF,GACN,MAAMF,EAAMrF,KAAKsF,iBACXrB,EAAUf,EAAeqC,GAO/B,OANAvF,KAAK6E,MAAQ,QAAQQ,8BACXpB,WAAiBA,8BAChBA,WAAiBA,gEAGtBoB,aACCrF,KAGJ,UAAU2B,EAAiBC,EAAiBC,GAE/C,OADA7B,KAAK6E,MAAQ,cAAc3B,EAAevB,MAAMuB,EAAetB,MAAMsB,EAAerB,WAC7E7B,KAGJ,WAAW6E,GAEd,OADA7E,KAAK6E,MAAQA,EACN7E,KAGJ,WAGH,OAFAA,KAAK6E,MAAQ7E,KAAK2E,UAAUa,WAC5BxF,KAAK6E,MAAQ,IACN7E,KAAK6E,ODzHY,IFiCzB,MACH,YAAoBY,EAAuBC,EAAmBC,EAA+BC,GAAzE,KAAAH,QAAuB,KAAAC,IAAmB,KAAAC,gBAA+B,KAAAC,eAI7F,WACI,MAAO,2BACS1C,EAAelD,KAAK4F,kCAC3BpC,EAAcxD,KAAK0F,EAAE/D,EAAG3B,KAAK0F,EAAE9D,EAAG5B,KAAK0F,EAAE7D,4BACpCqB,EAAelD,KAAKyF,2BACzBzF,KAAK2F,2jBE3C6B,EAAG,IAAIjE,EAAA,EAAO,EAAG,EAAG,GAAI,IAAK,MACvEmE,QAAQlD,EAAQ,KAAOK,EAAQ,KAAOA,EAAQ,GAAI,IAAK,MACvD6C,SAAS,GAAI,GAAI,GACjBA,QAAQ,GAAI,GAAK,GACjBA,SAAS,GAAI,GAAI,GACjBC,IAAI,KACJC,IAAI,MACJC,KAAK,MACLC,UAAUtD,EAAQ,IAAM,GAAI,IAAKK,EAAQ,IAAM,GAAI,IAAK,GAGtCwC,WAE3B9E,QAAQC,IAAI,WACZD,QAAQC,IAAI+D,GAEZ,MAOMwB,EAAuB,oyCA+C3BxB,g5DAkEIyB,EAAM,CAACxE,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAC7B,IAAIhC,EACAuG,EAAe,EACfC,EAA0B,IAAI,EAAW,EAAG,EAAG,EAAG,GAEtD,MAAMC,EAA+B,CACjC,CAAC,IAAK,IAAI5E,EAAA,EAAO,EAAG,EAAG,IACvB,CAAC,IAAK,IAAIA,EAAA,GAAQ,EAAG,EAAG,IACxB,CAAC,IAAK,IAAIA,EAAA,EAAO,EAAG,GAAI,IACxB,CAAC,IAAK,IAAIA,EAAA,EAAO,EAAG,EAAG,IACvB,CAAC,IAAK,IAAIA,EAAA,EAAO,EAAG,EAAG,IACvB,CAAC,IAAK,IAAIA,EAAA,EAAO,GAAI,EAAG,KAGtB6E,GAAexE,KAAKyE,GAAK,IACzBC,EAA+B,CACjC,CAAC,UAAW,IAAI/E,EAAA,EAAO,EAAG,EAAG,IAC7B,CAAC,YAAa,IAAIA,EAAA,GAAQ,EAAG,EAAG,IAChC,CAAC,YAAa,IAAIA,EAAA,EAAO,EAAG,EAAG,IAC/B,CAAC,aAAc,IAAIA,EAAA,EAAO,GAAI,EAAG,KAGtB,SAASgF,IACpB,MAAMC,EAASC,SAASC,eAAe,UACvC,YAAaF,EAAQ,IAAK,KAC1B,MAAMG,EAAKH,EAAOI,WAAW,SAG7B,GAAW,OAAPD,EAEA,YADAE,MAAM,gEAKVF,EAAGG,WAAW,EAAK,EAAK,EAAK,GAC7BH,EAAGI,MAAMJ,EAAGK,kBAEZ,MAAMC,EAgHV,SAA2BN,EAA2BO,EAAkBC,GACpE,MAAMC,EAAeC,EAAWV,EAAIA,EAAGW,cAAeJ,GAChDK,EAAiBF,EAAWV,EAAIA,EAAGa,gBAAiBL,GAIpDF,EAAgBN,EAAGc,gBAOzB,GANAd,EAAGe,aAAaT,EAAeG,GAC/BT,EAAGe,aAAaT,EAAeM,GAC/BZ,EAAGgB,YAAYV,IAIVN,EAAGiB,oBAAoBX,EAAeN,EAAGkB,aAE5C,YADAhB,MAAM,4CAA8CF,EAAGmB,kBAAkBb,IAI3E,OAAOA,EAlIec,CAAkBpB,EA7JjB,0FA6JyCZ,GAG1DiC,EAiFV,SAAqBrB,GAEjB,MAAMsB,EAAiBtB,EAAGuB,eAI1BvB,EAAGwB,WAAWxB,EAAGyB,aAAcH,GAiB/B,OAJAtB,EAAG0B,WAAW1B,EAAGyB,aACH,IAAIE,aAXA,EACb,EAAM,EACP,EAAM,GACN,GAAM,EACN,GAAM,IAQI3B,EAAG4B,aAEV,CACLC,SAAUP,GAzGIQ,CAAY9B,GAG5B+B,EAAU/B,EAAIM,EAAee,EAASxB,GAEtC9G,EAAO,IAAIiJ,EAAA,EAAgBlC,SAASmC,MAAM,GAI9C,SAASC,EAAWlC,EAA2BmC,EAAuBd,EAAoCxB,GACtG9G,EAAKqJ,SACL,IAAIC,GAAY,EAEhB,IAAK,MAAOpJ,EAAKqJ,KAAQ9C,EACrB,GAAIzG,EAAK2B,UAAUzB,GAAM,CACrB,MAAMsJ,EAAQxJ,EAAK2B,UAAU,SAzDrB,IACJ,KAyDE8H,EAAMjD,EAAYkD,eAAeH,GACvCjD,EAAIxE,GAAK2H,EAAI3H,EAAI0H,EACjBlD,EAAIvE,GAAK0H,EAAI1H,EAAIyH,EACjBlD,EAAItE,GAAKyH,EAAIzH,EAAIwH,EACjBF,GAAY,EAIpB,IAAK,MAAOpJ,EAAKiE,KAASyC,EAClB5G,EAAK2B,UAAUzB,KACfsG,EAAc,EAAWnE,SAASmE,EAAa,EAAWmD,aAAaxF,EAAMuC,KAIrFsC,EAAU/B,EAAImC,EAASd,EAASxB,GAChC8C,sBAAsB,IAAMT,EAAWlC,EAAImC,EAASd,EAASxB,IAzB7DqC,CAAWlC,EAAIM,EAAee,EAASxB,GA6B3C,SAASkC,EAAU/B,EAA2BmC,EAAuBd,EAAoCxB,GACrGG,EAAGG,WAAW,EAAK,EAAK,EAAK,GAC7BH,EAAG4C,WAAW,GACd5C,EAAG6C,OAAO7C,EAAG8C,YACb9C,EAAG+C,UAAU/C,EAAGgD,QAIhBhD,EAAGI,MAAMJ,EAAGK,iBAAmBL,EAAGiD,kBAIlC,CACE,MAAMC,EAAgB,EAChBC,EAAOnD,EAAGoD,MACVC,GAAY,EACZC,EAAS,EAETC,EAAS,EACfvD,EAAGwB,WAAWxB,EAAGyB,aAAcJ,EAAQQ,UACvC7B,EAAGwD,oBACGxD,EAAGyD,kBAAkBtB,EAAS,mBAC9Be,EACAC,EACAE,EACAC,EACAC,GACNvD,EAAG0D,wBACD1D,EAAGyD,kBAAkBtB,EAAS,oBAKlCnC,EAAG2D,WAAWxB,GACdnC,EAAG4D,WAAW5D,EAAG6D,mBAAmB1B,EAAS,cAAe,CAACtC,EAAOiE,MAAOjE,EAAOkE,SAClF/D,EAAGgE,WAAWhE,EAAG6D,mBAAmB1B,EAAS,WAAY,CAAC9C,EAAIxE,EAAGwE,EAAIvE,EAAGuE,EAAItE,IAC5EiF,EAAGiE,WAAWjE,EAAG6D,mBAAmB1B,EAAS,cAAe,CAAC5C,EAAY3C,EAAG2C,EAAY1C,EAAG0C,EAAY/F,EAAG+F,EAAY5C,OACtHqD,EAAGkE,UAAUlE,EAAG6D,mBAAmB1B,EAAS,KAAM7C,GAClDA,GAA+B,EAC/B,CACE,MAAMiE,EAAS,EACTY,EAAc,EACpBnE,EAAGoE,WAAWpE,EAAGqE,eAAgBd,EAAQY,IAyD/C,SAASzD,EAAWV,EAA2BmD,EAAcmB,GACzD,MAAMC,EAASvE,EAAGwE,aAAarB,GAY/B,OARAnD,EAAGyE,aAAaF,EAAQD,GAIxBtE,EAAG0E,cAAcH,GAIZvE,EAAG2E,mBAAmBJ,EAAQvE,EAAG4E,gBAM/BL,GALLrE,MAAM,4CAA8CF,EAAG6E,iBAAiBN,SACxEvE,EAAG8E,aAAaP,IE9UP,SAASQ,IAEpB,OADA,YAAgB,IAAMnF,KACf,uBAAKoF,UAAU,gCAClB,0BAAQC,GAAG","file":"10.bundle.js","sourcesContent":["import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { VERSION } from \"@microsoft/signalr\";\r\n\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export type GlslConstant = number | GlslTimeVariable;\r\n\r\nexport function GlslSin(rate: number, min?: number, max?: number): GlslTimeVariable {\r\n    const useMin = min === undefined ? -1 : min;\r\n    const useMax = max === undefined ? 1 : max;\r\n    return new GlslTimeVariable('sin', useMin, useMax, rate);\r\n}\r\n\r\nexport function GlslCos(rate: number, min?: number, max?: number): GlslTimeVariable {\r\n    const useMin = min === undefined ? -1 : min;\r\n    const useMax = max === undefined ? 1 : max;\r\n    return new GlslTimeVariable('cos', useMin, useMax, rate);\r\n}\r\n\r\nexport class GlslTimeVariable {\r\n    constructor (public timeFunc: 'sin' | 'cos', public min: number, public max: number, public rate: number) {\r\n    }\r\n}\r\n\r\nfunction constIsTimeVar(c: GlslConstant): c is GlslTimeVariable {\r\n    return (c as GlslTimeVariable).timeFunc !== undefined;\r\n}\r\n\r\nexport function glslFloatConst(n: GlslConstant): string {\r\n    if (constIsTimeVar(n)) {\r\n        const range = (n.max - n.min);\r\n        const halfRange = range / 2;\r\n        const midp = (n.max + n.min) / 2;\r\n        const rate = `(t/60.0 * ${glslFloatConst(n.rate)})`;\r\n        switch (n.timeFunc) {\r\n            case 'sin': return `sin(${rate} * PI * 2.0) * ${glslFloatConst(halfRange)} + ${glslFloatConst(midp)}`;\r\n            case 'cos': return `cos(${rate} * PI * 2.0) * ${glslFloatConst(halfRange)} + ${glslFloatConst(midp)}`;\r\n        }\r\n    } else {\r\n        const asstr = n.toString();\r\n        if (asstr.indexOf('.') === -1) return asstr + '.0';\r\n        return asstr;\r\n    }\r\n}","import Vector from \"../../common/3d/Vector\";\r\nimport { glslFloatConst, GlslConstant } from \"./GlslValue\";\r\n\r\nexport default interface IDEPrimitive {\r\n    emitGlsl(): string;\r\n}\r\n\r\nexport function glslVec3Const(x: GlslConstant, y: GlslConstant, z: GlslConstant) {\r\n    return 'vec3(' + glslFloatConst(x) + ',' + glslFloatConst(y) + ',' + glslFloatConst(z)+')';\r\n}\r\n\r\nexport function glslUnitVec3Const(x: GlslConstant, y: GlslConstant, z: GlslConstant) {\r\n    return 'normalize(vec3(' + glslFloatConst(x) + ',' + glslFloatConst(y) + ',' + glslFloatConst(z) + '))';\r\n}\r\n\r\nexport class SphereDE implements IDEPrimitive {\r\n    constructor(public radius: number) { }\r\n    emitGlsl() {\r\n        return `return length(p) - ${glslFloatConst(this.radius)};\\r\\n`;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class BoxDE implements IDEPrimitive {\r\n    constructor(public xlen: number, public ylen: number, public zlen: number) { }\r\n    emitGlsl() {\r\n        return `vec3 q = abs(p) - ${glslVec3Const(this.xlen, this.ylen, this.zlen)};\\r\\nreturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);`;\r\n    }\r\n}\r\n\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class BoundingBoxDE implements IDEPrimitive {\r\n    constructor(public xlen: number, public ylen: number, public zlen: number, public segLen: number) { }\r\n    emitGlsl() {\r\n        return `p = abs(p)-${glslVec3Const(this.xlen, this.ylen, this.zlen)};\r\nvec3 q = abs(p+${glslFloatConst(this.segLen)})-${glslFloatConst(this.segLen)};\r\nreturn min(min(\r\n    length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\r\n    length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\r\n    length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\\r\\n`;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class MengerSpongeDE implements IDEPrimitive {\r\n    constructor(private scale: number, private c: Vector, private maxIterations: number, private bailoutRange: number) {\r\n\r\n    }\r\n\r\n    emitGlsl() {\r\n        return `\r\nconst float bailout = ${glslFloatConst(this.bailoutRange)};\r\nconst vec3 C = ${glslVec3Const(this.c.x, this.c.y, this.c.z)};\r\nconst float scale = ${glslFloatConst(this.scale)};\r\nconst int MI = ${this.maxIterations};\r\nfloat r = dot(p, p);\r\nint numi = 0;\r\nfor(int i = 0; i < MI; i++){\r\n    numi = i;\r\n    if(r >= bailout) break;\r\n\r\n    // Rotate 1\r\n    \r\n    p = abs(p);\r\n    if(p.x - p.y < 0.0){ float x1=p.y; p.y=p.x; p.x=x1;}\r\n    if(p.x - p.z < 0.0){ float x1=p.z; p.z=p.x; p.x=x1;}\r\n    if(p.y - p.z < 0.0){ float y1=p.z; p.z=p.y; p.y=y1;}\r\n\r\n    // Rotate 2\r\n\r\n    p.xy = scale * p.xy - C.xy * (scale-1.0);\r\n    p.z=scale*p.z;\r\n    if(p.z>0.5*C.z*(scale-1.0)) p.z-=C.z*(scale-1.0);\r\n    \r\n    r = dot(p, p);\r\n}\r\nreturn (length(p)-2.0)*pow(scale,-float(numi));\\r\\n`;\r\n    }\r\n}\r\n\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class RotaryMengerSpongeDE implements IDEPrimitive {\r\n    constructor(private scale: number, private c: Vector, private maxIterations: number, private bailoutRange: number, private rRate: number) {\r\n\r\n    }\r\n\r\n    emitGlsl() {\r\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(this.rRate);\r\n        return `\r\nmat3 mx = mat3(\r\n    cos(${radians}), 0.0, -sin(${radians}),\r\n    0.0, 1.0, 0.0,\r\n    sin(${radians}), 0.0, cos(${radians})\r\n);\r\n\r\nconst float bailout = ${glslFloatConst(this.bailoutRange)};\r\nconst vec3 C = ${glslVec3Const(this.c.x, this.c.y, this.c.z)};\r\nconst float scale = ${glslFloatConst(this.scale)};\r\nconst int MI = ${this.maxIterations};\r\nfloat r = dot(p, p);\r\nint numi = 0;\r\nfor(int i = 0; i < MI; i++){\r\n    numi = i;\r\n    if(r >= bailout) break;\r\n\r\n    // Rotate 1\r\n    p = mx * p;\r\n    \r\n    p = abs(p);\r\n    if(p.x - p.y < 0.0){ float x1=p.y; p.y=p.x; p.x=x1;}\r\n    if(p.x - p.z < 0.0){ float x1=p.z; p.z=p.x; p.x=x1;}\r\n    if(p.y - p.z < 0.0){ float y1=p.z; p.z=p.y; p.y=y1;}\r\n\r\n    // Rotate 2\r\n\r\n    p.xy = scale * p.xy - C.xy * (scale-1.0);\r\n    p.z=scale*p.z;\r\n    if(p.z>0.5*C.z*(scale-1.0)) p.z-=C.z*(scale-1.0);\r\n    \r\n    r = dot(p, p);\r\n}\r\nreturn (length(p)-2.0)*pow(scale,-float(numi));\\r\\n`;\r\n    }\r\n}","import Vector from './Vector';\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport default class Quaternion {\r\n    constructor(public real: number, public i: number, public j: number, public k: number) {\r\n    }\r\n\r\n    public inverse(): Quaternion {\r\n        const denom = Quaternion.Dot(this, this);\r\n        return new Quaternion(this.real / denom, -this.i / denom, -this.j / denom, -this.k / denom);\r\n    }\r\n\r\n    public static Dot(a: Quaternion, b: Quaternion): number {\r\n        return a.real * b.real + a.i * b.i + a.j * b.j + a.k * b.k;\r\n    }\r\n\r\n    public static axisRotation(axis: Vector, radians: number): Quaternion {\r\n        const cos = Math.cos(radians / 2);\r\n        const sin = Math.sin(radians / 2);\r\n        const len = axis.length();\r\n\r\n        return new Quaternion(cos, sin * axis.x / len, sin * axis.y / len, sin * axis.z / len);\r\n    }\r\n\r\n    public static multiply(a: Quaternion, b: Quaternion) {\r\n        return new Quaternion (\r\n            a.real * b.real - a.i * b.i - a.j * b.j - a.k * b.k,\r\n            a.real * b.i + a.i * b.real + a.j * b.k - a.k * b.j,\r\n            a.real * b.j - a.i * b.k + a.j * b.real + a.k * b.i,\r\n            a.real * b.k + a.i * b.j - a.j * b.i + a.k * b.real\r\n        );\r\n    }\r\n\r\n    public applyTransform(point: Quaternion): Quaternion;\r\n    public applyTransform(vec3: Vector): Vector;\r\n    public applyTransform(point: Quaternion|Vector): Quaternion|Vector {\r\n        if ((point as any).real !== undefined) {\r\n            return Quaternion.multiply(this, Quaternion.multiply(point as Quaternion, this.inverse()));\r\n        }\r\n        else {\r\n            const inputQ = new Quaternion(0, (point as Vector).x, (point as Vector).y, (point as Vector).z);\r\n            const qOut = Quaternion.multiply(this, Quaternion.multiply(inputQ, this.inverse()));\r\n            return new Vector(qOut.i, qOut.j, qOut.k);\r\n        }\r\n    }\r\n}","import { ResizeCanvas } from '../common/CanvasHelpers';\r\nimport { mat4 } from 'gl-matrix';\r\nimport DistanceEstimateBuilder from './debuilder/DistanceEstimateBuilder';\r\nimport { BoundingBoxDE, SphereDE, BoxDE, MengerSpongeDE, RotaryMengerSpongeDE } from './debuilder/DistanceEstimatePrimitives';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Quaternion from '../common/3d/Quaternion';\r\nimport Vector from '../common/3d/Vector';\r\nimport { GlslSin, GlslCos } from './debuilder/GlslValue';\r\n\r\n// TODO: Use asset loader to load these?\r\n\r\nconst distanceFunc: DistanceEstimateBuilder =\r\n    new DistanceEstimateBuilder(new MengerSpongeDE(3, new Vector(1, 1, 1), 100, 100))\r\n        .symAxis(GlslSin(0.03), GlslCos(0.03), GlslCos(1, -.01, .01))\r\n        .symAxis(-.8, .2, 0)\r\n        .symAxis(.4, 0.6, 0)\r\n        .symAxis(-.4, .6, 0)\r\n        .rXt(0.03)\r\n        .rYt(0.003)\r\n        .rZt(-.0009)\r\n        .translate(GlslSin(0.1, -.4, .4), GlslCos(0.2, -.2, .2), 0)\r\n        ;\r\n\r\nconst dglsl = distanceFunc.emitGlsl();\r\n\r\nconsole.log('DISTF: ');\r\nconsole.log(dglsl);\r\n\r\nconst vertexShaderSource = `\r\nattribute vec4 aVertexPosition;\r\nvoid main() {\r\n  gl_Position = aVertexPosition;\r\n}\r\n`;\r\n\r\nconst fragmentShaderSource = `\r\nprecision mediump float;\r\n#define PI 3.1415926538\r\n\r\nuniform vec2 WindowSize;\r\nuniform vec3 cam_pos;\r\nuniform vec4 cam_orient;\r\nuniform float t;\r\n\r\nconst int MaximumRaySteps = 50;\r\nconst float MinimumDistance = 0.001;\r\nconst float MaxFogDist = 20.0;\r\n\r\nconst float nscale = 0.001;\r\nconst vec3 xdir = vec3(1.0, 0.0, 0.0);\r\nconst vec3 ydir = vec3(0.0, 1.0, 0.0);\r\nconst vec3 zdir = vec3(0.0, 0.0, 1.0);\r\nconst vec3 lightdir = normalize(vec3(1.0, 0.0, -1.0));\r\nconst vec3 lightsrc = lightdir * 10.0;\r\nconst vec3 amblight = vec3(0.1, 0.1, 0.1);\r\nconst vec3 normlight = vec3(1, .95, .9);\r\nconst float ambocc = 0.2;\r\nconst float shadowLightness = .3;\r\n\r\nconst float scale = 3.0;\r\nconst vec3 C = vec3(1, 1, 1);\r\nconst int MI = 100;\r\nconst float bailout = 10.0;\r\n\r\nvec4 qInverse(vec4 q) {\r\n    float denom = dot(q, q);\r\n    return vec4(-q.x / denom, -q.y / denom, -q.z / denom, q.w / denom);\r\n}\r\n\r\nvec4 qMult(vec4 a, vec4 b) {\r\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\r\n    res.x = a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y;\r\n    res.y = a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x;\r\n    res.z = a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w;\r\n    res.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\r\n    return res;\r\n}\r\n\r\nvec4 qTransform(vec4 f, vec4 pt) {\r\n    return qMult(f, qMult(pt, qInverse(f)));\r\n}\r\n\r\n${dglsl}\r\n\r\nvec3 trace(vec3 from, vec3 direction) {\r\n\tfloat totalDistance = 0.0;\r\n    int nsteps;\r\n    bool hit = false;\r\n\tfor (int steps = 0; steps < MaximumRaySteps; steps++) {\r\n        nsteps = steps;\r\n\t\tvec3 p = from + totalDistance * direction;\r\n\t\tfloat distance = dist(p);\r\n\t\ttotalDistance += distance;\r\n        if (distance < MinimumDistance) \r\n        {\r\n            hit = true;\r\n            break;\r\n        }\r\n    }\r\n\treturn vec3(totalDistance, 1.0-float(nsteps)/float(MaximumRaySteps), hit ? 1.0 : 0.0);\r\n}\r\n\r\nfloat derel(float f) {\r\n    return f + 1.0 / 2.0;\r\n}\r\n\r\nvoid main() {\r\n\r\n    float losx = (gl_FragCoord.x / WindowSize.x) * 2.0 - 1.0;\r\n    float losy = (gl_FragCoord.y / WindowSize.y) * 2.0 - 1.0;\r\n    vec3 losFwd = normalize(vec3(losx, losy, 1));\r\n    vec3 dir = qTransform(cam_orient, vec4(losFwd.x, losFwd.y, losFwd.z, 0)).xyz;\r\n\r\n    vec3 colis = trace(cam_pos, dir);\r\n\r\n    if(colis.z == 0.0)\r\n    {\r\n        gl_FragColor = vec4(0, 0, 0, 1.0);\r\n    }\r\n    else\r\n    {\r\n        vec3 pos = cam_pos + colis.x * dir;\r\n        vec3 dlight = 1.0 - amblight;\r\n        vec3 n = normalize(vec3(\r\n            dist(pos+xdir*nscale)-dist(pos-xdir*nscale),\r\n            dist(pos+ydir*nscale)-dist(pos-ydir*nscale),\r\n            dist(pos+zdir*nscale)-dist(pos-zdir*nscale)\r\n        ));\r\n\r\n        vec3 lightCastSrc = pos + n * MinimumDistance * 2.0;\r\n        vec3 lcolis = trace(lightCastSrc, normalize(lightsrc - lightCastSrc));\r\n\r\n        float shadow = 1.0 - lcolis.z;\r\n        shadow = min(shadow + shadowLightness, 1.0);\r\n\r\n        float normalLightAmt = clamp(dot(n, lightdir), 0.0, 1.0);\r\n                        \r\n        float fog = 1.0 - min(1.0, colis.x / MaxFogDist);\r\n        float cplx = colis.y;\r\n\r\n        vec3 color = (amblight + (1.0 - amblight) * normlight * normalLightAmt * (1.0 - ambocc + ambocc * colis.y)) * fog * shadow;\r\n        gl_FragColor = vec4(color.x, color.y, color.z, 1.0);\r\n    }\r\n}\r\n`;\r\n\r\nconst fastCamMove = 0.05;\r\nconst camMove = 0.005;\r\nconst cam = {x: 0, y: 0, z: -2};\r\nlet keys: KeyboardManager;\r\nlet repaintCount = 0;\r\nlet camRotation: Quaternion = new Quaternion(1, 0, 0, 0);\r\n\r\nconst moveKeys: [string, Vector][] = [\r\n    ['w', new Vector(0, 0, 1)],\r\n    ['a', new Vector(-1, 0, 0)],\r\n    ['s', new Vector(0, 0, -1)],\r\n    ['d', new Vector(1, 0, 0)],\r\n    ['q', new Vector(0, 1, 0)],\r\n    ['z', new Vector(0, -1, 0)],\r\n];\r\n\r\nconst camTurnRate = -Math.PI / 120;\r\nconst lookKeys: [string, Vector][] = [\r\n    ['ArrowUp', new Vector(1, 0, 0)],\r\n    ['ArrowDown', new Vector(-1, 0, 0)],\r\n    ['ArrowLeft', new Vector(0, 1, 0)],\r\n    ['ArrowRight', new Vector(0, -1, 0)],\r\n];\r\n\r\nexport default function main() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    ResizeCanvas(canvas, 800, 600);\r\n    const gl = canvas.getContext('webgl');\r\n\r\n    // Only continue if WebGL is available and working\r\n    if (gl === null) {\r\n        alert('Unable to initialize WebGL. Your browser may not support it.');\r\n        return;\r\n    }\r\n\r\n    // Clear black\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    const shaderProgram = initShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\r\n    // Here's where we call the routine that builds all the\r\n    // objects we'll be drawing.\r\n    const buffers = initBuffers(gl);\r\n\r\n    // Draw the scene\r\n    drawScene(gl, shaderProgram, buffers, canvas);\r\n\r\n    keys = new KeyboardManager(document.body, false);\r\n    renderLoop(gl, shaderProgram, buffers, canvas);\r\n}\r\n\r\nfunction renderLoop(gl: WebGLRenderingContext, program: WebGLProgram, buffers: { position: WebGLBuffer }, canvas: HTMLCanvasElement) {\r\n    keys.update();\r\n    let doRepaint = false;\r\n\r\n    for (const [key, dir] of moveKeys) {\r\n        if (keys.isKeyDown(key)) {\r\n            const speed = keys.isKeyDown('Shift') ? fastCamMove : camMove;\r\n            const rel = camRotation.applyTransform(dir);\r\n            cam.x += rel.x * speed;\r\n            cam.y += rel.y * speed;\r\n            cam.z += rel.z * speed;\r\n            doRepaint = true;\r\n        }\r\n    }\r\n\r\n    for (const [key, axis] of lookKeys) {\r\n        if (keys.isKeyDown(key)) {\r\n            camRotation = Quaternion.multiply(camRotation, Quaternion.axisRotation(axis, camTurnRate));\r\n        }\r\n    }\r\n\r\n    drawScene(gl, program, buffers, canvas);\r\n    requestAnimationFrame(() => renderLoop(gl, program, buffers, canvas));\r\n}\r\n\r\n\r\nfunction drawScene(gl: WebGLRenderingContext, program: WebGLProgram, buffers: { position: WebGLBuffer }, canvas: HTMLCanvasElement) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(program, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(program, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(program);\r\n    gl.uniform2fv(gl.getUniformLocation(program, 'WindowSize'), [canvas.width, canvas.height]);\r\n    gl.uniform3fv(gl.getUniformLocation(program, 'cam_pos'), [cam.x, cam.y, cam.z]);\r\n    gl.uniform4fv(gl.getUniformLocation(program, 'cam_orient'), [camRotation.i, camRotation.j, camRotation.k, camRotation.real]);\r\n    gl.uniform1f(gl.getUniformLocation(program, 't'), repaintCount);\r\n    repaintCount = (repaintCount + 1);\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n  }\r\n\r\nfunction initBuffers(gl: WebGLRenderingContext) {\r\n    // Create a buffer for the square's positions.\r\n    const positionBuffer = gl.createBuffer();\r\n\r\n    // Select the positionBuffer as the one to apply buffer\r\n    // operations to from here out.\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    // Now create an array of positions for the square.\r\n    const positions = [\r\n        -1.0,  1.0,\r\n        1.0,  1.0,\r\n       -1.0, -1.0,\r\n        1.0, -1.0,\r\n    ];\r\n\r\n    // Now pass the list of positions into WebGL to build the\r\n    // shape. We do this by creating a Float32Array from the\r\n    // JavaScript array, then use it to fill the current buffer.\r\n    gl.bufferData(gl.ARRAY_BUFFER,\r\n                  new Float32Array(positions),\r\n                  gl.STATIC_DRAW);\r\n\r\n    return {\r\n      position: positionBuffer,\r\n    };\r\n  }\r\n\r\nfunction initShaderProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n  //\r\n  // creates a shader of the given type, uploads the source and\r\n  // compiles it.\r\n  //\r\nfunction loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n\r\n    // Send the source to the shader object\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    // Compile the shader program\r\n\r\n    gl.compileShader(shader);\r\n\r\n    // See if it compiled successfully\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n","import IDEPrimitive, { glslVec3Const, glslUnitVec3Const } from './DistanceEstimatePrimitives';\r\nimport { GlslConstant, glslFloatConst } from './GlslValue';\r\n\r\nexport default class DistanceEstimateBuilder {\r\n    private glsl: string;\r\n    private nextTempVar = 0;\r\n    constructor(private primitive: IDEPrimitive) {\r\n        this.glsl = 'float dist(vec3 p) {\\r\\n';\r\n    }\r\n\r\n    protected getTempVarName() {\r\n        return 't' + (this.nextTempVar++);\r\n    }\r\n\r\n\r\n    public elongate(x: number, y: number, z: number): DistanceEstimateBuilder {\r\n        this.glsl += `p = p - clamp(p, -${glslVec3Const(x, y, z)}, ${glslVec3Const(x, y, z)} );\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public repeat(xd: number, yd: number, zd: number): DistanceEstimateBuilder {\r\n        const glslc = glslVec3Const(xd, yd, zd);\r\n        this.glsl += `p = mod(p+0.5*${glslc},${glslc})-0.5*${glslc};\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public symX(): DistanceEstimateBuilder {\r\n        this.glsl += `p.x = abs(p.x);\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public symY(): DistanceEstimateBuilder {\r\n        this.glsl += `p.y = abs(p.y);\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public symZ(): DistanceEstimateBuilder {\r\n        this.glsl += `p.z = abs(p.z);\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public symAxis(normalX: GlslConstant, normalY: GlslConstant, normalZ: GlslConstant) {\r\n        const glslc = glslUnitVec3Const(normalX, normalY, normalZ);\r\n        this.glsl += `p -= 2.0 * min(0.00, dot(p, ${glslc})) * ${glslc};\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public rXt(rate: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            1.0, 0.0, 0.0,\r\n            0.0, cos(${radians}), sin(${radians}),\r\n            0.0, -sin(${radians}), cos(${radians})\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public rYt(rate: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            cos(${radians}), 0.0, -sin(${radians}),\r\n            0.0, 1.0, 0.0,\r\n            sin(${radians}), 0.0, cos(${radians})\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public rZt(rate: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            cos(${radians}), sin(${radians}), 0.0,\r\n            -sin(${radians}), cos(${radians}), 0.0,\r\n            0.0, 0.0, 1.0\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n\r\n    public rX(rad: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = glslFloatConst(rad);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            1.0, 0.0, 0.0,\r\n            0.0, cos(${radians}), sin(${radians}),\r\n            0.0, -sin(${radians}), cos(${radians})\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public rY(rad: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = glslFloatConst(rad);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            cos(${radians}), 0.0, -sin(${radians}),\r\n            0.0, 1.0, 0.0,\r\n            sin(${radians}), 0.0, cos(${radians})\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public rZ(rad: number): DistanceEstimateBuilder {\r\n        const mtx = this.getTempVarName();\r\n        const radians = glslFloatConst(rad);\r\n        this.glsl += `mat3 ${mtx} = mat3(\r\n            cos(${radians}), sin(${radians}), 0.0,\r\n            -sin(${radians}), cos(${radians}), 0.0,\r\n            0.0, 0.0, 1.0\r\n        );\r\n        p = ${mtx} * p;\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public translate(x: GlslConstant, y: GlslConstant, z: GlslConstant): DistanceEstimateBuilder {\r\n        this.glsl += `p = p-vec3(${glslFloatConst(x)},${glslFloatConst(y)},${glslFloatConst(z)});\\r\\n`;\r\n        return this;\r\n    }\r\n\r\n    public customGlsl(glsl: string) {\r\n        this.glsl += glsl;\r\n        return this;\r\n    }\r\n\r\n    public emitGlsl(): string {\r\n        this.glsl += this.primitive.emitGlsl();\r\n        this.glsl += '}';\r\n        return this.glsl;\r\n    }\r\n}","import * as React from 'react';\r\nimport main from '../../../projects/raymarch';\r\n\r\nexport default function RaymarchComponent() {\r\n    React.useEffect(() => main());\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas'></canvas>\r\n    </div>;\r\n}"],"sourceRoot":""}