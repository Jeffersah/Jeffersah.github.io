{"version":3,"file":"bullets.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/bullets/const.ts","webpack://trading-game/./src/projects/bullets/assets/bullets_entities.png","webpack://trading-game/./src/projects/bullets/assets/Ships.png","webpack://trading-game/./src/projects/bullets/assets/Flares.png","webpack://trading-game/./src/projects/bullets/Player.ts","webpack://trading-game/./src/projects/bullets/ETeam.ts","webpack://trading-game/./src/projects/bullets/GameState.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/bullets/Effects/SingleExplosion.ts","webpack://trading-game/./src/projects/common/interpolation/TimingFunction.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/bullets/Effects/Explosion.ts","webpack://trading-game/./src/projects/common/Angle.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack://trading-game/./src/projects/common/position/Line.ts","webpack://trading-game/./src/projects/common/position/Bounds.ts","webpack://trading-game/./src/projects/bullets/Ship.ts","webpack://trading-game/./src/projects/common/assets/AnimationControl.ts","webpack://trading-game/./src/projects/bullets/data/parsing/parsers.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectControl.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectFuncs.ts","webpack://trading-game/./src/projects/bullets/weapons/Weapon.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponGroup.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponTimer.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack://trading-game/./src/projects/bullets/ai/IDebugMarker.ts","webpack://trading-game/./src/projects/bullets/ai/ShipAI.ts","webpack://trading-game/./src/projects/bullets/ai/BroadsideAI.ts","webpack://trading-game/./src/projects/bullets/ai/FighterAI.ts","webpack://trading-game/./src/projects/bullets/ai/IShipAI.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack://trading-game/./src/projects/bullets/data/parsing/weapons.ts","webpack://trading-game/./src/projects/bullets/index.ts","webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/assets/SpriteAnimation.ts","webpack://trading-game/./src/projects/common/assets/SpriteAtlas.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Angle.ts","webpack://trading-game/./src/projects/common/position/Point.ts"],"sourcesContent":["export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.MultWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.Length();\r\n        let vAngle = this.velocity.Direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.AddWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Point from \"../common/position/Point\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n\r\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\r\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\r\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\r\n        if(maxRange !== undefined) {\r\n            const rangeSq = maxRange * maxRange;\r\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).LengthSq() <= rangeSq);\r\n        }\r\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).LengthSq() }));\r\n        shipsAndRanges.sort((a, b) => a.range - b.range);\r\n        return shipsAndRanges.map(s => s.ship);\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { Keyframes } from './Keyframes';\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { exception } from \"console\";\r\nimport { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(interpolator.arguments === undefined) {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.Clone();\r\n        realPoint.SubtractWith(Point.Multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.AddWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.Dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.Length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\nimport { Weapon } from \"./weapons/Weapon\";\r\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    public currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam,\r\n        private weaponGroups: WeaponGroup[]) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.Multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].tick(gs, this);\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.AddWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].draw(ctx, this);\r\n        }\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n\r\n        this.ai.debugDraw(ctx, this);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { PlayingAnimation } from \"./SpriteAnimation\";\r\nimport { AtlasSprite } from \"./SpriteAtlas\";\r\n\r\nexport class AnimationControl {\r\n    queue: (PlayingAnimation | AtlasSprite)[];\r\n    scaleFactor: Point;\r\n\r\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\r\n        this.queue = [initial];\r\n        if(size === undefined) {\r\n            this.scaleFactor = new Point(1, 1);\r\n        }\r\n        else if(isSprite(initial)) {\r\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\r\n        }\r\n        else {\r\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\r\n        }\r\n    }\r\n\r\n    current(): PlayingAnimation|AtlasSprite {\r\n        return this.queue[0];\r\n    }\r\n\r\n    enqueueFront(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.splice(0, 0, src);\r\n    }\r\n\r\n    play(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue = [src];\r\n    }\r\n\r\n    enqueue(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.push(src);\r\n    }\r\n\r\n    tick() {\r\n        if(isSprite(this.queue[0])) {\r\n            this.advance();\r\n        }\r\n        else {\r\n            if(this.queue[0].tick()) this.advance();\r\n        }\r\n    }\r\n\r\n    advance() {\r\n        if(this.queue.length > 1) {\r\n            this.queue.splice(0, 1);\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\r\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\r\n    }\r\n\r\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\r\n        if(isSprite(src)) return Point.Multiply(src.sourceSize, this.scaleFactor);\r\n        else return Point.Multiply(src.source.sourceSize, this.scaleFactor);\r\n    }\r\n}\r\n\r\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\r\n    return (<AtlasSprite>src).origin !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport Point from \"../../../common/position/Point\";\r\nimport { Range } from '../../../common/Range';\r\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\r\n\r\nexport function parseJsonPoint(jpt: [number, number]) {\r\n    return new Point(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonRange(jpt: [number, number]) {\r\n    return new Range(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonAngle(input: number) {\r\n    return input * Math.PI * 2;\r\n}\r\n\r\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\r\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\r\n}\r\n\r\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\r\n    return atlases[anim.file].getAnimation(\r\n        parseJsonPoint(anim.imgOffset),\r\n        parseJsonPoint(anim.frameSize),\r\n        parseJsonPoint(anim.origin),\r\n        anim.numFrames\r\n    );\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { CreateEffect } from \"./EffectFuncs\";\r\n\r\nexport default class EffectControl {\r\n    public effects: IEffect[];\r\n    constructor() {\r\n        this.effects = [];\r\n    }\r\n\r\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\r\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\r\n    }\r\n\r\n    tick() {\r\n        for(let i = this.effects.length - 1; i >= 0; i --) {\r\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.effects.length; i++) {\r\n            this.effects[i].draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { parseJsonRange } from \"../data/parsing/parsers\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Explosion } from \"./Explosion\";\r\n\r\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\r\n    switch(effect.type) {\r\n        case \"explosion\":\r\n            return new Explosion(pt, \r\n                parseJsonRange(effect.burstXVariance),\r\n                parseJsonRange(effect.burstYVariance),\r\n                parseJsonRange(effect.numBursts),\r\n                effect.burstDelay,\r\n                parseJsonRange(effect.burstLifetime),\r\n                parseJsonRange(effect.burstOuterRadius));\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\r\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport EffectControl from \"../Effects/EffectControl\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\r\n\r\nexport interface IWeaponArgs {\r\n    offset: Point;\r\n    sprite?: AtlasSprite;\r\n    shootAnimation?: ISpriteAnimationArgs;\r\n    shootEffect?: IJsonEffect;\r\n\r\n    rotation: number;\r\n\r\n    turret?: {\r\n        maxAngle: number;\r\n        turnRate: number;\r\n    }\r\n\r\n    acquisitionAngle: number;\r\n    minRange?: number;\r\n    range: number;\r\n}\r\n\r\nexport class Weapon {\r\n    turretAngle: number;\r\n    actualAnchor: Point;\r\n    imgControl ?: AnimationControl;\r\n    effects: EffectControl;\r\n\r\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\r\n        this.turretAngle = 0;\r\n        this.actualAnchor = this.args.offset.Clone();\r\n        this.actualAnchor.SubtractWith(Point.Multiply(shipDef.origin, shipDef.size));\r\n        if(args.sprite !== undefined) {\r\n            this.imgControl = new AnimationControl(args.sprite);\r\n        }\r\n        this.effects = new EffectControl();\r\n    }\r\n\r\n    getWeaponLocation(ship: Ship): Point {\r\n        const result = this.actualAnchor.rotate(ship.rotation);\r\n        result.AddWith(ship.position);\r\n        return result;\r\n    }\r\n    getWeaponAnchorAngle(ship: Ship) {\r\n        return this.args.rotation + ship.rotation;\r\n    }\r\n    getWeaponCurrentAngle(ship: Ship) {\r\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\r\n    }\r\n\r\n    /**\r\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\r\n     */\r\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\r\n\r\n        this.effects.tick();\r\n        this.imgControl?.tick();\r\n\r\n        const location = this.getWeaponLocation(self);\r\n\r\n        // Filter down targets to those in range\r\n        possibleTargets = possibleTargets.filter(p => {\r\n            const pDist = Point.subtract(p, location).LengthSq();\r\n            return (\r\n                (this.args.minRange === undefined || \r\n                    (pDist > this.args.minRange * this.args.minRange)\r\n                ) &&\r\n                (pDist < this.args.range * this.args.range)\r\n            );\r\n        });\r\n\r\n        if(this.args.turret === undefined) {\r\n            if(possibleTargets.length === 0) return null; // No target in range.\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n\r\n            // I have no turret, fire if anyone is in spray range\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                // Find absolute direction to target\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                // Find angle to target relative to turret anchor angle\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                // Check if relAngle is less than the spray angle (he's in range)\r\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\r\n                    return possibleTargets[i];\r\n            }\r\n            return null;\r\n        }\r\n        else {\r\n            if(possibleTargets.length === 0) {\r\n                // No targets. Return to angle 0.\r\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\r\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\r\n                return null;\r\n            }\r\n\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n            const angle = this.getWeaponCurrentAngle(self);\r\n\r\n            let target: Point | null = null;\r\n            let targetAngle: number = 0;\r\n            let targetTurretAngle: number = 0;\r\n            let targetAbsoluteAngle: number = 0;\r\n\r\n            // Choose the target closest to anchor angle\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\r\n                    target = possibleTargets[i];\r\n                    targetAngle = turretRelAngle;\r\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\r\n                        // Target is outside of firing arc, we'll need to aim as close as possible\r\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\r\n                        targetAbsoluteAngle = angleToTarget;\r\n                    } else {\r\n                        // If we choose this target, we'll aim right at them\r\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\r\n                    }\r\n                }\r\n            }\r\n            // target is not null. If it was, we'd've exited earlier.\r\n            // Turn gun towards target\r\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\r\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\r\n                this.turretAngle += turretRelAngle;\r\n            }\r\n\r\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\r\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\r\n\r\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\r\n            else return null;\r\n        }\r\n    }\r\n\r\n    /** TODO: SHOOT */\r\n    shoot(gs: GameState, self: Ship) {\r\n        // Play the shoot animation, if necessary\r\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\r\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\r\n            this.imgControl.enqueue(this.args.sprite);\r\n        }\r\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\r\n        if(this.imgControl === undefined) return;\r\n        const realPoint = this.getWeaponLocation(ship);\r\n        let realRot = this.getWeaponCurrentAngle(ship);\r\n        this.imgControl.render(ctx, realPoint, realRot);\r\n        this.effects.draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\r\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\r\n\r\nexport interface IWeaponGroupArgs {\r\n    timer: IWeaponTimingArgs,\r\n    weapons: IWeaponArgs[],\r\n    burstAll?: boolean\r\n}\r\n\r\nexport class WeaponGroup {\r\n    burstAllWeapons: boolean;\r\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\r\n        this.burstAllWeapons = burstAllWeapons ?? true;\r\n    }\r\n\r\n    /** Call once per tick, makes all turrets attempt to acquire targets\r\n     * @returns the number of weapons which have acquired targets\r\n     */\r\n    acquireTargets(ship: Ship, targets: Ship[]): number {\r\n        let acqCount = 0;\r\n        for(let i = 0; i < this.weapons.length; i++){\r\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\r\n                acqCount++;\r\n            }\r\n        }\r\n        return acqCount;\r\n    }\r\n\r\n    tick(gs: GameState, self: Ship) {\r\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\r\n        const acq = this.acquireTargets(self, targets);\r\n\r\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\r\n    }\r\n\r\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\r\n        if(!this.burstAllWeapons) {\r\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\r\n        } else {\r\n            for(let i = 0; i < this.weapons.length; i++) {\r\n                this.weapons[i].shoot(gs, ship);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\r\n        for(let i = 0; i < this.weapons.length; i++) {\r\n            this.weapons[i].render(ctx, self);\r\n        }\r\n    }\r\n}","export interface IWeaponTimingArgs {\r\n    reloadTime: number;\r\n\r\n    burstCount: number;\r\n    burstDelay: number;\r\n\r\n    shotsPerBurst: number;\r\n}\r\n\r\nexport class WeaponTimer implements IWeaponTimingArgs {\r\n    public reloadTime: number; \r\n    public burstCount: number;\r\n    public burstDelay: number; \r\n    public shotsPerBurst: number;\r\n\r\n    private currentlyShooting: boolean;\r\n\r\n    public currentReload: number;\r\n    public currentBurstDelay: number;\r\n    public currentBurstIndex: number;\r\n\r\n    constructor(args: IWeaponTimingArgs) {\r\n        Object.assign(this, args);\r\n        this.currentlyShooting = false;\r\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\r\n    }\r\n\r\n    isShooting(): boolean {\r\n        return this.currentlyShooting;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this.currentlyShooting && this.currentReload === 0;\r\n    }\r\n\r\n    shoot(): boolean {\r\n        if(this.canShoot()){\r\n            this.currentlyShooting = true;\r\n            this.currentReload = this.reloadTime;\r\n            this.currentBurstDelay = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\r\n        if(shouldShoot) this.shoot();\r\n        if(this.currentlyShooting) {\r\n            if(this.currentBurstDelay === 0) {\r\n                // Fire burst\r\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\r\n                    onShoot(this.currentBurstIndex, shell);\r\n                }\r\n                this.currentBurstIndex++;\r\n                if(this.currentBurstIndex === this.burstCount) {\r\n                    // Done burst! Reset and start reload\r\n                    this.currentReload = this.reloadTime;\r\n                    this.currentBurstIndex = 0;\r\n                    this.currentlyShooting = false;\r\n                } else {\r\n                    this.currentBurstDelay = this.burstDelay;\r\n                }\r\n            } else {\r\n                // Timedown for burst\r\n                this.currentBurstDelay --;\r\n            }\r\n        } else if (this.currentReload !== 0) {\r\n            // Timedown for reload\r\n            this.currentReload--;\r\n        }\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { Weapon } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\r\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public weapons: IWeaponGroupArgs[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(\r\n            this,\r\n            position,\r\n            rotation ?? 0,\r\n            this.buildAi(),\r\n            team,\r\n            this.weapons.map(\r\n                jsonWeaponGroup => new WeaponGroup(\r\n                    new WeaponTimer(jsonWeaponGroup.timer),\r\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\r\n                    jsonWeaponGroup.burstAll\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n","import Point from \"../../common/position/Point\";\r\n\r\nexport interface IDebugMarker {\r\n    draw(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class DebugPoint implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugCross implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\r\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugPlus implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y - radius);\r\n        ctx.lineTo(this.point.x, this.point.y + radius);\r\n        ctx.moveTo(this.point.x - radius, this.point.y);\r\n        ctx.lineTo(this.point.x + radius, this.point.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugRay implements IDebugMarker {\r\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\r\n        ctx.lineTo(tgt.x, tgt.y)\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugLine implements IDebugMarker {\r\n    constructor(public point: Point, public point2: Point, public color?: string) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        ctx.lineTo(this.point2.x, this.point2.y)\r\n        ctx.stroke();\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\r\n\r\nexport abstract class ShipAI {\r\n    markers: IDebugMarker[];\r\n    doDebug: boolean;\r\n    constructor(args ?: { debug?: boolean }) {\r\n        this.markers = [];\r\n        this.doDebug = args?.debug ?? false;\r\n    }\r\n\r\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n\r\n    debug(debug: IDebugMarker) {\r\n        if(!this.doDebug) return;\r\n        this.markers.push(debug);\r\n    }\r\n    debugPoint(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPoint(pt, color, radius));\r\n    }\r\n    debugCross(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugCross(pt, color, radius));\r\n    }\r\n    debugPlus(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPlus(pt, color, radius));\r\n    }\r\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\r\n        this.debug(new DebugRay(pt, angle, color, dist));\r\n    }\r\n    debugLine(pt: Point, pt2: Point, color?:string) {\r\n        this.debug(new DebugLine(pt, pt2, color));\r\n    }\r\n\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\r\n        if(this.markers.length === 0) return;\r\n        for(let i = 0; i < this.markers.length; i++) {\r\n            this.markers[i].draw(ctx);\r\n        }\r\n        this.markers = [];\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\r\nimport { IShipAI } from \"./IShipAI\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport interface IBroadsideAiArgs {\r\n    minDistance: number,\r\n    maxDistance: number,\r\n    orbitSpeed: number,\r\n    debug: boolean\r\n}\r\nconst defaultArgs = {\r\n    minDistance: 100,\r\n    maxDistance: 500,\r\n    orbitSpeed: 0.5,\r\n    debug: false,\r\n}\r\nexport default class BroadsideAI extends ShipAI {\r\n    private args: IBroadsideAiArgs;\r\n    constructor(args: Partial<IBroadsideAiArgs>) {\r\n        super(args);\r\n        this.args = { ...defaultArgs, ...args };\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const targetLocation = gs.Player.position;\r\n        const toLocation = Point.subtract(targetLocation, ship.position);\r\n        const currentHeading = ship.rotation;\r\n        const inwardHeading = toLocation.Direction();\r\n        const tangentHeadings = [\r\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\r\n            Angle.normalize(inwardHeading + (Math.PI / 2))\r\n        ];\r\n\r\n        if(toLocation.LengthSq() < this.args.minDistance * this.args.minDistance) {\r\n            const fleeHeadings = [\r\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\r\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\r\n            ];\r\n            const orbitDist = this.args.minDistance;\r\n            // Run away, but look for a tangent\r\n            this.debugPoint(targetLocation, 'orange', orbitDist);\r\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugLine(ship.position, tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else if (toLocation.LengthSq() > this.args.maxDistance * this.args.maxDistance) {\r\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\r\n            // Close the gap\r\n            this.debugPoint(targetLocation, undefined, orbitDist);\r\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugPoint(tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else {\r\n            // Orbit\r\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\r\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\r\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\r\n            return { \r\n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \r\n                tgtHeading: betterHeading\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\r\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\r\n    let minHeading = relativeHeadings[0];\r\n    let actualTarget = targetHeadings[0];\r\n    for(let i = 1; i < relativeHeadings.length; i++) {\r\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\r\n            minHeading = relativeHeadings[i];\r\n            actualTarget = targetHeadings[i];\r\n        }\r\n    }\r\n    return actualTarget;\r\n}","import Angle from \"../../common/Angle\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport default class FigherAI extends ShipAI {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\r\n        var target = nearest[0];\r\n\r\n        if(target === undefined) {\r\n            // Nothing to do, no ships.\r\n            return {tgtHeading: 0, tgtVel: 0};\r\n        }\r\n\r\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\n\r\nexport interface IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\r\n}\r\n\r\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\r\n    fighter: (args) => new FigherAI(),\r\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { ShipDefinition } from \"./ShipDefinition\";\r\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\r\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\nimport { AllAIGenerators } from \"../ai/IShipAI\";\r\nimport { IWeaponArgs } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\r\nimport INamedCollection from \"../../common/INamedCollection\";\r\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\r\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\r\n\r\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\r\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\r\n    for(let key in json.animations) {\r\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\r\n    }\r\n    return json.ships.map(def => \r\n        parseShipDefinition(def, animationData, imgAtlases)\r\n    );\r\n}\r\n\r\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\r\n\r\n        parsedFlares.push(new FlareDefinition(\r\n            animation,\r\n            parseJsonPoint(flare.offset),\r\n            parseJsonAngle(flare.rotation),\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    const aiFunc = AllAIGenerators[def.ai];\r\n    const aiGen = () => aiFunc(def.aiParams);\r\n\r\n    return new ShipDefinition(\r\n        imgAtlases[def.sprite.file],\r\n        parseJsonPoint(def.size),\r\n        parseJsonPoint(def.sprite.srcOffset),\r\n        parseJsonPoint(def.sprite.srcSize),\r\n        parseJsonPoint(def.sprite.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        def.weaponGroups.map(group => \r\n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\r\n        aiGen\r\n    );\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\r\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\r\n\r\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\r\n    return {\r\n        timer: json.timer,\r\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\r\n        burstAll: json.burstAll\r\n    }\r\n}\r\n\r\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\r\n    if(isWeapon(json)) {\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(json.sprite !== undefined) {\r\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: json.turret,\r\n            acquisitionAngle: json.acquisitionAngle,\r\n            minRange: json.minRange,\r\n            range: json.range\r\n        };\r\n    }\r\n    else {\r\n        const def = defs[json.definition];\r\n        if(def === undefined) {\r\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\r\n        }\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(def.sprite !== undefined) {\r\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: def.turret,\r\n            acquisitionAngle: def.acquisitionAngle,\r\n            minRange: def.minRange,\r\n            range: def.range\r\n        };\r\n    }\r\n}\r\n\r\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\r\n    return (<any>json).range !== undefined;\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\r\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\r\nimport INamedCollection from '../common/INamedCollection';\r\n\r\nlet atlases: INamedCollection<SpriteAtlas>;\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    atlases = {\r\n        \"Ships\": shipAtlas,\r\n        \"Flares\": flareAtlas\r\n    };\r\n\r\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\r\n}\r\n\r\nfunction loadJson(entitySheet: SpriteSheet){\r\n    import(\r\n        /* webpackChunkName: \"bullets-ship-definitions\" */\r\n        './data/shipDefinitions.json'\r\n    ).then(value => {\r\n        console.log('Got shipDefinitions.json');\r\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\r\n        onLoadDone(entitySheet, definitions);\r\n    });\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\r\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.Multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { IJsonAnimation } from \"./json/IJsonAnimation\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    static FromJson(atlas: SpriteAtlas, params: IJsonAnimation) : SpriteAnimation {\r\n\r\n        return new SpriteAnimation(atlas, \r\n            new Point(params.sourceOffset[0], params.sourceOffset[1]),\r\n            new Point(params.frameSize[0], params.frameSize[1]),\r\n            params.numFrames,\r\n            params.origin === undefined ? undefined : new Point(params.origin[0], params.origin[1]));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}"],"names":["Player","constructor","sprites","this","position","Point","velocity","angularVelocity","rotation","engineDeflect","tgtDeflect","tick","keys","isKeyDown","isEngineOn","Math","min","max","vDirection","atan2","y","x","diffDir","Angle","diffPerc","PI","friction","abs","MultWith","cos","sin","vTotal","Length","vAngle","Direction","anglePullAmt","AddWith","render","ctx","save","rotrender","floor","random","restore","ETeam","GameState","player","Entities","neutral","ally","enemy","Effects","update","i","length","splice","updateEntities","entities","draw","drawEntities","findNearestShips","originPoint","team","maxRange","ships","undefined","filter","item","currentHp","rangeSq","s","LengthSq","shipsAndRanges","map","ship","range","sort","a","b","Interpolated","timingFunction","InterpolationTimer","totalTime","elapsedTime","sample","animation","SingleExplosion","outerRadius","innerRadius","fillColor","timing","outer","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","p","pi","pc","numberInterpolator","fastColorInterpolator","r","g","EvenlySpacedKeyframes","interpolator","args","arguments","percPer","keyframes","Keyframes","addKeyFrame","start","time","value","push","keyIndex","sampleRange","samplePerc","Explosion","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","anyStillRunning","angle","norm","normalize","from","to","relativeNormalize","EFlareConditions","Line","end","ray","midpoint","interpolate","denom","parallelIntersection","percentA","percentB","basis","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","Bounds","size","origin","getVertecies","relativePoints","dist","getEdges","idx","arr","findLineIntersection","line","edges","minLinePerc","colision","intersection","Ship","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","getBounds","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","getTeam","AnimationControl","initial","queue","scaleFactor","isSprite","sourceSize","source","current","enqueueFront","src","play","enqueue","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","numFrames","EffectControl","effects","spawnEffect","effectArgs","effect","type","CreateEffect","Weapon","shipDef","turretAngle","actualAnchor","offset","Clone","SubtractWith","imgControl","getWeaponLocation","result","rotate","getWeaponAnchorAngle","getWeaponCurrentAngle","self","possibleTargets","location","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shoot","shootAnimation","shootEffect","realPoint","realRot","WeaponGroup","timer","weapons","burstAllWeapons","acquireTargets","targets","acqCount","acq","bi","onShoot","burstIndex","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","isShooting","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","ShipDefinition","atlas","srcPoint","turnAccel","buildAi","getSprite","buildShip","jsonWeaponGroup","w","burstAll","FlareDefinition","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","DebugRay","direction","tgt","DebugLine","point2","ShipAI","markers","doDebug","debug","debugPoint","debugCross","debugPlus","debugRay","debugLine","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","BroadsideAI","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","tgtPoints","tangent","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","FigherAI","deltaHeading","AllAIGenerators","fighter","broadside","buildAllDefinitions","json","imgAtlases","animationData","key","animations","def","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","defs","weaponJson","isWeapon","console","error","parseWeaponDefinition","parseWeaponGroupDefinition","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","log","definitions","canvas","document","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","repaintLoop","onLoadDone","loadJson","gameState","fillRect","focusPoint","translate","bg_line_size","ty","tx","repaint","requestAnimationFrame","Color","vals","h","v","hsv","rgb","reqRgb","reqHsv","componentToRgb","n","k","calcRgb","calcHsv","mx","mn","toByte","component","SpriteAnimation","sourceOffset","params","frame","scale","drawImage","image","loop","PlayingAnimation","maxTime","currentTime","frameNumber","spriteUrl","onload","createElement","addEventListener","loadFinished","sourceRotation","AtlasSprite","frameCount","KeyState","changes","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","onKeyDown","onKeyUp","downKeys","change","Update","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","isKeyPressed","isKeyReleased","twoPi","distance","Dot","sqrt","Negate","NegateInPlace","p1","p2","DotWith","other","len","Multiply","nx","ny","splitArgs","splitArgsOrSingle","DivideWith","Equals","sy","add","theta","fromAngle"],"sourceRoot":""}