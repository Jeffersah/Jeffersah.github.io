{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/position/Direction.ts","webpack:///./src/projects/common-assets/arrows.png","webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common-assets/rpg1.png","webpack:///./src/projects/common-assets/wizard16.png","webpack:///./src/projects/common/Iterate.ts","webpack:///./src/projects/rpgt/world/World.ts","webpack:///./src/projects/rpgt/Constants.ts","webpack:///./src/projects/rpgt/SheetGraphic.ts","webpack:///./src/projects/rpgt/world/Cell.ts","webpack:///./src/projects/common/position/Rectangle.ts","webpack:///./src/projects/common/assets/FileResource.ts","webpack:///./src/projects/rpgt/index.ts"],"names":["Point","x","y","Dot","this","Math","sqrt","LengthSq","p1","p2","other","nx","undefined","ny","a","b","sy","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","KeyState","keys","changes","key","indexOf","attachedElement","logKeyNames","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","IterateRange","start","end","handle","breakIteration","loopControl","break","finalValue","i","width","height","generateCell","cells","col","prerender","document","getElementById","pctx","getContext","paint","pos","vel","onChecked","xDirection","yDirection","startXTile","floor","Edge","endXTile","startYTile","endYTile","xColision","ctrl","pathable","w","yColision","h","SheetGraphic","sheet","tileX","tileY","spriteWidth","spriteHeight","ctx","tx","ty","tw","th","render","GRASS_TILES","graphic","grassCoords","random","length","xp","r","fileUrl","onload","get","subscribe","data","body","assets","world","Run","assetLoader","AssetLoader","tiles","SpriteSheet","registerAssetLoadCallback","wizard","arrows","tilesets","KeyboardManager","onAllFinished","assetLoadDone","RockWall","GrassFloor","updatePrerender","canvas","NearestNeighborScalingHelper","tick","clearRect","save","cx","cy","max","min","playerPos","camPos","MultWith","AddWith","DivideWith","CAMERA_SLOWDOWN_FACTOR","translate","drawImage","update","fillStyle","fillRect","globalAlpha","tryMoveEntity","toggle","restore","requestAnimationFrame"],"mappings":"yFAAA,kCAAe,MAAMA,EACjB,YAAmBC,EAAkBC,GAAlB,KAAAD,IAAkB,KAAAC,IAI9B,WACH,OAAOF,EAAMG,IAAIC,KAAMA,MAGpB,SACH,OAAOC,KAAKC,KAAKF,KAAKG,YAGnB,QACH,OAAO,IAAIP,EAAMI,KAAKH,EAAGG,KAAKF,GAG3B,SACH,OAAO,IAAIF,GAAOI,KAAKH,GAAIG,KAAKF,GAG7B,gBAGH,OAFAE,KAAKH,GAAKG,KAAKH,EACfG,KAAKF,GAAKE,KAAKF,EACRE,KAGJ,WAAWI,EAAWC,GACzB,OAAOD,EAAGP,EAAIQ,EAAGR,EAAIO,EAAGN,EAAIO,EAAGP,EAG5B,QAAQQ,GACX,OAAOV,EAAMG,IAAIC,KAAMM,GAKpB,QAAQA,EAAqBR,GAChC,MAAMS,OAAWC,IAANV,EAAmBQ,EAAgBT,EAAIS,EAC5CG,OAAWD,IAANV,EAAmBQ,EAAgBR,EAAIA,EAGlD,OAFAE,KAAKH,GAAKU,EACVP,KAAKF,GAAKW,EACHT,KAKJ,SAASM,EAAqBR,GACjC,MAAMS,OAAWC,IAANV,EAAmBQ,EAAgBT,EAAIS,EAC5CG,OAAWD,IAANV,EAAmBQ,EAAgBR,EAAIA,EAGlD,OAFAE,KAAKH,GAAKU,EACVP,KAAKF,GAAKW,EACHT,KAKJ,aAAaM,EAAqBR,GACrC,MAAMS,OAAWC,IAANV,EAAmBQ,EAAgBT,EAAIS,EAC5CG,OAAWD,IAANV,EAAmBQ,EAAgBR,EAAIA,EAGlD,OAFAE,KAAKH,GAAKU,EACVP,KAAKF,GAAKW,EACHT,KAKJ,WAAWM,EAAqBR,GACnC,MAAMS,OAAWC,IAANV,EAAmBQ,EAAgBT,EAAIS,EAC5CG,OAAWD,IAANV,EAAmBQ,EAAgBR,EAAIA,EAGlD,OAFAE,KAAKH,GAAKU,EACVP,KAAKF,GAAKW,EACHT,KAGJ,OAAOM,GACV,OAAON,KAAKH,IAAMS,EAAMT,GAAKG,KAAKF,IAAMQ,EAAMR,EAGlD,WAAWY,EAAUC,GACjB,OAAO,IAAIf,EAAMc,EAAEb,EAAIc,EAAEd,EAAGa,EAAEZ,EAAIa,EAAEb,GAKxC,gBAAgBY,EAAUC,EAAiBC,GACvC,YAAWJ,IAAPI,EACO,IAAIhB,EAAMc,EAAEb,EAAKc,EAAcD,EAAEZ,EAAIc,QAEtBJ,IAAhBG,EAAUd,EACT,IAAID,EAAMc,EAAEb,EAAKc,EAAYd,EAAGa,EAAEZ,EAAKa,EAAYb,GAEnD,IAAIF,EAAMc,EAAEb,EAAKc,EAAcD,EAAEZ,EAAKa,M,gCC5FzD,0GAEYE,EAFZ,SAEA,SAAYA,GACR,eACA,yBACA,qBACA,6BACA,mBACA,2BACA,mBACA,uBARJ,CAAYA,MAAS,KAcd,MAAMC,EAA2B,CACpC,IAAI,IAAM,GAAI,GACd,IAAI,IAAM,GAAI,GACd,IAAI,IAAM,EAAG,GACb,IAAI,IAAM,EAAG,GACb,IAAI,IAAM,EAAG,GACb,IAAI,KAAO,EAAG,GACd,IAAI,KAAO,EAAG,GACd,IAAI,KAAO,GAAI,IAGNC,EAA6B,CACtCF,EAAUG,GACVH,EAAUI,QACVJ,EAAUK,MACVL,EAAUM,UACVN,EAAUO,KACVP,EAAUQ,SACVR,EAAUS,KACVT,EAAUU,QAGVV,EAAUG,GACVH,EAAUK,MACVL,EAAUO,KACVP,EAAUS,KAGVT,EAAUI,QACVJ,EAAUM,UACVN,EAAUQ,SACVR,EAAUU,OAGP,SAASC,EAAQC,GACpB,OAAOX,EAAgBW,K,gCCnDZ,QAA0B,wC,kECE1B,MAAMC,EACjB,YAAmBC,EAAuBC,GAAvB,KAAAD,OAAuB,KAAAC,UAInC,UAAUC,GACb,OAAmC,IAA5B7B,KAAK2B,KAAKG,QAAQD,GAGtB,QAAQA,GACX,OAAmC,IAA5B7B,KAAK2B,KAAKG,QAAQD,ICLlB,MAAM,EAIjB,YAAmBE,EAAsCC,GAAtC,KAAAD,kBAAsC,KAAAC,mBAC3BxB,IAArBR,KAAKgC,cACNhC,KAAKgC,aAAc,GAEvBD,EAAgBE,iBAAiB,UAAWC,GAAKlC,KAAKmC,UAAUD,IAChEH,EAAgBE,iBAAiB,QAASC,GAAKlC,KAAKoC,QAAQF,IAE5DlC,KAAKqC,SAAW,GAChBrC,KAAK4B,QAAU,GAGX,UAAUC,GACV7B,KAAKgC,aAELM,QAAQC,IAAIV,EAAIA,MAGP,IADD7B,KAAKqC,SAASP,QAAQD,EAAIA,OAElC7B,KAAK4B,QAAQY,KAAK,CAAEX,IAAKA,EAAIA,IAAKY,OAAQ,UAC1CzC,KAAKqC,SAASG,KAAKX,EAAIA,MAIvB,QAAQA,GACZ7B,KAAK4B,QAAQY,KAAK,CAAEX,IAAKA,EAAIA,IAAKY,OAAQ,YAC1C,MAAMC,EAAM1C,KAAKqC,SAASP,QAAQD,EAAIA,KACtC7B,KAAKqC,SAASM,OAAOD,EAAK,GAGvB,SACH,MAAME,EAAY5C,KAAKqC,SACjBQ,EAAe7C,KAAK4B,QAK1B,OAHA5B,KAAKqC,SAAWO,EAAUE,QAC1B9C,KAAK4B,QAAU,GAER,IAAIF,EAASkB,EAAWC,IC5CxB,MAAM,EAMjB,YAAYE,EAAsBf,GAC9BhC,KAAKgD,QAAU,IAAI,EAAWD,EAASf,GACvChC,KAAKiD,SAAWjD,KAAKkD,aAAelD,KAAKgD,QAAQG,SAG9C,SACHnD,KAAKiD,SAAWjD,KAAKkD,aACrBlD,KAAKkD,aAAelD,KAAKgD,QAAQG,SAG9B,UAAUtB,GACb,OAAO7B,KAAKkD,aAAaE,UAAUvB,GAGhC,QAAQA,GACX,OAAO7B,KAAKkD,aAAaG,QAAQxB,GAG9B,aAAaA,GAChB,OAAO7B,KAAKkD,aAAaE,UAAUvB,IAAQ7B,KAAKiD,SAASI,QAAQxB,GAG9D,cAAcA,GACjB,OAAO7B,KAAKkD,aAAaG,QAAQxB,IAAQ7B,KAAKiD,SAASG,UAAUvB,GAG9D,UACH,OAAO7B,KAAKkD,aAAatB,W,2GCpClB,MAA0B,uCCA1B,MAA0B,uC,wBCKlC,SAAS0B,EAAaC,EAAeC,EAAaC,GACrD,IAAIC,GAAiB,EACrB,MAAMC,EAAc,CAChBC,MAAO,KACHF,GAAiB,IAIzB,GAAIF,IAAQD,EAER,YADAE,EAAOF,EAAOI,GAIlB,MAAMlC,EAAY+B,EAAMD,EAAQ,GAAK,EAC/BM,EAAaL,EAAM/B,EAEzB,IAAK,IAAIqC,EAAIP,EAAOO,IAAMD,IAAeH,EAAgBI,GAAKrC,EAC1DgC,EAAOK,EAAGH,GCbH,MAAM,EAKjB,YAAmBI,EAAsBC,EAAgBC,GAAtC,KAAAF,QAAsB,KAAAC,SACrChE,KAAKkE,MAAQ,GACb,IAAK,IAAIrE,EAAI,EAAGA,EAAIkE,EAAOlE,IAAK,CAC5B,MAAMsE,EAAM,GACZ,IAAK,IAAIrE,EAAI,EAAGA,EAAIkE,EAAQlE,IACxBqE,EAAI3B,KAAKyB,KAEbjE,KAAKkE,MAAM1B,KAAK2B,GAGpBnE,KAAKoE,UAAYC,SAASC,eAAe,mBAG7C,kBACI,YAAatE,KAAKoE,UC1BD,GD0B8BpE,KAAK+D,MC1BnC,GD0B4D/D,KAAKgE,QAClF,MAAMO,EAAOvE,KAAKoE,UAAUI,WAAW,MACvC,IAAK,IAAI3E,EAAI,EAAGA,EAAIG,KAAK+D,MAAOlE,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIE,KAAKgE,OAAQlE,IAC7BE,KAAKkE,MAAMrE,GAAGC,GAAG2E,MAAMF,EC9Bd,GD8BoB1E,EC9BpB,GD8ByCC,GAK9D,cAAc4E,EAAWC,EAAYC,GACjC,MAAMC,EAAaF,EAAI9E,GAAK,EAAIgB,EAAA,EAAUK,MAAQL,EAAA,EAAUS,KACtDwD,EAAaH,EAAI7E,GAAK,EAAIe,EAAA,EAAUO,KAAOP,EAAA,EAAUG,GAC3D,GAAc,IAAV2D,EAAI9E,EAAS,CACb,MAAMkF,EAAa9E,KAAK+E,MAAMN,EAAIO,KAAKJ,GCvC1B,IDwCPK,EAAWjF,KAAK+E,OAAON,EAAIO,KAAKJ,GAAcF,EAAI9E,GCxC3C,IDyCPsF,EAAalF,KAAK+E,MAAMN,EAAIO,KAAKpE,EAAA,EAAUG,ICzCpC,ID0CPoE,EAAWnF,KAAK+E,OAAON,EAAIO,KAAKpE,EAAA,EAAUO,MAAQ,GC1C3C,ID4Cb,IAAIiE,EACJ/B,EAAayB,EAAYG,EAAU,CAACrF,EAAGyF,KACnC,IAAK,IAAIxF,EAAIqF,EAAYrF,GAAKsF,EAAUtF,IAAK,CACzC,GAAID,EAAI,GAAKA,GAAKG,KAAK+D,MAGnB,OAFAsB,EAAYxF,OACZyF,EAAK1B,QAGLgB,GAAWA,EAAU/E,EAAGC,GACvBE,KAAKkE,MAAMrE,GAAGC,GAAGyF,WAClBD,EAAK1B,QACLyB,EAAYxF,WAKNW,IAAd6E,EACAX,EAAI7E,GAAK8E,EAAI9E,EAET8E,EAAI9E,GAAK,EAAG6E,EAAI7E,EC/DX,GD+DewF,EAA8BX,EAAIc,EACrDd,EAAI7E,EChEA,IDgEKwF,EAAY,GAGlC,GAAc,IAAVV,EAAI7E,EAAS,CACb,MAAMqF,EAAalF,KAAK+E,MAAMN,EAAIO,KAAKH,GCpE1B,IDqEPM,EAAWnF,KAAK+E,OAAON,EAAIO,KAAKH,GAAcH,EAAI7E,GCrE3C,IDsEPiF,EAAa9E,KAAK+E,MAAMN,EAAIO,KAAKpE,EAAA,EAAUS,MCtEpC,IDuEP4D,EAAWjF,KAAK+E,OAAON,EAAIO,KAAKpE,EAAA,EAAUK,OAAS,GCvE5C,IDyEb,IAAIuE,EACJnC,EAAa6B,EAAYC,EAAU,CAACtF,EAAGwF,KACnC,IAAK,IAAIzF,EAAIkF,EAAYlF,GAAKqF,EAAUrF,IAAK,CACzC,GAAIC,EAAI,GAAKA,GAAKE,KAAKgE,OAGnB,OAFAyB,EAAY3F,OACZwF,EAAK1B,QAGLgB,GAAWA,EAAU/E,EAAGC,GACvBE,KAAKkE,MAAMrE,GAAGC,GAAGyF,WAClBD,EAAK1B,QACL6B,EAAY3F,WAKNU,IAAdiF,EACAf,EAAI5E,GAAK6E,EAAI7E,EAET6E,EAAI7E,GAAK,EAAG4E,EAAI5E,EC5FX,GD4Fe2F,EAA8Bf,EAAIgB,EACrDhB,EAAI5E,EC7FA,ID6FK2F,EAAY,KE5F3B,MAAME,EAKjB,YAAmBC,EAA4BC,EAAuBC,GAAnD,KAAAF,QAA4B,KAAAC,QAAuB,KAAAC,QAClE9F,KAAK+D,MAAQ6B,EAAMG,YACnB/F,KAAKgE,OAAS4B,EAAMI,aAGxB,MAAMC,EAA+BC,EAAYC,EAAYC,EAAYC,GACrErG,KAAK4F,MAAMU,OAAOL,EAAKC,EAAIC,EAAIC,EAAIC,EAAIrG,KAAK6F,MAAO7F,KAAK8F,QCThE,MAAMS,EACN,CACI,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,IAGO,MAAM,EACjB,YAAmBhB,EAA0BiB,GAA1B,KAAAjB,WAA0B,KAAAiB,UAI7C,MAAMP,EAA+BC,EAAYC,GAC7CnG,KAAKwG,QAAQ/B,MAAMwB,EAAKC,EAAIC,EFvBX,OE0BrB,kBAAkBP,GACd,MAAMa,EAAcF,EAAYtG,KAAK+E,MAAM/E,KAAKyG,SAAWH,EAAYI,SACvE,OAAO,IAAI,GAAK,EAAM,IAAIhB,EAAaC,EAAOa,EAAY,GAAIA,EAAY,KAG9E,gBAAgBb,GACZ,OAAO,IAAI,GAAK,EAAO,IAAID,EAAaC,EAAO,EAAG,M,YC/B3C,MAAM,EACjB,YAAmB/F,EAAkBC,EAAkB0F,EAAkBE,GAAtD,KAAA7F,IAAkB,KAAAC,IAAkB,KAAA0F,IAAkB,KAAAE,IAIzE,MAAMkB,EAAoB9G,GACtB,YAAUU,IAANV,EACO,IAAI,EAAKE,KAAKH,EAAK+G,EAAa/G,EAAGG,KAAKF,EAAK8G,EAAa9G,EAAGE,KAAKwF,EAAGxF,KAAK0F,GAE9E,IAAI,EAAK1F,KAAKH,EAAK+G,EAAe5G,KAAKF,EAAIA,EAAGE,KAAKwF,EAAGxF,KAAK0F,GAKtE,QAAQkB,EAAoB9G,QACdU,IAANV,GACAE,KAAKH,GAAM+G,EAAa/G,EACxBG,KAAKF,GAAM8G,EAAa9G,IAExBE,KAAKH,GAAM+G,EACX5G,KAAKF,GAAKA,GAIlB,KAAK2B,GACD,OAAQA,GACJ,KAAKZ,EAAA,EAAUG,GAAI,OAAOhB,KAAKF,EAC/B,KAAKe,EAAA,EAAUO,KAAM,OAAOpB,KAAKF,EAAIE,KAAK0F,EAC1C,KAAK7E,EAAA,EAAUS,KAAM,OAAOtB,KAAKH,EACjC,KAAKgB,EAAA,EAAUK,MAAO,OAAOlB,KAAKH,EAAIG,KAAKwF,GAInD,OAAO/D,GACH,OAAQA,GACJ,KAAKZ,EAAA,EAAUI,QACf,KAAKJ,EAAA,EAAUM,UACf,KAAKN,EAAA,EAAUQ,SACf,KAAKR,EAAA,EAAUU,OAAQ,OAAO,IAAI3B,EAAA,EAAMI,KAAKH,EAAGG,KAAKF,IAI7D,OAAO+G,GACH,OAAOA,EAAEhH,IAAMG,KAAKH,GAAKgH,EAAE/G,IAAME,KAAKF,GAAK+G,EAAErB,IAAMxF,KAAKwF,GAAKqB,EAAEnB,IAAM1F,KAAK0F,G,6BC5C3E,MAAM,EAET,YAAYoB,EAAyBC,GAAA,KAAAA,SACjC,IAAMC,IAAIF,GAASG,UAAUC,IACzBlH,KAAKmH,KAAOD,EAAKA,KACjBlH,KAAK+G,YCUjB,IAAIK,EAOA,EAEAC,EAEA1F,EAEW,SAAS2F,IACpB,MAAMC,EAAc,IAAIC,EAAA,EACxBJ,EAAS,CACLK,MAAO,IAAIC,EAAA,EAAY,GAAI,GAAI,EAAUH,EAAYI,6BACrDC,OAAQ,IAAIF,EAAA,EAAY,GAAI,GAAI,EAAWH,EAAYI,6BACvDE,OAAQ,IAAIH,EAAA,EAAY,GAAI,GAAIG,EAAA,EAAWN,EAAYI,6BACvDG,SAAU,IAAI,EAAa,uCAAwCP,EAAYI,8BAEnFhG,EAAO,IAAIoG,EAAA,EAAgB1D,SAAS8C,MACpCI,EAAYS,cAAcC,GAG9B,SAASA,IACLZ,EAAQ,IAAI,EAAM,GAAsB,GAAsB,IACtDpH,KAAKyG,UAAY,IACV,EAAKwB,SAASd,EAAOK,OAGrB,EAAKU,WAAWf,EAAOK,QAGtCJ,EAAMe,kBACN,MAAMC,EAAShE,SAASC,eAAe,cACvC,EAAM+D,EAAO7D,WAAW,MACJ,IAAI8D,EAAA,EAA6BD,EAAQ,EAAK,IAAoC,KAAoC,EAAM,SAOpJ,SAASE,IACL,EAAIC,UAAU,EAAG,EAAG,IAAoC,KACxD,YAAuB,GACvB,EAAIC,OACJ,IAAIC,EAAK,EACLC,EAAK,EACLtB,EAAMtD,MLnEY,KKoElB2E,EAAKzI,KAAK2I,IAAI,EAAG3I,KAAK4I,ILlEL,IKkEUxB,EAAMtD,MLpEf,IKoE4D+E,EAAUjJ,EAAI,OAE5FwH,EAAMrD,OLrEY,KKsElB2E,EAAK1I,KAAK2I,IAAI,EAAG3I,KAAK4I,ILrEL,IKqEUxB,EAAMrD,OLtEf,IKsE6D8E,EAAUhJ,EAAI,OAGjGiJ,EAAOC,SA3DoB,KA4DpBC,QAAQP,EAAIC,GACZO,WAAWC,EAA4BA,GAE9C,EAAIC,WAAWL,EAAOlJ,GAAIkJ,EAAOjJ,GACjC,EAAIuJ,UAAUhC,EAAMjD,UAAW,EAAG,GAClCzC,EAAK2H,SAEL,EAAIC,UAAY,OAChB,EAAIC,SAASV,EAAUjJ,EAAGiJ,EAAUhJ,EAAGgJ,EAAUtD,EAAGsD,EAAUpD,GAC9D,MAAMf,EAAM,IAAI/E,EAAA,EAAM,EAAG,GACrB+B,EAAKyB,UAAU,OACfuB,EAAI9E,GAAK,GAET8B,EAAKyB,UAAU,OACfuB,EAAI9E,EAAI,GAER8B,EAAKyB,UAAU,OACfuB,EAAI7E,GAAK,GAET6B,EAAKyB,UAAU,OACfuB,EAAI7E,EAAI,GAEZ,EAAIyJ,UAAY,SAChB,EAAIE,YAAc,GAClBpC,EAAMqC,cAAcZ,EAAWnE,EAAK,CAACuB,EAAIC,KACrC,EAAIqD,SLlGa,GKkGJtD,ELlGI,GKkGkBC,ELlGlB,SKoGrB,EAAIsD,YAAc,EAElBE,GAAUA,EACNA,IACA,EAAIJ,UAAY,QAChB,EAAIC,SAAS,EAAG,EAAG,GAAI,KAE3B,EAAII,UACJC,sBAAsB,IAAMtB,KAvD5BA,GAGJ,MAAMQ,EAAS,IAAInJ,EAAA,EAAM,EAAG,GACtBkJ,EAAY,IAAI,EAAK,EAAG,EAAG,GAAI,IACrC,IAAIa,GAAS","file":"rpgTest.bundle.js","sourcesContent":["export default class Point {\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    static Add(a: Point, b: Point): Point {\r\n        return new Point(a.x + b.x, a.y + b.y);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: Direction[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default __webpack_public_path__ + \"bbb298f00b41bbd627d27aa0529a20ba.png\";","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","export default __webpack_public_path__ + \"42ace1eb95edbc899165c10bb9cc20ab.png\";","export default __webpack_public_path__ + \"e5352b303b79e08de36a8c4248cdbb28.png\";","\r\nexport interface ILoopControl {\r\n    break(): void;\r\n}\r\n\r\nexport function IterateRange(start: number, end: number, handle: (value: number, control: ILoopControl) => void): void {\r\n    let breakIteration = false;\r\n    const loopControl = {\r\n        break: () => {\r\n            breakIteration = true;\r\n        }\r\n    };\r\n\r\n    if (end === start) {\r\n        handle(start, loopControl);\r\n        return;\r\n    }\r\n\r\n    const direction = end > start ? 1 : -1;\r\n    const finalValue = end + direction;\r\n\r\n    for (let i = start; i !== finalValue && !breakIteration; i += direction) {\r\n        handle(i, loopControl);\r\n    }\r\n}","import Cell from './Cell';\r\nimport Rect from '../../common/position/Rectangle';\r\nimport Point from '../../common/position/Point';\r\nimport { Direction } from '../../common/position/Direction';\r\nimport { IterateRange } from '../../common/Iterate';\r\nimport * as Const from '../Constants';\r\nimport { createContext } from 'react';\r\nimport { ResizeCanvas } from '../../common/CanvasHelpers';\r\n\r\nexport default class World {\r\n    cells: Cell[][];\r\n\r\n    public prerender: HTMLCanvasElement;\r\n\r\n    constructor(public width: number, public height: number, generateCell: () => Cell) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            const col = [];\r\n            for (let y = 0; y < height; y++) {\r\n                col.push(generateCell());\r\n            }\r\n            this.cells.push(col);\r\n        }\r\n\r\n        this.prerender = document.getElementById('world_prerender') as HTMLCanvasElement;\r\n    }\r\n\r\n    updatePrerender() {\r\n        ResizeCanvas(this.prerender, Const.TILE_SIZE * this.width, Const.TILE_SIZE * this.height);\r\n        const pctx = this.prerender.getContext('2d');\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.cells[x][y].paint(pctx, x * Const.TILE_SIZE, y * Const.TILE_SIZE);\r\n            }\r\n        }\r\n    }\r\n\r\n    tryMoveEntity(pos: Rect, vel: Point, onChecked?: (x: number, y: number) => void): void {\r\n        const xDirection = vel.x >= 0 ? Direction.Right : Direction.Left;\r\n        const yDirection = vel.y >= 0 ? Direction.Down : Direction.Up;\r\n        if (vel.x !== 0) {\r\n            const startXTile = Math.floor(pos.Edge(xDirection) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.Edge(xDirection) + vel.x) / Const.TILE_SIZE);\r\n            const startYTile = Math.floor(pos.Edge(Direction.Up) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.Edge(Direction.Down) - 1) / Const.TILE_SIZE);\r\n\r\n            let xColision: number | undefined;\r\n            IterateRange(startXTile, endXTile, (x, ctrl) => {\r\n                for (let y = startYTile; y <= endYTile; y++) {\r\n                    if (x < 0 || x >= this.width) {\r\n                        xColision = x;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        xColision = x;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (xColision === undefined) {\r\n                pos.x += vel.x;\r\n            } else {\r\n                if (vel.x >= 0) pos.x = xColision * Const.TILE_SIZE - pos.w;\r\n                else pos.x = (xColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n        if (vel.y !== 0) {\r\n            const startYTile = Math.floor(pos.Edge(yDirection) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.Edge(yDirection) + vel.y) / Const.TILE_SIZE);\r\n            const startXTile = Math.floor(pos.Edge(Direction.Left) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.Edge(Direction.Right) - 1) / Const.TILE_SIZE);\r\n\r\n            let yColision: number | undefined;\r\n            IterateRange(startYTile, endYTile, (y, ctrl) => {\r\n                for (let x = startXTile; x <= endXTile; x++) {\r\n                    if (y < 0 || y >= this.height) {\r\n                        yColision = y;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        yColision = y;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (yColision === undefined) {\r\n                pos.y += vel.y;\r\n            } else {\r\n                if (vel.y >= 0) pos.y = yColision * Const.TILE_SIZE - pos.h;\r\n                else pos.y = (yColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n    }\r\n}","export const TILES_WIDE = 28;\r\nexport const TILES_HIGH = 28;\r\nexport const TILE_SIZE = 16;","import { IGraphic } from './IGraphic';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\n\r\nexport default class SheetGraphic implements IGraphic {\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(public sheet: SpriteSheet, private tileX: number, private tileY: number) {\r\n        this.width = sheet.spriteWidth;\r\n        this.height = sheet.spriteHeight;\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number, tw: number, th: number): void {\r\n        this.sheet.render(ctx, tx, ty, tw, th, this.tileX, this.tileY);\r\n    }\r\n\r\n}","import { IGraphic } from '../IGraphic';\r\nimport * as Const from '../Constants';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport SheetGraphic from '../SheetGraphic';\r\n\r\nconst GRASS_TILES: [number, number][] =\r\n[\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [7, 1],\r\n    [7, 1],\r\n    [10, 1],\r\n    [10, 2],\r\n    [9, 2]\r\n];\r\n\r\nexport default class Cell {\r\n    constructor(public pathable: boolean, public graphic: IGraphic) {\r\n\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number) {\r\n        this.graphic.paint(ctx, tx, ty, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    }\r\n\r\n    static GrassFloor(sheet: SpriteSheet): Cell {\r\n        const grassCoords = GRASS_TILES[Math.floor(Math.random() * GRASS_TILES.length)];\r\n        return new Cell(true, new SheetGraphic(sheet, grassCoords[0], grassCoords[1]));\r\n    }\r\n\r\n    static RockWall(sheet: SpriteSheet): Cell {\r\n        return new Cell(false, new SheetGraphic(sheet, 7, 24));\r\n    }\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    Shift(x: number, y: number): Rect;\r\n    Shift(p: Point): Rect;\r\n    Shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    ShiftBy(x: number, y: number): void;\r\n    ShiftBy(p: Point): void;\r\n    ShiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    Edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    Corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Axios from 'axios-observable';\r\n\r\nexport class FileResource<T> {\r\n    public body: T;\r\n    constructor(fileUrl: string, private onload: () => void) {\r\n        Axios.get(fileUrl).subscribe(data => {\r\n            this.body = data.data as T;\r\n            this.onload();\r\n        });\r\n    }\r\n}","import * as Const from './Constants';\r\nimport AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport arrowsUrl from '../common-assets/arrows.png';\r\nimport tilesUrl from '../common-assets/rpg1.png';\r\nimport wizardUrl from '../common-assets/wizard16.png';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport World from './world/World';\r\nimport Cell from './world/Cell';\r\nimport Rect from '../common/position/Rectangle';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { FileResource } from '../common/assets/FileResource';\r\n\r\nconst CAMERA_SLOWDOWN_FACTOR = 3;\r\n\r\nlet assets: {\r\n    tiles: SpriteSheet,\r\n    wizard: SpriteSheet,\r\n    arrows: SpriteSheet,\r\n    tilesets: FileResource<any>\r\n};\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\n\r\nlet world: World;\r\n\r\nlet keys: KeyboardManager;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    assets = {\r\n        tiles: new SpriteSheet(16, 16, tilesUrl, assetLoader.registerAssetLoadCallback()),\r\n        wizard: new SpriteSheet(16, 16, wizardUrl, assetLoader.registerAssetLoadCallback()),\r\n        arrows: new SpriteSheet(16, 16, arrowsUrl, assetLoader.registerAssetLoadCallback()),\r\n        tilesets: new FileResource('../dist/assets/rpgtest/tilesets.json', assetLoader.registerAssetLoadCallback()),\r\n    };\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    world = new World(Const.TILES_WIDE * 2, Const.TILES_HIGH * 2, () => {\r\n        if (Math.random() <= 0.15) {\r\n            return Cell.RockWall(assets.tiles);\r\n        }\r\n        else {\r\n            return Cell.GrassFloor(assets.tiles);\r\n        }\r\n    });\r\n    world.updatePrerender();\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    ctx = canvas.getContext('2d');\r\n    const scaleHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.TILE_SIZE * Const.TILES_WIDE, Const.TILE_SIZE * Const.TILES_HIGH, true, () => { return; });\r\n    tick();\r\n}\r\n\r\nconst camPos = new Point(0, 0);\r\nconst playerPos = new Rect(0, 0, 14, 14);\r\nlet toggle = false;\r\nfunction tick() {\r\n    ctx.clearRect(0, 0, Const.TILES_WIDE * Const.TILE_SIZE, Const.TILES_HIGH * Const.TILE_SIZE);\r\n    NearestNeighborScaling(ctx);\r\n    ctx.save();\r\n    let cx = 0;\r\n    let cy = 0;\r\n    if (world.width > Const.TILES_WIDE) {\r\n        cx = Math.max(0, Math.min((world.width - Const.TILES_WIDE) * Const.TILE_SIZE, playerPos.x - (Const.TILE_SIZE * Const.TILES_WIDE / 2)));\r\n    }\r\n    if (world.height > Const.TILES_HIGH) {\r\n        cy = Math.max(0, Math.min((world.height - Const.TILES_HIGH) * Const.TILE_SIZE, playerPos.y - (Const.TILE_SIZE * Const.TILES_HIGH / 2)));\r\n    }\r\n\r\n    camPos.MultWith(CAMERA_SLOWDOWN_FACTOR, CAMERA_SLOWDOWN_FACTOR)\r\n          .AddWith(cx, cy)\r\n          .DivideWith(CAMERA_SLOWDOWN_FACTOR + 1, CAMERA_SLOWDOWN_FACTOR + 1);\r\n\r\n    ctx.translate(-camPos.x, -camPos.y);\r\n    ctx.drawImage(world.prerender, 0, 0);\r\n    keys.update();\r\n\r\n    ctx.fillStyle = 'blue';\r\n    ctx.fillRect(playerPos.x, playerPos.y, playerPos.w, playerPos.h);\r\n    const vel = new Point(0, 0);\r\n    if (keys.isKeyDown('a')) {\r\n        vel.x = -3;\r\n    }\r\n    if (keys.isKeyDown('d')) {\r\n        vel.x = 3;\r\n    }\r\n    if (keys.isKeyDown('w')) {\r\n        vel.y = -3;\r\n    }\r\n    if (keys.isKeyDown('s')) {\r\n        vel.y = 3;\r\n    }\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.globalAlpha = 0.6;\r\n    world.tryMoveEntity(playerPos, vel, (tx, ty) => {\r\n        ctx.fillRect(tx * Const.TILE_SIZE, ty * Const.TILE_SIZE, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    });\r\n    ctx.globalAlpha = 1;\r\n\r\n    toggle = !toggle;\r\n    if (toggle) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 10, 10);\r\n    }\r\n    ctx.restore();\r\n    requestAnimationFrame(() => tick());\r\n}"],"sourceRoot":""}