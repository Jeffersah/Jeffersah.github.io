{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/bullets/const.ts","webpack:///./src/projects/bullets/assets/bullets_entities.png","webpack:///./src/projects/bullets/assets/Ships.png","webpack:///./src/projects/bullets/assets/Flares.png","webpack:///./src/projects/common/position/Angle.ts","webpack:///./src/projects/bullets/Player.ts","webpack:///./src/projects/bullets/ETeam.ts","webpack:///./src/projects/bullets/GameState.ts","webpack:///./src/projects/common/interpolation/Interpolated.ts","webpack:///./src/projects/bullets/Effects/SingleExplosion.ts","webpack:///./src/projects/common/interpolation/TimingFunction.ts","webpack:///./src/projects/common/interpolation/InterpolationFunction.ts","webpack:///./src/projects/common/interpolation/Keyframes.ts","webpack:///./src/projects/bullets/Effects/Explosion.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/common/Angle.ts","webpack:///./src/projects/bullets/ai/FighterAI.ts","webpack:///./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack:///./src/projects/common/position/Line.ts","webpack:///./src/projects/common/position/Bounds.ts","webpack:///./src/projects/bullets/Ship.ts","webpack:///./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack:///./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack:///./src/projects/bullets/index.ts"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","src","a","b","sy","undefined","p","min","max","theta","fromAngle","Color","vals","h","s","v","hsv","rgb","r","g","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor","KeyState","keys","changes","key","indexOf","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","twoPi","PI","Angle","relativeNormalize","PHYS","sprites","position","velocity","angularVelocity","rotation","engineDeflect","tgtDeflect","isEngineOn","vDirection","diffDir","relativeAngle","diffPerc","friction","abs","MultWith","vTotal","vAngle","Direction","anglePullAmt","AddWith","ctx","save","rotrender","random","render","restore","ETeam","player","Player","Entities","neutral","ally","enemy","Effects","update","i","length","tick","updateEntities","entities","drawEntities","draw","Interpolated","range","timingFunction","InterpolationTimer","totalTime","elapsedTime","animation","sample","outerRadius","innerRadius","fillColor","timing","outer","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","pi","pc","numberInterpolator","fastColorInterpolator","EvenlySpacedKeyframes","interpolator","args","arguments","percPer","keyframes","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","anyStillRunning","atlas","sourceOffset","sourceSize","numFrames","origin","size","frame","translate","rotate","scale","drawImage","image","maxTime","loop","PlayingAnimation","source","currentTime","frameNumber","spriteUrl","onload","document","createElement","loadFinished","sourceRotation","offset","frameCount","norm","normalize","from","to","gs","ship","tgtHeading","angleBetween","deltaHeading","accuteAngle","tgtVel","definition","maxSpeed","EFlareConditions","end","subtract","interpolate","denom","parallelIntersection","percentA","percentB","basis","ray","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","relativePoints","map","dist","add","getVertecies","arr","line","edges","getEdges","minLinePerc","colision","intersection","ai","team","Velocity","lastAccel","lastDeccel","lastTurn","currentHp","maxHp","flares","f","clone","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","turnDirection","sign","maxTurnRate","sprite","conditions","minTrigger","rotPerTurn","playing","play","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","location","shipOrigin","shipSize","realPoint","Clone","SubtractWith","realRot","jsonPoint","json","srcPoint","srcSize","turnAccel","buildAi","getSprite","buildAllDefinitions","def","ships","parsedFlares","flare","getAnimation","imgOffset","frameSize","condition","hp","maxTurnSpeed","parseShipDefinition","scalingHelper","shipAtlas","flareAtlas","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","definitions","KeyboardManager","body","buildShip","repaintLoop","gameState","fillRect","focusPoint","ty","tx","repaint","requestAnimationFrame","onLoadDone"],"mappings":"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","file":"bullets.bundle.js","sourcesContent":["export default class Point {\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.MultWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.Length();\r\n        let vAngle = this.velocity.Direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.AddWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { Keyframes } from './Keyframes';\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { exception } from \"console\";\r\nimport { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(interpolator.arguments === undefined) {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation {\r\n        return new PlayingAnimation(this, maxTime, loop ?? false);\r\n    }\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IShipAI } from \"./IShipAI\";\r\n\r\nexport default class FigherAI implements IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const player = gs.Player;\r\n        const tgtHeading = Angle.angleBetween(ship.position, player.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.Clone();\r\n        realPoint.SubtractWith(Point.Multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.AddWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.Dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.Length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    private currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.Multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.AddWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nfunction jsonPoint(json: [number, number]):Point {\r\n    return new Point(json[0], json[1]);\r\n}\r\n\r\nexport function parseShipDefinition(def: IJsonShipDefinition, ships: SpriteAtlas, flares: SpriteAtlas): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        parsedFlares.push(new FlareDefinition(\r\n            flares.getAnimation(\r\n                jsonPoint(flare.animation.imgOffset),\r\n                jsonPoint(flare.animation.frameSize),\r\n                jsonPoint(flare.animation.origin),\r\n                flare.animation.numFrames\r\n            ),\r\n            jsonPoint(flare.offset),\r\n            flare.rotation,\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    return new ShipDefinition(\r\n        ships,\r\n        jsonPoint(def.size),\r\n        jsonPoint(def.imgOffset),\r\n        jsonPoint(def.size),\r\n        jsonPoint(def.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        ()=>new FigherAI()\r\n    );\r\n}\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(this, position, rotation ?? 0, this.buildAi(), team);\r\n    }\r\n}\r\n","import { SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { parseShipDefinition, ShipDefinition } from \"./ShipDefinition\";\r\nimport jsonData from \"../data/shipDefinitions.json\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\n\r\nexport type ShipType = 'interceptor' | 'fighter';\r\nexport function buildAllDefinitions(sprites: SpriteAtlas, flares: SpriteAtlas): ShipDefinition[] {\r\n    const json = <IJsonShipDefinition[]>jsonData;\r\n    return json.map(def => \r\n        parseShipDefinition(def, sprites, flares)\r\n    );\r\n/*\r\n    return {\r\n        interceptor: [\r\n            new ShipDefinition(sprites, \r\n                new Point(16, 16),\r\n                new Point(64, 32),\r\n                new Point(16, 16),\r\n                new Point(0.5, 0.5),\r\n                5, 1, 1, 6, 0.001, Math.PI / 128, \r\n                [],\r\n                () => new FigherAI()),\r\n            new ShipDefinition(sprites, \r\n                new Point(16, 16),\r\n                new Point(64, 128),\r\n                new Point(16, 16),\r\n                new Point(0.5, 0.5),\r\n                5, 1, 1, 6, 0.001, Math.PI / 128, \r\n                [],\r\n                () => new FigherAI())\r\n        ],\r\n        fighter: [\r\n            new ShipDefinition(sprites, \r\n                new Point(32, 32),\r\n                new Point(64, 64),\r\n                new Point(32, 32),\r\n                new Point(0.5, 0.5),\r\n                5, 0.1, 0.01, 8, 0.001, Math.PI / 64,\r\n                [],\r\n                () => new FigherAI()),\r\n            new ShipDefinition(sprites, \r\n                new Point(32, 32),\r\n                new Point(64, 160),\r\n                new Point(32, 32),\r\n                new Point(0.5, 0.5),\r\n                5, 1, 1, 6, 0.001, Math.PI / 128,\r\n                [],\r\n                () => new FigherAI())\r\n        ]\r\n    };\r\n    */\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\n\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipAtlas: SpriteAtlas;\r\nlet flareAtlas: SpriteAtlas;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n\r\n    assetLoader.onAllFinished(() => onLoadDone(entitySheet));\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = shipAtlas.getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    let definitions = buildAllDefinitions(shipAtlas, flareAtlas);\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        gs.Entities[ETeam.ally].push(definitions[i].buildShip(ETeam.ally, new Point(-100 * (i+1), 0), Math.PI / 2 + Math.random() * Math.PI));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.Multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}"],"sourceRoot":""}