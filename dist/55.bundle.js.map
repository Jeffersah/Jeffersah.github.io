{"version":3,"file":"55.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\n    private rgb?: { r: number, g: number, b: number };\n    private hsv?: { h: number, s: number, v: number };\n\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\n            this.hsv = vals as any;\n            this.rgb = undefined;\n        }\n        else  {\n            this.rgb = vals as any;\n            this.hsv = undefined;\n        }\n    }\n\n    /**\n     * Generate an RGB color\n     * @param r Red component [0, 1]\n     * @param g Green component [0, 1]\n     * @param b Blue component [0, 1]\n     */\n    public static rgb(r: number, g: number, b: number): Color {\n        return new Color({ r, g, b });\n    }\n\n    /**\n     * Generate an HSV color\n     * @param r Hue component [0, 1]\n     * @param g Saturation component [0, 1]\n     * @param b Value component [0, 1]\n     */\n    public static hsv(h: number, s: number, v: number): Color {\n        return new Color({ h, s, v });\n    }\n\n    public r(): number;\n    public r(v: number): void;\n    public r(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.r = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.r;\n        }\n    }\n\n    public g(): number;\n    public g(v: number): void;\n    public g(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.g = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.g;\n        }\n    }\n\n    public b(): number;\n    public b(v: number): void;\n    public b(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.b = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.b;\n        }\n    }\n\n    public h(): number;\n    public h(v: number): void;\n    public h(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.h = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.h;\n        }\n    }\n\n    public s(): number;\n    public s(v: number): void;\n    public s(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.s = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.s;\n        }\n    }\n\n    public v(): number;\n    public v(v: number): void;\n    public v(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.v = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.v;\n        }\n    }\n\n    private componentToRgb(n: number) {\n        const k = (n + this.hsv.h * 6) % 6;\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\n    }\n\n\n    private reqRgb() {\n        if (this.rgb === undefined) {\n            this.calcRgb();\n        }\n    }\n    private calcRgb() {\n        this.rgb = {\n            r: this.componentToRgb(5),\n            g: this.componentToRgb(3),\n            b: this.componentToRgb(1),\n        };\n    }\n\n    private reqHsv() {\n        if (this.hsv === undefined) {\n            this.calcHsv();\n        }\n    }\n    private calcHsv() {\n        const {r, g, b} = this.rgb;\n        const mx = Math.max(r, g, b);\n        const mn = Math.min(r, g, b);\n        let h = mx === mn ? 0\n            : mx === r ? (g - b) / (mx - mn)\n            : mx === g ? 2 + (b - r) / (mx - mn)\n            : 4 + (r - g) / (mx - mn);\n        h /= 6;\n        while (h < 0) {\n            h++;\n        }\n        this.hsv = {\n            h,\n            s: mx === mn ? 0 : (mx - mn) / mx,\n            v: mx\n        };\n    }\n\n    public toString(): string {\n        this.reqRgb();\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\n    }\n\n    private toByte(component: number) {\n        return Math.floor(component * 255);\n    }\n}","import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","import { TimingFunction } from \"./TimingFunction\";\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\nimport { InterpolationFunction } from \"./InterpolationFunction\";\n\nexport class Interpolated<T> {\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\n\n    }\n\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\n    }\n}\n\nexport class InterpolationTimer {\n    public elapsedTime: number;\n    constructor(public totalTime: number) {\n        this.elapsedTime = 0;\n    }\n    tick(): boolean {\n        this.elapsedTime ++;\n        return this.elapsedTime >= this.totalTime;\n    }\n    sample<T>(animation: Interpolated<T>) {\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\n    }\n}\n\nexport class LinkedInterpolation<T> {\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\n\n    }\n\n    sample(): T {\n        return this.timer.sample(this.interp);\n    }\n}","import { Color } from \"../Color\";\n\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\n\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\n\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        numberInterpolator(a.r(), b.r(), p),\n        numberInterpolator(a.g(), b.g(), p),\n        numberInterpolator(a.b(), b.b(), p));\n\n        \nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\n\n        \nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.hsv(\n        numberInterpolator(a.h(), b.h(), p),\n        numberInterpolator(a.s(), b.s(), p),\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\n\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\n    if(typeof(interpolator) !== 'function') {\n        args.splice(0, 0, <T><any>interpolator);\n        interpolator = undefined;\n    }\n\n    let numFrames = args.length - 1;\n    let percPer = 1 / numFrames;\n    let keyframes = new Keyframes<T>(args[0], interpolator);\n    for(let i = 1; i < args.length; i++) {\n        keyframes.addKeyFrame(percPer * i, args[i]);\n    }\n    return keyframes;\n}\n\nexport class Keyframes<T> \n{\n    private interpolator: InterpolationFunction<T>;\n    private keys: {time: number, value: T}[];\n\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\n    {\n        if(interpolator === undefined) {\n            if(typeof(start) === \"number\") {\n                this.interpolator = <any>numberInterpolator;\n            } else if((<Color><unknown>start).r !== undefined) {\n                // Assume this is color\n                this.interpolator = <any>fastColorInterpolator;\n            }\n            else {\n                throw 'No default interpolator found';\n            }\n        } else {\n            this.interpolator = interpolator;\n        }\n        this.keys = [{time: 0, value: start}];\n    }\n\n    public addKeyFrame(time: number, value: T) {\n        for(let i = 0; i < this.keys.length; i++)\n        {\n            if(time < this.keys[i].time) {\n                this.keys.splice(i, 0, {time, value});\n                return;\n            }\n        }\n        this.keys.push({time, value});\n    }\n\n    public sample(p: number): T {\n        if(this.keys.length === 1) return this.keys[0].value;\n\n        var keyIndex = 0;\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\n            keyIndex ++;\n        }\n\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\n\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\n    }\n}","import Point from './Point';\n\nexport enum Direction {\n    Up = 0,\n    UpRight,\n    Right,\n    DownRight,\n    Down,\n    DownLeft,\n    Left,\n    UpLeft,\n}\n\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\n\nexport const directionValues: Point[] = [\n    new Point(0, -1),\n    new Point(1, -1),\n    new Point(1, 0),\n    new Point(1, 1),\n    new Point(0, 1),\n    new Point(-1, 1),\n    new Point(-1, 0),\n    new Point(-1, -1),\n];\n\nexport const allDirections: Direction[] = [\n    Direction.Up,\n    Direction.UpRight,\n    Direction.Right,\n    Direction.DownRight,\n    Direction.Down,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n];\nexport const cardinalDirections: ECardinalDirection[] = [\n    Direction.Up,\n    Direction.Right,\n    Direction.Down,\n    Direction.Left\n];\nexport const diagonalDirections: EDiagonalDirection[] = [\n    Direction.UpRight,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.UpLeft,\n];\n\nexport function ToPoint(direction: Direction): Point {\n    return directionValues[direction];\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        if(p === 0) return a;\n        if(p === 1) return b;\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import Point from './Point';\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\n\nexport default class Rect {\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\n\n    shift(x: number, y: number): Rect;\n    shift(p: Point): Rect;\n    shift(xp: number | Point, y?: number): Rect {\n        if (y === undefined) {\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\n        }\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\n    }\n\n    shiftBy(x: number, y: number): void;\n    shiftBy(p: Point): void;\n    shiftBy(xp: number | Point, y?: number): void {\n        if (y === undefined) {\n            this.x += (xp as Point).x;\n            this.y += (xp as Point).y;\n        } else {\n            this.x += (xp as number);\n            this.y += y;\n        }\n    }\n\n    edge(direction: ECardinalDirection): number {\n        switch (direction) {\n            case Direction.Up: return this.y;\n            case Direction.Down: return this.y + this.h;\n            case Direction.Left: return this.x;\n            case Direction.Right: return this.x + this.w;\n        }\n    }\n\n    corner(direction: EDiagonalDirection): Point {\n        switch (direction) {\n            case Direction.UpRight: return new Point(this.x, this.y);\n            case Direction.DownRight: return new Point(this.x, this.y);\n            case Direction.DownLeft: return new Point(this.x, this.y);\n            case Direction.UpLeft: return new Point(this.x, this.y);\n        }\n    }\n\n    equals(r: Rect) {\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\n    }\n}","import Point from \"../common/position/Point\";\n\nexport const TILE_WIDTH = 32;\nexport const TILE_HEIGHT = 32;\nexport const PIX_PER_CELL_X = 32;\nexport const PIX_PER_CELL_Y = new Point(16, 24);\n\nexport const MAP_SIZE = 6;\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\n\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\n\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"01e11f7981f442c6037827f1760c4c3e.png\";","export default __webpack_public_path__ + \"73e309f8aae54c28b86a4cd95da4091d.png\";","import Rect from \"../position/Rectangle\";\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\nimport Point from \"../position/Point\";\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\n\n    public origin: Point;\n\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\n        this.origin = origin ?? new Point(0,0);\n    }\n\n    getSprite(): Sprite {\n        return this;\n    }\n\n    getPixelSize(): Point {\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\n    }\n\n    getRenderable(): IRenderable {\n        return this;\n    }\n\n    public width() {\n        return this.sourceBounds.w;\n    }\n    public height() {\n        return this.sourceBounds.h;\n    }\n\n    tick(): boolean {\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\n        const oldTransform = ctx.getTransform();\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\n        ctx.drawImage(this.source, \n            this.sourceBounds.x, \n            this.sourceBounds.y, \n            this.sourceBounds.w, \n            this.sourceBounds.h, \n            0, \n            0, \n            destination.w, \n            destination.h);\n        ctx.setTransform(oldTransform);\n    }\n}","import Point from \"../common/position/Point\";\n\nexport enum Direction {\n    Right = 0,\n    DownRight = 1,\n    DownLeft = 2,\n    Left = 3,\n    UpLeft = 4,\n    UpRight = 5\n}\n\nexport const AllDirections: Direction[] = [\n    Direction.Right,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n    Direction.UpRight\n];\n\nexport class DirectionHelper {\n    public static ToPoint(direction: Direction): Point {\n        switch (direction) {\n            case Direction.Right: return new Point(1, 0);\n            case Direction.DownRight: return new Point(0, 1);\n            case Direction.DownLeft: return new Point(-1, 1);\n            case Direction.Left: return new Point(-1, 0);\n            case Direction.UpLeft: return new Point(0, -1);\n            case Direction.UpRight: return new Point(1, -1);\n        }\n    }\n\n    public static Turn(direction: Direction, amount: number): Direction {\n        const result = (direction + amount)%6;\n        return (result + 6) % 6;\n    }\n}","import AssetLoader from \"../common/assets/AssetLoader\";\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\nimport floor_and_digits from './assets/floor_and_digits.png';\nimport ImageLoader from \"../common/assets/ImageLoader\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport Point from \"../common/position/Point\";\n\nexport default class Assets {\n    tiles: SpriteSheet;\n    floor_and_digits: ImageLoader;\n\n    constructor(loader: AssetLoader) {\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\n        this.floor_and_digits = new ImageLoader(floor_and_digits, loader.registerAssetLoadCallback());\n    }\n\n    getDigitSprite(digit: number):Sprite {\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, 0, 7, 13));\n    }\n\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number) {\n        const digits = value.toString().split('').map(s => parseInt(s));\n        for(var i = 0; i < digits.length; i++) {\n            this.getDigitSprite(digits[i]).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\n        }\n    }\n}","import Point from \"../common/position/Point\";\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\nimport { Direction, DirectionHelper } from \"./Direction\";\n\nexport function TurnRight(pt: Point, amt?: number) {\n    for(let i = 0; i < (amt ?? 1); i++){\n        pt = new Point(-pt.y, pt.x + pt.y);\n    }\n    return pt;\n}\n\nexport function TurnLeft(pt: Point, amt?: number) {\n    for(let i = 0; i < (amt ?? 1); i++){\n        pt = new Point(pt.x + pt.y, -pt.x);\n    }\n    return pt;\n}\n\nexport function HexToPixel(point: Point) {\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\n}\n\nexport function PixelToHex(point: Point) {\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\n    return new Point(tilesX, tilesY);\n}\n\nexport function HexLength(point: Point): number {\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\n    }\n    else {\n        return Math.abs(point.x) + Math.abs(point.y);\n    }\n}\n\nexport function GetRing(radius: number) {\n    if(radius === 0) return [new Point(0,0)];\n\n    const result: Point[] = [];\n    let pos = new Point(0, -radius);\n    \n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\n        var dir = DirectionHelper.ToPoint(direction);\n        for(var len = 0; len < radius; len++){\n            result.push(pos);\n            pos = Point.add(pos, dir);\n        }\n    }\n\n    return result;\n}","import Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport { HexToPixel } from \"./Hex\";\nimport * as C from './Constants';\nimport Player from \"./entities/Player\";\n\nexport default abstract class Entity {\n    isFlying: boolean;\n    maxHp: number;\n    hp: number;\n    position: Point;\n\n    constructor(position: Point) {\n        this.position = position;\n    }\n\n    abstract draw(ctx: CanvasRenderingContext2D): void;\n\n    static IsPlayer(entity: Entity): entity is Player {\n        return (entity as Player).primary !== undefined;\n    }\n}\n\nexport abstract class SimpleEnemy extends Entity {\n    abstract getRenderable() : IRenderable;\n    override draw(ctx: CanvasRenderingContext2D): void {\n        const target = HexToPixel(this.position);\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\n        this.getRenderable().draw(ctx, rect, 0);\n    } \n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport Entity from \"../Entity\";\nimport IAnimation from \"./IAnimation\";\n\nexport default class EntityMoveAnimation implements IAnimation {\n    private timer: InterpolationTimer;\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\n        this.timer = new InterpolationTimer(duration);\n    }\n\n    tick(): boolean{ \n        if(this.timer.tick()) {\n            this.entity.position = this.target;\n            return true;\n        }\n        this.entity.position = this.timer.sample(this.motion);\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        // The gamestate drawing will draw this entity. No need to draw it twice.\n        // this.entity.draw(ctx);\n    }\n}","import Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport IAnimation from \"./IAnimation\";\n\nexport default class RenderableAnimation implements IAnimation {\n    private rotation: number;\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\n        this.rotation = rotation ?? 0;\n    }\n\n    tick(): boolean {\n        if(this.fixedDuraiton !== undefined) {\n            this.fixedDuraiton--;\n            if(this.fixedDuraiton === -1) return true;\n            this.renderable.tick();\n            return false;\n        }\n        return this.renderable.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        this.renderable.draw(ctx, this.bounds, this.rotation);\n    }\n}","import Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\nimport EntityMoveAnimation from \"./animation/EntityMoveAnimation\";\nimport IAnimation from \"./animation/IAnimation\";\nimport RenderableAnimation from \"./animation/RenderableAnimation\";\nimport Entity from \"./Entity\";\nimport * as C from \"./Constants\";\nimport { HexToPixel } from \"./Hex\";\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../common/interpolation/Interpolated\";\n\nconst BUMP_ANIMATION_TIME = 10;\n\nexport default class AttackInfo {\n    public startPoint: Point;\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: IRenderableSource) {\n        this.startPoint = attacker.position;\n    }\n\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\n    }\n\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\n    }\n\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: IRenderableSource) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, null, projectile);\n    }\n\n    toAnimations():IAnimation[] {\n        let animations:IAnimation[] = [];\n        if(this.bumpAnimation) {\n            animations.push(new EntityMoveAnimation(\n                this.attacker, \n                Interpolated.linear<Point>(Point.interpolate, \n                    this.attacker.position, \n                    Point.interpolate(this.attacker.position, this.target, 1/2), \n                    this.attacker.position), \n                this.attacker.position, \n                BUMP_ANIMATION_TIME));\n        }\n        if(this.projectile) {\n            // TODO\n        }\n        if(this.impactAnimation) {\n            const pixTarget = HexToPixel(this.target);\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\n        }\n        return animations;\n    }\n}","import Point from \"../../common/position/Point\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport GameState from \"../GameState\";\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\nimport PlayerWeapon from \"./PlayerWeapon\";\n\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\n\nexport default class SimpleWeapon extends PlayerWeapon{\n    private attacks: ISimpleAttack[];\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, ...attacks: ISimpleAttack[]) {\n        super(type, assets, artTile);\n        this.attacks = attacks;\n    }\n\n\n    getAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\n        const attacks: AttackInfo[] = [];\n        const moveDelta = Point.subtract(moveTo, moveFrom);\n        for(const attack of this.attacks) {\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\n            const rot = this.getRotation(moveDelta, attack.onMove);\n            if(rot === undefined) continue;\n            for(const pattern of attack.pattern) {\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\n                const attackInfo = attack.attack(state, player, target);\n                if(attackInfo !== undefined) attacks.push(attackInfo);\n            }\n        }\n        return attacks;\n    }\n\n    getRotation(delta: Point, target: Point) {\n        for(let i = 0; i < 6; i++) {\n            if(delta.equals(target)) return i;\n            delta = TurnRight(delta);\n        }\n        return undefined;\n    }\n\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from '../Constants';\nimport Player from \"../entities/Player\";\nimport GameState from \"../GameState\";\n\nexport default abstract class PlayerWeapon {\n\n    public iconImage: IRenderable;\n    public sprite: IRenderable;\n\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\n        if(this.type === 'primary') {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n        else {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n    }\n\n    abstract getAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\n}\n","import { timeStamp } from \"console\";\nimport Point from \"../../common/position/Point\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport SimpleWeapon from \"./SimpleWeapon\";\n\nexport default class Sword extends SimpleWeapon {\n    constructor(assets: Assets) {\n        super('primary', assets, new Point(8, 1), \n        {\n            onMove: new Point(1, 0),\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\n            attack: (s,p,t) => this.getAttack(s,p,t)\n        });\n    }\n\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\n        const e = state.entityAt(target);\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\n        return new AttackInfo(player, target, [target], 2, false, /* ATTACK ANIMATION HERE */ null, null); \n    }\n}","import { timeStamp } from \"console\";\nimport Point from \"../../common/position/Point\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport SimpleWeapon from \"./SimpleWeapon\";\n\nexport default class Dagger extends SimpleWeapon {\n    constructor(assets: Assets) {\n        super('secondary', assets, new Point(10, 0), \n        {\n            onMove: new Point(1, 0),\n            pattern: [new Point(1, -1), new Point(0, 1)],\n            attack: (s,p,t) => this.getAttack(s,p,t)\n        });\n    }\n\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\n        const e = state.entityAt(target);\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\n        return AttackInfo.basicAttack(player, e, 1);\n    }\n}","import { LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport { OffsetRenderable } from \"../../common/rendering/OffsetRenderable\";\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\nimport Assets from \"../Assets\";\nimport Entity from \"../Entity\";\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\nimport * as C from '../Constants';\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Rect from \"../../common/position/Rectangle\";\nimport { HexToPixel } from \"../Hex\";\nimport Sword from \"../weapons/Sword\";\nimport Dagger from \"../weapons/Dagger\";\n\nexport default class Player extends Entity {\n\n    public primary: PlayerWeapon;\n    public secondary: PlayerWeapon;\n    private renderable: Sprite;\n\n    constructor(assets: Assets, pos: Point) {\n        super(pos);\n\n        this.primary = new Sword(assets);\n        this.secondary = new Dagger(assets);\n\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n\n        const target = HexToPixel(this.position);\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\n\n        this.renderable.draw(ctx, rect, 0);\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Player from \"./entities/Player\";\nimport HexArray from \"./HexArray\";\nimport HexCell from \"./HexCell\";\nimport IMapGen from \"./mapGen/IMapGen\";\nimport * as C from \"./Constants\";\nimport Entity from \"./Entity\";\nimport { HexToPixel } from \"./Hex\";\nimport Rect from \"../common/position/Rectangle\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Enemy from \"./entities/Enemy\";\n\nexport default class GameState {\n\n    public player: Player;\n    public enemies: Enemy[] = [];\n\n    public tiles: HexArray<HexCell>;\n    public currentFloor: number;\n    \n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\n        this.changeFloor(floorNum, generator);\n\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\n    }\n\n    entityAt(to: Point) {\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\n    }\n\n    isValidMove(to: Point, flying: boolean) {\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \n            (this.tiles.get(to).isPathable || flying);\n        if(!isValidTile) return false;\n        if(to.equals(this.player.position)) return false;\n        return !this.enemies.some(e => e.position.equals(to));\n    }\n\n    changeFloor(floorNum: number, generator: IMapGen) {\n        generator.generateMap(this.assets, floorNum, this);\n        this.currentFloor = floorNum;\n        this.tiles.iterate((x, y, tile) =>{\n            tile.AfterWorldLoad(this, new Point(x, y));\n        });\n    }\n\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 0, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\n        this.assets.drawNumber(ctx, new Point(41, 0), this.currentFloor);\n\n        this.tiles.iterate((x, y, cell) => {\n            cell.draw(ctx, this, new Point(x, y));\n        });\n\n        [this.player, ...this.enemies].forEach(entity => {\n            if(excludeEntities && excludeEntities.includes(entity)) {\n                return;\n            }\n            entity.draw(ctx);\n        });\n    }\n}","import IAnimation from \"./IAnimation\";\n\nexport default class ParallelAnimation implements IAnimation {\n    constructor(private steps: IAnimation[]) {\n\n    }\n\n    tick(): boolean {\n        for(let i = this.steps.length - 1; i >= 0; i--) {\n            if(this.steps[i].tick()) {\n                this.steps.splice(i, 1);\n            }\n        }\n        return this.steps.length === 0;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        for(const step of this.steps) {\n            step.draw(ctx);\n        }\n    }\n}","import IAnimation from \"./IAnimation\";\n\nexport default class SequentialAnimation implements IAnimation {\n    constructor(private steps: IAnimation[]) {\n\n    }\n\n    tick(): boolean {\n        if(this.steps.length === 0) return true;\n        \n        while(this.steps[0].tick()){\n            this.steps.shift();\n            if(this.steps.length === 0) return true;\n        }\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        this.steps[0].draw(ctx);\n    }\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\nimport Point from \"../position/Point\";\nimport Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport class DeltaRenderable implements IRenderable {\n    constructor(private source: IRenderable, public delta: Rectangle) {\n    }\n\n    tick(): boolean {\n        return this.source.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\n    }\n}","import Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\n\nexport class StackRenderable implements IRenderable {\n\n    public finishMode: 'any'|'all';\n\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\n        this.finishMode = renderableFinishMode ?? 'any';\n    }\n\n    tick(): boolean {\n        let allFinished = true;\n        let anyFinished = false;\n        for(let i = 0; i < this.renderables.length; i++) {\n            const f = this.renderables[i].tick();\n            allFinished = allFinished && f;\n            anyFinished = anyFinished || f;\n        }\n        return this.finishMode === 'any' ? anyFinished : allFinished;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        for(let i = 0; i < this.renderables.length; i++) {\n            this.renderables[i].draw(ctx, position, rotation);\n        }\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport * as C from \"./Constants\";\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\n\nexport default abstract class HexCell {\n    isPathable: boolean;\n    typeId: number;\n\n    constructor(typeId: number, pathable: boolean){\n        this.typeId = typeId;\n        this.isPathable = pathable;\n    }\n\n    abstract OnEntityStep(entity: Entity): void;\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\n}\n\nexport abstract class SimpleCell extends HexCell{\n\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\n        super(typeId, isPathable);\n\n        this.bg_renderable = \n            new DeltaRenderable(\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\n                new Rect(0, .75, 1, 1)\n            );\n\n        if(includeDefaultRenderable === true) {\n            this.bg_renderable = new StackRenderable(\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\n            );\n        }\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        \n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}\n\nexport class Floor extends SimpleCell {\n    public static TypeID = 0;\n\n    constructor(assets: Assets, customSprite?: Point) {\n        super(Floor.TypeID, assets, customSprite ?? new Point(0,0), true, customSprite !== undefined);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}\n\n// TypeID 1 : Lava\n\nexport class DownStairs extends SimpleCell {\n    public static TypeID = 2;\n    constructor(assets: Assets) {\n        super(DownStairs.TypeID, assets, new Point(5, 0), true, true);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport IAnimation from \"../animation/IAnimation\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\n\nexport default class AnimationPhase implements IGamePhase {\n\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\n    }\n\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        for(let i = this.animations.length - 1; i >= 0; i--) {\n            if(this.animations[i].tick()) {\n                this.animations.splice(i, 1);\n            }\n        }\n        if(this.animations.length === 0) {\n            return this.onFinish(state);\n        }\n        return this;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        for(const animation of this.animations) { \n            animation.draw(ctx);\n        }\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\nimport IAnimation from \"../animation/IAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport AttackAnimationPhase from \"./AttackAnimationPhase\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\nconst duration = 20;\n\nexport default function EnemyMovePhase(state: GameState, enemyAttacks: AttackInfo[][]): IGamePhase {\n    const disallowed: Point[] = [];\n    const animations: IAnimation[] = [];\n    for(let i = 0; i < state.enemies.length; i++) { \n        const destination = state.enemies[i].getMove(state, enemyAttacks[i], disallowed);\n        if(!destination.equals(state.enemies[i].position)) {\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\n            disallowed.push(destination);\n        }\n    }\n\n    return new AnimationPhase(animations, () => new PlayerTurnGamePhase());\n}","import Point from \"../common/position/Point\";\n\nexport default class HexArray<T> {\n    private data: T[][];\n    private _size: number;\n\n    constructor(size: number, defaultValue: T) {\n        this._size = size;\n        this.data = [];\n        let midRowLength = size*2 - 1;\n        for(let dy = -size+1; dy <= size-1; dy++){\n            let row: T[] = [];\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\n                row.push(defaultValue);\n            }\n            this.data.push(row);\n        }\n    }\n\n    public size() {\n        return this._size;\n    }\n\n    public get(x: number, y: number): T;\n    public get(pt: Point): T;\n    public get(pt: [number, number]): T;\n    public get(xp: number|Point|[number, number], yp?: number): T {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        let [dx, row] = this.toArrayCoords(x, y);\n        return this.data[row][dx];\n    }\n\n    public set(value: T, x: number, y: number): void;\n    public set(value: T, pt: Point): void;\n    public set(value: T, pt: [number, number]): void;\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        const [dx, row] = this.toArrayCoords(x, y);\n        this.data[row][dx] = value;\n    }\n\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\n        if(typeof xp === \"number\"){\n            return [xp as number, y];\n        }\n        else if ((xp as Point).x !== undefined) {\n            return [(xp as Point).x, (xp as Point).y];\n        }\n        else {\n            return xp as [number, number];\n        }\n    }\n\n    public getRowLength(y: number): number {\n        return this._size * 2 - 1 - Math.abs(y);\n    }\n\n    public isInBounds(x: number, y: number): boolean {\n        if(y <= -this._size || y >= this._size) {\n            return false;\n        }\n        let [xMin, xMax] = this.getXRange(y);\n        return x >= xMin && x < xMax;\n    }\n\n    public getXRange(y: number): [number, number] {\n        const minX = this.getMinX(y);\n        const len = this.getRowLength(y);\n        return [minX, minX + len];\n    }\n\n    public getMinX(y: number): number {\n        const row = this._size - 1 + y;\n        return -Math.min(row, this._size - 1);\n    }\n\n    public iterate(func: (x: number, y: number, value: T) => void) {\n        for(let y = -this._size+1; y < this._size; y++) {\n            let [xMin, xMax] = this.getXRange(y);\n            for(let x = xMin; x < xMax; x++) {\n                func(x, y, this.get(x, y));\n            }\n        }\n    }\n\n    private toArrayCoords(x: number, y: number): [number, number] {\n        const row = this._size - 1 + y;\n        const firstX = -Math.min(row, this._size - 1);\n        const dx = x - firstX;\n\n        return [dx, row];\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport * as C from \"./Constants\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\nimport HexCell from \"./HexCell\";\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\n\ninterface ITilePart {\n    directions: Direction[];\n    tileCoords: Point;\n    tileSlice: Rect;\n}\n\nconst tileParts: ITilePart[] = [\n    {\n        // Top of Tile\n        directions: [Direction.UpLeft, Direction.UpRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0, 1, 0.5),\n    },\n    {\n        // Bottom of Tile\n        directions: [Direction.DownLeft, Direction.DownRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\n    }, \n    {\n        // TopLeft of Tile\n        directions: [Direction.Left, Direction.UpLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\n    },\n    {\n        // TopRight of Tile\n        directions: [Direction.Right, Direction.UpRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\n    },\n    {\n        // BottomLeft of Tile\n        directions: [Direction.Left, Direction.DownLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\n    },\n    {\n        // BottomRight of Tile\n        directions: [Direction.Right, Direction.DownRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\n    }\n]\n\nexport default abstract class MultiPartCell extends HexCell{\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n    private assets: Assets;\n\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\n        super(typeId, isPathable);\n\n        this.assets = assets;\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        const adjacencyMap = AllDirections.map(d => {\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\n            }\n            else {\n                return true;\n            }\n        });\n\n        const images = tileParts.map(part => {\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\n            const sourceBounds = new Rect(\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\n                (part.tileSlice.w) * C.TILE_WIDTH,\n                (part.tileSlice.h) * C.TILE_HEIGHT\n            );\n            return new DeltaRenderable(\n                new Sprite(this.assets.tiles.image, sourceBounds),\n                part.tileSlice\n            );\n        });\n\n        this.renderable = new StackRenderable(\n            images,\n            'all'\n        );\n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}","import Point from \"../common/position/Point\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport GameState from \"./GameState\";\nimport HexCell from \"./HexCell\";\nimport MultiPartCell from \"./MultiPartCell\";\n\nexport default class Lava extends MultiPartCell {\n    public static TypeID = 1;\n\n    constructor(assets: Assets) {\n        super(Lava.TypeID, assets, new Point(0, 4), false);\n    }\n\n    OnEntityStep(entity: Entity): void {\n        if(!entity.isFlying)\n            entity.hp -= 100;\n    }\n}","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport { GetRing } from \"../Hex\";\nimport Lava from \"../LavaCell\";\nimport Point from \"../../common/position/Point\";\n\nconst playerMoveTileArts = [\n    new Point(6,2),\n    new Point(7,2),\n    new Point(9,2),\n    new Point(7,3),\n    new Point(6,3),\n    new Point(8,2),\n];\n\nexport default class FloorZeroGen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n\n        const ring = GetRing(2);\n        for(var i = 0; i < ring.length; i++) {\n            state.tiles.set(new Lava(assets), ring[i]);\n        }\n\n        const ring2 = GetRing(3);\n        for(var i = 0; i < ring2.length; i += 3) {\n            state.tiles.set(new Lava(assets), ring2[i]);\n        }\n\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\n        for(let i = 0; i < playerRing.length; i++) {\n            state.tiles.set(\n                new Floor(assets, playerMoveTileArts[i]),\n                playerRing[i]\n            )\n        }\n\n\n        state.tiles.set(new DownStairs(assets), 2, -4);\n    }\n}","import Point from \"../../common/position/Point\";\nimport AttackInfo from \"../AttackInfo\";\nimport { SimpleEnemy } from \"../Entity\";\nimport GameState from \"../GameState\";\n\nexport default abstract class Enemy extends SimpleEnemy {\n\n    abstract getAttacks(state: GameState): AttackInfo[];\n    abstract getMove(state: GameState, attack: AttackInfo[], disallow: Point[]): Point;\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from \"../Constants\";\nimport GameState from \"../GameState\";\nimport { GetRing, HexLength } from \"../Hex\";\nimport Enemy from \"./Enemy\";\n\nexport default class Zombie extends Enemy {\n    static sprite: IRenderable;\n    static onAssetsLoaded(assets:Assets) {\n        Zombie.sprite = new Sprite(\n            assets.tiles.image,\n            new Rect(0, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\n        )\n    }\n\n    constructor(position: Point) {\n        super(position);\n        this.hp = this.maxHp = 3;\n        this.isFlying = false;\n    }\n\n    getAttacks(state: GameState): AttackInfo[] {\n        const playerLocation = state.player.position;\n        const len = HexLength(Point.subtract(playerLocation, this.position));\n        if(len === 1) {\n            return [AttackInfo.basicAttack(this, state.player, 1)];\n        }\n        return [];\n    }\n\n    getMove(state: GameState, attack: AttackInfo[], disallowed: Point[]): Point {\n        if(attack.length > 0) {\n            // Don't move if you've attacked.\n            return this.position;\n        }\n\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\n        let minMoves: Point[] = [];\n        let minMoveDist = 99;\n        for(let i = 0; i < possibleMoves.length; i++) {\n            if(!state.isValidMove(possibleMoves[i], false)) \n                continue;\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\n                continue;\n\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\n            const len = HexLength(ray);\n            if(len < minMoveDist) { \n                minMoveDist = len;\n                minMoves = [possibleMoves[i]];\n            }\n            else if(len === minMoveDist) {\n                minMoves.push(possibleMoves[i]);\n            }\n        }\n\n        if(minMoves.length === 0) return this.position;\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\n    }\n\n    override getRenderable(): IRenderable {\n        return Zombie.sprite;\n    }\n}","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport Point from \"../../common/position/Point\";\nimport Zombie from \"../entities/Zombie\";\n\nexport default class StandardMapGen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n        state.enemies = [];\n\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\n        state.tiles.set(new DownStairs(assets), downStairX, downStairY);\n\n        let validEnemySpawns: Point[] = [];\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\n            const [xMin, xMax] = state.tiles.getXRange(y);\n            for(let x = xMin; x < xMax; x++) {\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\n                    validEnemySpawns.push(new Point(x, y));\n                }\n            }\n        }\n\n        for(let i = 0; i < Math.min(12, floor); i++) {\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\n            const zombie = new Zombie(pos);\n            state.enemies.push(zombie);\n        }\n    }\n}","import Assets from \"../Assets\";\nimport GameState from \"../GameState\";\nimport Floor12Gen from \"./Floor12Gen\";\nimport FloorZeroGen from \"./FloorZeroGen\";\nimport StandardMapGen from \"./StandardMapGen\";\n\nexport default interface IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void;\n}\n\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\n    {range: [0,1], gen: new FloorZeroGen()},\n    {range: [1,12], gen: new StandardMapGen()},\n    {range: [12,13], gen: new Floor12Gen()},\n    {range: [13,-1], gen: new StandardMapGen()}\n]","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport { GetRing } from \"../Hex\";\nimport Point from \"../../common/position/Point\";\n\nexport default class Floor12Gen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n        state.tiles.set(new DownStairs(assets), 0, 0);\n        const ring = GetRing(2);\n        for (let i = 0; i < ring.length; i++) {\n            state.tiles.set(new Floor(assets, new Point(12, 0)), ring[i]);\n        }\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport { MapGenerators } from \"../mapGen/IMapGen\";\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\nimport Point from \"../../common/position/Point\";\n\nconst FADE_OUT_ANIM_TIME = 30;\nconst PLAYER_MOVE_TIME = 30;\n\nexport default class FloorTransitionPhase implements IGamePhase {\n\n    time = 0;\n\n    init(state: GameState): void {\n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.time++;\n        if (this.time >= FADE_OUT_ANIM_TIME) {\n            return new FloorTransitionPlayerMovePhase();\n        } else {\n            return this;\n        }\n\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        ctx.fillStyle = '#000000';\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n        ctx.globalAlpha = 1;\n        state.player.draw(ctx);\n    }\n\n}\n\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\n\n    time = 0;\n    playerStartPoint: Point;\n\n    init(state: GameState): void {\n        const floor = state.currentFloor + 1;\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\n        this.playerStartPoint = state.player.position;\n        state.changeFloor(floor, generator);\n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.time++;\n        if (this.time >= PLAYER_MOVE_TIME) {\n            state.player.position = C.PLAYER_START_POSITION.clone();\n            return new EntryAnimationPhase();\n        } else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        const lerp = this.time / PLAYER_MOVE_TIME;\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\n        state.player.position = tgt;\n        state.player.draw(ctx);\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\n\nconst dirKeys = [\n    { key: 'a', dir: Direction.Left },\n    { key: '4', dir: Direction.Left },\n    \n    { key: 'q', dir: Direction.UpLeft },\n    { key: '7', dir: Direction.UpLeft },\n\n    { key: 'w', dir: Direction.UpRight },\n    { key: '9', dir: Direction.UpRight },\n\n    { key: 'd', dir: Direction.Right },\n    { key: '6', dir: Direction.Right },\n\n    { key: 'x', dir: Direction.DownRight },\n    { key: '3', dir: Direction.DownRight },\n\n    { key: 'z', dir: Direction.DownLeft },\n    { key: '1', dir: Direction.DownLeft },\n]\n\nexport default class PlayerTurnGamePhase implements IGamePhase {\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        const dir = this.tryGetDirection(keys);\n        if(dir !== undefined) {\n            const destination = Point.add(state.player.position, DirectionHelper.ToPoint(dir));\n\n            if(!state.isValidMove(destination, false))\n                return this;\n\n            return PlayerMoveAnimPhase(state, state.player.position, destination);\n        }\n        return this;\n    }\n\n    tryGetDirection(keys: KeyboardManager): Direction | undefined {\n        for(let i = 0; i < dirKeys.length; i++) {\n            if(keys.isKeyPressed(dirKeys[i].key)) {\n                return dirKeys[i].dir;\n            }\n        }\n        return undefined;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport { HexToPixel, PixelToHex } from \"../Hex\";\nimport HexCell, { DownStairs } from \"../HexCell\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\n\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point):IGamePhase {\n\n    const onFinish = (gs: GameState) => {\n        if(gs.tiles.get(gs.player.position).typeId === DownStairs.TypeID) {\n            return new FloorTransitionPhase();\n        }\n        else if(gs.enemies.length === 0) {\n            return new PlayerTurnGamePhase();\n        }\n        else return EnemyAttackPhase(state);\n    }\n\n    const playerMove = new AnimationPhase(\n        [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, to), to, state.enemies.length === 0 ? 2 : 10)],\n        onFinish\n    );\n\n    if(state.enemies.length === 0) {\n        return playerMove;\n    }\n    if(state.enemies.length > 0) {\n        const attacks = [\n            ...state.player.primary.getAttacks(state, state.player, from, to),\n            ...state.player.secondary.getAttacks(state, state.player, from, to)\n        ];\n        if(attacks.length === 0) return playerMove;\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\n        return new AnimationPhase([animation], () => playerMove);\n    }\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport AttackAnimationPhase from \"./AttackAnimationPhase\";\nimport EnemyMovePhase from \"./EnemyMovePhase\";\nimport IGamePhase from \"./IGamePhase\";\n\n\n\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\n    const enemyAttacks: AttackInfo[][] = state.enemies.map(enemy => enemy.getAttacks(state));\n    if(enemyAttacks.some(e => e.length > 0)) {\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations()))));\n        return new AnimationPhase(animations, ()=>EnemyMovePhase(state, enemyAttacks));\n    }\n    else{\n        return EnemyMovePhase(state, enemyAttacks);\n    }\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 60;\n\nexport default class EntryAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n\n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new PlayerTurnGamePhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n        state.player.draw(ctx);\n    }\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 120;\n\nexport default class GameStartAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n    \n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new EntryAnimationPhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.player.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n    }\n}","import AssetLoader from '../common/assets/AssetLoader';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Point from '../common/position/Point';\nimport { TILES_HIGH } from '../rpgt/Constants';\nimport * as C from \"./Constants\";\nimport Assets from './Assets';\nimport GameState from './GameState';\nimport StandardMapGen from './mapGen/StandardMapGen';\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\nimport IGamePhase from './phases/IGamePhase';\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\nimport FloorZeroGen from './mapGen/FloorZeroGen';\nimport Zombie from './entities/Zombie';\n\nexport default function Run(): (()=>void) {\n    let ctx: CanvasRenderingContext2D;\n    \n    let keys: KeyboardManager;\n    let scaleHelper: NearestNeighborScalingHelper;\n    \n    const assetLoader = new AssetLoader();\n    const assets = new Assets(assetLoader);\n\n    let state: GameState;\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\n\n    keys = new KeyboardManager(document.body);\n    assetLoader.onAllFinished(assetLoadDone);\n    \n    function assetLoadDone() {\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n        ctx = canvas.getContext('2d');\n        scaleHelper = new NearestNeighborScalingHelper(\n            canvas, \n            ctx, \n            C.MAP_PIXEL_SIZE, \n            C.MAP_PIXEL_SIZE, \n            true, \n            () => { return; }\n        );\n\n        Zombie.onAssetsLoaded(assets);\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\n        NearestNeighborScaling(ctx);\n        tick();\n    }\n    \n    function tick() {\n        scaleHelper.TryRescale();\n        NearestNeighborScaling(ctx);\n\n        const nextPhase = currentPhase.tick(state, keys);\n\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n\n        currentPhase.draw(ctx, state);\n\n        if(nextPhase !== currentPhase) {\n            currentPhase = nextPhase;\n            nextPhase.init(state);\n        }\n\n        keys.update();\n        requestAnimationFrame(() => tick());\n    }\n\n    return (() => scaleHelper.Detatch());\n}\n","import * as React from 'react';\nimport Run from '../../../projects/hoplite/index';\n\nexport default function HopliteComponent() {\n    React.useEffect(()=>Run());\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\n        <canvas id=\"mainCanvas\"></canvas>\n    </div>;\n}\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","static","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","cos","sin","lengthSq","dot","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","sy","pts","add","Bezier","rotate","theta","fromAngle","Rect","w","shift","xp","shiftBy","edge","corner","TILE_WIDTH","TILE_HEIGHT","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","getDigitSprite","digit","image","drawNumber","position","digits","split","map","parseInt","AllDirections","DirectionHelper","amount","TurnRight","pt","amt","TurnLeft","HexToPixel","point","HexLength","sign","abs","GetRing","radius","result","pos","dir","Entity","entity","primary","SimpleEnemy","target","rect","EntityMoveAnimation","motion","duration","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","impactAnimation","projectile","startPoint","toAnimations","animations","pixTarget","SimpleWeapon","type","assets","artTile","sprite","iconImage","attacks","super","getAttacks","state","player","moveFrom","moveTo","moveDelta","attack","onMove","rot","getRotation","pattern","attackInfo","delta","Sword","getAttack","e","entityAt","IsPlayer","Dagger","basicAttack","Player","secondary","GameState","size","floorNum","generator","enemies","changeFloor","to","find","isValidMove","flying","isInBounds","get","isPathable","some","generateMap","currentFloor","iterate","tile","AfterWorldLoad","excludeEntities","cell","forEach","includes","ParallelAnimation","steps","step","SequentialAnimation","DeltaRenderable","Rectangle","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","HexCell","typeId","pathable","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","world","Floor","customSprite","TypeID","OnEntityStep","DownStairs","AnimationPhase","onFinish","init","EnemyMovePhase","enemyAttacks","disallowed","getMove","PlayerTurnGamePhase","HexArray","defaultValue","_size","data","midRowLength","dy","row","dx","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","func","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","d","hexPt","images","part","index","reduceRight","acc","Lava","isFlying","hp","playerMoveTileArts","FloorZeroGen","ring","ring2","playerRing","Enemy","Zombie","maxHp","playerLocation","possibleMoves","rp","minMoves","minMoveDist","random","StandardMapGen","downStairY","downStairX","validEnemySpawns","spawnId","zombie","MapGenerators","gen","FloorTransitionPhase","FloorTransitionPlayerMovePhase","fillStyle","globalAlpha","fillRect","filter","playerStartPoint","EntryAnimationPhase","lerp","tgt","dirKeys","tryGetDirection","from","playerMove","gs","enemy","attackSet","EnemyAttackPhase","PlayerMoveAnimPhase","animationTime","GameStartAnimationPhase","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","TryRescale","nextPhase","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","onAssetsLoaded","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}