{"version":3,"sources":["webpack:///./src/projects/glsl-mandelbrot/GlslFrameRenderer.ts","webpack:///./src/projects/glsl-mandelbrot/GlslJuliaFrameRenderer.ts","webpack:///./src/projects/glsl-mandelbrot/GlslMandelbrotRunner.ts","webpack:///./src/projects/glsl-mandelbrot/ShaderCode.ts","webpack:///./src/views/projects/glsl-mandelbrot/GlslMandelbrotComponent.tsx","webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/3d/GlslHelpers.ts"],"names":["canvas","fragment_code","onMiddleClick","this","cursor_anchor","mm_down","gl","getContext","touch_anchors","canvasRange","windowRange","height","width","init","clearColor","clear","COLOR_BUFFER_BIT","initProgram","program","buffer","renderFrame","addEventListener","e","button","Point","offsetX","offsetY","perc","GetPercentage","GetValue","x","y","undefined","preventDefault","dx","dy","panCameraByScreenDelta","scalePercentage","deltaY","scalePerc","Math","pow","AspectScale","ev","targetTouches","length","i","touch","item","identifier","touchOffset","touches","moves","pos","oldPos","push","subtract","dragStart","Multiply","add","dragEnd","worldPos","SubtractWith","scaleAmt","Length","delta","ShiftByPercentage","uniform2fv","getUniformLocation","xRange","min","yRange","tgt","target","getBoundingClientRect","pageX","left","pageY","top","super","setJuliaPoint","pt","julia_point","real","imaginary","julia_escape","sqrt","abs","uniform1fv","juliaCanvas","mandelbrot","jpt","julia","run","cleanup","GlslMandelbrotComponent","jcanvas","renderer","current","className","id","ref","angle","distance","cos","sin","Dot","LengthSq","p1","p2","other","len","atan2","nx","ny","splitArgs","splitArgsOrSingle","src","a","b","sy","p","max","pts","t","Bezier","slice","theta","fromAngle","loadShader","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","right","bottom","createBuffer","l","r","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader"],"mappings":"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","file":"18.bundle.js","sourcesContent":["import { Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslFrameRenderer {\r\n    protected gl: WebGLRenderingContext;\r\n    protected program: WebGLProgram;\r\n    protected buffer: WebGLBuffer;\r\n\r\n    private cursor_anchor: Point | null;\r\n    private mm_down: boolean;\r\n\r\n    protected canvasRange: Range2d;\r\n    protected windowRange: Range2d;\r\n\r\n    private touch_anchors: { [key: number]: Point }\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private fragment_code: string, private onMiddleClick?: (pt: Point) => void) {\r\n        ResizeCanvas(canvas, 1200, 600);\r\n        this.cursor_anchor = null;\r\n        this.mm_down = false;\r\n        this.gl = canvas.getContext('webgl');\r\n        this.touch_anchors = {};\r\n        \r\n        this.canvasRange = new Range2d(new Range(0, 1200), new Range(0, 600));\r\n        this.windowRange = new Range2d(new Range(-1, 1), new Range(-1, (canvas.height / canvas.width)));\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        this.initProgram();\r\n    }\r\n\r\n    initProgram() {\r\n        this.program = GLSL.initShaderProgram(this.gl, GLSL.defaultVertexShader, this.fragment_code);\r\n        this.buffer = GLSL.fragmentShaderOnlyInitBuffer(this.gl);\r\n    }\r\n\r\n    run() {\r\n        this.renderFrame();\r\n\r\n        this.canvas.addEventListener('mousedown', e => {\r\n            if(e.button === 0) {\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n            }\r\n            else if(e.button === 1) {\r\n                this.mm_down = true;\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                if(this.onMiddleClick !== undefined) {\r\n                    this.onMiddleClick(new Point(perc.x, perc.y));\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mouseup', e => {\r\n            if(e.button === 0)\r\n                this.cursor_anchor = null;\r\n            else if(e.button === 1)\r\n                this.mm_down = false;\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            if(this.cursor_anchor != null) {\r\n                const dx = e.offsetX - this.cursor_anchor.x;\r\n                const dy = e.offsetY - this.cursor_anchor.y;\r\n                this.panCameraByScreenDelta(new Point(dx, dy));\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n                this.renderFrame();\r\n                e.preventDefault();\r\n            }\r\n            if(this.mm_down && this.onMiddleClick !== undefined){\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                this.onMiddleClick(new Point(perc.x, perc.y));\r\n            }\r\n        });\r\n        this.canvas.addEventListener('wheel', e => {\r\n            const scalePercentage = e.deltaY / SCROLL_DIV;\r\n            const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n            const perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n\r\n            this.windowRange.AspectScale(scalePerc, perc.x, 1-perc.y);\r\n            this.renderFrame();\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchstart', ev => { \r\n            if(ev.targetTouches.length >= 3 || ev.targetTouches.length === 0) return;\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                this.touch_anchors[touch.identifier] = touchOffset(touch);\r\n            }\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchmove', ev => {\r\n            if(ev.touches.length >= 3 || ev.touches.length === 0) return;\r\n            const moves: [Point, Point][] = [];\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                const pos = touchOffset(touch);\r\n                const oldPos = this.touch_anchors[touch.identifier];\r\n                if(oldPos === undefined) return;\r\n                moves.push([oldPos, pos]);\r\n                this.touch_anchors[touch.identifier] = pos;\r\n            }\r\n\r\n            if(moves.length === 1) {\r\n                // Just pan the camera\r\n                this.panCameraByScreenDelta(Point.subtract(moves[0][1], moves[0][0]));\r\n            }\r\n            else if(moves.length === 2) {\r\n                // Average the start + End positions to find the move amt\r\n                const dragStart = Point.Multiply(Point.add(moves[0][0], moves[1][0]), 0.5, 0.5);\r\n                const dragEnd = Point.Multiply(Point.add(moves[0][1], moves[1][1]), 0.5, 0.5);\r\n                const worldPos = this.panCameraByScreenDelta(dragEnd.SubtractWith(dragStart));\r\n                const startDist = Point.subtract(moves[0][0], moves[1][0]).Length();\r\n                const endDist = Point.subtract(moves[0][1], moves[1][1]).Length();\r\n                const scaleAmt = startDist / endDist;\r\n                this.windowRange.AspectScale(scaleAmt, worldPos.x, 1-worldPos.y);\r\n            }\r\n\r\n            this.renderFrame();\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchend', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchcancel', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n    }\r\n\r\n    private panCameraByScreenDelta(delta: Point) {\r\n        const perc = this.canvasRange.GetPercentage(delta.x, delta.y);\r\n        this.windowRange.ShiftByPercentage(-perc.x, perc.y);\r\n        return perc;\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n        });\r\n    }\r\n\r\n    cleanup() {\r\n        \r\n    }\r\n}\r\n\r\nfunction touchOffset(touch: Touch): Point {\r\n    const tgt = (touch.target as HTMLElement).getBoundingClientRect();\r\n    return new Point(touch.pageX - tgt.left, touch.pageY - tgt.top);\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslJuliaFrameRenderer extends GlslFrameRenderer {\r\n    \r\n    private julia_point: Point;\r\n    private julia_escape: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, fragment_code: string) {\r\n        super(canvas, fragment_code);\r\n        this.setJuliaPoint(new Complex(0,0));\r\n    }\r\n\r\n    setJuliaPoint(pt: Complex)\r\n    {\r\n        this.julia_point = new Point(pt.real, pt.imaginary);\r\n        this.julia_escape = (Math.sqrt(4 * pt.abs() + 1) + 1) / 2;\r\n        this.renderFrame();\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'julia_coord'), [this.julia_point.x, this.julia_point.y]);\r\n            gl.uniform1fv(gl.getUniformLocation(this.program, 'julia_escape'), [this.julia_escape]);\r\n        });\r\n    }\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\nimport GlslJuliaFrameRenderer from \"./GlslJuliaFrameRenderer\";\r\nimport { JULIA_SHADER, MANDELBROT_SHADER } from \"./ShaderCode\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslMandelbrotWrapperComponent {\r\n    private mandelbrot: GlslFrameRenderer;\r\n    private julia: GlslJuliaFrameRenderer;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private juliaCanvas: HTMLCanvasElement) {\r\n        this.mandelbrot = new GlslFrameRenderer(canvas, MANDELBROT_SHADER, (jpt) => {\r\n            this.julia.setJuliaPoint(new Complex(jpt.x, jpt.y));\r\n        });\r\n        this.julia = new GlslJuliaFrameRenderer(juliaCanvas, JULIA_SHADER);\r\n\r\n        this.mandelbrot.run();\r\n        this.julia.run();\r\n    }\r\n\r\n    cleanup() {\r\n        this.mandelbrot.cleanup();\r\n        this.julia.cleanup();\r\n    }\r\n}","export const MANDELBROT_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\nconst float MAX_ABSSQ = 2.0;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_mandelbrot(vec2 v, vec2 c) {\r\n    return cplx_mult(v, v) + c;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_mandelbrot(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_mandelbrot(roll, coords);\r\n        if (cplx_abssq(roll) >= MAX_ABSSQ) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_mandelbrot(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;\r\n\r\nexport const JULIA_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 julia_coord;\r\nuniform float julia_escape;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_julia(vec2 v) {\r\n    return cplx_mult(v, v) + julia_coord;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_julia(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_julia(roll);\r\n        if (cplx_abssq(roll) >= julia_escape) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_julia(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;","import * as React from 'react';\r\nimport GlslMandelbrotRunner from '../../../projects/glsl-mandelbrot/GlslMandelbrotRunner';\r\n\r\nexport default function GlslMandelbrotComponent() {\r\n    const canvas = React.useRef<HTMLCanvasElement>();\r\n    const jcanvas = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        const renderer = new GlslMandelbrotRunner(canvas.current, jcanvas.current);\r\n        return () => renderer.cleanup();\r\n    }, [canvas]);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas' ref={canvas}></canvas>\r\n        <canvas id='jcanvas' ref={jcanvas}></canvas>\r\n    </div>;\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error(source);\r\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n\r\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n\r\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            positionNumComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n}\r\n\r\n\r\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n    const normalize = false;  // don't normalize\r\n    const stride = 0;         // how many bytes to get from one set of values to the next\r\n                              // 0 = use type and numComponents above\r\n    const offset = 0;         // how many bytes inside the buffer to start from\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n          gl.getAttribLocation(shader, 'aVertexPosition'),\r\n          positionNumComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n    gl.enableVertexAttribArray(\r\n      gl.getAttribLocation(shader, 'aVertexPosition'));\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(shader);\r\n  for(let i = 0; i < drawCounts; i++) {\r\n    bindUniforms(gl, i);\r\n    let {bufferOffset, bufferCount} = getGeom(i);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n  }\r\n}\r\n\r\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n}\r\n\r\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\r\n     // Create a buffer for the square's positions.\r\n     const positionBuffer = gl.createBuffer();\r\n\r\n     // Select the positionBuffer as the one to apply buffer\r\n     // operations to from here out.\r\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n     const l = left ?? -1.0;\r\n     const r = right ?? 1.0;\r\n     const t = top ?? -1.0;\r\n     const b = bottom ?? 1.0;\r\n \r\n     // Now create an array of positions for the square.\r\n     const positions = [\r\n         b, r,\r\n         t, r,\r\n         b, l,\r\n         t, l,\r\n     ];\r\n \r\n     // Now pass the list of positions into WebGL to build the\r\n     // shape. We do this by creating a Float32Array from the\r\n     // JavaScript array, then use it to fill the current buffer.\r\n     gl.bufferData(gl.ARRAY_BUFFER,\r\n                   new Float32Array(positions),\r\n                   gl.STATIC_DRAW);\r\n \r\n     return positionBuffer;\r\n}\r\n\r\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(components),\r\n                gl.STATIC_DRAW);\r\n\r\n  return positionBuffer;\r\n}\r\n\r\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\r\nvarying vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;"],"sourceRoot":""}