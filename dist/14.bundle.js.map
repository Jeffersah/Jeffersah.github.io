{"version":3,"sources":["webpack:///./src/projects/ant-colony/AntPath.ts","webpack:///./src/projects/ant-colony/ColonyState.ts","webpack:///./src/projects/ant-colony/index.ts","webpack:///./src/views/projects/ant-colony/AntColonyComponent.tsx","webpack:///./src/projects/common/position/Point.ts"],"names":["AntPath","path","cost","state","signalPower","distPower","start","hitmap","pathCost","index","i","points","length","push","next","this","runStep","distance","pathWeights","weightSum","weight","Math","pow","randomChoice","random","pts","initSignals","signals","distances","maxDist","from","row","distRow","to","dist","Point","subtract","Length","j","mult","max","min","value","i1","i2","undefined","isNaN","point","currentPaintLoop","Run","settings","cvs","stopPaintLoop","ctx","getContext","paintLoop","canvas","minPath","ants","numAnts","runPath","distancePower","multWeights","signalDecay","maxSignalGain","shortestPath","ant","longestPath","antWeight","addWeights","tick","totalMinPath","currentBestPath","globalBestPath","drawPoints","strokeStyle","beginPath","lineWidth","moveTo","x","y","lineTo","stroke","draw","setTimeout","delayPerFrame","numPts","floor","width","height","init","Cleanup","clearTimeout","fillStyle","fillRect","clientWidth","clientHeight","ellipse","PI","fill","AntColonyComponent","ref","setState","current","className","id","AntColonyValueSliderComponent","label","onChange","v","step","type","props","ev","target","valueAsNumber","angle","cos","sin","Dot","sqrt","LengthSq","p1","p2","other","len","Multiply","atan2","nx","ny","splitArgs","src","a","b","sy","p","t","add","Bezier","slice","theta","fromAngle"],"mappings":"6KAEO,MAAMA,EACT,YAAmBC,EAAuBC,GAAvB,KAAAD,OAAuB,KAAAC,OAI1C,eAAeC,EAAoBC,EAAqBC,EAAmBC,GACvE,MAAMC,EAAS,GACTN,EAAO,CAACK,GACd,IAAIE,EAAW,EACXC,EAAQH,EACZ,IAAI,IAAII,EAAI,EAAGA,EAAIP,EAAMQ,OAAOC,OAAQF,IACpCH,EAAOM,KAAKH,IAAMJ,GAGtB,IAAI,IAAII,EAAI,EAAGA,EAAIP,EAAMQ,OAAOC,OAAS,EAAGF,IAAK,CAC7C,IAAII,EAAOC,KAAKC,QAAQb,EAAOC,EAAaC,EAAWE,EAAQE,GAC/DD,GAAYL,EAAMc,SAASR,EAAOK,GAClCb,EAAKY,KAAKC,GACVL,EAAQK,EACRP,EAAOO,IAAQ,EAGnB,OAAO,IAAId,EAAQC,EAAMO,GAG7B,eAAeL,EAAoBC,EAAqBC,EAAmBE,EAAmBE,GAC1F,IAAIS,EAAc,GACdC,EAAY,EAChB,IAAI,IAAIT,EAAI,EAAGA,EAAIP,EAAMQ,OAAOC,OAAQF,IACpC,GAAGD,IAAUC,GAAKH,EAAOG,GAAIQ,EAAYR,GAAK,MACzC,CACD,IAAIU,EAASC,KAAKC,IAAI,EAAEnB,EAAMc,SAASR,EAAOC,GAAIL,GAAagB,KAAKC,IAAInB,EAAMiB,OAAOX,EAAOC,GAAIN,GAChGc,EAAYL,KAAMO,GAClBD,GAAaC,EAGrB,IAAIG,EAAeF,KAAKG,SAAWL,EACnC,IAAI,IAAIT,EAAI,EAAGA,EAAIQ,EAAYN,OAAQF,IACnC,IAAGH,EAAOG,KACVa,GAAgBL,EAAYR,GACzBa,GAAgB,GAAG,OAAOb,EAEjC,OAAQ,GC1CT,MAAM,EAMT,YAAYe,GAERV,KAAKJ,OAASc,EACdV,KAAKW,cAGD,cACJX,KAAKY,QAAU,GACfZ,KAAKa,UAAY,GAEjBb,KAAKc,QAAU,EACf,IAAI,IAAIC,EAAO,EAAGA,EAAOf,KAAKJ,OAAOC,OAAQkB,IAAO,CAChD,IAAIC,EAAM,GACNC,EAAU,GACd,IAAI,IAAIC,EAAKH,EAAO,EAAGG,EAAKlB,KAAKJ,OAAOC,OAAQqB,IAAK,CACjDF,EAAIlB,KAAK,GACT,IAAIqB,EAAOC,EAAA,EAAMC,SAASrB,KAAKJ,OAAOmB,GAAOf,KAAKJ,OAAOsB,IAAKI,SAC9DL,EAAQnB,KAAKqB,GACVA,EAAOnB,KAAKc,UAASd,KAAKc,QAAUK,GAE3CnB,KAAKY,QAAQd,KAAKkB,GAClBhB,KAAKa,UAAUf,KAAKmB,IAI5B,UAAUP,GACNV,KAAKJ,OAASc,EACdV,KAAKW,cAGT,eACI,IAAI,IAAIhB,EAAI,EAAGA,EAAIK,KAAKY,QAAQf,OAAQF,IACpC,IAAI,IAAI4B,EAAI,EAAGA,EAAIvB,KAAKY,QAAQjB,GAAGE,OAAQ0B,IACvCvB,KAAKY,QAAQjB,GAAG4B,GAAK,EAKjC,YAAYC,GACR,IAAI,IAAI7B,EAAI,EAAGA,EAAIK,KAAKY,QAAQf,OAAQF,IACpC,IAAI,IAAI4B,EAAI,EAAGA,EAAIvB,KAAKY,QAAQjB,GAAGE,OAAQ0B,IACvCvB,KAAKY,QAAQjB,GAAG4B,IAAMC,EAKlC,WAAWtC,EAAgBmB,GACvB,IAAI,IAAIV,EAAI,EAAGA,EAAIT,EAAKW,OAAQF,IAAK,CACjC,IAAI4B,GAAK5B,EAAI,GAAKT,EAAKW,OACvBG,KAAKK,OAAOnB,EAAKS,GAAIT,EAAKqC,GAAIjB,KAAKmB,IAAI,EAAGnB,KAAKoB,IAAI,EAAG1B,KAAKK,OAAOnB,EAAKS,GAAIT,EAAKqC,IAAMlB,MAM9F,OAAOU,EAAcG,EAAYS,GAC7B,MAAMC,EAAKtB,KAAKoB,IAAIX,EAAMG,GACpBW,EAAKvB,KAAKmB,IAAIV,EAAMG,GAAMU,EAAK,EACrC,QAAaE,IAAVH,EACC,OAAO3B,KAAKY,QAAQgB,GAAIC,GAGxB,GAAGE,MAAMJ,GAAQ,KAAM,OACvB3B,KAAKY,QAAQgB,GAAIC,GAAMF,EAI/B,SAASZ,EAAcG,GACnB,MAAMU,EAAKtB,KAAKoB,IAAIX,EAAMG,GACpBW,EAAKvB,KAAKmB,IAAIV,EAAMG,GAAMU,EAAK,EACrC,OAAO5B,KAAKa,UAAUe,GAAIC,GAK9B,MAAMnC,EAAesC,GACjB,QAAaF,IAAVE,EAAqB,OAAOhC,KAAKJ,OAAOF,GAC3CM,KAAKJ,OAAOF,GAASsC,GC/E7B,IAAIC,GAAoB,EAGT,SAASC,EAAIC,EAA2BC,GACnDC,IACA,YAAaD,EAAK,IAAK,KACvB,MAAME,EAAMF,EAAIG,WAAW,OAiB/B,SAASC,EAAUC,EAA2BH,EAA+BH,EAA2B/C,GACpG,MAAMsD,EAQV,SAAcP,EAA2B/C,GACrC,IAAIuD,EAAO,GACX,IAAI,IAAIhD,EAAI,EAAGA,EAAIwC,EAASS,QAASjD,IACjCgD,EAAK7C,KAAKb,EAAQ4D,QAAQzD,EAAO+C,EAAS9C,YAAa8C,EAASW,cAAe,IAGnF1D,EAAM2D,YAAYZ,EAASa,aAE3B,IAAIC,EAAgB,EAAId,EAASS,QAC7BM,EAAe,YAAQP,EAAMQ,GAAOA,EAAIhE,MACxCiE,EAAc,YAAIT,EAAMQ,GAAOA,EAAIhE,MACvC,IAAI,MAAMgE,KAAOR,EAAM,CACnB,IAAIU,EAEAA,EADDH,EAAa/D,OAASiE,EACT,EAEA,GAAMD,EAAIhE,KAAO+D,EAAa/D,OAASiE,EAAcF,EAAa/D,MAClFC,EAAMkE,WAAWH,EAAIjE,KAAMmE,EAAYJ,GAG3C,OAAOC,EA5BSK,CAAKpB,EAAU/C,IACX,OAAjBoE,GAAyBd,EAAQvD,KAAOqE,EAAarE,QACpDqE,EAAed,IAoDvB,SAAcD,EAA2BH,EAA+BlD,EAAoBqE,EAA4BC,GACpHC,EAAWlB,EAAQH,EAAKlD,EAAMQ,QAC9B0C,EAAIsB,YAAc,OAClB,IAAI,IAAIjE,EAAI,EAAGA,EAAIP,EAAMQ,OAAOC,OAAQF,IACpC,IAAI,IAAI4B,EAAI,EAAGA,EAAInC,EAAMQ,OAAOC,OAAQ0B,IACjC5B,IAAM4B,IACTe,EAAIuB,YACJvB,EAAIwB,UAAiC,EAArB1E,EAAMiB,OAAOV,EAAG4B,GAChCe,EAAIyB,OAAO3E,EAAM4C,MAAMrC,GAAGqE,EAAG5E,EAAM4C,MAAMrC,GAAGsE,GAC5C3B,EAAI4B,OAAO9E,EAAM4C,MAAMT,GAAGyC,EAAG5E,EAAM4C,MAAMT,GAAG0C,GAC5C3B,EAAI6B,UAMZ,GAFA7B,EAAIwB,UAAY,EAChBxB,EAAIsB,YAAc,aACK9B,IAApB2B,EAA+B,CAC9BnB,EAAIuB,YACJvB,EAAIyB,OAAO3E,EAAM4C,MAAMyB,EAAgB,IAAIO,EAAG5E,EAAM4C,MAAMyB,EAAgB,IAAIQ,GAC9E,IAAI,IAAItE,EAAI,EAAGA,EAAI8D,EAAgB5D,OAAQF,IACvC2C,EAAI4B,OAAO9E,EAAM4C,MAAMyB,EAAgB9D,IAAIqE,EAAG5E,EAAM4C,MAAMyB,EAAgB9D,IAAIsE,GAElF3B,EAAI6B,SAKR,GAFA7B,EAAIwB,UAAY,EAChBxB,EAAIsB,YAAc,WACI9B,IAAnB4B,EAA8B,CAC7BpB,EAAIuB,YACJvB,EAAIyB,OAAO3E,EAAM4C,MAAM0B,EAAe,IAAIM,EAAG5E,EAAM4C,MAAM0B,EAAe,IAAIO,GAC5E,IAAI,IAAItE,EAAI,EAAGA,EAAI+D,EAAe7D,OAAQF,IACtC2C,EAAI4B,OAAO9E,EAAM4C,MAAM0B,EAAe/D,IAAIqE,EAAG5E,EAAM4C,MAAM0B,EAAe/D,IAAIsE,GAEhF3B,EAAI6B,WApFRC,CAAK3B,EAAQH,EAAKlD,EAAOsD,EAAQxD,KAAMsE,EAAatE,MAEpD+C,EAAgCoC,WAAW,IAAM7B,EAAUC,EAAQH,EAAKH,EAAU/C,GAAQ+C,EAASmC,eApBnG9B,CAAUJ,EAAKE,EAAKH,EA8CxB,SAAcM,EAA2BH,EAA+BiC,GACpE,MAAM3E,EAAS,GACf,IAAI,IAAID,EAAI,EAAGA,EAAI4E,EAAQ5E,IACvBC,EAAOE,KAAK,IAAIsB,EAAA,EAAMd,KAAKkE,MAAMlE,KAAKG,SAAWgC,EAAOgC,OAAQnE,KAAKkE,MAAMlE,KAAKG,SAAWgC,EAAOiC,UAItG,OAFAf,EAAWlB,EAAQH,EAAK1C,GACZ,IAAI,EAAYA,GArDhB+E,CAAKvC,EAAKE,EAAKH,EAASoC,SAIjC,SAASK,IACZvC,IAGJ,SAASA,IACLmB,EAAe,MACU,IAAtBvB,GACC4C,aAAa5C,GAGrB,IAAIuB,EAA+B,KA2CnC,SAASG,EAAWlB,EAA2BH,EAA+B1C,GAC1E0C,EAAIwC,UAAY,QAChBxC,EAAIyC,SAAS,EAAG,EAAGtC,EAAOuC,YAAavC,EAAOwC,cAC9C3C,EAAIwC,UAAY,OAChBxC,EAAIuB,YACJ,IAAI,IAAIlE,EAAI,EAAGA,EAAIC,EAAOC,OAAQF,IAAK,CACnC,MAAMqC,EAAQpC,EAAOD,GACrB2C,EAAIyB,OAAO/B,EAAMgC,EAAGhC,EAAMiC,GAC1B3B,EAAI4C,QAAQlD,EAAMgC,EAAGhC,EAAMiC,EAAG,EAAG,EAAG,EAAG,EAAa,EAAV3D,KAAK6E,IAEnD7C,EAAI8C,OC7EO,SAASC,IACpB,IAAIC,EAAM,YAELlG,EAAOmG,GAAY,WAAgC,CACpDhB,OAAQ,IACRvB,YAAa,GACb3D,YAAa,IACbyD,cAAe,EACfwB,cAAe,EACf1B,QAAS,KAQb,OALA,YAAgB,KACZV,EAAI9C,EAAOkG,EAAIE,SACRZ,GACR,CAACxF,EAAOkG,IAEJ,uBAAKG,UAAU,YAClB,0BAAQC,GAAG,SAASJ,IAAKA,IACzB,uBAAKG,UAAU,YACX,gBAACE,EAA6B,CAACC,MAAM,qBAAqBjE,MAAOvC,EAAMmF,OAAQsB,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAEmF,OAAQuB,KAAKpE,IAAK,EAAGD,IAAK,IAAKsE,KAAM,EAAGC,KAAK,WAC/J,gBAACL,EAA6B,CAACC,MAAM,mBAAmBjE,MAAOvC,EAAMwD,QAASiD,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAEwD,QAASkD,KAAKpE,IAAK,EAAGD,IAAK,IAAKsE,KAAM,EAAGC,KAAK,WAC/J,gBAACL,EAA6B,CAACC,MAAM,iBAAiBjE,MAAOvC,EAAM4D,YAAa6C,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAE4D,YAAa8C,KAAKpE,IAAK,EAAGD,IAAK,EAAGsE,KAAM,GAAKC,KAAK,UACrK,gBAACL,EAA6B,CAACC,MAAM,iBAAiBjE,MAAOvC,EAAMC,YAAawG,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAEC,YAAayG,KAAKpE,IAAK,EAAGD,IAAK,EAAGsE,KAAM,GAAKC,KAAK,UACrK,gBAACL,EAA6B,CAACC,MAAM,mBAAmBjE,MAAOvC,EAAM0D,cAAe+C,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAE0D,cAAegD,KAAKpE,IAAK,EAAGD,IAAK,EAAGsE,KAAM,GAAKC,KAAK,UAC3K,gBAACL,EAA6B,CAACC,MAAM,oBAAoBjE,MAAOvC,EAAMkF,cAAeuB,SAAUC,GAAKP,EAAS,OAAD,wBAAKnG,GAAK,CAAEkF,cAAewB,KAAKpE,IAAK,EAAGD,IAAK,IAAKsE,KAAM,GAAIC,KAAK,aAKzL,SAASL,EAA8BM,GACnC,OAAO,2BACH,6BAAQA,EAAML,OACd,yBAAOjE,MAAOsE,EAAMtE,MAAOkE,SAAUK,GAAMD,EAAMJ,SAASK,EAAGC,OAAOC,eAAgBJ,KAAK,QAAQtE,IAAKuE,EAAMvE,IAAKD,IAAKwE,EAAMxE,IAAKsE,KAAME,EAAMF,OAC7I,yBAAOpE,MAAOsE,EAAMtE,MAAOkE,SAAUK,GAAMD,EAAMJ,SAASK,EAAGC,OAAOC,eAAgBJ,KAAMC,EAAMD,KAAMtE,IAAKuE,EAAMvE,IAAKD,IAAKwE,EAAMxE,S,gCCtCzI,kCAAe,MAAML,EAMjB,YAAmB4C,EAAkBC,GAAlB,KAAAD,IAAkB,KAAAC,IAJrC,cACI,OAAO,IAAI7C,EAAM,EAAE,GAOhB,iBAAiBiF,EAAenG,GACnC,OAAO,IAAIkB,EAAMd,KAAKgG,IAAID,IAAUnG,UAAY,GAAII,KAAKiG,IAAIF,IAAUnG,UAAY,IAGhF,WACH,OAAOkB,EAAMoF,IAAIxG,KAAMA,MAGpB,SACH,OAAOM,KAAKmG,KAAKzG,KAAK0G,YAGnB,QACH,OAAO,IAAItF,EAAMpB,KAAKgE,EAAGhE,KAAKiE,GAG3B,SACH,OAAO,IAAI7C,GAAOpB,KAAKgE,GAAIhE,KAAKiE,GAG7B,gBAGH,OAFAjE,KAAKgE,GAAKhE,KAAKgE,EACfhE,KAAKiE,GAAKjE,KAAKiE,EACRjE,KAGJ,WAAW2G,EAAWC,GACzB,OAAOD,EAAG3C,EAAI4C,EAAG5C,EAAI2C,EAAG1C,EAAI2C,EAAG3C,EAG5B,QAAQ4C,GACX,OAAOzF,EAAMoF,IAAIxG,KAAM6G,GAGpB,YACH,IAAIC,EAAM9G,KAAKsB,SACf,OAAOF,EAAM2F,SAAS/G,KAAM,EAAI8G,GAG7B,YACH,OAAOxG,KAAK0G,MAAMhH,KAAKiE,EAAGjE,KAAKgE,GAK5B,QAAQ6C,EAAqB5C,GAChC,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GAGxC,OAFAjE,KAAKgE,GAAKiD,EACVjH,KAAKiE,GAAKiD,EACHlH,KAKJ,SAAS6G,EAAqB5C,GACjC,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GAGxC,OAFAjE,KAAKgE,GAAKiD,EACVjH,KAAKiE,GAAKiD,EACHlH,KAKJ,aAAa6G,EAAqB5C,GACrC,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GAGxC,OAFAjE,KAAKgE,GAAKiD,EACVjH,KAAKiE,GAAKiD,EACHlH,KAKJ,WAAW6G,EAAqB5C,GACnC,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GAGxC,OAFAjE,KAAKgE,GAAKiD,EACVjH,KAAKiE,GAAKiD,EACHlH,KAGJ,OAAO6G,GACV,OAAO7G,KAAKgE,IAAM6C,EAAM7C,GAAKhE,KAAKiE,IAAM4C,EAAM5C,EAMlD,WAAWmD,EAAYP,EAAqB5C,GACxC,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GACxC,OAAO,IAAI7C,EAAMgG,EAAIpD,EAAIiD,EAAIG,EAAInD,EAAIiD,GAKzC,gBAAgBE,EAAYP,EAAqB5C,GAC7C,MAAOD,EAAGiD,EAAIhD,EAAGiD,GAAMC,EAAUN,EAAO5C,GACxC,OAAO,IAAI7C,EAAMgG,EAAIpD,EAAIiD,EAAIG,EAAInD,EAAIiD,GAKzC,gBAAgBG,EAAUC,EAAiBC,GACvC,YAAWzF,IAAPyF,EACO,IAAInG,EAAMiG,EAAErD,EAAKsD,EAAcD,EAAEpD,EAAIsD,QAEtBzF,IAAhBwF,EAAUtD,EACT,IAAI5C,EAAMiG,EAAErD,EAAKsD,EAAYtD,EAAGqD,EAAEpD,EAAKqD,EAAYrD,GAEnD,IAAI7C,EAAMiG,EAAErD,EAAKsD,EAAcD,EAAEpD,EAAKqD,GAIrD,mBAAmBD,EAAUC,EAAUE,GACnC,OAAO,IAAIpG,EAAMiG,EAAErD,GAAKsD,EAAEtD,EAAIqD,EAAErD,GAAKwD,EAAGH,EAAEpD,GAAKqD,EAAErD,EAAIoD,EAAEpD,GAAKuD,GAGhE,oBAAoBH,EAAUC,GAC1B,OAAGD,EAAErD,GAAKsD,EAAEtD,GAAKqD,EAAEpD,GAAKqD,EAAErD,EAAUoD,EACjCC,EAAEtD,GAAKqD,EAAErD,GAAKsD,EAAErD,GAAKoD,EAAEpD,EAAUqD,EAC7B,IAAIlG,EAAMd,KAAKoB,IAAI2F,EAAErD,EAAGsD,EAAEtD,GAAI1D,KAAKoB,IAAI2F,EAAEpD,EAAGqD,EAAErD,IAGzD,oBAAoBoD,EAAUC,GAC1B,OAAGD,EAAErD,GAAKsD,EAAEtD,GAAKqD,EAAEpD,GAAKqD,EAAErD,EAAUoD,EACjCC,EAAEtD,GAAKqD,EAAErD,GAAKsD,EAAErD,GAAKoD,EAAEpD,EAAUqD,EAC7B,IAAIlG,EAAMd,KAAKmB,IAAI4F,EAAErD,EAAGsD,EAAEtD,GAAI1D,KAAKmB,IAAI4F,EAAEpD,EAAGqD,EAAErD,IAGzD,cAAcvD,EAAc+G,GACxB,OAAkB,IAAf/G,EAAIb,OAAqBa,EAAI,GACT,IAAfA,EAAIb,OAAqBuB,EAAMsG,IAAItG,EAAM2F,SAASrG,EAAI,GAAI+G,GAAIrG,EAAM2F,SAASrG,EAAI,GAAI,EAAE+G,IACxFrG,EAAMsG,IACTtG,EAAM2F,SAAS3F,EAAMuG,OAAOjH,EAAIkH,MAAM,GAAIH,GAAIA,GAC9CrG,EAAM2F,SAAS3F,EAAMuG,OAAOjH,EAAIkH,MAAM,EAAGlH,EAAIb,OAAS,GAAI4H,GAAI,EAAEA,IAGxE,OAAOI,GACH,MAAMxB,EAAQ/F,KAAK0G,MAAMhH,KAAKiE,EAAGjE,KAAKgE,GAChC8C,EAAM9G,KAAKsB,SACjB,OAAOF,EAAM0G,UAAUzB,EAAQwB,EAAOf,IAI9C,SAASK,EAAUnD,EAAiBC,GAChC,YAASnC,IAANmC,EAAwB,CAAED,EAAWA,EAAGA,EAAGC,EAAWD,EAAGC,GACrD,CAACD,EAAWA,EAAGC","file":"14.bundle.js","sourcesContent":["import { ColonyState } from \"./ColonyState\";\r\n\r\nexport class AntPath {\r\n    constructor(public path: number[], public cost: number) {\r\n\r\n    }\r\n\r\n    static runPath(state: ColonyState, signalPower: number, distPower: number, start: number) {\r\n        const hitmap = [];\r\n        const path = [start];\r\n        let pathCost = 0;\r\n        let index = start;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            hitmap.push(i === start);\r\n        }\r\n\r\n        for(let i = 0; i < state.points.length - 1; i++) {\r\n            let next = this.runStep(state, signalPower, distPower, hitmap, index);\r\n            pathCost += state.distance(index, next);\r\n            path.push(next);\r\n            index = next;\r\n            hitmap[next] = true;\r\n        }\r\n\r\n        return new AntPath(path, pathCost);\r\n    }\r\n\r\n    static runStep(state: ColonyState, signalPower: number, distPower: number, hitmap: boolean[], index: number) {\r\n        let pathWeights = [];\r\n        let weightSum = 0;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            if(index === i || hitmap[i]) pathWeights[i] = 0;\r\n            else {\r\n                let weight = Math.pow(1/state.distance(index, i), distPower) * Math.pow(state.weight(index, i), signalPower);\r\n                pathWeights.push( weight );\r\n                weightSum += weight;\r\n            }\r\n        }\r\n        let randomChoice = Math.random() * weightSum;\r\n        for(let i = 0; i < pathWeights.length; i++) {\r\n            if(hitmap[i]) continue;\r\n            randomChoice -= pathWeights[i];\r\n            if(randomChoice <= 0) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport class ColonyState {\r\n    public points: Point[];\r\n    public signals: number[][];\r\n    public distances: number[][];\r\n    public maxDist: number;\r\n\r\n    constructor(pts: Point[])\r\n    {\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    private initSignals () {\r\n        this.signals = [];\r\n        this.distances = [];\r\n\r\n        this.maxDist = 0;\r\n        for(let from = 0; from < this.points.length; from++){\r\n            let row = [];\r\n            let distRow = [];\r\n            for(let to = from + 1; to < this.points.length; to++){\r\n                row.push(1);\r\n                let dist = Point.subtract(this.points[from], this.points[to]).Length();\r\n                distRow.push(dist);\r\n                if(dist > this.maxDist) this.maxDist = dist;\r\n            }\r\n            this.signals.push(row);\r\n            this.distances.push(distRow);\r\n        }\r\n    }\r\n\r\n    setPoints(pts: Point[]){\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    clearWeights() {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    multWeights(mult: number) {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] *= mult;\r\n            }\r\n        }\r\n    }\r\n\r\n    addWeights(path: number[], weight: number) {\r\n        for(let i = 0; i < path.length; i++) {\r\n            let j = (i + 1) % path.length;\r\n            this.weight(path[i], path[j], Math.max(0, Math.min(1, this.weight(path[i], path[j]) + weight)));\r\n        }\r\n    }\r\n\r\n    weight(from: number, to: number): number;\r\n    weight(from: number, to: number, value: number): void;\r\n    weight(from: number, to: number, value?: number): number | void {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        if(value === undefined) {\r\n            return this.signals[i1][i2];\r\n        }\r\n        else {\r\n            if(isNaN(value)) throw \"WHAT\";\r\n            this.signals[i1][i2] = value;\r\n        }\r\n    }\r\n\r\n    distance(from: number, to: number): number {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        return this.distances[i1][i2];\r\n    }\r\n\r\n    point(index: number): Point;\r\n    point(index: number, point: Point) : void;\r\n    point(index: number, point ?: Point) : void | Point {\r\n        if(point === undefined) return this.points[index];\r\n        this.points[index] = point;\r\n    }\r\n}","import { findMax, findMin, max, min } from \"../../LinqLike\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport { AntPath } from \"./AntPath\";\r\nimport { ColonyState } from \"./ColonyState\";\r\nimport { IRenderSettings } from \"./IRenderSettings\";\r\nlet currentPaintLoop = -1;\r\n\r\n\r\nexport default function Run(settings: IRenderSettings, cvs: HTMLCanvasElement) {\r\n    stopPaintLoop();\r\n    ResizeCanvas(cvs, 800, 600);\r\n    const ctx = cvs.getContext('2d');\r\n\r\n    let state = init(cvs, ctx, settings.numPts);\r\n    paintLoop(cvs, ctx, settings, state);\r\n}\r\n\r\nexport function Cleanup() {\r\n    stopPaintLoop();\r\n}\r\n\r\nfunction stopPaintLoop() {\r\n    totalMinPath = null;\r\n    if(currentPaintLoop !== -1)\r\n        clearTimeout(currentPaintLoop);\r\n}\r\n\r\nlet totalMinPath: AntPath | null = null;\r\nfunction paintLoop(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, settings: IRenderSettings, state: ColonyState) {\r\n    const minPath = tick(settings, state);\r\n    if(totalMinPath === null || minPath.cost < totalMinPath.cost)\r\n        totalMinPath = minPath;\r\n    draw(canvas, ctx, state, minPath.path, totalMinPath.path);\r\n    // TS thinks setTimeout returns a NodeJS.Timeout (?)\r\n    currentPaintLoop = <number><any>setTimeout(() => paintLoop(canvas, ctx, settings, state), settings.delayPerFrame);\r\n}\r\n\r\nfunction tick(settings: IRenderSettings, state: ColonyState): AntPath {\r\n    let ants = [];\r\n    for(let i = 0; i < settings.numAnts; i++) {\r\n        ants.push(AntPath.runPath(state, settings.signalPower, settings.distancePower, 0));\r\n    }\r\n\r\n    state.multWeights(settings.signalDecay);\r\n\r\n    let maxSignalGain = 1 / settings.numAnts;\r\n    let shortestPath = findMin(ants, ant => ant.cost);\r\n    let longestPath = max(ants, ant => ant.cost);\r\n    for(const ant of ants) {\r\n        let antWeight: number;\r\n        if(shortestPath.cost === longestPath)\r\n            antWeight = 1;\r\n        else \r\n            antWeight = 1 - ((ant.cost - shortestPath.cost) / (longestPath - shortestPath.cost));\r\n        state.addWeights(ant.path, antWeight * maxSignalGain);\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction init(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, numPts: number): ColonyState {\r\n    const points = [];\r\n    for(let i = 0; i < numPts; i++) {\r\n        points.push(new Point(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height)));\r\n    }\r\n    drawPoints(canvas, ctx, points);\r\n    let state = new ColonyState(points);\r\n    return state;\r\n}\r\n\r\nfunction drawPoints(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, points: Point[]) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    ctx.fillStyle = '#aaa';\r\n    ctx.beginPath();\r\n    for(let i = 0; i < points.length; i++) {\r\n        const point = points[i];\r\n        ctx.moveTo(point.x, point.y);\r\n        ctx.ellipse(point.x, point.y, 3, 3, 0, 0, Math.PI * 2);\r\n    }\r\n    ctx.fill();\r\n}\r\n\r\nfunction draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: ColonyState, currentBestPath?: number[], globalBestPath?: number[]) {\r\n    drawPoints(canvas, ctx, state.points);\r\n    ctx.strokeStyle = '#aaa';\r\n    for(let i = 0; i < state.points.length; i++) {\r\n        for(let j = 0; j < state.points.length; j++) {\r\n            if(i === j) continue;\r\n            ctx.beginPath();\r\n            ctx.lineWidth = state.weight(i, j) * 5;\r\n            ctx.moveTo(state.point(i).x, state.point(i).y);\r\n            ctx.lineTo(state.point(j).x, state.point(j).y);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'green';\r\n    if(currentBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(currentBestPath[0]).x, state.point(currentBestPath[0]).y);\r\n        for(let i = 1; i < currentBestPath.length; i++) {\r\n            ctx.lineTo(state.point(currentBestPath[i]).x, state.point(currentBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'red';\r\n    if(globalBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(globalBestPath[0]).x, state.point(globalBestPath[0]).y);\r\n        for(let i = 1; i < globalBestPath.length; i++) {\r\n            ctx.lineTo(state.point(globalBestPath[i]).x, state.point(globalBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport Run, { Cleanup } from '../../../projects/ant-colony/index';\r\nimport { IRenderSettings } from '../../../projects/ant-colony/IRenderSettings';\r\n\r\nexport default function AntColonyComponent() {\r\n    let ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    let [state, setState] = React.useState<IRenderSettings>({\r\n        numPts: 100,\r\n        signalDecay: 0.7,\r\n        signalPower: 1.2,\r\n        distancePower: 4,\r\n        delayPerFrame: 6,\r\n        numAnts: 30,\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        Run(state, ref.current);\r\n        return Cleanup;\r\n    }, [state, ref]);\r\n\r\n    return <div className='flex row'>\r\n        <canvas id='canvas' ref={ref} />\r\n        <div className='flex col'>\r\n            <AntColonyValueSliderComponent label='Number of Points: ' value={state.numPts} onChange={v => setState({...state, numPts: v})} min={3} max={200} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Number of Ants: ' value={state.numAnts} onChange={v => setState({...state, numAnts: v})} min={1} max={100} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Signal Decay: ' value={state.signalDecay} onChange={v => setState({...state, signalDecay: v})} min={0} max={1} step={0.1} type='float' />\r\n            <AntColonyValueSliderComponent label='Signal Power: ' value={state.signalPower} onChange={v => setState({...state, signalPower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Distance Power: ' value={state.distancePower} onChange={v => setState({...state, distancePower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Delay per Frame: ' value={state.delayPerFrame} onChange={v => setState({...state, delayPerFrame: v})} min={6} max={600} step={30} type='number' />\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction AntColonyValueSliderComponent(props: {label: string, value: number, onChange: (value: number) => void, min: number, max: number, step: number, type: 'float' | 'number'}) {\r\n    return <div>\r\n        <label>{props.label}</label>\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type='range' min={props.min} max={props.max} step={props.step} />\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type={props.type} min={props.min} max={props.max} />\r\n    </div>;\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}"],"sourceRoot":""}