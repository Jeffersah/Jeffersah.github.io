{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/common/position/Angle.ts","webpack:///./src/projects/bullets/const.ts","webpack:///./src/projects/bullets/assets/bullets_entities.png","webpack:///./src/projects/bullets/assets/Ships.png","webpack:///./src/projects/bullets/assets/Flares.png","webpack:///./src/projects/bullets/Player.ts","webpack:///./src/projects/bullets/ETeam.ts","webpack:///./src/projects/bullets/GameState.ts","webpack:///./src/projects/common/interpolation/Interpolated.ts","webpack:///./src/projects/bullets/Effects/SingleExplosion.ts","webpack:///./src/projects/common/interpolation/TimingFunction.ts","webpack:///./src/projects/common/interpolation/InterpolationFunction.ts","webpack:///./src/projects/common/interpolation/Keyframes.ts","webpack:///./src/projects/bullets/Effects/Explosion.ts","webpack:///./src/projects/common/Angle.ts","webpack:///./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack:///./src/projects/common/position/Line.ts","webpack:///./src/projects/common/position/Bounds.ts","webpack:///./src/projects/bullets/Ship.ts","webpack:///./src/projects/common/assets/AnimationControl.ts","webpack:///./src/projects/bullets/data/parsing/parsers.ts","webpack:///./src/projects/bullets/Effects/EffectControl.ts","webpack:///./src/projects/bullets/Effects/EffectFuncs.ts","webpack:///./src/projects/bullets/weapons/Weapon.ts","webpack:///./src/projects/bullets/weapons/WeaponGroup.ts","webpack:///./src/projects/bullets/weapons/WeaponTimer.ts","webpack:///./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack:///./src/projects/bullets/ai/IDebugMarker.ts","webpack:///./src/projects/bullets/ai/ShipAI.ts","webpack:///./src/projects/bullets/ai/BroadsideAI.ts","webpack:///./src/projects/bullets/ai/FighterAI.ts","webpack:///./src/projects/bullets/ai/IShipAI.ts","webpack:///./src/projects/bullets/data/parsing/weapons.ts","webpack:///./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack:///./src/projects/bullets/index.ts"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","undefined","splitArgsOrSingle","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","theta","fromAngle","Color","vals","h","s","v","hsv","rgb","r","g","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor","KeyState","keys","changes","key","indexOf","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","atlas","sourceOffset","sourceSize","numFrames","origin","ctx","position","size","frame","rotation","save","translate","rotate","scale","drawImage","image","restore","args","loop","animation","PlayingAnimation","maxTime","source","currentTime","frameNumber","draw","spriteUrl","onload","document","createElement","loadFinished","sourceRotation","offset","frameCount","twoPi","PI","Angle","relativeNormalize","PHYS","sprites","velocity","angularVelocity","engineDeflect","tgtDeflect","isEngineOn","vDirection","diffDir","relativeAngle","diffPerc","friction","abs","MultWith","vTotal","vAngle","Direction","anglePullAmt","AddWith","rotrender","random","render","ETeam","player","Player","Entities","neutral","ally","enemy","Effects","update","i","tick","updateEntities","entities","drawEntities","originPoint","team","maxRange","ships","filter","item","currentHp","rangeSq","subtract","shipsAndRanges","map","ship","range","sort","Interpolated","timingFunction","InterpolationTimer","totalTime","elapsedTime","sample","outerRadius","innerRadius","fillColor","timing","outer","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","clamp","fastIn","fastOut","b_recurse","pi","pc","numberInterpolator","fastColorInterpolator","EvenlySpacedKeyframes","interpolator","arguments","percPer","keyframes","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","anyStillRunning","norm","normalize","from","to","EFlareConditions","end","interpolate","denom","parallelIntersection","percentA","percentB","basis","ray","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","relativePoints","dist","getVertecies","arr","line","edges","getEdges","minLinePerc","colision","intersection","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","accuteAngle","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","initial","queue","scaleFactor","isSprite","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","effects","effectArgs","effect","type","CreateEffect","shipDef","turretAngle","actualAnchor","Clone","SubtractWith","imgControl","result","getWeaponAnchorAngle","self","possibleTargets","location","getWeaponLocation","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","getWeaponCurrentAngle","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shootAnimation","enqueue","play","shootEffect","spawnEffect","realPoint","realRot","timer","weapons","burstAllWeapons","targets","acqCount","findNearestShips","getTeam","acq","acquireTargets","bi","onShoot","burstIndex","shoot","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","srcPoint","turnAccel","buildAi","getSprite","jsonWeaponGroup","w","burstAll","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","direction","tgt","DebugLine","point2","markers","doDebug","debug","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","debugPoint","tgtPoints","tangent","debugLine","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","angleBetween","deltaHeading","AllAIGenerators","fighter","broadside","parseWeaponGroupDefinition","json","defs","imgAtlases","weaponJson","isWeapon","def","error","parseWeaponDefinition","buildAllDefinitions","animationData","animations","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","definitions","canvas","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","buildShip","repaintLoop","gameState","fillRect","focusPoint","ty","tx","repaint","requestAnimationFrame","onLoadDone","loadJson"],"mappings":"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","file":"bullets.bundle.js","sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.MultWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.Length();\r\n        let vAngle = this.velocity.Direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.AddWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Point from \"../common/position/Point\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n\r\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\r\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\r\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\r\n        if(maxRange !== undefined) {\r\n            const rangeSq = maxRange * maxRange;\r\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).LengthSq() <= rangeSq);\r\n        }\r\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).LengthSq() }));\r\n        shipsAndRanges.sort((a, b) => a.range - b.range);\r\n        return shipsAndRanges.map(s => s.ship);\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { Keyframes } from './Keyframes';\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { exception } from \"console\";\r\nimport { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(interpolator.arguments === undefined) {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.Clone();\r\n        realPoint.SubtractWith(Point.Multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.AddWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.Dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.Length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\nimport { Weapon } from \"./weapons/Weapon\";\r\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    public currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam,\r\n        private weaponGroups: WeaponGroup[]) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.Multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].tick(gs, this);\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.AddWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].draw(ctx, this);\r\n        }\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n\r\n        this.ai.debugDraw(ctx, this);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { PlayingAnimation } from \"./SpriteAnimation\";\r\nimport { AtlasSprite } from \"./SpriteAtlas\";\r\n\r\nexport class AnimationControl {\r\n    queue: (PlayingAnimation | AtlasSprite)[];\r\n    scaleFactor: Point;\r\n\r\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\r\n        this.queue = [initial];\r\n        if(size === undefined) {\r\n            this.scaleFactor = new Point(1, 1);\r\n        }\r\n        else if(isSprite(initial)) {\r\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\r\n        }\r\n        else {\r\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\r\n        }\r\n    }\r\n\r\n    play(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue = [src];\r\n    }\r\n\r\n    enqueue(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.push(src);\r\n    }\r\n\r\n    tick() {\r\n        if(isSprite(this.queue[0])) {\r\n            this.advance();\r\n        }\r\n        else {\r\n            if(this.queue[0].tick()) this.advance();\r\n        }\r\n    }\r\n\r\n    advance() {\r\n        if(this.queue.length > 1) {\r\n            this.queue.splice(0, 1);\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\r\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\r\n    }\r\n\r\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\r\n        if(isSprite(src)) return Point.Multiply(src.sourceSize, this.scaleFactor);\r\n        else return Point.Multiply(src.source.sourceSize, this.scaleFactor);\r\n    }\r\n}\r\n\r\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\r\n    return (<AtlasSprite>src).origin !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport Point from \"../../../common/position/Point\";\r\nimport { Range } from '../../../common/Range';\r\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\r\n\r\nexport function parseJsonPoint(jpt: [number, number]) {\r\n    return new Point(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonRange(jpt: [number, number]) {\r\n    return new Range(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonAngle(input: number) {\r\n    return input * Math.PI * 2;\r\n}\r\n\r\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\r\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\r\n}\r\n\r\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\r\n    return atlases[anim.file].getAnimation(\r\n        parseJsonPoint(anim.imgOffset),\r\n        parseJsonPoint(anim.frameSize),\r\n        parseJsonPoint(anim.origin),\r\n        anim.numFrames\r\n    );\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { CreateEffect } from \"./EffectFuncs\";\r\n\r\nexport default class EffectControl {\r\n    public effects: IEffect[];\r\n    constructor() {\r\n        this.effects = [];\r\n    }\r\n\r\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\r\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\r\n    }\r\n\r\n    tick() {\r\n        for(let i = this.effects.length - 1; i >= 0; i --) {\r\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.effects.length; i++) {\r\n            this.effects[i].draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { parseJsonRange } from \"../data/parsing/parsers\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Explosion } from \"./Explosion\";\r\n\r\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\r\n    switch(effect.type) {\r\n        case \"explosion\":\r\n            return new Explosion(pt, \r\n                parseJsonRange(effect.burstXVariance),\r\n                parseJsonRange(effect.burstYVariance),\r\n                parseJsonRange(effect.numBursts),\r\n                effect.burstDelay,\r\n                parseJsonRange(effect.burstLifetime),\r\n                parseJsonRange(effect.burstOuterRadius));\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\r\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport EffectControl from \"../Effects/EffectControl\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\r\n\r\nexport interface IWeaponArgs {\r\n    offset: Point;\r\n    sprite?: AtlasSprite;\r\n    shootAnimation?: ISpriteAnimationArgs;\r\n    shootEffect?: IJsonEffect;\r\n\r\n    rotation: number;\r\n\r\n    turret?: {\r\n        maxAngle: number;\r\n        turnRate: number;\r\n    }\r\n\r\n    acquisitionAngle: number;\r\n    minRange?: number;\r\n    range: number;\r\n}\r\n\r\nexport class Weapon {\r\n    turretAngle: number;\r\n    actualAnchor: Point;\r\n    imgControl ?: AnimationControl;\r\n    effects: EffectControl;\r\n\r\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\r\n        this.turretAngle = 0;\r\n        this.actualAnchor = this.args.offset.Clone();\r\n        this.actualAnchor.SubtractWith(Point.Multiply(shipDef.origin, shipDef.size));\r\n        if(args.sprite !== undefined) {\r\n            this.imgControl = new AnimationControl(args.sprite);\r\n        }\r\n        this.effects = new EffectControl();\r\n    }\r\n\r\n    getWeaponLocation(ship: Ship): Point {\r\n        const result = this.actualAnchor.rotate(ship.rotation);\r\n        result.AddWith(ship.position);\r\n        return result;\r\n    }\r\n    getWeaponAnchorAngle(ship: Ship) {\r\n        return this.args.rotation + ship.rotation;\r\n    }\r\n    getWeaponCurrentAngle(ship: Ship) {\r\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\r\n    }\r\n\r\n    /**\r\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\r\n     */\r\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\r\n\r\n        this.effects.tick();\r\n        this.imgControl?.tick();\r\n\r\n        const location = this.getWeaponLocation(self);\r\n\r\n        // Filter down targets to those in range\r\n        possibleTargets = possibleTargets.filter(p => {\r\n            const pDist = Point.subtract(p, location).LengthSq();\r\n            return (\r\n                (this.args.minRange === undefined || \r\n                    (pDist > this.args.minRange * this.args.minRange)\r\n                ) &&\r\n                (pDist < this.args.range * this.args.range)\r\n            );\r\n        });\r\n\r\n        if(this.args.turret === undefined) {\r\n            if(possibleTargets.length === 0) return null; // No target in range.\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n\r\n            // I have no turret, fire if anyone is in spray range\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                // Find absolute direction to target\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                // Find angle to target relative to turret anchor angle\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                // Check if relAngle is less than the spray angle (he's in range)\r\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\r\n                    return possibleTargets[i];\r\n            }\r\n            return null;\r\n        }\r\n        else {\r\n            if(possibleTargets.length === 0) {\r\n                // No targets. Return to angle 0.\r\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\r\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\r\n                return null;\r\n            }\r\n\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n            const angle = this.getWeaponCurrentAngle(self);\r\n\r\n            let target: Point | null = null;\r\n            let targetAngle: number = 0;\r\n            let targetTurretAngle: number = 0;\r\n            let targetAbsoluteAngle: number = 0;\r\n\r\n            // Choose the target closest to anchor angle\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\r\n                    target = possibleTargets[i];\r\n                    targetAngle = turretRelAngle;\r\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\r\n                        // Target is outside of firing arc, we'll need to aim as close as possible\r\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\r\n                        targetAbsoluteAngle = angleToTarget;\r\n                    } else {\r\n                        // If we choose this target, we'll aim right at them\r\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\r\n                    }\r\n                }\r\n            }\r\n            // target is not null. If it was, we'd've exited earlier.\r\n            // Turn gun towards target\r\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\r\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\r\n                this.turretAngle += turretRelAngle;\r\n            }\r\n\r\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\r\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\r\n\r\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\r\n            else return null;\r\n        }\r\n    }\r\n\r\n    /** TODO: SHOOT */\r\n    shoot(gs: GameState, self: Ship) {\r\n        // Play the shoot animation, if necessary\r\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\r\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\r\n            this.imgControl.enqueue(this.args.sprite);\r\n        }\r\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\r\n        if(this.imgControl === undefined) return;\r\n        const realPoint = this.getWeaponLocation(ship);\r\n        let realRot = this.getWeaponCurrentAngle(ship);\r\n        this.imgControl.render(ctx, realPoint, realRot);\r\n        this.effects.draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\r\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\r\n\r\nexport interface IWeaponGroupArgs {\r\n    timer: IWeaponTimingArgs,\r\n    weapons: IWeaponArgs[],\r\n    burstAll?: boolean\r\n}\r\n\r\nexport class WeaponGroup {\r\n    burstAllWeapons: boolean;\r\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\r\n        this.burstAllWeapons = burstAllWeapons ?? true;\r\n    }\r\n\r\n    /** Call once per tick, makes all turrets attempt to acquire targets\r\n     * @returns the number of weapons which have acquired targets\r\n     */\r\n    acquireTargets(ship: Ship, targets: Ship[]): number {\r\n        let acqCount = 0;\r\n        for(let i = 0; i < this.weapons.length; i++){\r\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\r\n                acqCount++;\r\n            }\r\n        }\r\n        return acqCount;\r\n    }\r\n\r\n    tick(gs: GameState, self: Ship) {\r\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\r\n        const acq = this.acquireTargets(self, targets);\r\n\r\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\r\n    }\r\n\r\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\r\n        if(!this.burstAllWeapons) {\r\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\r\n        } else {\r\n            for(let i = 0; i < this.weapons.length; i++) {\r\n                this.weapons[i].shoot(gs, ship);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\r\n        for(let i = 0; i < this.weapons.length; i++) {\r\n            this.weapons[i].render(ctx, self);\r\n        }\r\n    }\r\n}","export interface IWeaponTimingArgs {\r\n    reloadTime: number;\r\n\r\n    burstCount: number;\r\n    burstDelay: number;\r\n\r\n    shotsPerBurst: number;\r\n}\r\n\r\nexport class WeaponTimer implements IWeaponTimingArgs {\r\n    public reloadTime: number; \r\n    public burstCount: number;\r\n    public burstDelay: number; \r\n    public shotsPerBurst: number;\r\n\r\n    private currentlyShooting: boolean;\r\n\r\n    public currentReload: number;\r\n    public currentBurstDelay: number;\r\n    public currentBurstIndex: number;\r\n\r\n    constructor(args: IWeaponTimingArgs) {\r\n        Object.assign(this, args);\r\n        this.currentlyShooting = false;\r\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\r\n    }\r\n\r\n    isShooting(): boolean {\r\n        return this.currentlyShooting;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this.currentlyShooting && this.currentReload === 0;\r\n    }\r\n\r\n    shoot(): boolean {\r\n        if(this.canShoot()){\r\n            this.currentlyShooting = true;\r\n            this.currentReload = this.reloadTime;\r\n            this.currentBurstDelay = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\r\n        if(shouldShoot) this.shoot();\r\n        if(this.currentlyShooting) {\r\n            if(this.currentBurstDelay === 0) {\r\n                // Fire burst\r\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\r\n                    onShoot(this.currentBurstIndex, shell);\r\n                }\r\n                this.currentBurstIndex++;\r\n                if(this.currentBurstIndex === this.burstCount) {\r\n                    // Done burst! Reset and start reload\r\n                    this.currentReload = this.reloadTime;\r\n                    this.currentBurstIndex = 0;\r\n                    this.currentlyShooting = false;\r\n                } else {\r\n                    this.currentBurstDelay = this.burstDelay;\r\n                }\r\n            } else {\r\n                // Timedown for burst\r\n                this.currentBurstDelay --;\r\n            }\r\n        } else if (this.currentReload !== 0) {\r\n            // Timedown for reload\r\n            this.currentReload--;\r\n        }\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { Weapon } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\r\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public weapons: IWeaponGroupArgs[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(\r\n            this,\r\n            position,\r\n            rotation ?? 0,\r\n            this.buildAi(),\r\n            team,\r\n            this.weapons.map(\r\n                jsonWeaponGroup => new WeaponGroup(\r\n                    new WeaponTimer(jsonWeaponGroup.timer),\r\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\r\n                    jsonWeaponGroup.burstAll\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n","import Point from \"../../common/position/Point\";\r\n\r\nexport interface IDebugMarker {\r\n    draw(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class DebugPoint implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugCross implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\r\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugPlus implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y - radius);\r\n        ctx.lineTo(this.point.x, this.point.y + radius);\r\n        ctx.moveTo(this.point.x - radius, this.point.y);\r\n        ctx.lineTo(this.point.x + radius, this.point.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugRay implements IDebugMarker {\r\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\r\n        ctx.lineTo(tgt.x, tgt.y)\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugLine implements IDebugMarker {\r\n    constructor(public point: Point, public point2: Point, public color?: string) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        ctx.lineTo(this.point2.x, this.point2.y)\r\n        ctx.stroke();\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\r\n\r\nexport abstract class ShipAI {\r\n    markers: IDebugMarker[];\r\n    doDebug: boolean;\r\n    constructor(args ?: { debug?: boolean }) {\r\n        this.markers = [];\r\n        this.doDebug = args?.debug ?? false;\r\n    }\r\n\r\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n\r\n    debug(debug: IDebugMarker) {\r\n        if(!this.doDebug) return;\r\n        this.markers.push(debug);\r\n    }\r\n    debugPoint(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPoint(pt, color, radius));\r\n    }\r\n    debugCross(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugCross(pt, color, radius));\r\n    }\r\n    debugPlus(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPlus(pt, color, radius));\r\n    }\r\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\r\n        this.debug(new DebugRay(pt, angle, color, dist));\r\n    }\r\n    debugLine(pt: Point, pt2: Point, color?:string) {\r\n        this.debug(new DebugLine(pt, pt2, color));\r\n    }\r\n\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\r\n        if(this.markers.length === 0) return;\r\n        for(let i = 0; i < this.markers.length; i++) {\r\n            this.markers[i].draw(ctx);\r\n        }\r\n        this.markers = [];\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\r\nimport { IShipAI } from \"./IShipAI\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport interface IBroadsideAiArgs {\r\n    minDistance: number,\r\n    maxDistance: number,\r\n    orbitSpeed: number,\r\n    debug: boolean\r\n}\r\nconst defaultArgs = {\r\n    minDistance: 100,\r\n    maxDistance: 500,\r\n    orbitSpeed: 0.5,\r\n    debug: false,\r\n}\r\nexport default class BroadsideAI extends ShipAI {\r\n    private args: IBroadsideAiArgs;\r\n    constructor(args: Partial<IBroadsideAiArgs>) {\r\n        super(args);\r\n        this.args = { ...defaultArgs, ...args };\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const targetLocation = gs.Player.position;\r\n        const toLocation = Point.subtract(targetLocation, ship.position);\r\n        const currentHeading = ship.rotation;\r\n        const inwardHeading = toLocation.Direction();\r\n        const tangentHeadings = [\r\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\r\n            Angle.normalize(inwardHeading + (Math.PI / 2))\r\n        ];\r\n\r\n        if(toLocation.LengthSq() < this.args.minDistance * this.args.minDistance) {\r\n            const fleeHeadings = [\r\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\r\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\r\n            ];\r\n            const orbitDist = this.args.minDistance;\r\n            // Run away, but look for a tangent\r\n            this.debugPoint(targetLocation, 'orange', orbitDist);\r\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugLine(ship.position, tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else if (toLocation.LengthSq() > this.args.maxDistance * this.args.maxDistance) {\r\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\r\n            // Close the gap\r\n            this.debugPoint(targetLocation, undefined, orbitDist);\r\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugPoint(tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else {\r\n            // Orbit\r\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\r\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\r\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\r\n            return { \r\n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \r\n                tgtHeading: betterHeading\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\r\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\r\n    let minHeading = relativeHeadings[0];\r\n    let actualTarget = targetHeadings[0];\r\n    for(let i = 1; i < relativeHeadings.length; i++) {\r\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\r\n            minHeading = relativeHeadings[i];\r\n            actualTarget = targetHeadings[i];\r\n        }\r\n    }\r\n    return actualTarget;\r\n}","import Angle from \"../../common/Angle\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport default class FigherAI extends ShipAI {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\r\n        var target = nearest[0];\r\n\r\n        if(target === undefined) {\r\n            // Nothing to do, no ships.\r\n            return {tgtHeading: 0, tgtVel: 0};\r\n        }\r\n\r\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\n\r\nexport interface IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\r\n}\r\n\r\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\r\n    fighter: (args) => new FigherAI(),\r\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\r\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\r\n\r\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\r\n    return {\r\n        timer: json.timer,\r\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\r\n        burstAll: json.burstAll\r\n    }\r\n}\r\n\r\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\r\n    if(isWeapon(json)) {\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(json.sprite !== undefined) {\r\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: json.turret,\r\n            acquisitionAngle: json.acquisitionAngle,\r\n            minRange: json.minRange,\r\n            range: json.range\r\n        };\r\n    }\r\n    else {\r\n        const def = defs[json.definition];\r\n        if(def === undefined) {\r\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\r\n        }\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(def.sprite !== undefined) {\r\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: def.turret,\r\n            acquisitionAngle: def.acquisitionAngle,\r\n            minRange: def.minRange,\r\n            range: def.range\r\n        };\r\n    }\r\n}\r\n\r\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\r\n    return (<any>json).range !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { ShipDefinition } from \"./ShipDefinition\";\r\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\r\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\nimport { AllAIGenerators } from \"../ai/IShipAI\";\r\nimport { IWeaponArgs } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\r\nimport INamedCollection from \"../../common/INamedCollection\";\r\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\r\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\r\n\r\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\r\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\r\n    for(let key in json.animations) {\r\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\r\n    }\r\n    return json.ships.map(def => \r\n        parseShipDefinition(def, animationData, imgAtlases)\r\n    );\r\n}\r\n\r\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\r\n\r\n        parsedFlares.push(new FlareDefinition(\r\n            animation,\r\n            parseJsonPoint(flare.offset),\r\n            parseJsonAngle(flare.rotation),\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    const aiFunc = AllAIGenerators[def.ai];\r\n    const aiGen = () => aiFunc(def.aiParams);\r\n\r\n    return new ShipDefinition(\r\n        imgAtlases[def.sprite.file],\r\n        parseJsonPoint(def.size),\r\n        parseJsonPoint(def.sprite.srcOffset),\r\n        parseJsonPoint(def.sprite.srcSize),\r\n        parseJsonPoint(def.sprite.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        def.weaponGroups.map(group => \r\n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\r\n        aiGen\r\n    );\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\r\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\r\nimport INamedCollection from '../common/INamedCollection';\r\n\r\nlet atlases: INamedCollection<SpriteAtlas>;\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    atlases = {\r\n        \"Ships\": shipAtlas,\r\n        \"Flares\": flareAtlas\r\n    };\r\n\r\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\r\n}\r\n\r\nfunction loadJson(entitySheet: SpriteSheet){\r\n    import(\r\n        /* webpackChunkName: \"bullets-ship-definitions\" */\r\n        './data/shipDefinitions.json'\r\n    ).then(value => {\r\n        console.log('Got shipDefinitions.json');\r\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\r\n        onLoadDone(entitySheet, definitions);\r\n    });\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\r\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.Multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}"],"sourceRoot":""}