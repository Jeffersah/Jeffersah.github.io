{"version":3,"file":"mandelbrot.bundle.js","mappings":"4HACe,MAAMA,EACjBC,YAAmBC,EAAkBC,EAAkBC,GAApC,KAAAF,EAAAA,EAAkB,KAAAC,EAAAA,EAAkB,KAAAC,EAAAA,EAGvDC,IAAIC,GACA,OAAOC,KAAKL,EAAII,EAAMJ,EAAIK,KAAKJ,EAAIG,EAAMH,EAAII,KAAKH,EAAIE,EAAMF,EAGhEI,SACI,OAAOC,KAAKC,KAAKH,KAAKI,YAG1BA,WACI,OAAOJ,KAAKL,EAAIK,KAAKL,EAAIK,KAAKJ,EAAII,KAAKJ,EAAII,KAAKH,EAAIG,KAAKH,EAG7DQ,YACI,OAAOL,KAAKM,SAAS,EAAIN,KAAKI,YAElCG,SACI,OAAO,IAAId,GAAQO,KAAKL,GAAIK,KAAKJ,GAAII,KAAKH,GAM9CS,SAASE,EAAqBC,EAAcC,GACpCC,EAASH,KAETC,EAAKA,MAAAA,EAAAA,EAAcD,EACnBE,EAAKA,MAAAA,EAAAA,EAAcF,GAEvB,IAAKb,EAAGC,EAAGC,GAAKJ,EAAOmB,OAAOJ,EAAIC,EAAIC,GACtC,OAAO,IAAIjB,EAAOO,KAAKL,EAAIA,EAAGK,KAAKJ,EAAIA,EAAGI,KAAKH,EAAIA,GAKvDgB,IAAIC,EAAqBC,EAAcC,GACnC,IAAKrB,EAAGC,EAAGC,GAAKJ,EAAOmB,OAAOE,EAAIC,EAAIC,GACtC,OAAO,IAAIvB,EAAOO,KAAKL,EAAIA,EAAGK,KAAKJ,EAAIA,EAAGI,KAAKH,EAAIA,GAKvDoB,SAASH,EAAqBC,EAAcC,GACxC,IAAKrB,EAAGC,EAAGC,GAAKJ,EAAOmB,OAAOE,EAAIC,EAAIC,GACtC,OAAO,IAAIvB,EAAOO,KAAKL,EAAIA,EAAGK,KAAKJ,EAAIA,EAAGI,KAAKH,EAAIA,GAG/CqB,cAAcvB,EAAoBC,EAAYC,GAClD,OAAGc,EAAShB,GACD,CAACA,EAAEA,EAAGA,EAAEC,EAAGD,EAAEE,GAGb,CAACF,EAAGC,EAAGC,IAK1B,SAASc,EAAShB,GACd,YAAsBwB,IAATxB,EAAGA,I,gCC9Db,MAAMyB,EAIT1B,YAAY2B,GACHA,EAAaC,GAAMD,EAAaE,GAAMF,EAAaG,GACpDxB,KAAKyB,IAAMJ,EACXrB,KAAK0B,SAAMP,IAGXnB,KAAK0B,IAAML,EACXrB,KAAKyB,SAAMN,GAUZD,WAAWS,EAAWC,EAAWC,GACpC,OAAO,IAAIT,EAAM,CAAEO,EAAAA,EAAGC,EAAAA,EAAGC,EAAAA,IAStBX,WAAWI,EAAWC,EAAWC,GACpC,OAAO,IAAIJ,EAAM,CAAEE,EAAAA,EAAGC,EAAGC,EAAAA,IAKtBG,EAAEH,GAEL,GADAxB,KAAK8B,cACKX,IAANK,EAIA,OAAOxB,KAAK0B,IAAIC,EAHhB3B,KAAK0B,IAAIC,EAAIH,EACbxB,KAAKyB,SAAMN,EAQZS,EAAEJ,GAEL,GADAxB,KAAK8B,cACKX,IAANK,EAIA,OAAOxB,KAAK0B,IAAIE,EAHhB5B,KAAK0B,IAAIE,EAAIJ,EACbxB,KAAKyB,SAAMN,EAQZU,EAAEL,GAEL,GADAxB,KAAK8B,cACKX,IAANK,EAIA,OAAOxB,KAAK0B,IAAIG,EAHhB7B,KAAK0B,IAAIG,EAAIL,EACbxB,KAAKyB,SAAMN,EAQZG,EAAEE,GAEL,GADAxB,KAAK+B,cACKZ,IAANK,EAIA,OAAOxB,KAAKyB,IAAIH,EAHhBtB,KAAKyB,IAAIH,EAAIE,EACbxB,KAAKyB,SAAMN,EAQZI,EAAEC,GAEL,GADAxB,KAAK+B,cACKZ,IAANK,EAIA,OAAOxB,KAAKyB,IAAIF,EAHhBvB,KAAKyB,IAAIF,EAAIC,EACbxB,KAAKyB,SAAMN,EAQZK,EAAEA,GAEL,GADAxB,KAAK+B,cACKZ,IAANK,EAIA,OAAOxB,KAAKyB,IAAID,EAHhBxB,KAAKyB,IAAID,EAAIA,EACbxB,KAAKyB,SAAMN,EAMXa,eAAeC,GACnB,MAAMC,GAAKD,EAAiB,EAAbjC,KAAKyB,IAAIH,GAAS,EACjC,OAAOtB,KAAKyB,IAAID,EAAIxB,KAAKyB,IAAID,EAAIxB,KAAKyB,IAAIF,EAAIrB,KAAKiC,IAAIjC,KAAKkC,IAAIF,EAAG,EAAIA,EAAG,GAAI,GAI1EJ,cACaX,IAAbnB,KAAK0B,KACL1B,KAAKqC,UAGLA,UACJrC,KAAK0B,IAAM,CACPC,EAAG3B,KAAKgC,eAAe,GACvBJ,EAAG5B,KAAKgC,eAAe,GACvBH,EAAG7B,KAAKgC,eAAe,IAIvBD,cACaZ,IAAbnB,KAAKyB,KACLzB,KAAKsC,UAGLA,UACJ,MAAM,EAACX,EAAC,EAAEC,EAAC,EAAEC,GAAK7B,KAAK0B,IACjBa,EAAKrC,KAAKiC,IAAIR,EAAGC,EAAGC,GACpBW,EAAKtC,KAAKkC,IAAIT,EAAGC,EAAGC,GAC1B,IAAIP,EAAIiB,IAAOC,EAAK,EACdD,IAAOZ,GAAKC,EAAIC,IAAMU,EAAKC,GAC3BD,IAAOX,EAAI,GAAKC,EAAIF,IAAMY,EAAKC,GAC/B,GAAKb,EAAIC,IAAMW,EAAKC,GAE1B,IADAlB,GAAK,EACEA,EAAI,GACPA,IAEJtB,KAAKyB,IAAM,CACPH,EACAC,EAAGgB,IAAOC,EAAK,GAAKD,EAAKC,GAAMD,EAC/Bf,EAAGe,GAIJE,WAEH,OADAzC,KAAK8B,SACE,OAAS9B,KAAK0C,OAAO1C,KAAK0B,IAAIC,GAAK,KAAO3B,KAAK0C,OAAO1C,KAAK0B,IAAIE,GAAK,KAAO5B,KAAK0C,OAAO1C,KAAK0B,IAAIG,GAAK,IAGxGa,OAAOC,GACX,OAAOzC,KAAK0C,MAAkB,IAAZD,M,mGCxJX,MAAME,EAMjBnD,YAAYoD,EAAaC,EAAaC,EAAcC,GAChDjD,KAAKkD,SAAWJ,EAChB9C,KAAKmD,SAAWJ,EAChB/C,KAAKoD,KAAOJ,EACZhD,KAAKoB,MAAQ6B,EAGjBI,iBAAiBtD,GACb,IAAIuD,EAAavD,EAAMmD,SAASjC,SAASjB,KAAKkD,UAC9C,MAAMK,ECfqB,GDeRvD,KAAKoD,KAAOrD,EAAMqD,MAC/BhD,EAAWF,KAAKiC,ICdFqB,EDcMF,EAAWlD,WAA6BmD,EAAYA,GAC9E,IACIE,EADQH,EAAWjD,YAAYC,SAASP,EAAMqD,MAAM9C,SClBzC,GDkB8DF,GAC3DE,SAAS,EAAEN,KAAKoD,MAClCpD,KAAKmD,SAAWnD,KAAKmD,SAAStC,IAAI4C,GAGtCC,aACI1D,KAAKkD,SAAWlD,KAAKkD,SAASrC,IAAIb,KAAKmD,UAG3CQ,MAAMC,EAA+BC,GACjCD,EAAIE,OACJ,MAAM,EAAEnE,EAAC,EAAEC,EAAC,MAAEmE,GAAUF,EAAQ7D,KAAKkD,UAC/Bc,EAAa9D,KAAKiC,IAAIjC,KAAKkC,IAAI2B,EAAO,GAAI,GAChDH,EAAIK,UAAY7C,EAAA,MAAUpB,KAAKoB,MAAMO,IAAMqC,EAAYhE,KAAKoB,MAAMQ,IAAMoC,EAAYhE,KAAKoB,MAAMS,IAAMmC,GAAYvB,WACjH,IAAIyB,ECjCkB,EDiCQlE,KAAKoD,KAAOW,EAC1CG,EAAOhE,KAAKkC,IAAIlC,KAAKiC,IAAI+B,EAAM,GAAI,KAEnCN,EAAIO,YACJP,EAAIQ,IAAIzE,EAAGC,EAAGsE,EAAM,EAAa,EAAVhE,KAAKmE,IAAQ,GACpCT,EAAIU,OACJV,EAAIW,WEhCZ,MAEMC,GAAW,IACXC,EAAU,IAKhB,IAAIC,EAAgB,GAEpB,SAASC,EAAYvC,EAAaD,GAC9B,OAAOjC,KAAK0E,UAAYzC,EAAIC,GAAOA,EAGxB,SAASyC,IACpB,MAAMC,EAASC,SAASC,eAAe,eAEvC,QAAaF,ED1BW,IACC,KC2BzB,IAAI,IAAIG,EAAI,EAAGA,EAnBD,GAmBgBA,IAC1BP,EAAMQ,KAAK,IAAIrC,EACX,IAAIpD,EAAA,EAAOkF,EAAYH,EAASC,GAAUE,EAAYH,EAASC,GAAUE,EAAYH,EAASC,IAC9F,IAAIhF,EAAA,EAAOkF,GAAY,GAlBrB,IAkBoCA,GAAY,GAlBhD,IAkB+DA,GAAY,GAlB3E,KAmBFA,EAlBK,EACA,GAkBLvD,EAAA,MAAU,EAAG,EAAG,KAIxBsD,EAAMQ,KAAK,IAAIrC,EAAK,IAAIpD,EAAA,EAAQ,EAAE,EAAE,GACpC,IAAIA,EAAA,EAAO,EAAE,EAAE,GACf0F,GACA/D,EAAA,MAAU,EAAG,EAAG,KAEhBgE,EAAKN,EAAOO,WAAW,OAG3B,SAASD,EAAKxB,IAKd,SAAcA,GACVA,EAAIK,UAAY,QAChBL,EAAI0B,SAAS,EAAE,EDpDS,IACC,KCqDzB,IAAI,IAAIL,EAAI,EAAGA,EAAIP,EAAMzE,OAAQgF,IAC7B,IAAI,IAAIM,EAAI,EAAGA,EAAIb,EAAMzE,OAAQsF,IAC1BN,IAAMM,GACLb,EAAMO,GAAG5B,iBAAiBqB,EAAMa,IAK5C,IAAIC,EAAWd,EAAMe,QAAO,CAACC,EAAGC,IAAMD,EAAEtC,MAAQuC,EAAEvC,KAAOsC,EAAIC,IAE7DjB,EAAMkB,SAAQC,IACVA,EAAK3C,SAAW2C,EAAK3C,SAASjC,SAASuE,EAAStC,UAChD2C,EAAKnC,gBAETgB,EAAMoB,MAAK,CAACC,EAAGlE,IAAMkE,EAAE7C,SAASrD,EAAIgC,EAAEqB,SAASrD,IAC/C6E,EAAMkB,SAAQC,IACVA,EAAKlC,MAAMC,EAAKoC,MAxBpBC,CAAKrC,GACLsC,uBAAsB,IAAId,EAAKxB,KA2BnC,MAAMuC,EAAqB,IAAI,KAAM,EAAGjG,KAAKkC,ID1EjB,IACC,MC0EvBgE,EAAoB,IAAI,KAAM5B,EAASC,GAE7C,SAASuB,EAAgBxE,GACrB,MAAO,CACH7B,EAAGyG,EAAWC,UAAU7E,EAAE7B,EAAGwG,GAC7BvG,EAAGwG,EAAWC,UAAU7E,EAAE5B,EAAGuG,GAC7BpC,MAAOqC,EAAWC,UAAU7E,EAAE3B,EAAG,Q,2DCjFlC,MAAMyG,EAOT5G,YAAoB6G,EAA6BC,GAA7B,KAAAD,YAAAA,EAA6B,KAAAC,aAAAA,EAC7CxG,KAAKyG,UAAW,EAChBzG,KAAK0G,MAAQ1G,KAAK2G,SAAY,GAAK3G,KAAK4G,SAAS1G,KAAKkC,IAAImE,EAAaC,IACvExG,KAAKL,EAAIK,KAAKJ,EAAI,EAGdgH,SAASpF,GACb,IAAIqF,EAAQ,EACZ,KAAOrF,EAAI,GACPqF,IACArF,IAAM,EAEV,OAAOqF,EAGXC,IACI,OAAO9G,KAAKL,EAAIK,KAAK0G,MAEzBK,IACI,OAAO/G,KAAKJ,EAAII,KAAK0G,MAEzBM,QACI,OAAOhH,KAAK0G,MAIhBO,UAEI,GADAjH,KAAKL,IACDK,KAAKL,EAAIK,KAAK0G,OAAS1G,KAAKuG,cAC5BvG,KAAKL,EAAI,EACTK,KAAKJ,IACDI,KAAKJ,EAAII,KAAK0G,OAAS1G,KAAKwG,cAAc,CAE1C,GADAxG,KAAKJ,EAAI,EACU,IAAfI,KAAK0G,MAEL,OADA1G,KAAKyG,UAAW,GACT,EAGPzG,KAAK0G,OAAS,EAI1B,OAAO,EAGXQ,QACIlH,KAAKyG,UAAW,EAChBzG,KAAK0G,MAAQ1G,KAAK2G,SAClB3G,KAAKL,EAAIK,KAAKJ,EAAI,GClD1B,MAEMuH,EAAyB,IAAI,KAAW,EAAG,IAAK,EAAG,IAAK,EAAG,GAE1D,MAAMC,EAMT1H,YAAoBoF,EAAkCuC,GAAlC,KAAAvC,OAAAA,EAAkC,KAAAuC,KAAAA,EAClDrH,KAAKsH,UAAY,IAAIhB,EChBD,IACC,KDgBrBtG,KAAK4D,IAAMkB,EAAOO,WAAW,MAC7BrF,KAAKuH,YAAc,IAAI,KAAQ,IAAI,KAAM,EAAGzC,EAAO0C,aAAc,IAAI,KAAM,EAAG1C,EAAO2C,eAGzFC,MAAMvB,GACF,IAAK,IAAIlB,EAAI,EAAGA,EAhBD,OAgBwBjF,KAAKsH,UAAUb,SAAUxB,IAAK,CACjE,MAAMtF,EAAIK,KAAKsH,UAAUR,IACnBlH,EAAII,KAAKsH,UAAUP,IACnBxF,EAAIvB,KAAKsH,UAAUN,QACnBW,EAAc3H,KAAKuH,YAAYlB,UAAU,CAAC1G,EAAAA,EAAGC,EAAAA,GAAIuG,GACvDnG,KAAK4D,IAAIK,UAAYjE,KAAK4H,UAAUD,GACpC3H,KAAK4D,IAAI0B,SAAS3F,EAAGC,EAAG2B,EAAGA,GAC3BvB,KAAKsH,UAAUL,WAIvBW,UAAUC,GAEN,MAAMC,EAAW,IAAI,KAAQD,EAAOlI,EAAGkI,EAAOjI,GAC9C,IAAImI,EAAU,IAAI,KAAQF,EAAOlI,EAAGkI,EAAOjI,GACvCoI,EAAO,EAEX,KAAOA,EAlCG,KAkCiBD,EAAQE,QAAUjI,KAAKqH,KAAKa,YACnDH,EAAU/H,KAAKqH,KAAKc,QAAQJ,EAASD,GACrCE,IAGJ,GAAID,EAAQE,QAAUjI,KAAKqH,KAAKa,WAC5B,MAAO,QAGX,MAAME,EAAOJ,EA3CH,IA4CV,OAAOb,EAAWkB,QAAQD,GAG9BE,aACItI,KAAKsH,UAAUJ,SElDhB,MAAMqB,EACTJ,QAAQJ,EAAkBD,GAGtB,OAFAC,EAAQS,aAAaT,GACrBA,EAAQU,QAAQX,GACTC,EAGXG,WACI,OAAO,GCRR,MAAMQ,EAGThJ,YAAoBiG,GAAA,KAAAA,EAAAA,EAChB3F,KAAK2I,QAAUzI,KAAKC,KAAK,EAAIwF,EAAEiD,MAAQ,GAAK,GAAK,EAGrDT,QAAQJ,EAAkBD,GAGtB,OAFAC,EAAQS,aAAaT,GACrBA,EAAQU,QAAQzI,KAAK2F,GACdoC,EAGXG,WACI,OAAOlI,KAAK2I,QCPb,MAAME,EAETnJ,YAAoBoJ,EAA8BC,EAA6BC,EAA4BC,GAAvF,KAAAH,QAAAA,EAA8B,KAAAC,YAAAA,EAA6B,KAAAC,SAAAA,EAA4B,KAAAC,SAAAA,EACvGH,EAAQI,iBAAiB,YAAalJ,KAAKmJ,gBAAgBC,KAAKpJ,OAChE8I,EAAQI,iBAAiB,UAAWlJ,KAAKqJ,cAAcD,KAAKpJ,OAC5D8I,EAAQI,iBAAiB,aAAclJ,KAAKsJ,iBAAiBF,KAAKpJ,OAClE8I,EAAQI,iBAAiB,YAAalJ,KAAKuJ,gBAAgBH,KAAKpJ,OAChE8I,EAAQI,iBAAiB,QAASlJ,KAAKwJ,aAAaJ,KAAKpJ,OACzDA,KAAKyJ,aAAe,IAAI,KAAQ,IAAI,KAAM,EAAGX,EAAQtB,aAAc,IAAI,KAAM,EAAGsB,EAAQrB,eAG5FiC,QACI1J,KAAK+I,YAAc,IAAI,KAAQ,IAAI,MAAO,EAAG,GAAI,IAAI,MAAO,EAAG,IAC/D/I,KAAKgJ,SAASV,aAMVa,gBAAgBQ,GACpB,GAAqB,IAAjBA,EAAMC,OACN5J,KAAK6J,MAAQF,EAAMG,QACnB9J,KAAK+J,MAAQJ,EAAMK,QACnBhK,KAAKiK,WAAY,EACjBN,EAAMO,sBAEL,GAAqB,IAAjBP,EAAMC,OAAc,CACzB,MAAMO,EAASnK,KAAKyJ,aAAapD,UAAU,CAAE1G,EAAGgK,EAAMG,QAASlK,EAAG+J,EAAMK,SAAWhK,KAAK+I,aACxF/I,KAAKiJ,SAASkB,EAAOxK,EAAGwK,EAAOvK,GAC/B+J,EAAMO,kBAGNb,gBACJrJ,KAAKiK,WAAY,EAEbX,mBACJtJ,KAAKiK,WAAY,EAEbV,gBAAgBI,GACpB,GAAsB,IAAlBA,EAAMS,QAAe,CACrB,MAAMD,EAASnK,KAAKyJ,aAAapD,UAAU,CAAE1G,EAAGgK,EAAMG,QAASlK,EAAG+J,EAAMK,SAAWhK,KAAK+I,aACxF/I,KAAKiJ,SAASkB,EAAOxK,EAAGwK,EAAOvK,GAC/B+J,EAAMO,iBAEV,IAAKlK,KAAKiK,UAAW,OACrB,MAAMnJ,EAAK6I,EAAMG,QAAU9J,KAAK6J,MAC1B9I,EAAK4I,EAAMK,QAAUhK,KAAK+J,MAE1B3B,EAAOpI,KAAKyJ,aAAaY,cAAcvJ,EAAIC,GACjDf,KAAK+I,YAAYuB,mBAAmBlC,EAAKzI,GAAIyI,EAAKxI,GAClDI,KAAKuK,eAGLvK,KAAKgJ,SAASV,aAEdtI,KAAK6J,MAAQF,EAAMG,QACnB9J,KAAK+J,MAAQJ,EAAMK,QAGfR,aAAaG,GACjB,MAAMa,EAAkBb,EAAMc,OAnEnB,EAoELC,EAAYxK,KAAKyK,IAnEZ,IAmE4BH,GACjCpC,EAAOpI,KAAKyJ,aAAaY,cAAcV,EAAMG,QAASH,EAAMK,SAElEhK,KAAK+I,YAAY6B,YAAYF,EAAWtC,EAAKzI,EAAGyI,EAAKxI,GACrDI,KAAKuK,eAELvK,KAAKgJ,SAASV,aAEdqB,EAAMO,iBAGFK,gBACAvK,KAAK+I,YAAY8B,OAAOC,SA7Eb,GA6E0C9K,KAAK+I,YAAYgC,OAAOD,SA7ElE,KA8EX9K,KAAK+I,YAAY8B,OAAOG,QA9Eb,EA8EqC,IAChDhL,KAAK+I,YAAYgC,OAAOC,QA/Eb,EA+EqC,KAEpDhL,KAAKiL,kBAAkBjL,KAAK+I,YAAY8B,QACxC7K,KAAKiL,kBAAkBjL,KAAK+I,YAAYgC,QAGpCE,kBAAkBtJ,GAClBA,EAAES,KArFK,GAqFaT,EAAEuJ,OArFf,EAqFkCvJ,EAAES,KAC3CT,EAAEQ,IArFK,GAqFaR,EAAEuJ,MArFf,EAqFkCvJ,EAAEQ,KAG5CgJ,OACHnL,KAAKgJ,SAAStB,MAAM1H,KAAK+I,cCzFjC,IAAIqC,EACAC,EAEW,SAASxG,IACpB,MAAMC,EAASC,SAASC,eAAe,cACjCsG,EAAYvG,SAASC,eAAe,aAE1CF,EAAOyG,aAAa,QAAS,OAC7BzG,EAAOyG,aAAa,SAAU,OAC9BzG,EAAO0G,MAAMC,MAAQ,QACrB3G,EAAO0G,MAAME,OAAS,QAEtBJ,EAAUC,aAAa,QAAS,OAChCD,EAAUC,aAAa,SAAU,OACjCD,EAAUE,MAAMC,MAAQ,QACxBH,EAAUE,MAAME,OAAS,QAEzBN,EAAe,IAAIvC,EAAiB/D,EAAQ,IAAI,KAAQ,IAAI,MAAO,EAAG,GAAI,IAAI,MAAO,EAAG,IAAK,IAAIsC,EAAStC,EAAQ,IAAIyD,GAAeoD,GACrIN,EAAc,IAAIxC,EAAiByC,EAAW,IAAI,KAAQ,IAAI,MAAO,EAAG,GAAI,IAAI,MAAO,EAAG,IAAK,IAAIlE,EAASkE,EAAY,IAAI5C,EAAM,IAAI,KAAQ,EAAG,MAAM,CAAC/I,EAAGC,SAE3JgM,WAAWT,EAAM,GAGrB,SAASQ,EAAiBhM,EAAWC,GACjCyL,EAAYrC,SAAS3B,KAAO,IAAIqB,EAAM,IAAI,KAAQ/I,EAAGC,IACrDyL,EAAY3B,QAGhB,SAASyB,IACLC,EAAaD,OACbE,EAAYF,OACZjF,sBAAsBiF","sources":["webpack://trading-game/./src/projects/common/3d/Vector.ts","webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/gravitation/Rock.ts","webpack://trading-game/./src/projects/gravitation/Constants.ts","webpack://trading-game/./src/projects/gravitation/main.ts","webpack://trading-game/./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack://trading-game/./src/projects/mandelbrot/Renderer.ts","webpack://trading-game/./src/projects/mandelbrot/Constants.ts","webpack://trading-game/./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack://trading-game/./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack://trading-game/./src/projects/mandelbrot/ClickDragWrapper.ts","webpack://trading-game/./src/projects/mandelbrot/main.ts"],"sourcesContent":["\nexport default class Vector {\n    constructor(public x: number, public y: number, public z: number) {\n    }\n\n    dot(other: Vector) {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    }\n\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    normalize() {\n        return this.multiply(1 / this.lengthSq());\n    }\n    negate() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    multiply(scale: number): Vector;\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\n    multiply(scale: Vector): Vector;\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\n        if(!isVector(sx))\n        {\n            sy = sy ?? <number>sx;\n            sz = sz ?? <number>sx;\n        }\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\n        return new Vector(this.x * x, this.y * y, this.z * z);\n    }\n\n    add(dx: number, dy: number, dz: number): Vector;\n    add(v: Vector): Vector;\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x + x, this.y + y, this.z + z);\n    }\n\n    subtract(dx: number, dy: number, dz: number): Vector;\n    subtract(v: Vector): Vector;\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x - x, this.y - y, this.z - z);\n    }\n\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\n        if(isVector(x)) {\n            return [x.x, x.y, x.z];\n        }\n        else {\n            return [x, y, z];\n        }\n    }\n}\n\nfunction isVector(x: number | Vector) : x is Vector {\n    return (<any>x).x !== undefined;\n}","export class Color {\n    private rgb?: { r: number, g: number, b: number };\n    private hsv?: { h: number, s: number, v: number };\n\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\n            this.hsv = vals as any;\n            this.rgb = undefined;\n        }\n        else  {\n            this.rgb = vals as any;\n            this.hsv = undefined;\n        }\n    }\n\n    /**\n     * Generate an RGB color\n     * @param r Red component [0, 1]\n     * @param g Green component [0, 1]\n     * @param b Blue component [0, 1]\n     */\n    public static rgb(r: number, g: number, b: number): Color {\n        return new Color({ r, g, b });\n    }\n\n    /**\n     * Generate an HSV color\n     * @param r Hue component [0, 1]\n     * @param g Saturation component [0, 1]\n     * @param b Value component [0, 1]\n     */\n    public static hsv(h: number, s: number, v: number): Color {\n        return new Color({ h, s, v });\n    }\n\n    public r(): number;\n    public r(v: number): void;\n    public r(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.r = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.r;\n        }\n    }\n\n    public g(): number;\n    public g(v: number): void;\n    public g(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.g = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.g;\n        }\n    }\n\n    public b(): number;\n    public b(v: number): void;\n    public b(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.b = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.b;\n        }\n    }\n\n    public h(): number;\n    public h(v: number): void;\n    public h(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.h = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.h;\n        }\n    }\n\n    public s(): number;\n    public s(v: number): void;\n    public s(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.s = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.s;\n        }\n    }\n\n    public v(): number;\n    public v(v: number): void;\n    public v(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.v = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.v;\n        }\n    }\n\n    private componentToRgb(n: number) {\n        const k = (n + this.hsv.h * 6) % 6;\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\n    }\n\n\n    private reqRgb() {\n        if (this.rgb === undefined) {\n            this.calcRgb();\n        }\n    }\n    private calcRgb() {\n        this.rgb = {\n            r: this.componentToRgb(5),\n            g: this.componentToRgb(3),\n            b: this.componentToRgb(1),\n        };\n    }\n\n    private reqHsv() {\n        if (this.hsv === undefined) {\n            this.calcHsv();\n        }\n    }\n    private calcHsv() {\n        const {r, g, b} = this.rgb;\n        const mx = Math.max(r, g, b);\n        const mn = Math.min(r, g, b);\n        let h = mx === mn ? 0\n            : mx === r ? (g - b) / (mx - mn)\n            : mx === g ? 2 + (b - r) / (mx - mn)\n            : 4 + (r - g) / (mx - mn);\n        h /= 6;\n        while (h < 0) {\n            h++;\n        }\n        this.hsv = {\n            h,\n            s: mx === mn ? 0 : (mx - mn) / mx,\n            v: mx\n        };\n    }\n\n    public toString(): string {\n        this.reqRgb();\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\n    }\n\n    private toByte(component: number) {\n        return Math.floor(component * 255);\n    }\n}","import Vector from \"../common/3d/Vector\";\nimport { Color } from \"../common/Color\";\nimport * as C from './Constants';\n\nexport default class Rock {\n    Position: Vector;\n    Velocity: Vector;\n    Mass: number;\n    Color: Color;\n\n    constructor(pos: Vector, vel: Vector, mass: number, color: Color) {\n        this.Position = pos;\n        this.Velocity = vel;\n        this.Mass = mass;\n        this.Color = color;\n    }\n\n    applyGravitation(other: Rock) {\n        let gravVector = other.Position.subtract(this.Position);\n        const minlength = (this.Mass + other.Mass) * C.MASS_COLISION_SCALE;\n        const lengthSq = Math.max(gravVector.lengthSq() * C.LEN_SCALE_SQ, minlength * minlength);\n        let force = gravVector.normalize().multiply(other.Mass).multiply(C.G_CONST / lengthSq);\n        let accel = force.multiply(1/this.Mass);\n        this.Velocity = this.Velocity.add(accel);\n    }\n\n    finishTick() {\n        this.Position = this.Position.add(this.Velocity);\n    }\n\n    paint(ctx: CanvasRenderingContext2D, project: (v: Vector) => {x: number, y: number, depth: number}) {\n        ctx.save();\n        const { x, y, depth } = project(this.Position);\n        const colorScale = Math.max(Math.min(depth, 1), 0);\n        ctx.fillStyle = Color.rgb(this.Color.r() * colorScale, this.Color.g() * colorScale, this.Color.b() * colorScale).toString();\n        let size = C.SCALE_PER_MASS * this.Mass * depth;\n        size = Math.min(Math.max(size, 1), 100);\n\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2, false);\n        ctx.fill();\n        ctx.restore();\n    }\n}","export const CANVAS_WIDTH = 800;\nexport const CANVAS_HEIGHT = 800;\nexport const SCALE_PER_MASS = 2;\nexport const G_CONST = 60;\nexport const MASS_COLISION_SCALE = 3;\nexport const LEN_SCALE = 1;\nexport const LEN_SCALE_SQ = LEN_SCALE * LEN_SCALE;","import { VERSION } from '@microsoft/signalr';\nimport { Range } from '../common';\nimport Vector from '../common/3d/Vector';\nimport { ResizeCanvas } from '../common/CanvasHelpers';\nimport { Color } from '../common/Color';\nimport { unitRange } from '../common/Range';\nimport * as Const from './Constants';\nimport Rock from './Rock';\n\nconst NUM_ROCKS = 50;\n\nconst MIN_POS = -100;\nconst MAX_POS = 100;\nconst MAX_V = 0.3;\nconst MIN_MASS = 1;\nconst MAX_MASS = 5;\n\nlet rocks: Rock[] = [];\n\nfunction randBetween(min: number, max: number){\n    return Math.random() * (max-min) + min;\n}\n\nexport default function Run() {\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n\n    ResizeCanvas(canvas, Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\n\n    for(let i = 0; i < NUM_ROCKS; i++){\n        rocks.push(new Rock(\n            new Vector(randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS)),\n            new Vector(randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V)),\n            randBetween(MIN_MASS, MAX_MASS),\n            Color.rgb(1, 1, 1)\n        ));\n    }\n\n    rocks.push(new Rock(new Vector( 0,0,0),\n    new Vector(0,0,0),\n    MAX_MASS * 5,\n    Color.rgb(1, 0, 0)));\n\n    loop(canvas.getContext('2d'));\n}\n\nfunction loop(ctx: CanvasRenderingContext2D) {\n    tick(ctx);\n    requestAnimationFrame(()=>loop(ctx));\n}\n\nfunction tick(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\n\n    for(let i = 0; i < rocks.length; i++) {\n        for(let j = 0; j < rocks.length; j++) {\n            if(i !== j) { \n                rocks[i].applyGravitation(rocks[j]);\n            }\n        }\n    }\n\n    let heaviest = rocks.reduce((m, c) => m.Mass >= c.Mass ? m : c);\n\n    rocks.forEach(rock => {\n        rock.Position = rock.Position.subtract(heaviest.Position);\n        rock.finishTick();\n    });\n    rocks.sort((a, b) => a.Position.z - b.Position.z);\n    rocks.forEach(rock => {\n        rock.paint(ctx, projectPosition);\n    });\n}\n\nconst windowRange: Range = new Range(0, Math.min(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT));\nconst worldRange: Range = new Range(MIN_POS, MAX_POS);\n\nfunction projectPosition(v: Vector): {x: number, y: number, depth: number} {\n    return {\n        x: worldRange.ConvertTo(v.x, windowRange),\n        y: worldRange.ConvertTo(v.y, windowRange),\n        depth: worldRange.ConvertTo(v.z, unitRange),\n    };\n}","export class ProgressiveRepaint {\n    private x: number;\n    private y: number;\n    private scale: number;\n    private maxScale: number;\n    public finished: boolean;\n\n    constructor(private canvasWidth: number, private canvasHeight: number) {\n        this.finished = false;\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\n        this.x = this.y = 0;\n    }\n\n    private fastLog2(v: number) {\n        let shift = 0;\n        while (v > 0) {\n            shift++;\n            v >>= 1;\n        }\n        return shift;\n    }\n\n    X(): number {\n        return this.x * this.scale;\n    }\n    Y(): number {\n        return this.y * this.scale;\n    }\n    Scale(): number {\n        return this.scale;\n    }\n\n    // Returns bool done\n    Advance(): boolean {\n        this.x++;\n        if (this.x * this.scale >= this.canvasWidth) {\n            this.x = 0;\n            this.y++;\n            if (this.y * this.scale >= this.canvasHeight) {\n                this.y = 0;\n                if (this.scale === 1) {\n                    this.finished = true;\n                    return true;\n                }\n                else {\n                    this.scale /= 2;\n                }\n            }\n        }\n        return false;\n    }\n\n    Reset() {\n        this.finished = false;\n        this.scale = this.maxScale;\n        this.x = this.y = 0;\n    }\n}","import * as Const from './Constants';\nimport { Range2d, Range, ColorRange, Complex } from '../common';\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\n\nconst MAX_DEPTH = 255;\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\n\nexport class Renderer {\n\n    private ctx: CanvasRenderingContext2D;\n    private screenRange: Range2d;\n    private repainter: ProgressiveRepaint;\n\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\n        this.ctx = canvas.getContext('2d');\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\n    }\n\n    Paint(windowRange: Range2d) {\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\n            const x = this.repainter.X();\n            const y = this.repainter.Y();\n            const s = this.repainter.Scale();\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\n            this.ctx.fillRect(x, y, s, s);\n            this.repainter.Advance();\n        }\n    }\n\n    CalcColor(coords: {x: number, y: number}): string {\n\n        const original = new Complex(coords.x, coords.y);\n        let rolling = new Complex(coords.x, coords.y);\n        let iter = 0;\n\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\n            rolling = this.func.Iterate(rolling, original);\n            iter++;\n        }\n\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\n            return 'white';\n        }\n\n        const perc = iter / MAX_DEPTH;\n        return paintColor.ToColor(perc);\n    }\n\n    ResetPaint() {\n        this.repainter.Reset();\n    }\n}","export const CANVAS_WIDTH = 800;\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\nimport { Complex } from '../../common';\n\nexport class Mandelbrot implements IIterativeFunction {\n    Iterate(rolling: Complex, original: Complex): Complex {\n        rolling.multiplyWith(rolling);\n        rolling.addWith(original);\n        return rolling;\n    }\n\n    MaxAbsSq(): number {\n        return 2;\n    }\n}\n","import { IIterativeFunction } from './IIterativeFunction';\nimport { Complex } from '../../common';\n\nexport class Julia implements IIterativeFunction {\n\n    private radius: number;\n    constructor(private c: Complex) {\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\n    }\n\n    Iterate(rolling: Complex, original: Complex): Complex {\n        rolling.multiplyWith(rolling);\n        rolling.addWith(this.c);\n        return rolling;\n    }\n\n    MaxAbsSq(): number {\n        return this.radius;\n    }\n}","import { Range2d, Range } from '../common';\nimport { Renderer } from './Renderer';\n\nconst SCROLL_DIV = 3;\nconst SCROLL_POW = 1.1;\n\nconst MAX_ZOOM_WIDTH = 4;\nconst MIN_WINDOW = -2;\nconst MAX_WINDOW = 2;\n\nexport class ClickDragWrapper {\n    screenBounds: Range2d;\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        control.addEventListener('wheel', this.handleScroll.bind(this));\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\n    }\n\n    reset() {\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\n        this.renderer.ResetPaint();\n    }\n\n    grabX: number;\n    grabY: number;\n    isGrabbed: boolean;\n    private handleMouseDown(event: MouseEvent) {\n        if (event.button === 0) {\n            this.grabX = event.offsetX;\n            this.grabY = event.offsetY;\n            this.isGrabbed = true;\n            event.preventDefault();\n        }\n        else if (event.button === 1) {\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\n            this.onSelect(result.x, result.y);\n            event.preventDefault();\n        }\n    }\n    private handleMouseUp() {\n        this.isGrabbed = false;\n    }\n    private handleMouseLeave() {\n        this.isGrabbed = false;\n    }\n    private handleMouseMove(event: MouseEvent) {\n        if (event.buttons === 4) {\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\n            this.onSelect(result.x, result.y);\n            event.preventDefault();\n        }\n        if (!this.isGrabbed) return;\n        const dx = event.offsetX - this.grabX;\n        const dy = event.offsetY - this.grabY;\n\n        const perc = this.screenBounds.GetPercentage(dx, dy);\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\n        this.assertBounds();\n\n\n        this.renderer.ResetPaint();\n\n        this.grabX = event.offsetX;\n        this.grabY = event.offsetY;\n    }\n\n    private handleScroll(event: WheelEvent) {\n        const scalePercentage = event.deltaY / SCROLL_DIV;\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\n\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\n        this.assertBounds();\n\n        this.renderer.ResetPaint();\n\n        event.preventDefault();\n    }\n\n    private assertBounds() {\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\n        }\n        this.assertRangeBounds(this.paintWindow.xRange);\n        this.assertRangeBounds(this.paintWindow.yRange);\n    }\n\n    private assertRangeBounds(r: Range) {\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\n    }\n\n    public Tick() {\n        this.renderer.Paint(this.paintWindow);\n    }\n}","import * as Const from './Constants';\nimport { Renderer } from './Renderer';\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\nimport { Julia } from './iterativeFunctions/Julia';\nimport { Range2d, Range, Complex } from '../common';\nimport { ClickDragWrapper } from './ClickDragWrapper';\n\n\nlet mandelRender: ClickDragWrapper;\nlet juliaRender: ClickDragWrapper;\n\nexport default function Run() {\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\n\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\n\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\n\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\n\n    setTimeout(Tick, 0);\n}\n\nfunction mandelbrotSelect(x: number, y: number) {\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\n    juliaRender.reset();\n}\n\nfunction Tick() {\n    mandelRender.Tick();\n    juliaRender.Tick();\n    requestAnimationFrame(Tick);\n}"],"names":["Vector","constructor","x","y","z","dot","other","this","length","Math","sqrt","lengthSq","normalize","multiply","negate","sx","sy","sz","isVector","getxyz","add","dx","dy","dz","subtract","static","undefined","Color","vals","h","s","v","hsv","rgb","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","Rock","pos","vel","mass","color","Position","Velocity","Mass","applyGravitation","gravVector","minlength","LEN_SCALE","accel","finishTick","paint","ctx","project","save","depth","colorScale","fillStyle","size","beginPath","arc","PI","fill","restore","MIN_POS","MAX_POS","rocks","randBetween","random","Run","canvas","document","getElementById","i","push","MAX_MASS","loop","getContext","fillRect","j","heaviest","reduce","m","c","forEach","rock","sort","a","projectPosition","tick","requestAnimationFrame","windowRange","worldRange","ConvertTo","ProgressiveRepaint","canvasWidth","canvasHeight","finished","scale","maxScale","fastLog2","shift","X","Y","Scale","Advance","Reset","paintColor","Renderer","func","repainter","screenRange","offsetWidth","offsetHeight","Paint","worldCoords","CalcColor","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","ResetPaint","Mandelbrot","multiplyWith","addWith","Julia","radius","abs","ClickDragWrapper","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","reset","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","Shift","Tick","mandelRender","juliaRender","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout"],"sourceRoot":""}