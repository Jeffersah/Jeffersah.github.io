{"version":3,"file":"glsl_geomfrac.bundle.js","mappings":"2GAAO,SAASA,EAAWC,EAA2BC,EAAcC,GAChE,MAAMC,EAASH,EAAGI,aAAaH,GAM/B,OAJAD,EAAGK,aAAaF,EAAQD,GAExBF,EAAGM,cAAcH,GAEZH,EAAGO,mBAAmBJ,EAAQH,EAAGQ,gBAO/BL,GANLM,QAAQC,MAAMR,GACdS,MAAM,mCAAoCV,IAASD,EAAGY,cAAgB,SAAWX,IAASD,EAAGa,gBAAkB,WAAa,eAAkBb,EAAGc,iBAAiBX,SAClKH,EAAGe,aAAaZ,IAQf,SAASa,EAAkBhB,EAA2BiB,EAA4BC,GACrF,MAAMC,EAAepB,EAAWC,EAAIA,EAAGY,cAAeK,GAChDG,EAAiBrB,EAAWC,EAAIA,EAAGa,gBAAiBK,GAIpDG,EAAgBrB,EAAGsB,gBAOzB,GANAtB,EAAGuB,aAAaF,EAAeF,GAC/BnB,EAAGuB,aAAaF,EAAeD,GAC/BpB,EAAGwB,YAAYH,GAIVrB,EAAGyB,oBAAoBJ,EAAerB,EAAG0B,aAK9C,OAAOL,EAJLV,MAAM,4CAA8CX,EAAG2B,kBAAkBN,IAiDxE,SAASO,EAAmB5B,EAA2BG,EAAsB0B,EAA6BC,EAA+BC,EAA4CC,EAAoBC,EAAqEC,GACnRlC,EAAGmC,WAAW,EAAK,EAAK,EAAK,GAC7BnC,EAAGoC,WAAW,GACdpC,EAAGqC,OAAOrC,EAAGsC,YACbtC,EAAGuC,UAAUvC,EAAGwC,QAIhBxC,EAAGyC,MAAMzC,EAAG0C,iBAAmB1C,EAAG2C,kBAIlC,CACE,MAAM1C,EAAOD,EAAG4C,MACVC,GAAY,EACZC,EAAS,EAETC,EAAS,EACf/C,EAAGgD,WAAWhD,EAAGiD,aAAcpB,GAC/B7B,EAAGkD,oBACGlD,EAAGmD,kBAAkBhD,EAAQ,mBAC7B2B,EACA7B,EACA4C,EACAC,EACAC,GACN/C,EAAGoD,wBACDpD,EAAGmD,kBAAkBhD,EAAQ,oBAKjCH,EAAGqD,WAAWlD,GACd,IAAI,IAAImD,EAAI,EAAGA,EAAItB,EAAYsB,IAAK,CAClCpB,EAAalC,EAAIsD,GACjB,IAAI,aAACC,EAAY,YAAEC,GAAevB,EAAQqB,GAC1CtD,EAAGyD,WACc,aAAf1B,EAA4B/B,EAAG0D,UAChB,aAAf3B,EAA4B/B,EAAG2D,eAC/B3D,EAAG4D,aAAcL,EAAcC,IAI9B,SAASK,EAAuB7D,EAA2BG,EAAsB0B,EAA6BK,GACjHlC,EAAGmC,WAAW,EAAK,EAAK,EAAK,GAC7BnC,EAAGoC,WAAW,GACdpC,EAAGqC,OAAOrC,EAAGsC,YACbtC,EAAGuC,UAAUvC,EAAGwC,QAIhBxC,EAAGyC,MAAMzC,EAAG0C,iBAAmB1C,EAAG2C,kBAIlC,CACE,MAAMmB,EAAgB,EAChB7D,EAAOD,EAAG4C,MACVC,GAAY,EACZC,EAAS,EAETC,EAAS,EACf/C,EAAGgD,WAAWhD,EAAGiD,aAAcpB,GAC/B7B,EAAGkD,oBACGlD,EAAGmD,kBAAkBhD,EAAQ,mBAC7B2D,EACA7D,EACA4C,EACAC,EACAC,GACN/C,EAAGoD,wBACDpD,EAAGmD,kBAAkBhD,EAAQ,oBAKjCH,EAAGqD,WAAWlD,GACd+B,EAAalC,GACbA,EAAGyD,WAAWzD,EAAG2D,eAAgB,EAAG,GAGjC,SAASI,EAA6B/D,EAA2BgE,EAAeC,EAAcC,EAAgBC,GAEhH,MAAMtC,EAAiB7B,EAAGoE,eAI1BpE,EAAGgD,WAAWhD,EAAGiD,aAAcpB,GAE/B,MAAMwC,EAAIL,MAAAA,EAAAA,GAAS,EACbM,EAAIJ,MAAAA,EAAAA,EAAS,EACbK,EAAIN,MAAAA,EAAAA,GAAQ,EACZO,EAAIL,MAAAA,EAAAA,EAAU,EAGdM,EAAY,CACdD,EAAGF,EACHC,EAAGD,EACHE,EAAGH,EACHE,EAAGF,GAUP,OAJArE,EAAG0E,WAAW1E,EAAGiD,aACH,IAAI0B,aAAaF,GACjBzE,EAAG4E,aAEV/C,EAGL,SAASgD,EAAa7E,EAA2B8E,GACtD,MAAMjD,EAAiB7B,EAAGoE,eAQ1B,OANApE,EAAGgD,WAAWhD,EAAGiD,aAAcpB,GAE/B7B,EAAG0E,WAAW1E,EAAGiD,aACH,IAAI0B,aAAaG,GACjB9E,EAAG4E,aAEV/C,E,uEAGF,MAAMkD,EAAsB,mJAOtBC,EAA4B,0J,gCCrMzC,MACA,EADkB,IAblB,oBACI,KAAAC,KAAO,OACP,KAAAC,eAAiB,0M,gCCOrB,MACA,EADuB,IATvB,oBACI,KAAAD,KAAO,YACP,KAAAC,eAAiB,oF,gCCyBrB,MACA,EADiB,IA3BjB,oBACI,KAAAD,KAAO,MACP,KAAAC,eAAiB,6gB,gCCUrB,MACA,EADiB,IAZjB,oBACI,KAAAD,KAAO,QACP,KAAAC,eAAiB,6J,yFCErB,MAMA,EANoC,C,QAChC,EACA,IACA,IACA,KCDG,SAASC,EAAIC,EAAcZ,GAA2B,OAAOY,EAAEC,KAAI,CAACC,EAAGhC,IAAMgC,EAAId,EAAElB,KAKnF,SAASiC,EAASH,EAAcZ,GACnC,MAAO,CACHY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GACnDY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GACnDY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GACnDY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,ICE3D,MACA,EADoB,IAjBpB,oBAEI,KAAAS,KAAe,eACf,KAAAO,WAAqB,8EAKrB,KAAAC,aAAuB,GAEvBC,QAAQC,EAAcC,GAElB,IAAIC,EAAOF,EAAEN,IAAIS,KAAKC,KACtB,OAAOZ,EAAII,EAASM,EAAMA,GAAOD,KCNzC,EANiC,CCWd,IAbnB,oBAEI,KAAAX,KAAe,aACf,KAAAO,WAAqB,2BAErB,KAAAC,aAAuB,EAEvBC,QAAQC,EAAcC,GAElB,OAAOT,EAAII,EAASI,EAAGA,GAAIC,KDL/B,EEUY,IAdhB,oBAEI,KAAAX,KAAe,UACf,KAAAO,WAAqB,+CAErB,KAAAC,aAAuB,EAEvBC,QAAQC,EAAcC,GAElB,IAAII,EJW+C,EAAjCZ,EIXAO,GJWoC,IAAKP,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAA5E,IAAmBA,EIVlB,OAAOD,EAAII,EAASS,EAAGA,GAAIJ,M,cCbpB,SAASK,IACtB,OAAO,IAAIC,OAAO,IAA0B,4BCK/B,MAAMC,EAcjBC,YAAmBC,GAAA,KAAAA,OAAAA,EACfC,KAAKtG,GAAKqG,EAAOE,WAAW,SAAU,CAAEC,oBAAoB,IAC5DF,KAAKG,iBAAmB,EAG5BC,KAAKC,GACD,MAAM3G,EAAKsG,KAAKtG,GAEhBsG,KAAKM,QAAU,KAAuB5G,EAAI6G,EAAaC,GACvDR,KAAKS,OAAS/G,EAAGoE,eACjBpE,EAAGgD,WAAWhD,EAAGiD,aAAcqD,KAAKS,QACpC,MAAMC,EAAMhH,EAAGmD,kBAAkBmD,KAAKM,QAAS,cAC/C5G,EAAGkD,oBAAoB8D,EAAK,EAAGhH,EAAG4C,OAAO,EAAO,EAAG,GACnD5C,EAAGoD,wBAAwB4D,GAC3BhH,EAAGqD,WAAWiD,KAAKM,SAEnBN,KAAKW,SAAW,CACZC,cAAelH,EAAGmH,mBAAmBb,KAAKM,QAAS,iBACnDQ,cAAepH,EAAGmH,mBAAmBb,KAAKM,QAAS,iBACnDS,OAAQrH,EAAGmH,mBAAmBb,KAAKM,QAAS,gBAGhBU,IAA7BhB,KAAKiB,qBAAmCjB,KAAKiB,oBAAoBC,YACpElB,KAAKiB,oBAAsB,IAAI,EAC/BjB,KAAKiB,oBAAoBE,iBAAiB,WAAWC,IACjD,MAAMC,EAAMD,EAAEE,KACd5H,EAAG0E,WAAW1E,EAAGiD,aAAc0E,EAAIC,KAAM5H,EAAG4E,aAC5C0B,KAAKG,iBAAmBkB,EAAIC,KAAKC,OAAS,EACpB,KAAnBF,EAAIG,YACHxB,KAAKyB,aACNJ,EAAIG,WAAa,KAChBxB,KAAK0B,mBAAmB1B,KAAKiB,oBAAqBZ,EAASgB,EAAIG,WAAa,OAGpFxB,KAAK0B,mBAAmB1B,KAAKiB,oBAAqBZ,EAAS,IAG/DqB,mBAAmBC,EAAuBtB,EAAmBmB,GACzD,IAAII,EAAuB,CACvBC,KAAM,EAAE,GAAI,GAAI,GAChBC,GAAI,CAAC,EAAG,EAAG,GACXN,WAAAA,EACAO,YAAa1B,EAAQ1B,KACrBqD,YAAa,KAEjBL,EAAOM,YAAYL,GAIvBM,UACI,MAAMxI,EAAKsG,KAAKtG,GAChBA,EAAGyI,cAAcnC,KAAKM,SACtB5G,EAAG0I,aAAapC,KAAKS,aACWO,IAA7BhB,KAAKiB,qBAAmCjB,KAAKiB,oBAAoBC,iBACvCF,IAA1BhB,KAAKqC,kBAAgCC,qBAAqBtC,KAAKqC,kBAItEZ,WAAYc,GACRA,EAAOA,MAAAA,EAAAA,EAAQ,EACfvC,KAAKwC,OAAOD,GACZvC,KAAKqC,iBAAmBI,uBAAsB,IAAIzC,KAAKyB,WAAWc,EAAO,KAG7EC,OAAOvE,GACH,GAAG+B,KAAKG,iBAAkB,CACtB,MAAMzG,EAAKsG,KAAKtG,GAChB,IAAIgJ,EAAa,CAAC1C,KAAKD,OAAO4C,YAAa3C,KAAKD,OAAO6C,cACvDlJ,EAAGmJ,SAAS,EAAG,EAAGH,EAAW,GAAIA,EAAW,IAC5C1C,KAAKD,OAAO+C,MAAQJ,EAAW,GAC/B1C,KAAKD,OAAOgD,OAASL,EAAW,GAEhChJ,EAAGsJ,UAAUhD,KAAKW,SAASI,OAAQ9C,EAAI,IACvC,MAAMqB,EAAIE,KAAKyD,IAAIzD,KAAK0D,GAAKjF,EAAI,KAC3BkF,EAAI3D,KAAK4D,IAAI5D,KAAK0D,GAAKjF,EAAI,KAC3BoF,EAAK7D,KAAKyD,IAAIzD,KAAK0D,GAAKjF,EAAI,MAC5BqF,EAAK9D,KAAK4D,IAAI5D,KAAK0D,GAAKjF,EAAI,MAClCvE,EAAG6J,iBAAiBvD,KAAKW,SAASC,eAAe,EAAO,CACpDtB,EAAG,EAAG6D,EAAG,EACT,EAAG,EAAG,EAAG,GACRA,EAAG,EAAG7D,EAAG,EACV,EAAG,EAAG,EAAG,IAEb5F,EAAG6J,iBAAiBvD,KAAKW,SAASG,eAAe,EAAO,CACpD,EAAG,EAAG,EAAG,EACT,EAAGuC,GAAKC,EAAI,EACZ,EAAGA,EAAID,EAAI,EACX,EAAG,EAAG,EAAG,IAGb3J,EAAGmC,WAAW,EAAK,EAAK,EAAK,GAC7BnC,EAAGoC,WAAW,GACdpC,EAAG8J,QAAQ9J,EAAGsC,YAEdtC,EAAGyC,MAAMzC,EAAG0C,iBAAmB1C,EAAG2C,kBAClC3C,EAAGyD,WAAWzD,EAAG+J,OAAQ,EAAGzD,KAAKG,oBAK7C,MAAMK,EAAc,uKAadD,EAAc,6UCjIL,MAAMmD,EAgBjB5D,YAAmBC,GAAA,KAAAA,OAAAA,EACfC,KAAKtG,GAAKqG,EAAOE,WAAW,UAC5BD,KAAK2D,YAAc,CAAE3E,GAAI,EAAG4E,GAAI,EAAGvE,EAAG,EAAGwE,EAAG,GAGhDzD,KAAKC,EAAmByD,GACpB,MAAMpK,EAAKsG,KAAKtG,GACVqK,EAAe,EAChBC,QAAQ,qBAAsB3D,EAAQnB,YACtC8E,QAAQ,mBAAoBF,EAAMlF,gBAClCoF,QAAQ,iBAAkB3D,EAAQlB,aAAa8E,QAAQ,IAE5DjE,KAAKM,QAAU,KAAuB5G,EAAI,KAAgCqK,GAC1E/D,KAAKS,OAAS,KAAkC/G,GAChDA,EAAGgD,WAAWhD,EAAGiD,aAAcqD,KAAKS,QACpC,MAAMC,EAAMhH,EAAGmD,kBAAkBmD,KAAKM,QAAS,mBAC/C5G,EAAGkD,oBAAoB8D,EAAK,EAAGhH,EAAG4C,OAAO,EAAO,EAAG,GACnD5C,EAAGoD,wBAAwB4D,GAC3BhH,EAAGqD,WAAWiD,KAAKM,SAEnBN,KAAKW,SAAW,CACZuD,aAAcxK,EAAGmH,mBAAmBb,KAAKM,QAAS,gBAClD6D,cAAezK,EAAGmH,mBAAmBb,KAAKM,QAAS,iBACnD8D,SAAU1K,EAAGmH,mBAAmBb,KAAKM,QAAS,YAC9C+D,SAAU3K,EAAGmH,mBAAmBb,KAAKM,QAAS,YAC9CgE,UAAW5K,EAAGmH,mBAAmBb,KAAKM,QAAS,cAIvDiE,OAAOC,EAAYC,EAAYC,GAC3B1E,KAAK2D,YAAY3E,GAAKwF,EAAKxE,KAAK2D,YAAYE,EAC5C7D,KAAK2D,YAAYC,GAAKa,EAAKzE,KAAK2D,YAAYE,EAAI7D,KAAKD,OAAO6C,aAAe5C,KAAKD,OAAO4C,YACvF3C,KAAK2D,YAAYtE,GAAKqF,EAAK1E,KAAK2D,YAAYE,EAAI7D,KAAKD,OAAO6C,aAAe5C,KAAKD,OAAO4C,YAG3FgC,KAAKC,EAAiBC,EAAiBC,GACnC,IAAIC,EAAW/E,KAAK2D,YAAYE,EAAI,EAChCmB,EAAYhF,KAAK2D,YAAYE,GAAK7D,KAAKD,OAAO6C,aAAe5C,KAAKD,OAAO4C,aAAe,EACxF6B,EAAMxE,KAAK2D,YAAYE,EAAIkB,EAC3BN,EAAOzE,KAAK2D,YAAYE,EAAI7D,KAAKD,OAAO6C,aAAe5C,KAAKD,OAAO4C,YAAeqC,EACtFhF,KAAK2D,YAAc,CAAC3E,EAAGgB,KAAK2D,YAAY3E,EAAIwF,EAAKK,EAASjB,EAAG5D,KAAK2D,YAAYC,EAAIa,EAAKK,EAASzF,EAAGW,KAAK2D,YAAYtE,EAAGwE,EAAGkB,GAG9H7C,UACI,MAAMxI,EAAKsG,KAAKtG,GAChBA,EAAGyI,cAAcnC,KAAKM,SACtB5G,EAAG0I,aAAapC,KAAKS,QAGzB+B,SACI,IAAIE,EAAa,CAAC1C,KAAKD,OAAO4C,YAAa3C,KAAKD,OAAO6C,cACvD5C,KAAKtG,GAAGmJ,SAAS,EAAG,EAAGH,EAAW,GAAIA,EAAW,IACjD1C,KAAKD,OAAO+C,MAAQJ,EAAW,GAC/B1C,KAAKD,OAAOgD,OAASL,EAAW,GAEhC1C,KAAKtG,GAAGmC,WAAW,EAAK,EAAK,EAAK,GAClCmE,KAAKtG,GAAGyC,MAAM6D,KAAKtG,GAAG0C,kBAEtB4D,KAAKtG,GAAGuL,UAAUjF,KAAKW,SAASuD,aAAclE,KAAK2D,YAAY3E,EAAGgB,KAAK2D,YAAYC,GACnF5D,KAAKtG,GAAGuL,UAAUjF,KAAKW,SAASwD,cAAenE,KAAK2D,YAAYE,EAAG7D,KAAK2D,YAAYE,EAAInB,EAAW,GAAKA,EAAW,IAEnH1C,KAAKtG,GAAGwL,UAAUlF,KAAKW,SAASyD,SAAU,EAAG,EAAG,GAChDpE,KAAKtG,GAAGwL,UAAUlF,KAAKW,SAAS0D,SAAU,EAAG,EAAG,GAChDrE,KAAKtG,GAAGwL,UAAUlF,KAAKW,SAAS2D,UAAW,EAAG,EAAGtE,KAAK2D,YAAYtE,GAElEW,KAAKtG,GAAGyD,WAAW6C,KAAKtG,GAAG2D,eAAgB,EAAG,IAItD,MAAM,EAAc,89CCnFL,MAAM8H,EAIjBrF,YAAmBsF,EAAoCC,GAApC,KAAAD,SAAAA,EAAoC,KAAAC,SAAAA,EACnDrF,KAAKsF,cAAgB,IAAI5B,EAAc0B,GACvCpF,KAAKuF,eAAiB,IAAI1F,EAAewF,GAG7CG,MAAMnF,EAAmByD,GACrB9D,KAAKsF,cAAclF,KAAKC,EAASyD,GACjC9D,KAAKsF,cAAc9C,SACnBxC,KAAKuF,eAAenF,KAAKC,GAG7BkE,OAAOC,EAAYC,EAAYC,GAC3B1E,KAAKsF,cAAcf,OAAOC,EAAIC,EAAIC,GAClC1E,KAAKsF,cAAc9C,SAGvBmC,KAAKC,EAAiBC,EAAiBC,GACnC9E,KAAKsF,cAAcX,KAAKC,EAASC,EAASC,GAC1C9E,KAAKsF,cAAc9C,SAGvBN,UACIlC,KAAKsF,cAAcpD,UACnBlC,KAAKuF,eAAerD,WC5Bb,SAASuD,IACpB,MAAOpF,EAASqF,GAAc,WAAe,OACtC5B,EAAO6B,GAAY,WAAe,MAEnCC,EAAY,SAAgC,MAC5CC,EAAc,SAAgC,MAC9CC,EAAa,SAAsC,MAczD,IAAIC,EACAC,EA4BJ,SAASC,EAAc7E,GACI,IAAP,EAAZA,EAAE8E,WACFH,OAAc/E,GACK,IAAP,EAAZI,EAAE8E,WACFF,OAAUhF,GACdI,EAAE+E,iBACF/E,EAAEgF,kBAWN,OA1DA,aAAgB,KACZ,GAAyB,OAAtBR,EAAUS,SAA4C,OAAxBR,EAAYQ,QAAkB,OAE/D,MAAMC,EAAU,IAAInB,EAAwBS,EAAUS,QAASR,EAAYQ,SAI3E,OAHAP,EAAWO,QAAUC,EACrBA,EAAQd,MAAMnF,EAASyD,GAEhB,KAAOgC,EAAWO,aAAUrF,EAAWsF,EAAQpE,aAEvD,CAAC0D,EAAUS,QAASR,EAAYQ,QAAShG,EAASyD,IAiD9C,uBAAKyC,UAAU,oCAClB,uBAAKA,UAAU,YACX,0BAAQC,SAAUC,GAAMf,EAAW,EAAae,EAAGC,OAAOC,iBACrD,OAAiBC,GAAK,0BAAQC,SAAUD,IAAMvG,EAASyG,IAAKF,EAAEjI,MAAOiI,EAAEjI,SAE5E,0BAAQ6H,SAAUC,GAAMd,EAAS,EAAWc,EAAGC,OAAOC,iBACjD,OAAeC,GAAK,0BAAQC,SAAUD,IAAM9C,EAAOgD,IAAKF,EAAEjI,MAAOiI,EAAEjI,UAG5E,uBAAK4H,UAAU,+BACX,uBAAKQ,MAAO,CAAEjE,MAAO,MAAOC,OAAQ,SAChC,0BAAQiE,IAAKpB,EAAWmB,MAAO,CAACjE,MAAO,OAAQC,OAAO,OAAuBkE,YAtDzF,SAAyB7F,GACrBA,EAAE+E,iBACF/E,EAAEgF,kBACa,EAAZhF,EAAE8E,UACDH,EAAc,CAAC3E,EAAE8F,QAAS9F,EAAE+F,UACjB,EAAZ/F,EAAE8E,UACDF,EAAU5E,EAAE+F,UAgDmGC,UAAWnB,EAAeoB,YA7CjJ,SAAyBjG,GACrBA,EAAE+E,iBACF/E,EAAEgF,kBACF,IAAI5B,EAAK,EAAGC,EAAK,EAAGC,EAAK,OACN1D,IAAhB+E,IACCvB,EAAKpD,EAAE8F,QAAUnB,EAAY,GAC7BtB,EAAKrD,EAAE+F,QAAUpB,EAAY,GAC7BA,EAAc,CAAC3E,EAAE8F,QAAS9F,EAAE+F,eAEjBnG,IAAZgF,IACCtB,EAAKtD,EAAE+F,QAAUnB,EACjBA,EAAU5E,EAAE+F,SAGhBrB,EAAWO,QAAQ9B,QAAQC,EAAMpD,EAAEsF,OAA6B/D,YAAa8B,EAAOrD,EAAEsF,OAA6B9D,aAAc8B,EAAMtD,EAAEsF,OAA6B9D,eA+BK0E,QAnB/K,SAAsBlG,GAClBA,EAAE+E,iBACF/E,EAAEgF,kBACF,IAAImB,EAAKnG,EAAE8F,QAAW9F,EAAEsF,OAA6B/D,YACjD6E,EAAKpG,EAAE+F,QAAW/F,EAAEsF,OAA6B9D,aACrDkD,EAAWO,QAAQ1B,KAAKnF,KAAKiI,IAAI,IAAKrG,EAAEsG,OAASlI,KAAKC,IAAI2B,EAAEsG,SAAUH,EAAI,EAAEC,IAcsHG,aAAc1B,KAE5M,uBAAKc,MAAO,CAAEjE,MAAO,MAAOC,OAAQ,SAChC,0BAAQiE,IAAKnB,EAAakB,MAAO,CAAEjE,MAAO,OAAQC,OAAQ","sources":["webpack://trading-game/./src/projects/common/3d/GlslHelpers.ts","webpack://trading-game/./src/projects/glsl-fracaudio/ColorFunctions/FireColor.ts","webpack://trading-game/./src/projects/glsl-fracaudio/ColorFunctions/GrayscaleColor.ts","webpack://trading-game/./src/projects/glsl-fracaudio/ColorFunctions/HueColor.ts","webpack://trading-game/./src/projects/glsl-fracaudio/ColorFunctions/PaperColor.ts","webpack://trading-game/./src/projects/glsl-fracaudio/ColorFunctions/index.ts","webpack://trading-game/./src/projects/glsl-geomfrac/geom/Complex3d.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/BurningShip.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/index.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/Mandelbrot.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/Tricorn.ts","webpack://trading-game/./src/projects/glsl-geomfrac/workers/Sampler.worker.ts","webpack://trading-game/./src/projects/glsl-geomfrac/SampleRenderer.ts","webpack://trading-game/./src/projects/glsl-geomfrac/SliceRenderer.ts","webpack://trading-game/./src/projects/glsl-geomfrac/GeometricFractalControl.ts","webpack://trading-game/./src/views/projects/glsl-geomfrac/GlslGeomFracComponent.tsx"],"sourcesContent":["export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\n    const shader = gl.createShader(type);\n    // Send the source to the shader object\n    gl.shaderSource(shader, source);\n    // Compile the shader program\n    gl.compileShader(shader);\n    // See if it compiled successfully\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(source);\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return undefined;\n    }\n\n    return shader;\n}\n\n\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n      return undefined;\n    }\n\n    return shaderProgram;\n  }\n\n\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n      const normalize = false;  // don't normalize\n      const stride = 0;         // how many bytes to get from one set of values to the next\n                                // 0 = use type and numComponents above\n      const offset = 0;         // how many bytes inside the buffer to start from\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n      gl.vertexAttribPointer(\n            gl.getAttribLocation(shader, 'aVertexPosition'),\n            positionNumComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n      gl.enableVertexAttribArray(\n        gl.getAttribLocation(shader, 'aVertexPosition'));\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(shader);\n    bindUniforms(gl);\n    gl.drawArrays(\n      renderMode === 'triangle' ? gl.TRIANGLES :\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\n}\n\n\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n  gl.clearDepth(1.0);                 // Clear everything\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n  // Clear the canvas before we start drawing on it.\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Tell WebGL how to pull out the positions from the position\n  // buffer into the vertexPosition attribute.\n  {\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n    const normalize = false;  // don't normalize\n    const stride = 0;         // how many bytes to get from one set of values to the next\n                              // 0 = use type and numComponents above\n    const offset = 0;         // how many bytes inside the buffer to start from\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(\n          gl.getAttribLocation(shader, 'aVertexPosition'),\n          positionNumComponents,\n          type,\n          normalize,\n          stride,\n          offset);\n    gl.enableVertexAttribArray(\n      gl.getAttribLocation(shader, 'aVertexPosition'));\n  }\n\n  // Tell WebGL to use our program when drawing\n\n  gl.useProgram(shader);\n  for(let i = 0; i < drawCounts; i++) {\n    bindUniforms(gl, i);\n    let {bufferOffset, bufferCount} = getGeom(i);\n    gl.drawArrays(\n      renderMode === 'triangle' ? gl.TRIANGLES :\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\n  }\n}\n\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const numComponents = 2;  // pull out 2 values per iteration\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n      const normalize = false;  // don't normalize\n      const stride = 0;         // how many bytes to get from one set of values to the next\n                                // 0 = use type and numComponents above\n      const offset = 0;         // how many bytes inside the buffer to start from\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n      gl.vertexAttribPointer(\n            gl.getAttribLocation(shader, 'aVertexPosition'),\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n      gl.enableVertexAttribArray(\n        gl.getAttribLocation(shader, 'aVertexPosition'));\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(shader);\n    bindUniforms(gl);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\n\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\n     // Create a buffer for the square's positions.\n     const positionBuffer = gl.createBuffer();\n\n     // Select the positionBuffer as the one to apply buffer\n     // operations to from here out.\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n     const l = left ?? -1.0;\n     const r = right ?? 1.0;\n     const t = top ?? -1.0;\n     const b = bottom ?? 1.0;\n \n     // Now create an array of positions for the square.\n     const positions = [\n         b, r,\n         t, r,\n         b, l,\n         t, l,\n     ];\n \n     // Now pass the list of positions into WebGL to build the\n     // shape. We do this by creating a Float32Array from the\n     // JavaScript array, then use it to fill the current buffer.\n     gl.bufferData(gl.ARRAY_BUFFER,\n                   new Float32Array(positions),\n                   gl.STATIC_DRAW);\n \n     return positionBuffer;\n}\n\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\n  const positionBuffer = gl.createBuffer();\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  gl.bufferData(gl.ARRAY_BUFFER,\n                new Float32Array(components),\n                gl.STATIC_DRAW);\n\n  return positionBuffer;\n}\n\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\nvarying vec3 vPos;\nvoid main() {\n  vPos = vec3(aVertexPosition.xy, 0.0);\n  gl_Position = aVertexPosition;\n}`;\n\nexport const defaultWebGl2VertexShader = `#version 300 es\nin vec4 aVertexPosition;\nout vec3 vPos;\nvoid main() {\n  vPos = vec3(aVertexPosition.xy, 0.0);\n  gl_Position = aVertexPosition;\n}`;","import { IColorFunction } from \"./IColorFunction\";\n\nclass FireColor implements IColorFunction {\n    Name = 'Fire';\n    shaderFunction = `\nvec3 floatToColor(float perc) {\n    if(perc <= 0.5) {\n        return vec3(perc * 2.0, perc, 0.0);\n    }\n    perc = (perc - 0.5) * 2.0;\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\n}\n    `;\n}\n\nconst fireColor = new FireColor();\nexport default fireColor;","import { IColorFunction } from \"./IColorFunction\";\n\nclass GrayscaleColor implements IColorFunction {\n    Name = 'Grayscale';\n    shaderFunction = `\nvec3 floatToColor(float perc) {\n    return vec3(perc, perc, perc);\n}\n    `;\n}\n\nconst grayscaleColor = new GrayscaleColor();\nexport default grayscaleColor;","import { IColorFunction } from \"./IColorFunction\";\n\nclass HueColor implements IColorFunction {\n    Name = 'Hue';\n    shaderFunction = `\n\nfloat fmod(float a, float b) {\n    return a - (b * floor(a/b));\n}\n\nfloat hsvComponentToRgb(vec3 hsv, float n) {\n    float k = fmod((n + hsv.x * 6.0), 6.0);\n    return hsv.z - hsv.z * hsv.y * max(min(min(k, 4.0-k),1.0), 0.0);\n}\n\nvec3 floatToColor(float perc) {\n    if(perc == 1.0) {\n        return vec3(0, 0, 0);\n    }\n    vec3 hsv = vec3(perc, 1.0, 1.0);\n    return vec3(\n        hsvComponentToRgb(hsv, 5.0),\n        hsvComponentToRgb(hsv, 3.0),\n        hsvComponentToRgb(hsv, 1.0)\n    );\n}\n    `;\n}\n\nconst hueColor = new HueColor();\nexport default hueColor;","import { IColorFunction } from \"./IColorFunction\";\n\nclass PaperColor implements IColorFunction {\n    Name = 'Paper';\n    shaderFunction = `\nvec3 floatToColor(float perc) {\n    if(perc == 1.0) {\n        return vec3(0, 0, 0);\n    }\n    return vec3(0.8, 0.8, 0.8) - (perc * 0.8);\n}\n    `;\n}\n\nconst pueColor = new PaperColor();\nexport default pueColor;","import fireColor from './FireColor';\nimport grayscaleColor from './GrayscaleColor';\nimport hueColor from './HueColor';\nimport { IColorFunction } from './IColorFunction';\nimport paperColor from './PaperColor';\n\nconst ALL_COLORS:IColorFunction[] = [\n    paperColor,\n    hueColor,\n    grayscaleColor,\n    fireColor\n];\nexport default ALL_COLORS;","// The geometric equivalent of a 3d \"Complex number\"\n// Really it's a scalar and a bivector, since that's \"primitive\" that fractals operate on\n// Even though there's 4 components, it's still 3d.\n\n// Basis is [0] = scalar, [1] = XY, [2] = YZ, [3] = ZX\n// Translates to GLSL as X = Scalar, Y = XY, Z = YZ, W = ZX\ntype Complex3d = [number, number, number, number];\nexport default Complex3d;\n\nexport function add(a: Complex3d, b: Complex3d): Complex3d { return a.map((x, i) => x + b[i]) as Complex3d; }\nexport function negate(a: Complex3d): Complex3d { return a.map(x => -x) as Complex3d; }\nexport function subtract(a: Complex3d, b: Complex3d): Complex3d { return a.map((x, i) => x - b[i]) as Complex3d; }\n\n// Geometric product of two \"complex numbers\"\nexport function multiply(a: Complex3d, b:Complex3d):Complex3d {\n    return [\n        a[0] * b[0] - a[1] * b[1] - a[2] * b[2] - a[3] * b[3],\n        a[0] * b[1] + a[1] * b[0] - a[2] * b[3] + a[3] * b[2],\n        a[0] * b[2] + a[1] * b[3] + a[2] * b[0] - a[3] * b[1],\n        a[0] * b[3] - a[1] * b[2] + a[2] * b[1] + a[3] * b[0]\n    ];\n}\n\nexport function conjugate(a: Complex3d):Complex3d { return [a[0], -a[1], -a[2], -a[3]] as Complex3d; }\n\nexport function dot(a: Complex3d, b: Complex3d): number { return a.map((x, i) => x * b[i]).reduce((a, b) => a + b); }","import { Complex } from \"../../common\";\nimport Complex3d, { add, multiply } from \"../geom/Complex3d\";\nimport { IFractal } from \"./IFractal\";\n\nclass BurningShip implements IFractal\n{\n    Name: string = 'Burning Ship';\n    ShaderCode: string = `\n        vec4 zabs = abs(z);\n        return c_mult(zabs, zabs) + c;\n    `;\n\n    MaxAmplitude: number = 16;\n\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\n    {\n        let zabs = z.map(Math.abs) as Complex3d;\n        return add(multiply(zabs, zabs), c);\n    }\n}\n\nconst burningShip = new BurningShip();\nexport default burningShip;","import burningShip from \"./BurningShip\";\nimport { IFractal } from \"./IFractal\";\nimport mandelbrot from \"./Mandelbrot\";\nimport tricorn from \"./Tricorn\";\n\nconst ALL_FRACTALS: IFractal[] = [\n    mandelbrot,\n    burningShip,\n    tricorn\n];\n\nexport default ALL_FRACTALS;","import Complex3d, { add, multiply } from \"../geom/Complex3d\";\nimport { IFractal } from \"./IFractal\";\n\nclass Mandelbrot implements IFractal\n{\n    Name: string = 'Mandelbrot';\n    ShaderCode: string = `return c_mult(z, z) + c;`;\n\n    MaxAmplitude: number = 2;\n\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\n    {\n        return add(multiply(z, z), c);\n    }\n}\n\nconst mandelbrot = new Mandelbrot();\nexport default mandelbrot;","import Complex3d, { add, conjugate, multiply } from \"../geom/Complex3d\";\nimport { IFractal } from \"./IFractal\";\n\nclass Tricorn implements IFractal\n{\n    Name: string = 'Tricorn';\n    ShaderCode: string = `vec4 j = c_conj(z); return c_mult(j, j) + c;`;\n\n    MaxAmplitude: number = 2;\n\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\n    {\n        let j = conjugate(z);\n        return add(multiply(j, j), c);\n    }\n}\n\nconst tricorn = new Tricorn();\nexport default tricorn;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"Sampler.worker.worker.js\");\n}\n","import * as GLSL from \"../common/3d/GlslHelpers\";\nimport { IColorFunction } from \"../glsl-fracaudio/ColorFunctions/IColorFunction\";\nimport { IFractal } from \"./Fractals/IFractal\";\nimport SamplerWorker from './workers/Sampler.worker.ts';\nimport { ISamplerRequest, ISamplerResponse } from \"./workers/SamplerReq\";\n\nexport default class SampleRenderer {\n    gl: WebGL2RenderingContext;\n    program: WebGLProgram;\n    buffer: WebGLBuffer;\n\n    operationInProgress: Worker | undefined;\n    bufferDataLength: number;\n\n    renderLoopHandle: number;\n\n    uniforms: {\n        [key: string]: WebGLUniformLocation;\n    };\n\n    constructor(public canvas: HTMLCanvasElement) {\n        this.gl = canvas.getContext(\"webgl2\", { premultipliedAlpha: false });\n        this.bufferDataLength = 0;\n    }\n\n    init(fractal: IFractal) {\n        const gl = this.gl;\n\n        this.program = GLSL.initShaderProgram(gl, VERT_SHADER, FRAG_SHADER);\n        this.buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n        const pos = gl.getAttribLocation(this.program, \"a_position\");\n        gl.vertexAttribPointer(pos, 4, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(pos);\n        gl.useProgram(this.program);\n\n        this.uniforms = {\n            u_transform_1: gl.getUniformLocation(this.program, \"u_transform_1\"),\n            u_transform_2: gl.getUniformLocation(this.program, \"u_transform_2\"),\n            u_time: gl.getUniformLocation(this.program, \"u_time\"),\n        };\n\n        if(this.operationInProgress !== undefined) this.operationInProgress.terminate();\n        this.operationInProgress = new SamplerWorker();\n        this.operationInProgress.addEventListener('message', e => {\n            const res = e.data as ISamplerResponse;\n            gl.bufferData(gl.ARRAY_BUFFER, res.data, gl.STATIC_DRAW);\n            this.bufferDataLength = res.data.length / 4;\n            if(res.resolution === 50)\n                this.renderLoop();\n            if(res.resolution < 250)\n                this.bufferAtResolution(this.operationInProgress, fractal, res.resolution + 50);\n        });\n\n        this.bufferAtResolution(this.operationInProgress, fractal, 50);\n    }\n\n    bufferAtResolution(worker: SamplerWorker, fractal: IFractal, resolution: number){\n        let req: ISamplerRequest = {\n            from: [-1, -1, -1],\n            to: [1, 1, 1],\n            resolution,\n            fractalName: fractal.Name,\n            sampleFloor: 0.15,\n        };\n        worker.postMessage(req);\n    }\n\n\n    destroy(){\n        const gl = this.gl;\n        gl.deleteProgram(this.program);\n        gl.deleteBuffer(this.buffer);\n        if(this.operationInProgress !== undefined) this.operationInProgress.terminate();\n        if(this.renderLoopHandle !== undefined) cancelAnimationFrame(this.renderLoopHandle);\n    }\n\n\n    renderLoop( time?: number){\n        time = time ?? 0;\n        this.render(time);\n        this.renderLoopHandle = requestAnimationFrame(()=>this.renderLoop(time + 1));\n    }\n\n    render(t: number) {\n        if(this.bufferDataLength) {\n            const gl = this.gl;\n            let canvasSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n            gl.viewport(0, 0, canvasSize[0], canvasSize[1]);\n            this.canvas.width = canvasSize[0];\n            this.canvas.height = canvasSize[1];\n\n            gl.uniform1f(this.uniforms.u_time, t / 60);\n            const c = Math.cos(Math.PI * t / 360);\n            const s = Math.sin(Math.PI * t / 360);\n            const c2 = Math.cos(Math.PI * t / 3600);\n            const s2 = Math.sin(Math.PI * t / 3600);\n            gl.uniformMatrix4fv(this.uniforms.u_transform_1, false, [\n                c, 0, s, 0,\n                0, 1, 0, 0,\n                -s, 0, c, 0,\n                0, 0, 0, 1,\n            ]);\n            gl.uniformMatrix4fv(this.uniforms.u_transform_2, false, [\n                1, 0, 0, 0,\n                0, c2, -s2, 0,\n                0, s2, c2, 0,\n                0, 0, 0, 1,\n            ]);\n\n            gl.clearColor(0.0, 0.0, 0.0, 1.0);\n            gl.clearDepth(1.0);\n            gl.disable(gl.DEPTH_TEST);\n            // gl.depthFunc(gl.LEQUAL);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n            gl.drawArrays(gl.POINTS, 0, this.bufferDataLength);\n        }\n    }\n}\n\nconst FRAG_SHADER = `#version 300 es\n\nprecision highp float;\n\nout vec4 outColor;\n\nin float v_sample;\n\nvoid main() {\n    outColor = vec4(v_sample, v_sample, v_sample, 1.0);\n}\n`;\n\nconst VERT_SHADER = `#version 300 es\n\nuniform mat4 u_transform_1;\nuniform mat4 u_transform_2;\nuniform float u_time;\n\nin vec4 a_position;\nout float v_sample;\n\nvoid main() {\n    v_sample = a_position.w;\n    vec4 pos = a_position * u_transform_1 * u_transform_2;\n    gl_Position = pos.xyzz;\n    gl_PointSize = (v_sample*v_sample) * 2.0;\n}\n`;","import * as GLSL from \"../common/3d/GlslHelpers\";\nimport { IColorFunction } from \"../glsl-fracaudio/ColorFunctions/IColorFunction\";\nimport { IFractal } from \"./Fractals/IFractal\";\n\nexport default class SliceRenderer {\n    gl: WebGL2RenderingContext;\n    program: WebGLProgram;\n    buffer: WebGLBuffer;\n    \n    sliceWindow: {x: number, y: number, z: number, w: number};\n\n    uniforms: {\n        u_window_pos: WebGLUniformLocation;\n        u_window_size: WebGLUniformLocation;\n\n        u_x_axis: WebGLUniformLocation;\n        u_y_axis: WebGLUniformLocation;\n        u_z_slice: WebGLUniformLocation;\n    };\n\n    constructor(public canvas: HTMLCanvasElement) {\n        this.gl = canvas.getContext(\"webgl2\");\n        this.sliceWindow = { x: -1, y: -1, z: 0, w: 2 };\n    }\n\n    init(fractal: IFractal, color: IColorFunction) {\n        const gl = this.gl;\n        const fragmentCode = FRAG_SHADER\n            .replace(\"[[[FRACTAL_CODE]]]\", fractal.ShaderCode)\n            .replace(\"[[[COLOR_CODE]]]\", color.shaderFunction)\n            .replace(\"[[[MAX_DIST]]]\", fractal.MaxAmplitude.toFixed(2));\n\n        this.program = GLSL.initShaderProgram(gl, GLSL.defaultWebGl2VertexShader, fragmentCode);\n        this.buffer = GLSL.fragmentShaderOnlyInitBuffer(gl);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n        const pos = gl.getAttribLocation(this.program, \"aVertexPosition\");\n        gl.vertexAttribPointer(pos, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(pos);\n        gl.useProgram(this.program);\n\n        this.uniforms = {\n            u_window_pos: gl.getUniformLocation(this.program, \"u_window_pos\"),\n            u_window_size: gl.getUniformLocation(this.program, \"u_window_size\"),\n            u_x_axis: gl.getUniformLocation(this.program, \"u_x_axis\"),\n            u_y_axis: gl.getUniformLocation(this.program, \"u_y_axis\"),\n            u_z_slice: gl.getUniformLocation(this.program, \"u_z_slice\"),\n        };\n    }\n\n    scroll(dx: number, dy: number, dz: number) {\n        this.sliceWindow.x += dx * this.sliceWindow.w;\n        this.sliceWindow.y += dy * this.sliceWindow.w * this.canvas.clientHeight / this.canvas.clientWidth;\n        this.sliceWindow.z += dz * this.sliceWindow.w * this.canvas.clientHeight / this.canvas.clientWidth;\n    }\n    \n    zoom(percent: number, anchorX: number, anchorY: number) {\n        let newWidth = this.sliceWindow.w * (percent);\n        let newHeight = this.sliceWindow.w * (this.canvas.clientHeight / this.canvas.clientWidth) * (percent);\n        let dx = (this.sliceWindow.w - newWidth);\n        let dy = ((this.sliceWindow.w * this.canvas.clientHeight / this.canvas.clientWidth) - newHeight);\n        this.sliceWindow = {x: this.sliceWindow.x + dx * anchorX, y: this.sliceWindow.y + dy * anchorY, z: this.sliceWindow.z, w: newWidth};\n    }\n\n    destroy(){\n        const gl = this.gl;\n        gl.deleteProgram(this.program);\n        gl.deleteBuffer(this.buffer);\n    }\n\n    render() {\n        let canvasSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        this.gl.viewport(0, 0, canvasSize[0], canvasSize[1]);\n        this.canvas.width = canvasSize[0];\n        this.canvas.height = canvasSize[1];\n\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n        this.gl.uniform2f(this.uniforms.u_window_pos, this.sliceWindow.x, this.sliceWindow.y);\n        this.gl.uniform2f(this.uniforms.u_window_size, this.sliceWindow.w, this.sliceWindow.w * canvasSize[1] / canvasSize[0]);\n\n        this.gl.uniform3f(this.uniforms.u_x_axis, 1, 0, 0);\n        this.gl.uniform3f(this.uniforms.u_y_axis, 0, 1, 0);\n        this.gl.uniform3f(this.uniforms.u_z_slice, 0, 0, this.sliceWindow.z);\n\n        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    }\n}\n\nconst FRAG_SHADER = `#version 300 es\n\nprecision highp float;\nuniform vec2 u_window_pos;\nuniform vec2 u_window_size;\n\nuniform vec3 u_x_axis;\nuniform vec3 u_y_axis;\nuniform vec3 u_z_slice;\n\nout vec4 outColor;\n\nconst float MAX_ABSSQ = [[[MAX_DIST]]];\n\nin vec3 vPos;\n\nconst int MAX_ITER = 256;\n\nvec4 c_mult(vec4 a, vec4 b) {\n    return vec4(\n        a.x*b.x - a.y*b.y - a.z*b.z - a.w*b.w,\n        a.x*b.y + a.y*b.x - a.z*b.w + a.w*b.z,\n        a.x*b.z + a.y*b.w + a.z*b.x - a.w*b.y,\n        a.x*b.w - a.y*b.z + a.z*b.y + a.w*b.x\n    );\n}\nvec4 c_conj(vec4 a) {\n    return vec4(a.x, -a.y, -a.z, -a.w);\n}\n\nfloat cplx_abssq(vec4 v) {\n    return dot(v, v);\n}\n\nvec4 step_fractal(vec4 z, vec4 c) {\n[[[FRACTAL_CODE]]]\n}\n\nfloat calcIterations(vec4 coords) {\n    vec4 roll = vec4(0,0,0,0);\n    for(int iter = 0; iter < MAX_ITER; iter++) {\n        roll = step_fractal(roll, coords);\n        if (cplx_abssq(roll) >= MAX_ABSSQ) {\n            return float(iter)/float(MAX_ITER);\n        }\n    }\n    return 1.0;\n}\n\n[[[COLOR_CODE]]]\n\nvoid main() {\n    vec2 adjPos = vPos.xy;\n    adjPos += 1.0;\n    adjPos /= 2.0;\n    // adjpos is now 0, 1\n    // Convert that to world-space\n    adjPos = u_window_pos + adjPos * u_window_size;\n\n    vec3 c3 = adjPos.x * u_x_axis + adjPos.y * u_y_axis + u_z_slice;\n\n    vec4 c = vec4(\n        c3.x,\n        -c3.y,\n        c3.z,\n        0.0\n    );\n\n    float mb_perc = calcIterations(c);\n    outColor = vec4(floatToColor(mb_perc), 1.0);\n}\n`;","import { IColorFunction } from \"../glsl-fracaudio/ColorFunctions/IColorFunction\";\nimport { IFractal } from \"./Fractals/IFractal\";\nimport SampleRenderer from \"./SampleRenderer\";\nimport SliceRenderer from \"./SliceRenderer\";\nimport SamplerWorker from './workers/Sampler.worker.ts';\n\nexport default class GeometricFractalControl {\n    sliceRenderer: SliceRenderer;\n    sampleRenderer: SampleRenderer;\n\n    constructor(public canvas2d: HTMLCanvasElement, public canvas3d: HTMLCanvasElement) {\n        this.sliceRenderer = new SliceRenderer(canvas2d);\n        this.sampleRenderer = new SampleRenderer(canvas3d);\n    }\n\n    start(fractal: IFractal, color: IColorFunction) {\n        this.sliceRenderer.init(fractal, color);\n        this.sliceRenderer.render();\n        this.sampleRenderer.init(fractal);\n    }\n\n    scroll(dx: number, dy: number, dz: number) {\n        this.sliceRenderer.scroll(dx, dy, dz);\n        this.sliceRenderer.render();\n    }\n    \n    zoom(percent: number, anchorX: number, anchorY: number) {\n        this.sliceRenderer.zoom(percent, anchorX, anchorY);\n        this.sliceRenderer.render();\n    }\n\n    destroy() {\n        this.sliceRenderer.destroy();\n        this.sampleRenderer.destroy();\n    }\n}","import * as React from 'react';\nimport ALL_COLORS from '../../../projects/glsl-fracaudio/ColorFunctions';\nimport ALL_FRACTALS from '../../../projects/glsl-geomfrac/Fractals';\nimport GeometricFractalControl from '../../../projects/glsl-geomfrac/GeometricFractalControl';\n\nexport default function GlslGeomFracComponent() {\n    const [fractal, setFractal] = React.useState(ALL_FRACTALS[0]);\n    const [color, setColor] = React.useState(ALL_COLORS[0]);\n\n    const canvasRef = React.useRef<HTMLCanvasElement>(null);\n    const canvas3dRef = React.useRef<HTMLCanvasElement>(null);\n    const controlRef = React.useRef<GeometricFractalControl>(null);\n\n    React.useEffect(() => {\n        if(canvasRef.current === null || canvas3dRef.current === null) return;\n\n        const control = new GeometricFractalControl(canvasRef.current, canvas3dRef.current);\n        controlRef.current = control;\n        control.start(fractal, color);\n        \n        return () => {controlRef.current = undefined; control.destroy();}\n\n    }, [canvasRef.current, canvas3dRef.current, fractal, color]);\n\n\n    let clickAnchor: undefined | [number, number] = undefined;\n    let zAnchor: number | undefined;\n\n    function handleMouseDown(e: React.MouseEvent<HTMLCanvasElement>) {\n        e.preventDefault();\n        e.stopPropagation();\n        if(e.buttons & 1)\n            clickAnchor = [e.clientX, e.clientY];\n        if(e.buttons & 4)\n            zAnchor = e.clientY;\n    }\n    \n    function handleMouseMove(e: React.MouseEvent<HTMLCanvasElement>) {\n        e.preventDefault();\n        e.stopPropagation();\n        let dx = 0, dy = 0, dz = 0;\n        if(clickAnchor !== undefined) {\n            dx = e.clientX - clickAnchor[0];\n            dy = e.clientY - clickAnchor[1];\n            clickAnchor = [e.clientX, e.clientY];\n        }\n        if(zAnchor !== undefined) {\n            dz = e.clientY - zAnchor;\n            zAnchor = e.clientY;\n        }\n\n        controlRef.current.scroll(-dx / (e.target as HTMLCanvasElement).clientWidth, dy  / (e.target as HTMLCanvasElement).clientHeight, dz / (e.target as HTMLCanvasElement).clientHeight);\n    }\n    \n    function handleMouseUp(e: React.MouseEvent<HTMLCanvasElement>) {\n        if((e.buttons & 1) === 0)\n            clickAnchor = undefined;\n        if((e.buttons & 4) === 0)\n            zAnchor = undefined;\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    function handleScroll(e: React.WheelEvent<HTMLCanvasElement>) {\n        e.preventDefault();\n        e.stopPropagation();\n        let xp = e.clientX / (e.target as HTMLCanvasElement).clientWidth;\n        let yp = e.clientY / (e.target as HTMLCanvasElement).clientHeight;\n        controlRef.current.zoom(Math.pow(1.1, e.deltaY / Math.abs(e.deltaY)), xp, 1-yp);\n    }\n\n    return <div className='flex col align-stretch full_body'>\n        <div className='flex row'>\n            <select onChange={ev => setFractal(ALL_FRACTALS[ev.target.selectedIndex])}>\n                {ALL_FRACTALS.map(f => <option selected={f === fractal} key={f.Name}>{f.Name}</option>)}\n            </select>\n            <select onChange={ev => setColor(ALL_COLORS[ev.target.selectedIndex])}>\n                {ALL_COLORS.map(f => <option selected={f === color} key={f.Name}>{f.Name}</option>)}\n            </select>\n        </div>\n        <div className='flex row grow align-stretch'>\n            <div style={{ width: '50%', height: '100%' }}>\n                <canvas ref={canvasRef} style={{width: '100%', height:'99%'/* Don't ask.*/}} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} onMouseMove={handleMouseMove} onWheel={handleScroll} onMouseLeave={handleMouseUp} />\n            </div>\n            <div style={{ width: '50%', height: '100%' }}>\n                <canvas ref={canvas3dRef} style={{ width: '100%', height: '99%'}} />\n            </div>\n        </div>\n    </div>;\n}"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","i","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","t","b","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","defaultWebGl2VertexShader","Name","shaderFunction","add","a","map","x","multiply","ShaderCode","MaxAmplitude","Iterate","z","c","zabs","Math","abs","j","Worker_fn","Worker","SampleRenderer","constructor","canvas","this","getContext","premultipliedAlpha","bufferDataLength","init","fractal","program","VERT_SHADER","FRAG_SHADER","buffer","pos","uniforms","u_transform_1","getUniformLocation","u_transform_2","u_time","undefined","operationInProgress","terminate","addEventListener","e","res","data","length","resolution","renderLoop","bufferAtResolution","worker","req","from","to","fractalName","sampleFloor","postMessage","destroy","deleteProgram","deleteBuffer","renderLoopHandle","cancelAnimationFrame","time","render","requestAnimationFrame","canvasSize","clientWidth","clientHeight","viewport","width","height","uniform1f","cos","PI","s","sin","c2","s2","uniformMatrix4fv","disable","POINTS","SliceRenderer","sliceWindow","y","w","color","fragmentCode","replace","toFixed","u_window_pos","u_window_size","u_x_axis","u_y_axis","u_z_slice","scroll","dx","dy","dz","zoom","percent","anchorX","anchorY","newWidth","newHeight","uniform2f","uniform3f","GeometricFractalControl","canvas2d","canvas3d","sliceRenderer","sampleRenderer","start","GlslGeomFracComponent","setFractal","setColor","canvasRef","canvas3dRef","controlRef","clickAnchor","zAnchor","handleMouseUp","buttons","preventDefault","stopPropagation","current","control","className","onChange","ev","target","selectedIndex","f","selected","key","style","ref","onMouseDown","clientX","clientY","onMouseUp","onMouseMove","onWheel","xp","yp","pow","deltaY","onMouseLeave"],"sourceRoot":""}