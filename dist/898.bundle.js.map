{"version":3,"file":"898.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/ant-colony/AntPath.ts","webpack://trading-game/./src/projects/ant-colony/ColonyState.ts","webpack://trading-game/./src/projects/ant-colony/index.ts","webpack://trading-game/./src/views/projects/ant-colony/AntColonyComponent.tsx"],"sourcesContent":["export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import { ColonyState } from \"./ColonyState\";\n\nexport class AntPath {\n    constructor(public path: number[], public cost: number) {\n\n    }\n\n    static runPath(state: ColonyState, signalPower: number, distPower: number, start: number) {\n        const hitmap = [];\n        const path = [start];\n        let pathCost = 0;\n        let index = start;\n        for(let i = 0; i < state.points.length; i++) {\n            hitmap.push(i === start);\n        }\n\n        for(let i = 0; i < state.points.length - 1; i++) {\n            let next = this.runStep(state, signalPower, distPower, hitmap, index);\n            pathCost += state.distance(index, next);\n            path.push(next);\n            index = next;\n            hitmap[next] = true;\n        }\n\n        return new AntPath(path, pathCost);\n    }\n\n    static runStep(state: ColonyState, signalPower: number, distPower: number, hitmap: boolean[], index: number) {\n        let pathWeights = [];\n        let weightSum = 0;\n        for(let i = 0; i < state.points.length; i++) {\n            if(index === i || hitmap[i]) pathWeights[i] = 0;\n            else {\n                let weight = Math.pow(1/state.distance(index, i), distPower) * Math.pow(state.weight(index, i), signalPower);\n                pathWeights.push( weight );\n                weightSum += weight;\n            }\n        }\n        let randomChoice = Math.random() * weightSum;\n        for(let i = 0; i < pathWeights.length; i++) {\n            if(hitmap[i]) continue;\n            randomChoice -= pathWeights[i];\n            if(randomChoice <= 0) return i;\n        }\n        return -1;\n    }\n}","import Point from \"../common/position/Point\";\n\nexport class ColonyState {\n    public points: Point[];\n    public signals: number[][];\n    public distances: number[][];\n    public maxDist: number;\n\n    constructor(pts: Point[])\n    {\n        this.points = pts;\n        this.initSignals();\n    }\n\n    private initSignals () {\n        this.signals = [];\n        this.distances = [];\n\n        this.maxDist = 0;\n        for(let from = 0; from < this.points.length; from++){\n            let row = [];\n            let distRow = [];\n            for(let to = from + 1; to < this.points.length; to++){\n                row.push(1);\n                let dist = Point.subtract(this.points[from], this.points[to]).length();\n                distRow.push(dist);\n                if(dist > this.maxDist) this.maxDist = dist;\n            }\n            this.signals.push(row);\n            this.distances.push(distRow);\n        }\n    }\n\n    setPoints(pts: Point[]){\n        this.points = pts;\n        this.initSignals();\n    }\n\n    clearWeights() {\n        for(let i = 0; i < this.signals.length; i++) {\n            for(let j = 0; j < this.signals[i].length; j++) {\n                this.signals[i][j] = 1;\n            }\n        }\n    }\n\n    multWeights(mult: number) {\n        for(let i = 0; i < this.signals.length; i++) {\n            for(let j = 0; j < this.signals[i].length; j++) {\n                this.signals[i][j] *= mult;\n            }\n        }\n    }\n\n    addWeights(path: number[], weight: number) {\n        for(let i = 0; i < path.length; i++) {\n            let j = (i + 1) % path.length;\n            this.weight(path[i], path[j], Math.max(0, Math.min(1, this.weight(path[i], path[j]) + weight)));\n        }\n    }\n\n    weight(from: number, to: number): number;\n    weight(from: number, to: number, value: number): void;\n    weight(from: number, to: number, value?: number): number | void {\n        const i1 = Math.min(from, to);\n        const i2 = Math.max(from, to) - i1 - 1;\n        if(value === undefined) {\n            return this.signals[i1][i2];\n        }\n        else {\n            if(isNaN(value)) throw \"WHAT\";\n            this.signals[i1][i2] = value;\n        }\n    }\n\n    distance(from: number, to: number): number {\n        const i1 = Math.min(from, to);\n        const i2 = Math.max(from, to) - i1 - 1;\n        return this.distances[i1][i2];\n    }\n\n    point(index: number): Point;\n    point(index: number, point: Point) : void;\n    point(index: number, point ?: Point) : void | Point {\n        if(point === undefined) return this.points[index];\n        this.points[index] = point;\n    }\n}","import { findMax, findMin, max, min } from \"../../LinqLike\";\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\nimport Point from \"../common/position/Point\";\nimport { AntPath } from \"./AntPath\";\nimport { ColonyState } from \"./ColonyState\";\nimport { IRenderSettings } from \"./IRenderSettings\";\nlet currentPaintLoop = -1;\n\n\nexport default function Run(settings: IRenderSettings, cvs: HTMLCanvasElement) {\n    stopPaintLoop();\n    ResizeCanvas(cvs, 800, 600);\n    const ctx = cvs.getContext('2d');\n\n    let state = init(cvs, ctx, settings.numPts);\n    paintLoop(cvs, ctx, settings, state);\n}\n\nexport function Cleanup() {\n    stopPaintLoop();\n}\n\nfunction stopPaintLoop() {\n    totalMinPath = null;\n    if(currentPaintLoop !== -1)\n        clearTimeout(currentPaintLoop);\n}\n\nlet totalMinPath: AntPath | null = null;\nfunction paintLoop(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, settings: IRenderSettings, state: ColonyState) {\n    const minPath = tick(settings, state);\n    if(totalMinPath === null || minPath.cost < totalMinPath.cost)\n        totalMinPath = minPath;\n    draw(canvas, ctx, state, minPath.path, totalMinPath.path);\n    // TS thinks setTimeout returns a NodeJS.Timeout (?)\n    currentPaintLoop = <number><any>setTimeout(() => paintLoop(canvas, ctx, settings, state), settings.delayPerFrame);\n}\n\nfunction tick(settings: IRenderSettings, state: ColonyState): AntPath {\n    let ants = [];\n    for(let i = 0; i < settings.numAnts; i++) {\n        ants.push(AntPath.runPath(state, settings.signalPower, settings.distancePower, 0));\n    }\n\n    state.multWeights(settings.signalDecay);\n\n    let maxSignalGain = 1 / settings.numAnts;\n    let shortestPath = findMin(ants, ant => ant.cost);\n    let longestPath = max(ants, ant => ant.cost);\n    for(const ant of ants) {\n        let antWeight: number;\n        if(shortestPath.cost === longestPath)\n            antWeight = 1;\n        else \n            antWeight = 1 - ((ant.cost - shortestPath.cost) / (longestPath - shortestPath.cost));\n        state.addWeights(ant.path, antWeight * maxSignalGain);\n    }\n\n    return shortestPath;\n}\n\nfunction init(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, numPts: number): ColonyState {\n    const points = [];\n    for(let i = 0; i < numPts; i++) {\n        points.push(new Point(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height)));\n    }\n    drawPoints(canvas, ctx, points);\n    let state = new ColonyState(points);\n    return state;\n}\n\nfunction drawPoints(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, points: Point[]) {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n    ctx.fillStyle = '#aaa';\n    ctx.beginPath();\n    for(let i = 0; i < points.length; i++) {\n        const point = points[i];\n        ctx.moveTo(point.x, point.y);\n        ctx.ellipse(point.x, point.y, 3, 3, 0, 0, Math.PI * 2);\n    }\n    ctx.fill();\n}\n\nfunction draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: ColonyState, currentBestPath?: number[], globalBestPath?: number[]) {\n    drawPoints(canvas, ctx, state.points);\n    ctx.strokeStyle = '#aaa';\n    for(let i = 0; i < state.points.length; i++) {\n        for(let j = 0; j < state.points.length; j++) {\n            if(i === j) continue;\n            ctx.beginPath();\n            ctx.lineWidth = state.weight(i, j) * 5;\n            ctx.moveTo(state.point(i).x, state.point(i).y);\n            ctx.lineTo(state.point(j).x, state.point(j).y);\n            ctx.stroke();\n        }\n    }\n    \n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'green';\n    if(currentBestPath !== undefined) {\n        ctx.beginPath();\n        ctx.moveTo(state.point(currentBestPath[0]).x, state.point(currentBestPath[0]).y);\n        for(let i = 1; i < currentBestPath.length; i++) {\n            ctx.lineTo(state.point(currentBestPath[i]).x, state.point(currentBestPath[i]).y);\n        }\n        ctx.stroke();\n    }\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'red';\n    if(globalBestPath !== undefined) {\n        ctx.beginPath();\n        ctx.moveTo(state.point(globalBestPath[0]).x, state.point(globalBestPath[0]).y);\n        for(let i = 1; i < globalBestPath.length; i++) {\n            ctx.lineTo(state.point(globalBestPath[i]).x, state.point(globalBestPath[i]).y);\n        }\n        ctx.stroke();\n    }\n\n}","import * as React from 'react';\nimport Run, { Cleanup } from '../../../projects/ant-colony/index';\nimport { IRenderSettings } from '../../../projects/ant-colony/IRenderSettings';\n\nexport default function AntColonyComponent() {\n    let ref = React.useRef<HTMLCanvasElement>();\n\n    let [state, setState] = React.useState<IRenderSettings>({\n        numPts: 100,\n        signalDecay: 0.7,\n        signalPower: 1.2,\n        distancePower: 4,\n        delayPerFrame: 6,\n        numAnts: 30,\n    });\n\n    React.useEffect(() => {\n        Run(state, ref.current);\n        return Cleanup;\n    }, [state, ref]);\n\n    return <div className='flex row'>\n        <canvas id='canvas' ref={ref} />\n        <div className='flex col'>\n            <AntColonyValueSliderComponent label='Number of Points: ' value={state.numPts} onChange={v => setState({...state, numPts: v})} min={3} max={200} step={1} type='number' />\n            <AntColonyValueSliderComponent label='Number of Ants: ' value={state.numAnts} onChange={v => setState({...state, numAnts: v})} min={1} max={100} step={1} type='number' />\n            <AntColonyValueSliderComponent label='Signal Decay: ' value={state.signalDecay} onChange={v => setState({...state, signalDecay: v})} min={0} max={1} step={0.1} type='float' />\n            <AntColonyValueSliderComponent label='Signal Power: ' value={state.signalPower} onChange={v => setState({...state, signalPower: v})} min={1} max={8} step={0.5} type='float' />\n            <AntColonyValueSliderComponent label='Distance Power: ' value={state.distancePower} onChange={v => setState({...state, distancePower: v})} min={1} max={8} step={0.5} type='float' />\n            <AntColonyValueSliderComponent label='Delay per Frame: ' value={state.delayPerFrame} onChange={v => setState({...state, delayPerFrame: v})} min={6} max={600} step={30} type='number' />\n        </div>\n    </div>;\n}\n\nfunction AntColonyValueSliderComponent(props: {label: string, value: number, onChange: (value: number) => void, min: number, max: number, step: number, type: 'float' | 'number'}) {\n    return <div>\n        <label>{props.label}</label>\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type='range' min={props.min} max={props.max} step={props.step} />\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type={props.type} min={props.min} max={props.max} />\n    </div>;\n}"],"names":["Point","constructor","x","y","static","angle","distance","Math","cos","sin","lengthSq","dot","this","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","direction","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","undefined","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","slice","rotate","theta","fromAngle","AntPath","path","cost","state","signalPower","distPower","start","hitmap","pathCost","index","i","points","push","next","runStep","pathWeights","weightSum","weight","pow","randomChoice","random","ColonyState","initSignals","signals","distances","maxDist","from","row","distRow","to","dist","setPoints","clearWeights","j","multWeights","mult","addWeights","value","i1","i2","isNaN","point","currentPaintLoop","Run","settings","cvs","stopPaintLoop","ctx","getContext","canvas","numPts","floor","width","height","drawPoints","init","paintLoop","Cleanup","totalMinPath","clearTimeout","minPath","ants","numAnts","runPath","distancePower","signalDecay","maxSignalGain","shortestPath","ant","longestPath","antWeight","tick","currentBestPath","globalBestPath","strokeStyle","beginPath","lineWidth","moveTo","lineTo","stroke","draw","setTimeout","delayPerFrame","fillStyle","fillRect","clientWidth","clientHeight","ellipse","PI","fill","AntColonyComponent","ref","setState","current","className","id","AntColonyValueSliderComponent","label","onChange","v","step","type","props","ev","target","valueAsNumber"],"sourceRoot":""}