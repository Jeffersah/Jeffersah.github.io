{"version":3,"sources":["webpack:///./src/projects/common/Complex.ts","webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts","webpack:///./src/projects/common/Range.ts","webpack:///./src/projects/common/Range2d.ts","webpack:///./src/projects/common/ColorRange.ts"],"names":["isComplex","a","undefined","real","Complex","imaginary","this","Math","sqrt","absSq","other","tmpReal","power","rs","theta","atan2","pow","cos","sin","b","i","conj","conjugate","scale","scalarMultiplyWith","n","expi","multiplyWith","exp","ProgressiveRepaint","canvasWidth","canvasHeight","finished","maxScale","fastLog2","min","x","y","v","shift","paintColor","canvas","func","repainter","ctx","getContext","screenRange","offsetWidth","offsetHeight","windowRange","X","Y","s","Scale","worldCoords","ConvertTo","fillStyle","CalcColor","fillRect","Advance","coords","original","rolling","iter","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","addWith","Julia","c","radius","abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","dx","dy","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","r","Shift","max","Paint","mandelRender","juliaRender","Run","document","getElementById","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset","requestAnimationFrame","Range","percentage","point","amt","range","anchor","targetWidth","deltaRange","value","targetRange","GetValue","window","Range2d","xPercent","yPercent","xValue","yValue","xAmt","yAmt","xShift","yShift","percent","xAnchor","yAnchor","target","intermediate","rMin","rMax","gMin","gMax","bMin","bMax","rRange","gRange","bRange","floor"],"mappings":"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","file":"mandelbrot.bundle.js","sourcesContent":["export function isComplex(a: number|Complex): a is Complex {\r\n    return (a as Complex).real !== undefined;\r\n}\r\n\r\nexport class Complex {\r\n    constructor(public real: number, public imaginary: number) { }\r\n\r\n    public absSq(): number {\r\n        return this.real * this.real + this.imaginary * this.imaginary;\r\n    }\r\n    public abs(): number {\r\n        return Math.sqrt(this.absSq());\r\n    }\r\n\r\n    public addWith(other: Complex): Complex {\r\n        this.real += other.real;\r\n        this.imaginary += other.imaginary;\r\n        return this;\r\n    }\r\n\r\n    public multiplyWith(other: Complex): Complex {\r\n        const tmpReal = this.real * other.real - this.imaginary * other.imaginary;\r\n        this.imaginary = this.real * other.imaginary + other.real * this.imaginary;\r\n        this.real = tmpReal;\r\n        return this;\r\n    }\r\n\r\n    public scalarMultiplyWith(other: Complex): Complex;\r\n    public scalarMultiplyWith(r: number, i: number): Complex;\r\n    public scalarMultiplyWith(other: Complex | number, imaginary?: number): Complex {\r\n        if (isComplex(other)) {\r\n            this.real *= other.real;\r\n            this.imaginary *= other.imaginary;\r\n        }\r\n        else {\r\n            this.real *= other;\r\n            this.imaginary *= imaginary;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public negate(): Complex {\r\n        this.real = -this.real;\r\n        this.imaginary = -this.imaginary;\r\n        return this;\r\n    }\r\n\r\n    public pow(power: number): Complex {\r\n        const rs = this.absSq();\r\n        const theta = Math.atan2(this.imaginary, this.real);\r\n        this.real = Math.pow(rs, power / 2) * Math.cos(theta);\r\n        this.imaginary = Math.pow(rs, power / 2) * Math.sin(theta);\r\n        return this;\r\n    }\r\n\r\n    public static add(a: Complex, b: Complex) {\r\n        return new Complex(a.real + b.real, a.imaginary + b.imaginary);\r\n    }\r\n\r\n    public static mult(a: Complex, b: Complex) {\r\n        return new Complex(a.real * b.real - a.imaginary * b.imaginary, a.real * b.imaginary + a.imaginary * b.real);\r\n    }\r\n\r\n    public static scalarMultiply(a: Complex, b: Complex): Complex;\r\n    public static scalarMultiply(a: Complex, r: number, i: number): Complex;\r\n    public static scalarMultiply(a: Complex, b: Complex | number, i ?: number): Complex {\r\n        if (isComplex(b)) return new Complex(a.real * b.real, a.imaginary * b.imaginary);\r\n        return new Complex(a.real * b, a.imaginary * i);\r\n    }\r\n\r\n    public static conjugate(a: Complex) {\r\n        return new Complex(a.real, -a.imaginary);\r\n    }\r\n\r\n    public static negate(a: Complex) {\r\n        return new Complex(-a.real, -a.imaginary);\r\n    }\r\n\r\n    public static inverse(a: Complex) {\r\n        const conj = Complex.conjugate(a);\r\n        const scale = 1 / a.absSq();\r\n        return conj.scalarMultiplyWith(scale, scale);\r\n    }\r\n\r\n    public static expi(n: number): Complex {\r\n        return new Complex(Math.cos(n), Math.sin(n));\r\n    }\r\n\r\n    public static exp(n: Complex): Complex {\r\n        return this.expi(n.imaginary).multiplyWith(new Complex(Math.exp(n.real), 0));\r\n    }\r\n}","export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}","export class Range {\r\n    constructor(public min: number, public max: number) { }\r\n\r\n    Length() {\r\n        return this.max - this.min;\r\n    }\r\n\r\n    GetValue(percentage: number) {\r\n        return this.min + (this.max - this.min) * percentage;\r\n    }\r\n\r\n    GetPercentage(point: number) {\r\n        return (point - this.min) / (this.max - this.min);\r\n    }\r\n\r\n    Shift(amt: number) {\r\n        this.min += amt;\r\n        this.max += amt;\r\n    }\r\n\r\n    ShiftByPercentage(percentage: number) {\r\n        const range = this.max - this.min;\r\n        this.min += range * percentage;\r\n        this.max += range * percentage;\r\n    }\r\n\r\n    Scale(percentage: number, anchor = 0.5) {\r\n        this.ScaleTo(this.Length() * percentage, anchor);\r\n    }\r\n\r\n    ScaleTo(targetWidth: number, anchor: number) {\r\n        const range = this.max - this.min;\r\n        const deltaRange = targetWidth - range;\r\n        this.min -= deltaRange * anchor;\r\n        this.max += deltaRange * (1 - anchor);\r\n    }\r\n\r\n    ConvertTo(value: number, targetRange: Range) {\r\n        return targetRange.GetValue(this.GetPercentage(value));\r\n    }\r\n    ConvertFrom(value: number, targetRange: Range) {\r\n        return targetRange.ConvertTo(value, this);\r\n    }\r\n}\r\nexport const unitRange: Range = new Range(0, 1);\r\n(window as any).range = Range;","import { Range } from './Range';\r\n\r\nexport class Range2d {\r\n    constructor(public xRange: Range, public yRange: Range) { }\r\n\r\n    public GetValue(xPercent: number, yPercent: number) {\r\n        return { x: this.xRange.GetValue(xPercent), y: this.yRange.GetValue(yPercent) };\r\n    }\r\n\r\n    public GetPercentage(xValue: number, yValue: number) {\r\n        return { x: this.xRange.GetPercentage(xValue), y: this.yRange.GetPercentage(yValue) };\r\n    }\r\n\r\n    public Shift(xAmt: number, yAmt: number) {\r\n        this.xRange.Shift(xAmt);\r\n        this.yRange.Shift(yAmt);\r\n    }\r\n    public ShiftByPercentage(xShift: number, yShift: number) {\r\n        this.xRange.ShiftByPercentage(xShift);\r\n        this.yRange.ShiftByPercentage(yShift);\r\n    }\r\n\r\n    public AspectScale(percent: number, xAnchor = 0.5, yAnchor = 0.5) {\r\n        return this.Scale(percent, xAnchor, percent, yAnchor);\r\n    }\r\n    public Scale(xPercent: number, xAnchor: number, yPercent: number, yAnchor: number) {\r\n        this.xRange.Scale(xPercent, xAnchor);\r\n        this.yRange.Scale(yPercent, yAnchor);\r\n    }\r\n\r\n    public ConvertTo(value: {x: number, y: number}, target: Range2d) {\r\n        const intermediate = this.GetPercentage(value.x, value.y);\r\n        return target.GetValue(intermediate.x, intermediate.y);\r\n    }\r\n}","import { Range } from './Range';\r\nexport class ColorRange {\r\n    public rRange: Range;\r\n    public gRange: Range;\r\n    public bRange: Range;\r\n    constructor(rMin: number, rMax: number, gMin: number, gMax: number, bMin: number, bMax: number) {\r\n        this.rRange = new Range(rMin, rMax);\r\n        this.gRange = new Range(gMin, gMax);\r\n        this.bRange = new Range(bMin, bMax);\r\n    }\r\n\r\n    public ToColor(percentage: number): string {\r\n        return 'rgb(' + Math.floor(this.rRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.gRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.bRange.GetValue(percentage)) + ')';\r\n    }\r\n}"],"sourceRoot":""}