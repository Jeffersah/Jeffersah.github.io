{"version":3,"file":"810.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/hoplite/assets/hp.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_impacts.png","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/HpRenderer.ts","webpack://trading-game/./src/projects/common/rendering/SpriteAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ProjectileAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/hoplite/entities/Archer.ts","webpack://trading-game/./src/projects/hoplite/entities/Mage.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/hoplite/animation/DelayAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/RadialAreaAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/entities/Giant.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AttackResolutionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/DjikstraPath.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/MapGenCommon.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\r\nimport { InterpolationFunction } from \"./InterpolationFunction\";\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n\r\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\r\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}\r\n\r\nexport class LinkedInterpolation<T> {\r\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\r\n\r\n    }\r\n\r\n    sample(): T {\r\n        return this.timer.sample(this.interp);\r\n    }\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(typeof(interpolator) !== 'function') {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        if(p === 0) return a;\r\n        if(p === 1) return b;\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    shift(x: number, y: number): Rect;\r\n    shift(p: Point): Rect;\r\n    shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    shiftBy(x: number, y: number): void;\r\n    shiftBy(p: Point): void;\r\n    shiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const TILE_SIZE = new Point(TILE_WIDTH, TILE_HEIGHT);\r\nexport const HALF_TILE_SIZE = new Point(TILE_WIDTH / 2, TILE_HEIGHT / 2);\r\n\r\nexport const MAP_SIZE = 6;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\r\n\r\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"15e7493ac024cd47393d6077407e3f39.png\";","export default __webpack_public_path__ + \"73e309f8aae54c28b86a4cd95da4091d.png\";","export default __webpack_public_path__ + \"b78374db2fae35ea358c6a9e2b27ccd6.png\";","export default __webpack_public_path__ + \"32e154daf23aa2143678fc17a3bf88d3.png\";","import Rect from \"../position/Rectangle\";\r\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\r\n\r\n    public origin: Point;\r\n\r\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        return this;\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return this;\r\n    }\r\n\r\n    public width() {\r\n        return this.sourceBounds.w;\r\n    }\r\n    public height() {\r\n        return this.sourceBounds.h;\r\n    }\r\n\r\n    tick(): boolean {\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\r\n        const oldTransform = ctx.getTransform();\r\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\r\n        ctx.drawImage(this.source, \r\n            this.sourceBounds.x, \r\n            this.sourceBounds.y, \r\n            this.sourceBounds.w, \r\n            this.sourceBounds.h, \r\n            0, \r\n            0, \r\n            destination.w, \r\n            destination.h);\r\n        ctx.setTransform(oldTransform);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport enum Direction {\r\n    Right = 0,\r\n    DownRight = 1,\r\n    DownLeft = 2,\r\n    Left = 3,\r\n    UpLeft = 4,\r\n    UpRight = 5\r\n}\r\n\r\nexport const AllDirections: Direction[] = [\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n    Direction.UpRight\r\n];\r\n\r\nexport class DirectionHelper {\r\n    public static ToPoint(direction: Direction): Point {\r\n        switch (direction) {\r\n            case Direction.Right: return new Point(1, 0);\r\n            case Direction.DownRight: return new Point(0, 1);\r\n            case Direction.DownLeft: return new Point(-1, 1);\r\n            case Direction.Left: return new Point(-1, 0);\r\n            case Direction.UpLeft: return new Point(0, -1);\r\n            case Direction.UpRight: return new Point(1, -1);\r\n        }\r\n    }\r\n\r\n    public static Turn(direction: Direction, amount: number): Direction {\r\n        const result = (direction + amount)%6;\r\n        return (result + 6) % 6;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\r\nimport { Direction, DirectionHelper } from \"./Direction\";\r\n\r\nexport function TurnRight(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(-pt.y, pt.x + pt.y);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function TurnLeft(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(pt.x + pt.y, -pt.x);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function HexToPixel(point: Point) {\r\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\r\n}\r\n\r\nexport function PixelToHex(point: Point) {\r\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\r\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\r\n    return new Point(tilesX, tilesY);\r\n}\r\n\r\nexport function HexLength(point: Point): number {\r\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\r\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\r\n    }\r\n    else {\r\n        return Math.abs(point.x) + Math.abs(point.y);\r\n    }\r\n}\r\n\r\nexport function GetRing(radius: number) {\r\n    if(radius === 0) return [new Point(0,0)];\r\n\r\n    const result: Point[] = [];\r\n    let pos = new Point(0, -radius);\r\n    \r\n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\r\n        var dir = DirectionHelper.ToPoint(direction);\r\n        for(var len = 0; len < radius; len++){\r\n            result.push(pos);\r\n            pos = Point.add(pos, dir);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"./Hex\";\r\n\r\nconst originDelta = new Point(8, 26);\r\n\r\nconst deltaX = 3;\r\nconst deltaY = -2;\r\n\r\nconst maxTilesPerRow = 5;\r\n\r\nexport default class HpRenderer {\r\n    private emptyHpImage: Sprite;\r\n    private redHpImage: Sprite;\r\n    private yellowHpImage: Sprite;\r\n    private blueHpImage: Sprite;\r\n    constructor(image: ImageLoader) {\r\n        this.emptyHpImage = new Sprite(image.image, new Rect(0, 0, 4, 5));\r\n        this.redHpImage = new Sprite(image.image, new Rect(3, 0, 4, 5));\r\n        this.yellowHpImage = new Sprite(image.image, new Rect(6, 0, 4, 5));\r\n        this.blueHpImage = new Sprite(image.image, new Rect(9, 0, 4, 5));\r\n    }\r\n\r\n    public draw(ctx:CanvasRenderingContext2D, pos: Point, hp: number, maxHp: number) {\r\n        const rows = Math.ceil(maxHp / maxTilesPerRow);\r\n        let lastRowLength = maxHp % maxTilesPerRow;\r\n        if(lastRowLength === 0) { lastRowLength = maxTilesPerRow; }\r\n\r\n        const fullImage = hp <= maxHp / 4 ? this.redHpImage : hp <= maxHp / 2 ? this.yellowHpImage : this.blueHpImage;\r\n        const emptyImage = this.emptyHpImage;\r\n\r\n        let originPoint = Point.add(HexToPixel(pos), originDelta);\r\n\r\n        for(let row = 0; row < rows - 1; row++) {\r\n            const dy = (rows - row - 1) * deltaY;\r\n            for(let col = 0; col < maxTilesPerRow; col++) {\r\n                let image = hp <= 0 ? emptyImage : fullImage;\r\n                hp--;\r\n                image.draw(ctx, new Rect(originPoint.x + col * deltaX, originPoint.y + dy, 4, 5), 0);\r\n            }\r\n        }\r\n\r\n        // last row\r\n        const lastRowDx = (maxTilesPerRow - lastRowLength) * deltaX / 2;\r\n        for(let col = 0; col < lastRowLength; col++){\r\n            let image = hp <= 0 ? emptyImage : fullImage;\r\n            hp--;\r\n            image.draw(ctx, new Rect(originPoint.x + col * deltaX + lastRowDx, originPoint.y , 4, 5), 0);\r\n        }\r\n    }\r\n}","import Rect from \"../position/Rectangle\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\nimport Sprite from \"./Sprite\";\r\n\r\nexport class SpriteAnimation implements IRenderableSource {\r\n    constructor(\r\n        public source: CanvasImageSource,\r\n        public firstFrame: Rect, \r\n        public origin: Point,\r\n        public frameAdvance: Point,\r\n        public numFrames: number,\r\n        public duration: number,\r\n        public loop: boolean) {\r\n\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.firstFrame.w, this.firstFrame.y);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return new SpriteAnimationInstance(this, this.loop);\r\n    }\r\n\r\n    getSprite(frameNumber: number): Sprite {\r\n        const frame = new Rect(\r\n            this.firstFrame.x + (frameNumber * this.frameAdvance.x),\r\n            this.firstFrame.y + (frameNumber * this.frameAdvance.y),\r\n            this.firstFrame.w,\r\n            this.firstFrame.h\r\n        );\r\n        return new Sprite(this.source, frame, this.origin);\r\n    }\r\n}\r\n\r\nexport class SpriteAnimationInstance implements ISimpleRenderable, IRenderable {\r\n\r\n    private duration: number;\r\n    private currentTick: number;\r\n\r\n    constructor(public source: SpriteAnimation, public loop: boolean, private overrideDuration?: number) {\r\n        this.duration = overrideDuration ?? source.duration;\r\n        this.currentTick = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTick++;\r\n        if(this.currentTick === this.duration) {\r\n            if(this.loop) this.currentTick = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        const frameNumber = (this.currentTick * this.source.numFrames) / this.duration;\r\n        return this.source.getSprite(Math.floor(frameNumber));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\r\n        this.getSprite().draw(ctx, position, rotation);\r\n    }\r\n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Entity from \"../Entity\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class EntityMoveAnimation implements IAnimation {\r\n    private timer: InterpolationTimer;\r\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\r\n        this.timer = new InterpolationTimer(duration);\r\n    }\r\n\r\n    tick(): boolean{ \r\n        if(this.timer.tick()) {\r\n            this.entity.position = this.target;\r\n            return true;\r\n        }\r\n        this.entity.position = this.timer.sample(this.motion);\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        // The gamestate drawing will draw this entity. No need to draw it twice.\r\n        // this.entity.draw(ctx);\r\n    }\r\n}","import Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class RenderableAnimation implements IAnimation {\r\n    private rotation: number;\r\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\r\n        this.rotation = rotation ?? 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.fixedDuraiton !== undefined) {\r\n            this.fixedDuraiton--;\r\n            if(this.fixedDuraiton === -1) return true;\r\n            this.renderable.tick();\r\n            return false;\r\n        }\r\n        return this.renderable.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.renderable.draw(ctx, this.bounds, this.rotation);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class SequentialAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.steps.length === 0) return true;\r\n        \r\n        while(this.steps[0].tick()){\r\n            this.steps.shift();\r\n            if(this.steps.length === 0) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.steps[0].draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IAnimation from \"./IAnimation\";\r\nimport RenderableAnimation from \"./RenderableAnimation\";\r\nimport SequentialAnimation from \"./SequentialAnimation\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class ProjectileAnimation implements IAnimation {\r\n\r\n    private angle: number;\r\n    private time: number;\r\n    constructor(private renderable: IRenderable, private size: Point, private fromPixel: Point, private toPixel: Point, private duration: number) {\r\n        this.angle = Math.atan2(toPixel.y - fromPixel.y, toPixel.x - fromPixel.x);\r\n        this.time = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.time++;\r\n        return this.time >= this.duration;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const position = Point.interpolate(this.fromPixel, this.toPixel, this.time / this.duration);\r\n        const destination = new Rect(position.x, position.y, this.size.x, this.size.y);\r\n        this.renderable.draw(ctx, destination, this.angle);\r\n    }\r\n}\r\n\r\nexport function CreateProjectileAnimation(projectile: Sprite, fromHex: Point, toHex: Point, duration: number, onImpact: IRenderableSource): IAnimation {\r\n    const destPt = HexToPixel(toHex);\r\n    const projAnimation = new ProjectileAnimation(projectile, projectile.getPixelSize(), Point.add(HexToPixel(fromHex), C.HALF_TILE_SIZE), Point.add(destPt, C.HALF_TILE_SIZE), duration);\r\n    if(onImpact !== null) {\r\n        const impactAnimation = new RenderableAnimation(onImpact.getRenderable(), new Rect(destPt.x, destPt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        return new SequentialAnimation([projAnimation, impactAnimation]);\r\n    }\r\n    return projAnimation;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport Entity from \"../Entity\";\r\nimport * as C from \"../Constants\";\r\nimport { HexLength, HexToPixel } from \"../Hex\";\r\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport { CreateProjectileAnimation } from \"../animation/ProjectileAnimation\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\n\r\nconst BUMP_ANIMATION_TIME = 10;\r\nconst PROJECTILE_TIME = 6;\r\n\r\nexport default class AttackInfo implements IAttackInfo {\r\n    public startPoint: Point;\r\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: Sprite, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        this.startPoint = attacker.position;\r\n    }\r\n\r\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\r\n    }\r\n\r\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\r\n    }\r\n\r\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: Sprite, impactAnimation?: IRenderableSource) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, impactAnimation ?? null, projectile);\r\n    }\r\n    \r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return [{damage: this.damage, positions: this.affectedTiles, ignorePlayer: this.ignorePlayer, ignoreEnemies: this.ignoreEnemies}];\r\n    }\r\n\r\n    toAnimations():IAnimation[] {\r\n        let animations:IAnimation[] = [];\r\n        if(this.bumpAnimation) {\r\n            animations.push(new EntityMoveAnimation(\r\n                this.attacker, \r\n                Interpolated.linear<Point>(Point.interpolate, \r\n                    this.attacker.position, \r\n                    Point.interpolate(this.attacker.position, this.target, 1/2), \r\n                    this.attacker.position), \r\n                this.attacker.position, \r\n                BUMP_ANIMATION_TIME * HexLength(Point.subtract(this.startPoint, this.target))));\r\n        }\r\n        if(this.projectile) {\r\n            const time = PROJECTILE_TIME * HexLength(Point.subtract(this.startPoint, this.target));\r\n            return [CreateProjectileAnimation(this.projectile, this.startPoint, this.target, time, this.impactAnimation)];\r\n        }\r\n        if(this.impactAnimation) {\r\n            const pixTarget = HexToPixel(this.target);\r\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\r\n        }\r\n        return animations;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport * as C from './Constants';\r\nimport Player from \"./entities/Player\";\r\n\r\nexport default abstract class Entity {\r\n    isFlying: boolean;\r\n    maxHp: number;\r\n    hp: number;\r\n    position: Point;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n\r\n    static IsPlayer(entity: Entity): entity is Player {\r\n        return (entity as Player).primary !== undefined;\r\n    }\r\n}\r\n\r\nexport abstract class SimpleEnemy extends Entity {\r\n    abstract getRenderable() : IRenderable;\r\n    override draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n        this.getRenderable().draw(ctx, rect, 0);\r\n    } \r\n}","import Point from \"../../common/position/Point\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { SimpleEnemy } from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class Enemy extends SimpleEnemy {\r\n\r\n    lastAttacks: IAttackInfo[];\r\n\r\n    abstract getAttacks(state: GameState): IAttackInfo[];\r\n    abstract getMove(state: GameState, attack: IAttackInfo[], disallow: Point[]): Point;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Zombie extends Enemy {\r\n    static sprite: IRenderable;\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Zombie.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(0, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        )\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len === 1) {\r\n            return [AttackInfo.basicAttack(this, state.player, 1)];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMove(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Zombie.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Archer extends Enemy {\r\n    static sprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Archer.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n\r\n        Archer.projectileSprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(178, 96, 14, 4),\r\n            new Point(7, 2),\r\n        );\r\n\r\n        Archer.impactAnimation = assets.getImpactAnimation(1);\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len > 1 && len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Archer.projectileSprite, Archer.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMove(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Archer.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Mage extends Enemy {\r\n    static sprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Mage.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(2 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n\r\n        Mage.projectileSprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(178, 100, 14, 4),\r\n            new Point(7, 2),\r\n        );\r\n\r\n        Mage.impactAnimation = assets.getImpactAnimation(2);\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Mage.projectileSprite, Mage.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMove(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            // // Mages COULD be smarter by trying to avoid ending up directly next to the player, but doing so makes them a little bit too strong.\r\n            // if(len === 1) {\r\n            //     continue;\r\n            // }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Mage.sprite;\r\n    }\r\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\r\nimport Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport class DeltaRenderable implements IRenderable {\r\n    constructor(private source: IRenderable, public delta: Rectangle) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class DelayAnimation implements IAnimation {\r\n\r\n    constructor(private inner: IAnimation, private delay: number) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.delay === 0) return this.inner.tick();\r\n        else {\r\n            this.delay --;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        if(this.delay === 0) {\r\n            return this.inner.draw(ctx);\r\n        }\r\n    }\r\n\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class ParallelAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        for(let i = this.steps.length - 1; i >= 0; i--) {\r\n            if(this.steps[i].tick()) {\r\n                this.steps.splice(i, 1);\r\n            }\r\n        }\r\n        return this.steps.length === 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(const step of this.steps) {\r\n            step.draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class RadialAreaAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private rings: {radius: number, damage: number}[], private delayPerRadius: number, private animationSource: IRenderableSource, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return this.rings.map(ring => {\r\n            return {\r\n                damage: ring.damage,\r\n                positions: GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y)),\r\n                ignoreEnemies: this.ignoreEnemies,\r\n                ignorePlayer: this.ignorePlayer\r\n            };\r\n        });\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        const innerAnimations: IAnimation[] = [];\r\n        for(const ring of this.rings) {\r\n            const points = GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y))\r\n            innerAnimations.push(\r\n                new DelayAnimation(new ParallelAnimation(\r\n                    points.map(point => new RenderableAnimation(this.animationSource.getRenderable(), new Rect(HexToPixel(point).x, HexToPixel(point).y, C.TILE_WIDTH, C.TILE_HEIGHT))),\r\n                ), ring.radius * this.delayPerRadius)\r\n            );\r\n        }\r\n\r\n        return [new ParallelAnimation(innerAnimations)];\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport RadialAreaAttackInfo from \"../attackInfos/RadialAreaAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Giant extends Enemy {\r\n    static renderable: IRenderable;\r\n    static bigAttackPrepImage: IRenderable;\r\n    static radialSmashAnimation: IRenderableSource;\r\n\r\n    static turnSequence: ('move'|'skip'|'smashPrep'|'smash')[] = [\r\n        'move', 'move', 'skip', 'move', 'smashPrep', 'smash'\r\n    ];\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Giant.renderable = new DeltaRenderable(new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(7 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT * 2),\r\n        ), new Rect(0, -1, 1, 2));\r\n\r\n        Giant.bigAttackPrepImage = new DeltaRenderable(new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(8 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT * 2),\r\n        ), new Rect(0, -1, 1, 2));\r\n\r\n        this.radialSmashAnimation = assets.getImpactAnimation(3);\r\n    }\r\n\r\n    turnSequenceIndex: number;\r\n    lastTurn: ('move'|'skip'|'smashPrep'|'smash');\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 12;\r\n        this.isFlying = false;\r\n        this.turnSequenceIndex = Math.floor(Math.random() * Giant.turnSequence.length);\r\n        this.lastTurn = Giant.turnSequence[this.turnSequenceIndex === 0 ? Giant.turnSequence.length - 1 : this.turnSequenceIndex - 1];\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        switch(turn) {\r\n            case 'move':\r\n                const playerLocation = state.player.position;\r\n                const len = HexLength(Point.subtract(playerLocation, this.position));\r\n                if(len === 1) {\r\n                    return [AttackInfo.basicAttack(this, state.player, 3)];\r\n                }\r\n                return [];\r\n            case 'skip':\r\n            case 'smashPrep':\r\n                return [];\r\n            case 'smash':\r\n                return [new RadialAreaAttackInfo(this.position, [{radius: 1, damage: 3}, {radius: 2, damage: 1}], 8, Giant.radialSmashAnimation, true)];\r\n            default: return [];\r\n        }\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        this.turnSequenceIndex = (this.turnSequenceIndex + 1) % Giant.turnSequence.length;\r\n        this.lastTurn = turn;\r\n\r\n        switch(turn) {\r\n            case 'move':\r\n                if(attack.length > 0) return this.position;\r\n                return this.internalGetMove(state, disallowed);\r\n            case 'smash':\r\n                // The giant is allowed to move immediately after the smash attack.\r\n                return this.internalGetMove(state, disallowed);\r\n            default:\r\n                return this.position;\r\n        }\r\n\r\n    }\r\n\r\n    private internalGetMove(state: GameState, disallowed: Point[]): Point {\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMove(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return this.lastTurn === 'smashPrep' ? Giant.bigAttackPrepImage : Giant.renderable;\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\nimport floor_digits_url from './assets/floor_and_digits.png';\r\nimport hp_image_url from './assets/hp.png';\r\nimport impact_url from './assets/hoplite_impacts.png';\r\nimport ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Point from \"../common/position/Point\";\r\nimport HpRenderer from \"./HpRenderer\";\r\nimport { SpriteAnimation } from \"../common/rendering/SpriteAnimation\";\r\nimport Zombie from \"./entities/Zombie\";\r\nimport Archer from \"./entities/Archer\";\r\nimport Mage from \"./entities/Mage\";\r\nimport Giant from \"./entities/Giant\";\r\n\r\nexport default class Assets {\r\n    tiles: SpriteSheet;\r\n    floor_and_digits: ImageLoader;\r\n    hpImage: ImageLoader;\r\n    hpRenderer: HpRenderer;\r\n    impacts: ImageLoader;\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n        this.floor_and_digits = new ImageLoader(floor_digits_url, loader.registerAssetLoadCallback());\r\n        this.hpImage = new ImageLoader(hp_image_url, loader.registerAssetLoadCallback());\r\n        this.impacts = new ImageLoader(impact_url, loader.registerAssetLoadCallback());\r\n    }\r\n\r\n    getImpactAnimation(row: number) {\r\n        return new SpriteAnimation(this.impacts.image, new Rect(0, row * 32, 32, 32), new Point(0, 0), new Point(32, 0), 8, 16, false);\r\n    }\r\n\r\n    onLoadFinished(){\r\n        this.hpRenderer = new HpRenderer(this.hpImage);\r\n        Zombie.onAssetsLoaded(this);\r\n        Archer.onAssetsLoaded(this);\r\n        Mage.onAssetsLoaded(this);\r\n        Giant.onAssetsLoaded(this);\r\n    }\r\n\r\n    getDigitSprite(digit: number):Sprite {\r\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, 0, 7, 13));\r\n    }\r\n\r\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number) {\r\n        const digits = value.toString().split('').map(s => parseInt(s));\r\n        for(var i = 0; i < digits.length; i++) {\r\n            this.getDigitSprite(digits[i]).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\r\nimport PlayerWeapon from \"./PlayerWeapon\";\r\n\r\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\r\n\r\nexport default class SimpleWeapon extends PlayerWeapon{\r\n    private attacks: ISimpleAttack[];\r\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, private beforeMove: boolean, ...attacks: ISimpleAttack[]) {\r\n        super(type, assets, artTile);\r\n        this.attacks = attacks;\r\n    }\r\n\r\n    private getAttacks(state:GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        const attacks: AttackInfo[] = [];\r\n        const moveDelta = Point.subtract(moveTo, moveFrom);\r\n        for(const attack of this.attacks) {\r\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\r\n            const rot = SimpleWeapon.getRotation(moveDelta, attack.onMove);\r\n            if(rot === undefined) continue;\r\n            for(const pattern of attack.pattern) {\r\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\r\n                const attackInfo = attack.attack(state, player, target);\r\n                if(attackInfo !== undefined) attacks.push(attackInfo);\r\n            }\r\n        }\r\n        return attacks;\r\n    }\r\n\r\n    override enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[] {\r\n        return [];\r\n    }\r\n\r\n    getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return this.getAttacks(state, player, moveFrom, moveTo);\r\n        return [];\r\n    }\r\n    \r\n    getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return [];\r\n        return this.getAttacks(state, player, moveFrom, moveTo);\r\n    }\r\n\r\n    static getRotation(delta: Point, target: Point) {\r\n        for(let i = 0; i < 6; i++) {\r\n            if(delta.equals(target)) return i;\r\n            delta = TurnRight(delta);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport * as C from '../Constants';\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class PlayerWeapon {\r\n\r\n    public iconImage: IRenderable;\r\n    public sprite: IRenderable;\r\n\r\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\r\n        if(this.type === 'primary') {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n        else {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n    abstract enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[];\r\n    abstract getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n    abstract getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n}\r\n","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Sword extends SimpleWeapon {\r\n\r\n    impactAnimation: IRenderableSource;\r\n\r\n    constructor(assets: Assets) {\r\n        super('primary', assets, new Point(8, 1), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n\r\n        this.impactAnimation = assets.getImpactAnimation(0);\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.animationAttack(player, e, 1, this.impactAnimation, false);\r\n    }\r\n}","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Dagger extends SimpleWeapon {\r\n    constructor(assets: Assets) {\r\n        super('secondary', assets, new Point(10, 0), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(1, -1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.basicAttack(player, e, 1);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\r\nimport * as C from '../Constants';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport Sword from \"../weapons/Sword\";\r\nimport Dagger from \"../weapons/Dagger\";\r\nimport HpRenderer from \"../HpRenderer\";\r\n\r\nexport default class Player extends Entity {\r\n\r\n    public primary: PlayerWeapon;\r\n    public secondary: PlayerWeapon;\r\n    private renderable: Sprite;\r\n    private hpRenderer: HpRenderer;\r\n\r\n    constructor(assets: Assets, pos: Point) {\r\n        super(pos);\r\n\r\n        this.hpRenderer = assets.hpRenderer;\r\n\r\n        this.maxHp = this.hp = 3;\r\n\r\n        this.primary = new Sword(assets);\r\n        this.secondary = new Dagger(assets);\r\n\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n\r\n        this.renderable.draw(ctx, rect, 0);\r\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\r\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\r\n\r\n        this.hpRenderer.draw(ctx, this.position, this.hp, this.maxHp);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Player from \"./entities/Player\";\r\nimport HexArray from \"./HexArray\";\r\nimport HexCell from \"./HexCell\";\r\nimport IMapGen from \"./mapGen/IMapGen\";\r\nimport * as C from \"./Constants\";\r\nimport Entity from \"./Entity\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Enemy from \"./entities/Enemy\";\r\n\r\nexport default class GameState {\r\n\r\n    public player: Player;\r\n    public enemies: Enemy[] = [];\r\n\r\n    public tiles: HexArray<HexCell>;\r\n    public currentFloor: number;\r\n    \r\n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\r\n        this.changeFloor(floorNum, generator);\r\n\r\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\r\n    }\r\n\r\n    entityAt(to: Point) {\r\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMove(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        if(to.equals(this.player.position)) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    changeFloor(floorNum: number, generator: IMapGen) {\r\n        this.enemies = [];\r\n        generator.generateMap(this.assets, floorNum, this);\r\n        this.currentFloor = floorNum;\r\n        this.tiles.iterate((x, y, tile) =>{\r\n            tile.AfterWorldLoad(this, new Point(x, y));\r\n        });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 0, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(41, 0), this.currentFloor);\r\n\r\n        this.tiles.iterate((x, y, cell) => {\r\n            cell.draw(ctx, this, new Point(x, y));\r\n        });\r\n\r\n        [this.player, ...this.enemies].forEach(entity => {\r\n            if(excludeEntities && excludeEntities.includes(entity)) {\r\n                return;\r\n            }\r\n            entity.draw(ctx);\r\n            if(entity.hp != entity.maxHp){\r\n                this.assets.hpRenderer.draw(ctx, entity.position, entity.hp, entity.maxHp);\r\n            }\r\n        });\r\n    }\r\n}","import Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport class StackRenderable implements IRenderable {\r\n\r\n    public finishMode: 'any'|'all';\r\n\r\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\r\n        this.finishMode = renderableFinishMode ?? 'any';\r\n    }\r\n\r\n    tick(): boolean {\r\n        let allFinished = true;\r\n        let anyFinished = false;\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            const f = this.renderables[i].tick();\r\n            allFinished = allFinished && f;\r\n            anyFinished = anyFinished || f;\r\n        }\r\n        return this.finishMode === 'any' ? anyFinished : allFinished;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            this.renderables[i].draw(ctx, position, rotation);\r\n        }\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\r\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n\r\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.bg_renderable = \r\n            new DeltaRenderable(\r\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\r\n                new Rect(0, .75, 1, 1)\r\n            );\r\n\r\n        if(includeDefaultRenderable === true) {\r\n            this.bg_renderable = new StackRenderable(\r\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\r\n            );\r\n        }\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}\r\n\r\nexport class Floor extends SimpleCell {\r\n    public static TypeID = 0;\r\n\r\n    constructor(assets: Assets, customSprite?: Point) {\r\n        super(Floor.TypeID, assets, customSprite ?? new Point(0,0), true, customSprite !== undefined);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n\r\n// TypeID 1 : Lava\r\n\r\nexport class DownStairs extends SimpleCell {\r\n    public static TypeID = 2;\r\n    constructor(assets: Assets) {\r\n        super(DownStairs.TypeID, assets, new Point(5, 0), true, true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class AnimationPhase implements IGamePhase {\r\n\r\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\r\n    }\r\n\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        for(let i = this.animations.length - 1; i >= 0; i--) {\r\n            if(this.animations[i].tick()) {\r\n                this.animations.splice(i, 1);\r\n            }\r\n        }\r\n        if(this.animations.length === 0) {\r\n            return this.onFinish(state);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        for(const animation of this.animations) { \r\n            animation.draw(ctx);\r\n        }\r\n    }\r\n\r\n}","import AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function AttackResolutionPhase(state: GameState, attacks: IAttackInfo[], nextPhase: (state: GameState) => IGamePhase) : IGamePhase {\r\n    for(const attack of attacks) {\r\n        const damageGroups = attack.getAffectedTiles(state);\r\n        for(const damageGroup of damageGroups) {\r\n            for(const pt of damageGroup.positions) {\r\n                const entity = state.entityAt(pt);\r\n                if(entity === undefined || (Entity.IsPlayer(entity) && damageGroup.ignorePlayer) || (!Entity.IsPlayer(entity) && damageGroup.ignoreEnemies)) continue;\r\n                entity.hp -= damageGroup.damage;\r\n            }\r\n        }\r\n    }\r\n\r\n    state.enemies = state.enemies.filter(e => e.hp > 0);\r\n    if(state.player.hp <= 0) {\r\n        // TODO: GAME OVER\r\n    }\r\n    return nextPhase(state);\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\nconst duration = 20;\r\n\r\nexport default function EnemyMovePhase(state: GameState): IGamePhase {\r\n    const disallowed: Point[] = [];\r\n    const animations: IAnimation[] = [];\r\n    for(let i = 0; i < state.enemies.length; i++) { \r\n        const destination = state.enemies[i].getMove(state, state.enemies[i].lastAttacks, disallowed);\r\n        if(!destination.equals(state.enemies[i].position)) {\r\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\r\n            disallowed.push(destination);\r\n        }\r\n    }\r\n\r\n    return new AnimationPhase(animations, () => new PlayerTurnGamePhase());\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport default class HexArray<T> {\r\n    private data: T[][];\r\n    private _size: number;\r\n\r\n    constructor(size: number, defaultValue: T) {\r\n        this._size = size;\r\n        this.data = [];\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: T[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                row.push(defaultValue);\r\n            }\r\n            this.data.push(row);\r\n        }\r\n    }\r\n\r\n    public size() {\r\n        return this._size;\r\n    }\r\n\r\n    public get(x: number, y: number): T;\r\n    public get(pt: Point): T;\r\n    public get(pt: [number, number]): T;\r\n    public get(xp: number|Point|[number, number], yp?: number): T {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        let [dx, row] = this.toArrayCoords(x, y);\r\n        return this.data[row][dx];\r\n    }\r\n\r\n    public set(value: T, x: number, y: number): void;\r\n    public set(value: T, pt: Point): void;\r\n    public set(value: T, pt: [number, number]): void;\r\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        const [dx, row] = this.toArrayCoords(x, y);\r\n        this.data[row][dx] = value;\r\n    }\r\n\r\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\r\n        if(typeof xp === \"number\"){\r\n            return [xp as number, y];\r\n        }\r\n        else if ((xp as Point).x !== undefined) {\r\n            return [(xp as Point).x, (xp as Point).y];\r\n        }\r\n        else {\r\n            return xp as [number, number];\r\n        }\r\n    }\r\n\r\n    public getRowLength(y: number): number {\r\n        return this._size * 2 - 1 - Math.abs(y);\r\n    }\r\n\r\n    public isInBounds(x: number, y: number): boolean {\r\n        if(y <= -this._size || y >= this._size) {\r\n            return false;\r\n        }\r\n        let [xMin, xMax] = this.getXRange(y);\r\n        return x >= xMin && x < xMax;\r\n    }\r\n\r\n    public getXRange(y: number): [number, number] {\r\n        const minX = this.getMinX(y);\r\n        const len = this.getRowLength(y);\r\n        return [minX, minX + len];\r\n    }\r\n\r\n    public getMinX(y: number): number {\r\n        const row = this._size - 1 + y;\r\n        return -Math.min(row, this._size - 1);\r\n    }\r\n\r\n    public iterate(func: (x: number, y: number, value: T) => void) {\r\n        for(let y = -this._size+1; y < this._size; y++) {\r\n            let [xMin, xMax] = this.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                func(x, y, this.get(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    private toArrayCoords(x: number, y: number): [number, number] {\r\n        const row = this._size - 1 + y;\r\n        const firstX = -Math.min(row, this._size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport HexCell from \"./HexCell\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\r\n\r\ninterface ITilePart {\r\n    directions: Direction[];\r\n    tileCoords: Point;\r\n    tileSlice: Rect;\r\n}\r\n\r\nconst tileParts: ITilePart[] = [\r\n    {\r\n        // Top of Tile\r\n        directions: [Direction.UpLeft, Direction.UpRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0, 1, 0.5),\r\n    },\r\n    {\r\n        // Bottom of Tile\r\n        directions: [Direction.DownLeft, Direction.DownRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\r\n    }, \r\n    {\r\n        // TopLeft of Tile\r\n        directions: [Direction.Left, Direction.UpLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // TopRight of Tile\r\n        directions: [Direction.Right, Direction.UpRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomLeft of Tile\r\n        directions: [Direction.Left, Direction.DownLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomRight of Tile\r\n        directions: [Direction.Right, Direction.DownRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\r\n    }\r\n]\r\n\r\nexport default abstract class MultiPartCell extends HexCell{\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.assets = assets;\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        const adjacencyMap = AllDirections.map(d => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        const images = tileParts.map(part => {\r\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\r\n            const sourceBounds = new Rect(\r\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\r\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\r\n                (part.tileSlice.w) * C.TILE_WIDTH,\r\n                (part.tileSlice.h) * C.TILE_HEIGHT\r\n            );\r\n            return new DeltaRenderable(\r\n                new Sprite(this.assets.tiles.image, sourceBounds),\r\n                part.tileSlice\r\n            );\r\n        });\r\n\r\n        this.renderable = new StackRenderable(\r\n            images,\r\n            'all'\r\n        );\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport GameState from \"./GameState\";\r\nimport HexCell from \"./HexCell\";\r\nimport MultiPartCell from \"./MultiPartCell\";\r\n\r\nexport default class Lava extends MultiPartCell {\r\n    public static TypeID = 1;\r\n\r\n    constructor(assets: Assets) {\r\n        super(Lava.TypeID, assets, new Point(0, 4), false);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n        if(!entity.isFlying)\r\n            entity.hp -= 100;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Lava from \"../LavaCell\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst playerMoveTileArts = [\r\n    new Point(6,2),\r\n    new Point(7,2),\r\n    new Point(9,2),\r\n    new Point(7,3),\r\n    new Point(6,3),\r\n    new Point(8,2),\r\n];\r\n\r\nexport default class FloorZeroGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n\r\n        const ring = GetRing(2);\r\n        for(var i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Lava(assets), ring[i]);\r\n        }\r\n\r\n        const ring2 = GetRing(3);\r\n        for(var i = 0; i < ring2.length; i += 3) {\r\n            state.tiles.set(new Lava(assets), ring2[i]);\r\n        }\r\n\r\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\r\n        for(let i = 0; i < playerRing.length; i++) {\r\n            state.tiles.set(\r\n                new Floor(assets, playerMoveTileArts[i]),\r\n                playerRing[i]\r\n            )\r\n        }\r\n\r\n\r\n        state.tiles.set(new DownStairs(assets), 2, -4);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\n\r\ninterface IPathfinderNode {\r\n    position: Point;\r\n    parent: IPathfinderNode | undefined;\r\n    cost: number;\r\n}\r\n\r\nfunction toPath(node: IPathfinderNode): Point[] {\r\n    if(node.parent === null) return [node.position];\r\n    const parentPath = toPath(node.parent);\r\n    parentPath.push(node.position);\r\n    return parentPath;\r\n}\r\n\r\n// TODO: This is a quick and dirty Djikstra implementation with a ton of room for optimization.\r\n//       Currently, bot the closed and open sets are unsorted arrays, which means each dequeue takes O(n) time and each neighbor check takes O(n) time.\r\nexport default function DjikstraPath(start: Point, isEnd: (pt: Point) => boolean, getNeighbors: (from: Point) => { to: Point, cost: number }[]): Point[] {\r\n    const closedSet: IPathfinderNode[] = [];\r\n    const openSet: IPathfinderNode[] = [{ position: start, parent: null, cost: 0 }];\r\n\r\n    while (openSet.length > 0) {\r\n        const minIndex = openSet.reduce((min, cur, i) => cur.cost < openSet[min].cost ? i : min, 0);\r\n        const current = openSet.splice(minIndex, 1)[0];\r\n        closedSet.push(current);\r\n\r\n        if(isEnd(current.position)) {\r\n            return toPath(current);\r\n        }\r\n\r\n        for(const neighbor of getNeighbors(current.position)) {\r\n            const neighborNode = { position: neighbor.to, parent: current, cost: current.cost + neighbor.cost };\r\n            if(closedSet.find(c => c.position.equals(neighborNode.position))) continue;\r\n            const open = openSet.findIndex(c => c.position.equals(neighborNode.position));\r\n            if(open === -1) {\r\n                openSet.push(neighborNode);\r\n            }\r\n            else if(openSet[open].cost > neighborNode.cost) {\r\n                openSet[open] = neighborNode;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null; // No path!\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Zombie from \"../entities/Zombie\";\r\nimport Archer from \"../entities/Archer\";\r\nimport Mage from \"../entities/Mage\";\r\nimport Lava from \"../LavaCell\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport { AssurePathToEnd } from \"./MapGenCommon\";\r\n\r\nexport default class StandardMapGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.enemies = [];\r\n\r\n        let leftLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let leftLavaX = state.tiles.getMinX(leftLavaY);\r\n\r\n        this.genLava(assets, state, new Point(leftLavaX, leftLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        let rightLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let rightLavaX = state.tiles.getXRange(rightLavaY)[1]-1;\r\n\r\n        this.genLava(assets, state, new Point(rightLavaX, rightLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\r\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\r\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\r\n        state.tiles.set(new DownStairs(assets), downStairX, downStairY);\r\n\r\n        // Replaces lava with floor to ensure there's a path from the start to the end.\r\n        AssurePathToEnd(state, assets);\r\n\r\n        let validEnemySpawns: Point[] = [];\r\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\r\n            const [xMin, xMax] = state.tiles.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\r\n                    validEnemySpawns.push(new Point(x, y));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(12, floor); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const zombie = new Zombie(pos);\r\n            state.enemies.push(zombie);\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(6, (floor - 2) / 2); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const archer = new Archer(pos);\r\n            state.enemies.push(archer);\r\n        }\r\n        \r\n        for(let i = 0; i < Math.min(3, (floor - 3) / 3); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const mage = new Mage(pos);\r\n            state.enemies.push(mage);\r\n        }\r\n    }\r\n\r\n    genLava(assets: Assets, state: GameState, pt: Point, len: number) {\r\n        state.tiles.set(new Lava(assets), pt);\r\n        if(len <= 1) return;\r\n\r\n        const validRiverDirections = AllDirections.filter(dir => {\r\n            // Check if this is a valid continuation for the lava river\r\n            const dest = Point.add(pt, DirectionHelper.ToPoint(dir));\r\n            if(!state.tiles.isInBounds(dest.x, dest.y) || state.tiles.get(dest).typeId !== Floor.TypeID || dest.equals(C.PLAYER_START_POSITION)) \r\n                return false;\r\n            return true;\r\n        });\r\n\r\n        if(validRiverDirections.length === 0) return;\r\n        const dir = validRiverDirections[Math.floor(Math.random() * validRiverDirections.length)];\r\n        this.genLava(assets, state, Point.add(pt, DirectionHelper.ToPoint(dir)), len - 1);\r\n    }\r\n}","import DjikstraPath from \"../DjikstraPath\";\r\nimport GameState from \"../GameState\";\r\nimport * as C from \"../Constants\";\r\nimport { DownStairs, Floor } from \"../HexCell\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport Assets from \"../Assets\";\r\n\r\nexport function AssurePathTo(state: GameState, assets: Assets, checkEnd: (isValidEnd: Point) => boolean) {\r\n    function getNeighbors(point: Point):{to: Point, cost: number}[] {\r\n        const neighbors = [];\r\n        for(const dir of AllDirections) {\r\n            const destPt = Point.add(point, DirectionHelper.ToPoint(dir));\r\n            if(state.tiles.isInBounds(destPt.x, destPt.y)) {\r\n                neighbors.push({to: destPt, cost: state.tiles.get(destPt).isPathable ? 1 : 99 });\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    const pathToEnd = DjikstraPath(C.PLAYER_START_POSITION, checkEnd, getNeighbors);\r\n    for(const pt of pathToEnd) {\r\n        if(!state.tiles.get(pt).isPathable) {\r\n            state.tiles.set(new Floor(assets), pt);\r\n        }\r\n    }\r\n}\r\n\r\nexport function AssurePathToEnd(state: GameState, assets: Assets) {\r\n    return AssurePathTo(state, assets, (pt) => state.tiles.get(pt).typeId === DownStairs.TypeID);\r\n}","import Assets from \"../Assets\";\r\nimport GameState from \"../GameState\";\r\nimport Floor12Gen from \"./Floor12Gen\";\r\nimport FloorZeroGen from \"./FloorZeroGen\";\r\nimport StandardMapGen from \"./StandardMapGen\";\r\n\r\nexport default interface IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void;\r\n}\r\n\r\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\r\n    {range: [0,1], gen: new FloorZeroGen()},\r\n    {range: [1,12], gen: new StandardMapGen()},\r\n    {range: [12,13], gen: new Floor12Gen()},\r\n    {range: [13,-1], gen: new StandardMapGen()}\r\n]","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Giant from \"../entities/Giant\";\r\nimport Archer from \"../entities/Archer\";\r\n\r\nexport default class Floor12Gen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.tiles.set(new DownStairs(assets), 0, 0);\r\n        const ring = GetRing(2);\r\n        for (let i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Floor(assets, new Point(12, 0)), ring[i]);\r\n        }\r\n\r\n        state.enemies.push(new Giant(new Point(0, 0)));\r\n        state.enemies.push(new Archer(new Point(0, -2)));\r\n        state.enemies.push(new Archer(new Point(2, -2)));\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport { MapGenerators } from \"../mapGen/IMapGen\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst FADE_OUT_ANIM_TIME = 30;\r\nconst PLAYER_MOVE_TIME = 30;\r\n\r\nexport default class FloorTransitionPhase implements IGamePhase {\r\n\r\n    time = 0;\r\n\r\n    init(state: GameState): void {\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= FADE_OUT_ANIM_TIME) {\r\n            return new FloorTransitionPlayerMovePhase();\r\n        } else {\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.globalAlpha = 1;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}\r\n\r\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\r\n\r\n    time = 0;\r\n    playerStartPoint: Point;\r\n\r\n    init(state: GameState): void {\r\n        const floor = state.currentFloor + 1;\r\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\r\n        this.playerStartPoint = state.player.position;\r\n        state.changeFloor(floor, generator);\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= PLAYER_MOVE_TIME) {\r\n            state.player.position = C.PLAYER_START_POSITION.clone();\r\n            return new EntryAnimationPhase();\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        const lerp = this.time / PLAYER_MOVE_TIME;\r\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\r\n        state.player.position = tgt;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel, PixelToHex } from \"../Hex\";\r\nimport HexCell, { DownStairs } from \"../HexCell\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\r\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\n\r\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point, forceMotion: Point):IGamePhase {\r\n    const onFinish = (gs: GameState) => {\r\n        if(gs.tiles.get(gs.player.position).typeId === DownStairs.TypeID) {\r\n            return new FloorTransitionPhase();\r\n        }\r\n        else if(gs.enemies.length === 0) {\r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else return EnemyAttackPhase(state);\r\n    }\r\n\r\n    const postMoveAttacks: (gs:GameState)=>IGamePhase = (gs: GameState) => {\r\n        const attacks = [\r\n            ...state.player.primary.getAfterMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getAfterMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return onFinish(gs);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, onFinish));\r\n    };\r\n\r\n    const playerMove = (state: GameState) => {\r\n        if(!state.isValidMove(forceMotion, false)) {\r\n            return postMoveAttacks(state);\r\n        }\r\n        return new AnimationPhase(\r\n            [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, forceMotion), forceMotion, state.enemies.length === 0 ? 2 : 10)],\r\n            postMoveAttacks\r\n        );\r\n    };\r\n\r\n    if(state.enemies.length === 0) {\r\n        return playerMove(state);\r\n    }\r\n    if(state.enemies.length > 0) {\r\n        const attacks = [\r\n            ...state.player.primary.getBeforeMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getBeforeMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return playerMove(state);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, playerMove));\r\n    }\r\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyMovePhase from \"./EnemyMovePhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\r\n    const enemyAttacks: IAttackInfo[][] = []\r\n    for(let i = 0; i < state.enemies.length; i++) {\r\n        state.enemies[i].lastAttacks = state.enemies[i].getAttacks(state);\r\n        enemyAttacks.push(state.enemies[i].lastAttacks);\r\n    }\r\n    if(enemyAttacks.some(e => e.length > 0)) {\r\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations(state)))));\r\n        return new AnimationPhase(animations, ()=>\r\n            AttackResolutionPhase(state, enemyAttacks.reduce((acc, c) => acc.concat(c), []), state => EnemyMovePhase(state))\r\n        );\r\n    }\r\n    else{\r\n        return EnemyMovePhase(state);\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\n\r\nconst dirKeys = [\r\n    { key: 'a', dir: Direction.Left },\r\n    { key: '4', dir: Direction.Left },\r\n    \r\n    { key: 'q', dir: Direction.UpLeft },\r\n    { key: '7', dir: Direction.UpLeft },\r\n\r\n    { key: 'w', dir: Direction.UpRight },\r\n    { key: '9', dir: Direction.UpRight },\r\n\r\n    { key: 'd', dir: Direction.Right },\r\n    { key: '6', dir: Direction.Right },\r\n\r\n    { key: 'x', dir: Direction.DownRight },\r\n    { key: '3', dir: Direction.DownRight },\r\n\r\n    { key: 'z', dir: Direction.DownLeft },\r\n    { key: '1', dir: Direction.DownLeft },\r\n]\r\n\r\nexport default class PlayerTurnGamePhase implements IGamePhase {\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        const dir = this.tryGetDirection(keys);\r\n        if(dir !== undefined) {\r\n            const destination = Point.add(state.player.position, DirectionHelper.ToPoint(dir));\r\n            const additionalMoves = [...state.player.primary.enableAdditionalMoves(state, state.player), ...state.player.secondary.enableAdditionalMoves(state, state.player)];\r\n\r\n            if(!state.isValidMove(destination, false)) {\r\n                const specialMove = additionalMoves.find(move => move.dest.equals(destination));\r\n                if(specialMove !== undefined){\r\n                    return PlayerMoveAnimPhase(state, state.player.position, destination, specialMove.forceMove);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            return PlayerMoveAnimPhase(state, state.player.position, destination, destination);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tryGetDirection(keys: KeyboardManager): Direction | undefined {\r\n        for(let i = 0; i < dirKeys.length; i++) {\r\n            if(keys.isKeyPressed(dirKeys[i].key)) {\r\n                return dirKeys[i].dir;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n    }\r\n\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 60;\r\n\r\nexport default class EntryAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        state.player.draw(ctx);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class GameStartAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new EntryAnimationPhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.player.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport GameState from './GameState';\r\nimport StandardMapGen from './mapGen/StandardMapGen';\r\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\r\nimport IGamePhase from './phases/IGamePhase';\r\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\r\nimport FloorZeroGen from './mapGen/FloorZeroGen';\r\nimport Zombie from './entities/Zombie';\r\nimport Floor12Gen from './mapGen/Floor12Gen';\r\n\r\nexport default function Run(): (()=>void) {\r\n    let ctx: CanvasRenderingContext2D;\r\n    \r\n    let keys: KeyboardManager;\r\n    let scaleHelper: NearestNeighborScalingHelper;\r\n    \r\n    const assetLoader = new AssetLoader();\r\n    const assets = new Assets(assetLoader);\r\n\r\n    let state: GameState;\r\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\r\n\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n    \r\n    function assetLoadDone() {\r\n        assets.onLoadFinished();\r\n        \r\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n        ctx = canvas.getContext('2d');\r\n        scaleHelper = new NearestNeighborScalingHelper(\r\n            canvas, \r\n            ctx, \r\n            C.MAP_PIXEL_SIZE, \r\n            C.MAP_PIXEL_SIZE, \r\n            true, \r\n            () => { return; }\r\n        );\r\n\r\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\r\n        NearestNeighborScaling(ctx);\r\n        tick();\r\n    }\r\n    \r\n    function tick() {\r\n        scaleHelper.TryRescale();\r\n        NearestNeighborScaling(ctx);\r\n\r\n        const nextPhase = currentPhase.tick(state, keys);\r\n\r\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        currentPhase.draw(ctx, state);\r\n\r\n        if(nextPhase !== currentPhase) {\r\n            currentPhase = nextPhase;\r\n            nextPhase.init(state);\r\n        }\r\n\r\n        keys.update();\r\n        requestAnimationFrame(() => tick());\r\n    }\r\n\r\n    return (() => scaleHelper.Detatch());\r\n}\r\n","import * as React from 'react';\r\nimport Run from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>Run());\r\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","static","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","cos","sin","lengthSq","dot","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","sy","pts","add","Bezier","rotate","theta","fromAngle","Rect","w","shift","xp","shiftBy","edge","corner","TILE_WIDTH","TILE_HEIGHT","HALF_TILE_SIZE","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","AllDirections","DirectionHelper","amount","TurnRight","pt","amt","TurnLeft","HexToPixel","point","HexLength","sign","abs","GetRing","radius","result","pos","dir","originDelta","HpRenderer","image","emptyHpImage","redHpImage","yellowHpImage","blueHpImage","hp","maxHp","rows","ceil","lastRowLength","fullImage","emptyImage","originPoint","row","dy","col","lastRowDx","SpriteAnimation","firstFrame","frameAdvance","numFrames","duration","loop","SpriteAnimationInstance","frameNumber","frame","overrideDuration","currentTick","position","EntityMoveAnimation","entity","motion","target","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","SequentialAnimation","steps","ProjectileAnimation","size","fromPixel","toPixel","CreateProjectileAnimation","projectile","fromHex","toHex","onImpact","destPt","projAnimation","impactAnimation","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","ignoreEnemies","ignorePlayer","startPoint","getAffectedTiles","state","positions","toAnimations","animations","pixTarget","Entity","primary","SimpleEnemy","rect","Enemy","Zombie","super","isFlying","assets","sprite","tiles","getAttacks","playerLocation","player","basicAttack","getMove","attack","disallowed","possibleMoves","map","rp","minMoves","minMoveDist","isValidMove","some","random","Archer","projectileSprite","getImpactAnimation","ray","delta","nextPt","entityAt","projectileAttack","Mage","DeltaRenderable","Rectangle","DelayAnimation","inner","delay","ParallelAnimation","step","RadialAreaAttackInfo","rings","delayPerRadius","animationSource","ring","filter","isInBounds","innerAnimations","points","Giant","turnSequenceIndex","turnSequence","lastTurn","bigAttackPrepImage","radialSmashAnimation","turn","internalGetMove","Assets","loader","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","hpImage","impacts","onLoadFinished","hpRenderer","onAssetsLoaded","getDigitSprite","digit","drawNumber","digits","split","parseInt","SimpleWeapon","type","artTile","iconImage","beforeMove","attacks","moveFrom","moveTo","moveDelta","onMove","rot","getRotation","pattern","attackInfo","enableAdditionalMoves","getBeforeMoveAttacks","getAfterMoveAttacks","Sword","getAttack","e","IsPlayer","animationAttack","Dagger","Player","secondary","GameState","floorNum","generator","enemies","changeFloor","to","find","flying","get","isPathable","generateMap","currentFloor","iterate","tile","AfterWorldLoad","excludeEntities","cell","forEach","includes","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","HexCell","typeId","pathable","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","world","Floor","customSprite","TypeID","OnEntityStep","DownStairs","AnimationPhase","onFinish","init","AttackResolutionPhase","nextPhase","damageGroups","damageGroup","EnemyMovePhase","lastAttacks","PlayerTurnGamePhase","HexArray","defaultValue","_size","data","midRowLength","dx","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","func","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","d","hexPt","images","part","index","reduceRight","acc","Lava","playerMoveTileArts","FloorZeroGen","ring2","playerRing","toPath","node","parent","parentPath","StandardMapGen","leftLavaY","leftLavaX","genLava","rightLavaY","rightLavaX","downStairY","downStairX","checkEnd","pathToEnd","isEnd","getNeighbors","closedSet","openSet","cost","minIndex","reduce","cur","current","neighbor","neighborNode","c","open","findIndex","DjikstraPath","neighbors","AssurePathTo","AssurePathToEnd","validEnemySpawns","spawnId","zombie","archer","mage","validRiverDirections","dest","MapGenerators","gen","FloorTransitionPhase","FloorTransitionPlayerMovePhase","fillStyle","globalAlpha","fillRect","playerStartPoint","EntryAnimationPhase","lerp","tgt","PlayerMoveAnimPhase","from","forceMotion","gs","enemyAttacks","attackSet","concat","EnemyAttackPhase","postMoveAttacks","playerMove","dirKeys","tryGetDirection","additionalMoves","specialMove","move","forceMove","animationTime","GameStartAnimationPhase","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","TryRescale","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}