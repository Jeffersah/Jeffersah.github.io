{"version":3,"sources":["webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/position/Direction.ts","webpack:///./src/projects/common-assets/arrows.png","webpack:///./src/projects/common-assets/rpg1.png","webpack:///./src/projects/common-assets/wizard16.png","webpack:///./src/projects/common/Iterate.ts","webpack:///./src/projects/rpgt/world/World.ts","webpack:///./src/projects/rpgt/Constants.ts","webpack:///./src/projects/rpgt/SheetGraphic.ts","webpack:///./src/projects/rpgt/world/Cell.ts","webpack:///./src/projects/common/position/Rectangle.ts","webpack:///./src/projects/common/assets/FileResource.ts","webpack:///./src/projects/rpgt/index.ts"],"names":["KeyState","keys","changes","key","this","indexOf","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","Point","x","y","Dot","Math","sqrt","LengthSq","p1","p2","other","atan2","nx","ny","a","b","sy","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","IterateRange","start","end","handle","breakIteration","loopControl","break","finalValue","i","width","height","generateCell","cells","col","prerender","document","getElementById","pctx","getContext","paint","pos","vel","onChecked","xDirection","yDirection","startXTile","floor","Edge","endXTile","startYTile","endYTile","xColision","ctrl","pathable","w","yColision","h","SheetGraphic","sheet","tileX","tileY","spriteWidth","spriteHeight","ctx","tx","ty","tw","th","render","GRASS_TILES","graphic","grassCoords","random","length","xp","r","fileUrl","onload","get","subscribe","data","body","assets","world","Run","assetLoader","AssetLoader","tiles","SpriteSheet","registerAssetLoadCallback","wizard","arrows","tilesets","KeyboardManager","onAllFinished","assetLoadDone","RockWall","GrassFloor","updatePrerender","canvas","NearestNeighborScalingHelper","tick","clearRect","save","cx","cy","max","min","playerPos","camPos","MultWith","AddWith","DivideWith","CAMERA_SLOWDOWN_FACTOR","translate","drawImage","update","fillStyle","fillRect","globalAlpha","tryMoveEntity","toggle","restore","requestAnimationFrame"],"mappings":"2HAEe,MAAMA,EACjB,YAAmBC,EAAuBC,GAAvB,KAAAD,OAAuB,KAAAC,UAInC,UAAUC,GACb,OAAmC,IAA5BC,KAAKH,KAAKI,QAAQF,GAGtB,QAAQA,GACX,OAAmC,IAA5BC,KAAKH,KAAKI,QAAQF,ICLlB,MAAM,EAIjB,YAAmBG,EAAsCC,GAAtC,KAAAD,kBAAsC,KAAAC,mBAC3BC,IAArBJ,KAAKG,cACNH,KAAKG,aAAc,GAEvBD,EAAgBG,iBAAiB,UAAWC,GAAKN,KAAKO,UAAUD,IAChEJ,EAAgBG,iBAAiB,QAASC,GAAKN,KAAKQ,QAAQF,IAE5DN,KAAKS,SAAW,GAChBT,KAAKF,QAAU,GAGX,UAAUC,GACVC,KAAKG,aAELO,QAAQC,IAAIZ,EAAIA,MAGP,IADDC,KAAKS,SAASR,QAAQF,EAAIA,OAElCC,KAAKF,QAAQc,KAAK,CAAEb,IAAKA,EAAIA,IAAKc,OAAQ,UAC1Cb,KAAKS,SAASG,KAAKb,EAAIA,MAIvB,QAAQA,GACZC,KAAKF,QAAQc,KAAK,CAAEb,IAAKA,EAAIA,IAAKc,OAAQ,YAC1C,MAAMC,EAAMd,KAAKS,SAASR,QAAQF,EAAIA,KACtCC,KAAKS,SAASM,OAAOD,EAAK,GAGvB,SACH,MAAME,EAAYhB,KAAKS,SACjBQ,EAAejB,KAAKF,QAK1B,OAHAE,KAAKS,SAAWO,EAAUE,QAC1BlB,KAAKF,QAAU,GAER,IAAIF,EAASoB,EAAWC,IC5CxB,MAAM,EAMjB,YAAYE,EAAsBhB,GAC9BH,KAAKoB,QAAU,IAAI,EAAWD,EAAShB,GACvCH,KAAKqB,SAAWrB,KAAKsB,aAAetB,KAAKoB,QAAQG,SAG9C,SACHvB,KAAKqB,SAAWrB,KAAKsB,aACrBtB,KAAKsB,aAAetB,KAAKoB,QAAQG,SAG9B,UAAUxB,GACb,OAAOC,KAAKsB,aAAaE,UAAUzB,GAGhC,QAAQA,GACX,OAAOC,KAAKsB,aAAaG,QAAQ1B,GAG9B,aAAaA,GAChB,OAAOC,KAAKsB,aAAaE,UAAUzB,IAAQC,KAAKqB,SAASI,QAAQ1B,GAG9D,cAAcA,GACjB,OAAOC,KAAKsB,aAAaG,QAAQ1B,IAAQC,KAAKqB,SAASG,UAAUzB,GAG9D,UACH,OAAOC,KAAKsB,aAAaxB,W,gCCpCjC,kCAAe,MAAM4B,EACjB,YAAmBC,EAAkBC,GAAlB,KAAAD,IAAkB,KAAAC,IAI9B,WACH,OAAOF,EAAMG,IAAI7B,KAAMA,MAGpB,SACH,OAAO8B,KAAKC,KAAK/B,KAAKgC,YAGnB,QACH,OAAO,IAAIN,EAAM1B,KAAK2B,EAAG3B,KAAK4B,GAG3B,SACH,OAAO,IAAIF,GAAO1B,KAAK2B,GAAI3B,KAAK4B,GAG7B,gBAGH,OAFA5B,KAAK2B,GAAK3B,KAAK2B,EACf3B,KAAK4B,GAAK5B,KAAK4B,EACR5B,KAGJ,WAAWiC,EAAWC,GACzB,OAAOD,EAAGN,EAAIO,EAAGP,EAAIM,EAAGL,EAAIM,EAAGN,EAG5B,QAAQO,GACX,OAAOT,EAAMG,IAAI7B,KAAMmC,GAIpB,YACH,OAAOL,KAAKM,MAAMpC,KAAK4B,EAAG5B,KAAK2B,GAK5B,QAAQQ,EAAqBP,GAChC,MAAMS,OAAWjC,IAANwB,EAAmBO,EAAgBR,EAAIQ,EAC5CG,OAAWlC,IAANwB,EAAmBO,EAAgBP,EAAIA,EAGlD,OAFA5B,KAAK2B,GAAKU,EACVrC,KAAK4B,GAAKU,EACHtC,KAKJ,SAASmC,EAAqBP,GACjC,MAAMS,OAAWjC,IAANwB,EAAmBO,EAAgBR,EAAIQ,EAC5CG,OAAWlC,IAANwB,EAAmBO,EAAgBP,EAAIA,EAGlD,OAFA5B,KAAK2B,GAAKU,EACVrC,KAAK4B,GAAKU,EACHtC,KAKJ,aAAamC,EAAqBP,GACrC,MAAMS,OAAWjC,IAANwB,EAAmBO,EAAgBR,EAAIQ,EAC5CG,OAAWlC,IAANwB,EAAmBO,EAAgBP,EAAIA,EAGlD,OAFA5B,KAAK2B,GAAKU,EACVrC,KAAK4B,GAAKU,EACHtC,KAKJ,WAAWmC,EAAqBP,GACnC,MAAMS,OAAWjC,IAANwB,EAAmBO,EAAgBR,EAAIQ,EAC5CG,OAAWlC,IAANwB,EAAmBO,EAAgBP,EAAIA,EAGlD,OAFA5B,KAAK2B,GAAKU,EACVrC,KAAK4B,GAAKU,EACHtC,KAGJ,OAAOmC,GACV,OAAOnC,KAAK2B,IAAMQ,EAAMR,GAAK3B,KAAK4B,IAAMO,EAAMP,EAGlD,WAAWW,EAAUC,GACjB,OAAO,IAAId,EAAMa,EAAEZ,EAAIa,EAAEb,EAAGY,EAAEX,EAAIY,EAAEZ,GAKxC,gBAAgBW,EAAUC,EAAiBC,GACvC,YAAWrC,IAAPqC,EACO,IAAIf,EAAMa,EAAEZ,EAAKa,EAAcD,EAAEX,EAAIa,QAEtBrC,IAAhBoC,EAAUb,EACT,IAAID,EAAMa,EAAEZ,EAAKa,EAAYb,EAAGY,EAAEX,EAAKY,EAAYZ,GAEnD,IAAIF,EAAMa,EAAEZ,EAAKa,EAAcD,EAAEX,EAAKY,M,gCCjGzD,0GAEYE,EAFZ,SAEA,SAAYA,GACR,eACA,yBACA,qBACA,6BACA,mBACA,2BACA,mBACA,uBARJ,CAAYA,MAAS,KAcd,MAAMC,EAA2B,CACpC,IAAI,IAAM,GAAI,GACd,IAAI,IAAM,GAAI,GACd,IAAI,IAAM,EAAG,GACb,IAAI,IAAM,EAAG,GACb,IAAI,IAAM,EAAG,GACb,IAAI,KAAO,EAAG,GACd,IAAI,KAAO,EAAG,GACd,IAAI,KAAO,GAAI,IAGNC,EAA6B,CACtCF,EAAUG,GACVH,EAAUI,QACVJ,EAAUK,MACVL,EAAUM,UACVN,EAAUO,KACVP,EAAUQ,SACVR,EAAUS,KACVT,EAAUU,QAGVV,EAAUG,GACVH,EAAUK,MACVL,EAAUO,KACVP,EAAUS,KAGVT,EAAUI,QACVJ,EAAUM,UACVN,EAAUQ,SACVR,EAAUU,OAGP,SAASC,EAAQC,GACpB,OAAOX,EAAgBW,K,gCCnDZ,QAA0B,wC,2GCA1B,MAA0B,uCCA1B,MAA0B,uC,uBCKlC,SAASC,EAAaC,EAAeC,EAAaC,GACrD,IAAIC,GAAiB,EACrB,MAAMC,EAAc,CAChBC,MAAO,KACHF,GAAiB,IAIzB,GAAIF,IAAQD,EAER,YADAE,EAAOF,EAAOI,GAIlB,MAAMN,EAAYG,EAAMD,EAAQ,GAAK,EAC/BM,EAAaL,EAAMH,EAEzB,IAAK,IAAIS,EAAIP,EAAOO,IAAMD,IAAeH,EAAgBI,GAAKT,EAC1DI,EAAOK,EAAGH,GCbH,MAAM,EAKjB,YAAmBI,EAAsBC,EAAgBC,GAAtC,KAAAF,QAAsB,KAAAC,SACrCjE,KAAKmE,MAAQ,GACb,IAAK,IAAIxC,EAAI,EAAGA,EAAIqC,EAAOrC,IAAK,CAC5B,MAAMyC,EAAM,GACZ,IAAK,IAAIxC,EAAI,EAAGA,EAAIqC,EAAQrC,IACxBwC,EAAIxD,KAAKsD,KAEblE,KAAKmE,MAAMvD,KAAKwD,GAGpBpE,KAAKqE,UAAYC,SAASC,eAAe,mBAG7C,kBACI,YAAavE,KAAKqE,UC1BD,GD0B8BrE,KAAKgE,MC1BnC,GD0B4DhE,KAAKiE,QAClF,MAAMO,EAAOxE,KAAKqE,UAAUI,WAAW,MACvC,IAAK,IAAI9C,EAAI,EAAGA,EAAI3B,KAAKgE,MAAOrC,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,KAAKiE,OAAQrC,IAC7B5B,KAAKmE,MAAMxC,GAAGC,GAAG8C,MAAMF,EC9Bd,GD8BoB7C,EC9BpB,GD8ByCC,GAK9D,cAAc+C,EAAWC,EAAYC,GACjC,MAAMC,EAAaF,EAAIjD,GAAK,EAAIe,EAAA,EAAUK,MAAQL,EAAA,EAAUS,KACtD4B,EAAaH,EAAIhD,GAAK,EAAIc,EAAA,EAAUO,KAAOP,EAAA,EAAUG,GAC3D,GAAc,IAAV+B,EAAIjD,EAAS,CACb,MAAMqD,EAAalD,KAAKmD,MAAMN,EAAIO,KAAKJ,GCvC1B,IDwCPK,EAAWrD,KAAKmD,OAAON,EAAIO,KAAKJ,GAAcF,EAAIjD,GCxC3C,IDyCPyD,EAAatD,KAAKmD,MAAMN,EAAIO,KAAKxC,EAAA,EAAUG,ICzCpC,ID0CPwC,EAAWvD,KAAKmD,OAAON,EAAIO,KAAKxC,EAAA,EAAUO,MAAQ,GC1C3C,ID4Cb,IAAIqC,EACJ/B,EAAayB,EAAYG,EAAU,CAACxD,EAAG4D,KACnC,IAAK,IAAI3D,EAAIwD,EAAYxD,GAAKyD,EAAUzD,IAAK,CACzC,GAAID,EAAI,GAAKA,GAAK3B,KAAKgE,MAGnB,OAFAsB,EAAY3D,OACZ4D,EAAK1B,QAGLgB,GAAWA,EAAUlD,EAAGC,GACvB5B,KAAKmE,MAAMxC,GAAGC,GAAG4D,WAClBD,EAAK1B,QACLyB,EAAY3D,WAKNvB,IAAdkF,EACAX,EAAIhD,GAAKiD,EAAIjD,EAETiD,EAAIjD,GAAK,EAAGgD,EAAIhD,EC/DX,GD+De2D,EAA8BX,EAAIc,EACrDd,EAAIhD,EChEA,IDgEK2D,EAAY,GAGlC,GAAc,IAAVV,EAAIhD,EAAS,CACb,MAAMwD,EAAatD,KAAKmD,MAAMN,EAAIO,KAAKH,GCpE1B,IDqEPM,EAAWvD,KAAKmD,OAAON,EAAIO,KAAKH,GAAcH,EAAIhD,GCrE3C,IDsEPoD,EAAalD,KAAKmD,MAAMN,EAAIO,KAAKxC,EAAA,EAAUS,MCtEpC,IDuEPgC,EAAWrD,KAAKmD,OAAON,EAAIO,KAAKxC,EAAA,EAAUK,OAAS,GCvE5C,IDyEb,IAAI2C,EACJnC,EAAa6B,EAAYC,EAAU,CAACzD,EAAG2D,KACnC,IAAK,IAAI5D,EAAIqD,EAAYrD,GAAKwD,EAAUxD,IAAK,CACzC,GAAIC,EAAI,GAAKA,GAAK5B,KAAKiE,OAGnB,OAFAyB,EAAY9D,OACZ2D,EAAK1B,QAGLgB,GAAWA,EAAUlD,EAAGC,GACvB5B,KAAKmE,MAAMxC,GAAGC,GAAG4D,WAClBD,EAAK1B,QACL6B,EAAY9D,WAKNxB,IAAdsF,EACAf,EAAI/C,GAAKgD,EAAIhD,EAETgD,EAAIhD,GAAK,EAAG+C,EAAI/C,EC5FX,GD4Fe8D,EAA8Bf,EAAIgB,EACrDhB,EAAI/C,EC7FA,ID6FK8D,EAAY,KE5F3B,MAAME,EAKjB,YAAmBC,EAA4BC,EAAuBC,GAAnD,KAAAF,QAA4B,KAAAC,QAAuB,KAAAC,QAClE/F,KAAKgE,MAAQ6B,EAAMG,YACnBhG,KAAKiE,OAAS4B,EAAMI,aAGxB,MAAMC,EAA+BC,EAAYC,EAAYC,EAAYC,GACrEtG,KAAK6F,MAAMU,OAAOL,EAAKC,EAAIC,EAAIC,EAAIC,EAAItG,KAAK8F,MAAO9F,KAAK+F,QCThE,MAAMS,EACN,CACI,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,IAGO,MAAM,EACjB,YAAmBhB,EAA0BiB,GAA1B,KAAAjB,WAA0B,KAAAiB,UAI7C,MAAMP,EAA+BC,EAAYC,GAC7CpG,KAAKyG,QAAQ/B,MAAMwB,EAAKC,EAAIC,EFvBX,OE0BrB,kBAAkBP,GACd,MAAMa,EAAcF,EAAY1E,KAAKmD,MAAMnD,KAAK6E,SAAWH,EAAYI,SACvE,OAAO,IAAI,GAAK,EAAM,IAAIhB,EAAaC,EAAOa,EAAY,GAAIA,EAAY,KAG9E,gBAAgBb,GACZ,OAAO,IAAI,GAAK,EAAO,IAAID,EAAaC,EAAO,EAAG,M,YC/B3C,MAAM,EACjB,YAAmBlE,EAAkBC,EAAkB6D,EAAkBE,GAAtD,KAAAhE,IAAkB,KAAAC,IAAkB,KAAA6D,IAAkB,KAAAE,IAIzE,MAAMkB,EAAoBjF,GACtB,YAAUxB,IAANwB,EACO,IAAI,EAAK5B,KAAK2B,EAAKkF,EAAalF,EAAG3B,KAAK4B,EAAKiF,EAAajF,EAAG5B,KAAKyF,EAAGzF,KAAK2F,GAE9E,IAAI,EAAK3F,KAAK2B,EAAKkF,EAAe7G,KAAK4B,EAAIA,EAAG5B,KAAKyF,EAAGzF,KAAK2F,GAKtE,QAAQkB,EAAoBjF,QACdxB,IAANwB,GACA5B,KAAK2B,GAAMkF,EAAalF,EACxB3B,KAAK4B,GAAMiF,EAAajF,IAExB5B,KAAK2B,GAAMkF,EACX7G,KAAK4B,GAAKA,GAIlB,KAAK0B,GACD,OAAQA,GACJ,KAAKZ,EAAA,EAAUG,GAAI,OAAO7C,KAAK4B,EAC/B,KAAKc,EAAA,EAAUO,KAAM,OAAOjD,KAAK4B,EAAI5B,KAAK2F,EAC1C,KAAKjD,EAAA,EAAUS,KAAM,OAAOnD,KAAK2B,EACjC,KAAKe,EAAA,EAAUK,MAAO,OAAO/C,KAAK2B,EAAI3B,KAAKyF,GAInD,OAAOnC,GACH,OAAQA,GACJ,KAAKZ,EAAA,EAAUI,QACf,KAAKJ,EAAA,EAAUM,UACf,KAAKN,EAAA,EAAUQ,SACf,KAAKR,EAAA,EAAUU,OAAQ,OAAO,IAAI1B,EAAA,EAAM1B,KAAK2B,EAAG3B,KAAK4B,IAI7D,OAAOkF,GACH,OAAOA,EAAEnF,IAAM3B,KAAK2B,GAAKmF,EAAElF,IAAM5B,KAAK4B,GAAKkF,EAAErB,IAAMzF,KAAKyF,GAAKqB,EAAEnB,IAAM3F,KAAK2F,G,6BC5C3E,MAAM,EAET,YAAYoB,EAAyBC,GAAA,KAAAA,SACjC,IAAMC,IAAIF,GAASG,UAAUC,IACzBnH,KAAKoH,KAAOD,EAAKA,KACjBnH,KAAKgH,YCUjB,IAAIK,EAOA,EAEAC,EAEAzH,EAEW,SAAS0H,IACpB,MAAMC,EAAc,IAAIC,EAAA,EACxBJ,EAAS,CACLK,MAAO,IAAIC,EAAA,EAAY,GAAI,GAAI,EAAUH,EAAYI,6BACrDC,OAAQ,IAAIF,EAAA,EAAY,GAAI,GAAI,EAAWH,EAAYI,6BACvDE,OAAQ,IAAIH,EAAA,EAAY,GAAI,GAAIG,EAAA,EAAWN,EAAYI,6BACvDG,SAAU,IAAI,EAAa,uCAAwCP,EAAYI,8BAEnF/H,EAAO,IAAImI,EAAA,EAAgB1D,SAAS8C,MACpCI,EAAYS,cAAcC,GAG9B,SAASA,IACLZ,EAAQ,IAAI,EAAM,GAAsB,GAAsB,IACtDxF,KAAK6E,UAAY,IACV,EAAKwB,SAASd,EAAOK,OAGrB,EAAKU,WAAWf,EAAOK,QAGtCJ,EAAMe,kBACN,MAAMC,EAAShE,SAASC,eAAe,cACvC,EAAM+D,EAAO7D,WAAW,MACJ,IAAI8D,EAAA,EAA6BD,EAAQ,EAAK,IAAoC,KAAoC,EAAM,SAOpJ,SAASE,IACL,EAAIC,UAAU,EAAG,EAAG,IAAoC,KACxD,YAAuB,GACvB,EAAIC,OACJ,IAAIC,EAAK,EACLC,EAAK,EACLtB,EAAMtD,MLnEY,KKoElB2E,EAAK7G,KAAK+G,IAAI,EAAG/G,KAAKgH,ILlEL,IKkEUxB,EAAMtD,MLpEf,IKoE4D+E,EAAUpH,EAAI,OAE5F2F,EAAMrD,OLrEY,KKsElB2E,EAAK9G,KAAK+G,IAAI,EAAG/G,KAAKgH,ILrEL,IKqEUxB,EAAMrD,OLtEf,IKsE6D8E,EAAUnH,EAAI,OAGjGoH,EAAOC,SA3DoB,KA4DpBC,QAAQP,EAAIC,GACZO,WAAWC,EAA4BA,GAE9C,EAAIC,WAAWL,EAAOrH,GAAIqH,EAAOpH,GACjC,EAAI0H,UAAUhC,EAAMjD,UAAW,EAAG,GAClCxE,EAAK0J,SAEL,EAAIC,UAAY,OAChB,EAAIC,SAASV,EAAUpH,EAAGoH,EAAUnH,EAAGmH,EAAUtD,EAAGsD,EAAUpD,GAC9D,MAAMf,EAAM,IAAIlD,EAAA,EAAM,EAAG,GACrB7B,EAAK2B,UAAU,OACfoD,EAAIjD,GAAK,GAET9B,EAAK2B,UAAU,OACfoD,EAAIjD,EAAI,GAER9B,EAAK2B,UAAU,OACfoD,EAAIhD,GAAK,GAET/B,EAAK2B,UAAU,OACfoD,EAAIhD,EAAI,GAEZ,EAAI4H,UAAY,SAChB,EAAIE,YAAc,GAClBpC,EAAMqC,cAAcZ,EAAWnE,EAAK,CAACuB,EAAIC,KACrC,EAAIqD,SLlGa,GKkGJtD,ELlGI,GKkGkBC,ELlGlB,SKoGrB,EAAIsD,YAAc,EAElBE,GAAUA,EACNA,IACA,EAAIJ,UAAY,QAChB,EAAIC,SAAS,EAAG,EAAG,GAAI,KAE3B,EAAII,UACJC,sBAAsB,IAAMtB,KAvD5BA,GAGJ,MAAMQ,EAAS,IAAItH,EAAA,EAAM,EAAG,GACtBqH,EAAY,IAAI,EAAK,EAAG,EAAG,GAAI,IACrC,IAAIa,GAAS","file":"rpgTest.bundle.js","sourcesContent":["import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","export default class Point {\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const nx = y === undefined ? (other as Point).x : other as number;\r\n        const ny = y === undefined ? (other as Point).y : y;\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    static Add(a: Point, b: Point): Point {\r\n        return new Point(a.x + b.x, a.y + b.y);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: Direction[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default __webpack_public_path__ + \"bbb298f00b41bbd627d27aa0529a20ba.png\";","export default __webpack_public_path__ + \"42ace1eb95edbc899165c10bb9cc20ab.png\";","export default __webpack_public_path__ + \"e5352b303b79e08de36a8c4248cdbb28.png\";","\r\nexport interface ILoopControl {\r\n    break(): void;\r\n}\r\n\r\nexport function IterateRange(start: number, end: number, handle: (value: number, control: ILoopControl) => void): void {\r\n    let breakIteration = false;\r\n    const loopControl = {\r\n        break: () => {\r\n            breakIteration = true;\r\n        }\r\n    };\r\n\r\n    if (end === start) {\r\n        handle(start, loopControl);\r\n        return;\r\n    }\r\n\r\n    const direction = end > start ? 1 : -1;\r\n    const finalValue = end + direction;\r\n\r\n    for (let i = start; i !== finalValue && !breakIteration; i += direction) {\r\n        handle(i, loopControl);\r\n    }\r\n}","import Cell from './Cell';\r\nimport Rect from '../../common/position/Rectangle';\r\nimport Point from '../../common/position/Point';\r\nimport { Direction } from '../../common/position/Direction';\r\nimport { IterateRange } from '../../common/Iterate';\r\nimport * as Const from '../Constants';\r\nimport { createContext } from 'react';\r\nimport { ResizeCanvas } from '../../common/CanvasHelpers';\r\n\r\nexport default class World {\r\n    cells: Cell[][];\r\n\r\n    public prerender: HTMLCanvasElement;\r\n\r\n    constructor(public width: number, public height: number, generateCell: () => Cell) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            const col = [];\r\n            for (let y = 0; y < height; y++) {\r\n                col.push(generateCell());\r\n            }\r\n            this.cells.push(col);\r\n        }\r\n\r\n        this.prerender = document.getElementById('world_prerender') as HTMLCanvasElement;\r\n    }\r\n\r\n    updatePrerender() {\r\n        ResizeCanvas(this.prerender, Const.TILE_SIZE * this.width, Const.TILE_SIZE * this.height);\r\n        const pctx = this.prerender.getContext('2d');\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.cells[x][y].paint(pctx, x * Const.TILE_SIZE, y * Const.TILE_SIZE);\r\n            }\r\n        }\r\n    }\r\n\r\n    tryMoveEntity(pos: Rect, vel: Point, onChecked?: (x: number, y: number) => void): void {\r\n        const xDirection = vel.x >= 0 ? Direction.Right : Direction.Left;\r\n        const yDirection = vel.y >= 0 ? Direction.Down : Direction.Up;\r\n        if (vel.x !== 0) {\r\n            const startXTile = Math.floor(pos.Edge(xDirection) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.Edge(xDirection) + vel.x) / Const.TILE_SIZE);\r\n            const startYTile = Math.floor(pos.Edge(Direction.Up) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.Edge(Direction.Down) - 1) / Const.TILE_SIZE);\r\n\r\n            let xColision: number | undefined;\r\n            IterateRange(startXTile, endXTile, (x, ctrl) => {\r\n                for (let y = startYTile; y <= endYTile; y++) {\r\n                    if (x < 0 || x >= this.width) {\r\n                        xColision = x;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        xColision = x;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (xColision === undefined) {\r\n                pos.x += vel.x;\r\n            } else {\r\n                if (vel.x >= 0) pos.x = xColision * Const.TILE_SIZE - pos.w;\r\n                else pos.x = (xColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n        if (vel.y !== 0) {\r\n            const startYTile = Math.floor(pos.Edge(yDirection) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.Edge(yDirection) + vel.y) / Const.TILE_SIZE);\r\n            const startXTile = Math.floor(pos.Edge(Direction.Left) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.Edge(Direction.Right) - 1) / Const.TILE_SIZE);\r\n\r\n            let yColision: number | undefined;\r\n            IterateRange(startYTile, endYTile, (y, ctrl) => {\r\n                for (let x = startXTile; x <= endXTile; x++) {\r\n                    if (y < 0 || y >= this.height) {\r\n                        yColision = y;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        yColision = y;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (yColision === undefined) {\r\n                pos.y += vel.y;\r\n            } else {\r\n                if (vel.y >= 0) pos.y = yColision * Const.TILE_SIZE - pos.h;\r\n                else pos.y = (yColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n    }\r\n}","export const TILES_WIDE = 28;\r\nexport const TILES_HIGH = 28;\r\nexport const TILE_SIZE = 16;","import { IGraphic } from './IGraphic';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\n\r\nexport default class SheetGraphic implements IGraphic {\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(public sheet: SpriteSheet, private tileX: number, private tileY: number) {\r\n        this.width = sheet.spriteWidth;\r\n        this.height = sheet.spriteHeight;\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number, tw: number, th: number): void {\r\n        this.sheet.render(ctx, tx, ty, tw, th, this.tileX, this.tileY);\r\n    }\r\n\r\n}","import { IGraphic } from '../IGraphic';\r\nimport * as Const from '../Constants';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport SheetGraphic from '../SheetGraphic';\r\n\r\nconst GRASS_TILES: [number, number][] =\r\n[\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [7, 1],\r\n    [7, 1],\r\n    [10, 1],\r\n    [10, 2],\r\n    [9, 2]\r\n];\r\n\r\nexport default class Cell {\r\n    constructor(public pathable: boolean, public graphic: IGraphic) {\r\n\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number) {\r\n        this.graphic.paint(ctx, tx, ty, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    }\r\n\r\n    static GrassFloor(sheet: SpriteSheet): Cell {\r\n        const grassCoords = GRASS_TILES[Math.floor(Math.random() * GRASS_TILES.length)];\r\n        return new Cell(true, new SheetGraphic(sheet, grassCoords[0], grassCoords[1]));\r\n    }\r\n\r\n    static RockWall(sheet: SpriteSheet): Cell {\r\n        return new Cell(false, new SheetGraphic(sheet, 7, 24));\r\n    }\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    Shift(x: number, y: number): Rect;\r\n    Shift(p: Point): Rect;\r\n    Shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    ShiftBy(x: number, y: number): void;\r\n    ShiftBy(p: Point): void;\r\n    ShiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    Edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    Corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Axios from 'axios-observable';\r\n\r\nexport class FileResource<T> {\r\n    public body: T;\r\n    constructor(fileUrl: string, private onload: () => void) {\r\n        Axios.get(fileUrl).subscribe(data => {\r\n            this.body = data.data as T;\r\n            this.onload();\r\n        });\r\n    }\r\n}","import * as Const from './Constants';\r\nimport AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport arrowsUrl from '../common-assets/arrows.png';\r\nimport tilesUrl from '../common-assets/rpg1.png';\r\nimport wizardUrl from '../common-assets/wizard16.png';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport World from './world/World';\r\nimport Cell from './world/Cell';\r\nimport Rect from '../common/position/Rectangle';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { FileResource } from '../common/assets/FileResource';\r\n\r\nconst CAMERA_SLOWDOWN_FACTOR = 3;\r\n\r\nlet assets: {\r\n    tiles: SpriteSheet,\r\n    wizard: SpriteSheet,\r\n    arrows: SpriteSheet,\r\n    tilesets: FileResource<any>\r\n};\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\n\r\nlet world: World;\r\n\r\nlet keys: KeyboardManager;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    assets = {\r\n        tiles: new SpriteSheet(16, 16, tilesUrl, assetLoader.registerAssetLoadCallback()),\r\n        wizard: new SpriteSheet(16, 16, wizardUrl, assetLoader.registerAssetLoadCallback()),\r\n        arrows: new SpriteSheet(16, 16, arrowsUrl, assetLoader.registerAssetLoadCallback()),\r\n        tilesets: new FileResource('../dist/assets/rpgtest/tilesets.json', assetLoader.registerAssetLoadCallback()),\r\n    };\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    world = new World(Const.TILES_WIDE * 2, Const.TILES_HIGH * 2, () => {\r\n        if (Math.random() <= 0.15) {\r\n            return Cell.RockWall(assets.tiles);\r\n        }\r\n        else {\r\n            return Cell.GrassFloor(assets.tiles);\r\n        }\r\n    });\r\n    world.updatePrerender();\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    ctx = canvas.getContext('2d');\r\n    const scaleHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.TILE_SIZE * Const.TILES_WIDE, Const.TILE_SIZE * Const.TILES_HIGH, true, () => { return; });\r\n    tick();\r\n}\r\n\r\nconst camPos = new Point(0, 0);\r\nconst playerPos = new Rect(0, 0, 14, 14);\r\nlet toggle = false;\r\nfunction tick() {\r\n    ctx.clearRect(0, 0, Const.TILES_WIDE * Const.TILE_SIZE, Const.TILES_HIGH * Const.TILE_SIZE);\r\n    NearestNeighborScaling(ctx);\r\n    ctx.save();\r\n    let cx = 0;\r\n    let cy = 0;\r\n    if (world.width > Const.TILES_WIDE) {\r\n        cx = Math.max(0, Math.min((world.width - Const.TILES_WIDE) * Const.TILE_SIZE, playerPos.x - (Const.TILE_SIZE * Const.TILES_WIDE / 2)));\r\n    }\r\n    if (world.height > Const.TILES_HIGH) {\r\n        cy = Math.max(0, Math.min((world.height - Const.TILES_HIGH) * Const.TILE_SIZE, playerPos.y - (Const.TILE_SIZE * Const.TILES_HIGH / 2)));\r\n    }\r\n\r\n    camPos.MultWith(CAMERA_SLOWDOWN_FACTOR, CAMERA_SLOWDOWN_FACTOR)\r\n          .AddWith(cx, cy)\r\n          .DivideWith(CAMERA_SLOWDOWN_FACTOR + 1, CAMERA_SLOWDOWN_FACTOR + 1);\r\n\r\n    ctx.translate(-camPos.x, -camPos.y);\r\n    ctx.drawImage(world.prerender, 0, 0);\r\n    keys.update();\r\n\r\n    ctx.fillStyle = 'blue';\r\n    ctx.fillRect(playerPos.x, playerPos.y, playerPos.w, playerPos.h);\r\n    const vel = new Point(0, 0);\r\n    if (keys.isKeyDown('a')) {\r\n        vel.x = -3;\r\n    }\r\n    if (keys.isKeyDown('d')) {\r\n        vel.x = 3;\r\n    }\r\n    if (keys.isKeyDown('w')) {\r\n        vel.y = -3;\r\n    }\r\n    if (keys.isKeyDown('s')) {\r\n        vel.y = 3;\r\n    }\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.globalAlpha = 0.6;\r\n    world.tryMoveEntity(playerPos, vel, (tx, ty) => {\r\n        ctx.fillRect(tx * Const.TILE_SIZE, ty * Const.TILE_SIZE, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    });\r\n    ctx.globalAlpha = 1;\r\n\r\n    toggle = !toggle;\r\n    if (toggle) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 10, 10);\r\n    }\r\n    ctx.restore();\r\n    requestAnimationFrame(() => tick());\r\n}"],"sourceRoot":""}