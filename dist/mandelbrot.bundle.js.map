{"version":3,"sources":["webpack:///./src/projects/common/Range.ts","webpack:///./src/projects/common/Range2d.ts","webpack:///./src/projects/common/Complex.ts","webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/common/ColorRange.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts"],"names":["Range","min","max","this","percentage","point","amt","range","anchor","ScaleTo","Length","targetWidth","deltaRange","value","targetRange","GetValue","GetPercentage","ConvertTo","window","Range2d","xRange","yRange","xPercent","yPercent","x","y","xValue","yValue","xAmt","yAmt","Shift","xShift","yShift","ShiftByPercentage","percent","xAnchor","yAnchor","Scale","target","intermediate","Complex","real","imaginary","Math","sqrt","AbsSq","other","tmpReal","power","rs","theta","atan2","pow","cos","sin","ProgressiveRepaint","canvasWidth","canvasHeight","finished","scale","maxScale","fastLog2","v","shift","paintColor","rMin","rMax","gMin","gMax","bMin","bMax","rRange","gRange","bRange","floor","canvas","func","repainter","ctx","getContext","screenRange","offsetWidth","offsetHeight","windowRange","i","X","Y","s","worldCoords","fillStyle","CalcColor","fillRect","Advance","coords","original","rolling","iter","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","MultiplyWith","AddWith","Julia","c","radius","Abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","dx","dy","assertBounds","scalePercentage","deltaY","scalePerc","AspectScale","assertRangeBounds","r","Paint","mandelRender","juliaRender","Run","document","getElementById","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset","requestAnimationFrame"],"mappings":"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","file":"mandelbrot.bundle.js","sourcesContent":["export class Range {\r\n    constructor(public min: number, public max: number) { }\r\n\r\n    Length() {\r\n        return this.max - this.min;\r\n    }\r\n\r\n    GetValue(percentage: number) {\r\n        return this.min + (this.max - this.min) * percentage;\r\n    }\r\n\r\n    GetPercentage(point: number) {\r\n        return (point - this.min) / (this.max - this.min);\r\n    }\r\n\r\n    Shift(amt: number) {\r\n        this.min += amt;\r\n        this.max += amt;\r\n    }\r\n\r\n    ShiftByPercentage(percentage: number) {\r\n        const range = this.max - this.min;\r\n        this.min += range * percentage;\r\n        this.max += range * percentage;\r\n    }\r\n\r\n    Scale(percentage: number, anchor = 0.5) {\r\n        this.ScaleTo(this.Length() * percentage, anchor);\r\n    }\r\n\r\n    ScaleTo(targetWidth: number, anchor: number) {\r\n        const range = this.max - this.min;\r\n        const deltaRange = targetWidth - range;\r\n        this.min -= deltaRange * anchor;\r\n        this.max += deltaRange * (1 - anchor);\r\n    }\r\n\r\n    ConvertTo(value: number, targetRange: Range) {\r\n        return targetRange.GetValue(this.GetPercentage(value));\r\n    }\r\n    ConvertFrom(value: number, targetRange: Range) {\r\n        return targetRange.ConvertTo(value, this);\r\n    }\r\n}\r\nexport const unitRange: Range = new Range(0, 1);\r\n(window as any).range = Range;","import { Range } from './Range';\r\n\r\nexport class Range2d {\r\n    constructor(public xRange: Range, public yRange: Range) { }\r\n\r\n    public GetValue(xPercent: number, yPercent: number) {\r\n        return { x: this.xRange.GetValue(xPercent), y: this.yRange.GetValue(yPercent) };\r\n    }\r\n\r\n    public GetPercentage(xValue: number, yValue: number) {\r\n        return { x: this.xRange.GetPercentage(xValue), y: this.yRange.GetPercentage(yValue) };\r\n    }\r\n\r\n    public Shift(xAmt: number, yAmt: number) {\r\n        this.xRange.Shift(xAmt);\r\n        this.yRange.Shift(yAmt);\r\n    }\r\n    public ShiftByPercentage(xShift: number, yShift: number) {\r\n        this.xRange.ShiftByPercentage(xShift);\r\n        this.yRange.ShiftByPercentage(yShift);\r\n    }\r\n\r\n    public AspectScale(percent: number, xAnchor = 0.5, yAnchor = 0.5) {\r\n        return this.Scale(percent, xAnchor, percent, yAnchor);\r\n    }\r\n    public Scale(xPercent: number, xAnchor: number, yPercent: number, yAnchor: number) {\r\n        this.xRange.Scale(xPercent, xAnchor);\r\n        this.yRange.Scale(yPercent, yAnchor);\r\n    }\r\n\r\n    public ConvertTo(value: {x: number, y: number}, target: Range2d) {\r\n        const intermediate = this.GetPercentage(value.x, value.y);\r\n        return target.GetValue(intermediate.x, intermediate.y);\r\n    }\r\n}","export class Complex {\r\n    constructor(public real: number, public imaginary: number) { }\r\n\r\n    public AbsSq(): number {\r\n        return this.real * this.real + this.imaginary * this.imaginary;\r\n    }\r\n    public Abs(): number {\r\n        return Math.sqrt(this.AbsSq());\r\n    }\r\n\r\n    public AddWith(other: Complex) {\r\n        this.real += other.real;\r\n        this.imaginary += other.imaginary;\r\n    }\r\n\r\n    public MultiplyWith(other: Complex) {\r\n        const tmpReal = this.real * other.real - this.imaginary * other.imaginary;\r\n        this.imaginary = this.real * other.imaginary + other.real * this.imaginary;\r\n        this.real = tmpReal;\r\n    }\r\n\r\n    public Pow(power: number) {\r\n        const rs = this.AbsSq();\r\n        const theta = Math.atan2(this.imaginary, this.real);\r\n        this.real = Math.pow(rs, power / 2) * Math.cos(theta);\r\n        this.imaginary = Math.pow(rs, power / 2) * Math.sin(theta);\r\n    }\r\n}","export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.AbsSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.AbsSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","import { Range } from './Range';\r\nexport class ColorRange {\r\n    public rRange: Range;\r\n    public gRange: Range;\r\n    public bRange: Range;\r\n    constructor(rMin: number, rMax: number, gMin: number, gMax: number, bMin: number, bMax: number) {\r\n        this.rRange = new Range(rMin, rMax);\r\n        this.gRange = new Range(gMin, gMax);\r\n        this.bRange = new Range(bMin, bMax);\r\n    }\r\n\r\n    public ToColor(percentage: number): string {\r\n        return 'rgb(' + Math.floor(this.rRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.gRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.bRange.GetValue(percentage)) + ')';\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.MultiplyWith(rolling);\r\n        rolling.AddWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.Abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.MultiplyWith(rolling);\r\n        rolling.AddWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}"],"sourceRoot":""}