{"version":3,"sources":["webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts"],"names":["ProgressiveRepaint","canvasWidth","canvasHeight","this","finished","scale","maxScale","fastLog2","Math","min","x","y","v","shift","paintColor","canvas","func","repainter","ctx","getContext","screenRange","offsetWidth","offsetHeight","windowRange","i","X","Y","s","Scale","worldCoords","ConvertTo","fillStyle","CalcColor","fillRect","Advance","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","multiplyWith","addWith","Julia","c","radius","sqrt","abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","dx","dy","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","r","Shift","max","Paint","mandelRender","juliaRender","Run","document","getElementById","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset","requestAnimationFrame"],"mappings":"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","file":"mandelbrot.bundle.js","sourcesContent":["export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}"],"sourceRoot":""}