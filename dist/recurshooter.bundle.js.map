{"version":3,"file":"recurshooter.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/recurshooter/map/MapObstruction.ts","webpack://trading-game/./src/projects/recurshooter/map/MapInfo.ts","webpack://trading-game/./src/projects/recurshooter/RunGameScreen.ts","webpack://trading-game/./src/projects/recurshooter/Runner.ts","webpack://trading-game/./src/views/projects/recurshooter/RecursiveShooterComponent.tsx"],"sourcesContent":["export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        if(p === 0) return a;\n        if(p === 1) return b;\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import Point from \"../../common/position/Point\";\n\nexport default class MapObstruction {\n    constructor(public bounds: Point[], public blockMove: boolean, public blockBullets: boolean) {\n\n    }\n}","import Point from \"../../common/position/Point\";\nimport MapObstruction from \"./MapObstruction\";\n\nexport class MapInfo {\n    constructor(public recursePosition: { center: Point, scale: number, rotation: number }, public obstructions: MapObstruction[]) {\n    }\n}\n\nconst defaultMap = new MapInfo(\n    { center: new Point(400, 300), scale: 0.25, rotation: 0},\n    [\n        new MapObstruction([new Point(0, 0), new Point(100, 0), new Point(100, 600), new Point(0, 600)], true, true),\n        new MapObstruction([new Point(700, 0), new Point(800, 0), new Point(800, 600), new Point(700, 600)], true, true),\n    ]\n);\nexport default defaultMap;","import { ResizeCanvas } from \"../common/CanvasHelpers\";\nimport Point from \"../common/position/Point\";\nimport IScreen from \"./IScreen\";\nimport {MapInfo} from \"./map/MapInfo\";\n\nconst USE_CACHED_RENDER = true;\n\nexport default class RunGameScreen implements IScreen {\n\n    private offscreenCanvas: HTMLCanvasElement;\n    private offscreenCtx: CanvasRenderingContext2D;\n\n    private recursionArgs: {\n        offset: Point,\n        rotation: number,\n        scale: number\n    };\n\n    constructor(private map: MapInfo) {\n    }\n\n    update(): void {\n        \n    }\n\n    initOffscreenCanvas(canvas: HTMLCanvasElement) {\n        this.offscreenCanvas = document.createElement('canvas');\n        ResizeCanvas(this.offscreenCanvas, canvas.width, canvas.height);\n        this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n    }\n    \n    draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D): void {\n        if(this.offscreenCanvas === null || this.offscreenCanvas === undefined)\n            this.initOffscreenCanvas(canvas);\n        if(USE_CACHED_RENDER)\n            this.renderWorld(this.offscreenCanvas, this.offscreenCtx);\n        ctx.save();\n        this.recursiveRender(this.offscreenCanvas, canvas, ctx);\n        ctx.restore();\n    }\n\n    recursiveRender(src: HTMLCanvasElement, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        for(let i = 0; i < 8; i++){\n            if(USE_CACHED_RENDER)\n                ctx.drawImage(src, 0, 0, canvas.width, canvas.height);\n            else\n                this.renderWorld(canvas, ctx);\n            ctx.translate(-400, -300);\n            ctx.scale(this.map.recursePosition.scale, this.map.recursePosition.scale);\n            ctx.rotate(this.map.recursePosition.rotation);\n\n            const tgtPoint = this.map.recursePosition.center.rotate(-this.map.recursePosition.rotation).multWith(1/this.map.recursePosition.scale, 1/this.map.recursePosition.scale);\n\n            ctx.translate(tgtPoint.x, tgtPoint.y);\n        }\n    }\n\n    renderWorld(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        ctx.save();\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, 800, 600);\n        ctx.beginPath();\n        for(const obstruction of this.map.obstructions) {\n            ctx.moveTo(obstruction.bounds[0].x, obstruction.bounds[0].y);\n            for(let i = 1; i <= obstruction.bounds.length; i++) {\n                ctx.lineTo(obstruction.bounds[i % obstruction.bounds.length].x, obstruction.bounds[i % obstruction.bounds.length].y);\n            }\n        }\n        ctx.fillStyle = '#006';\n        ctx.strokeStyle = 'blue';\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n}","import { ResizeCanvas } from \"../common/CanvasHelpers\";\nimport IScreen from \"./IScreen\";\nimport defaultMap from \"./map/MapInfo\";\nimport RunGameScreen from \"./RunGameScreen\";\n\nexport default class Runner {\n    ctx: CanvasRenderingContext2D;\n    private repaintTimer: number;\n    private screen: IScreen;\n\n    constructor(public canvas: HTMLCanvasElement) {\n        ResizeCanvas(canvas, 800, 600);\n        this.ctx = canvas.getContext('2d');\n        this.repaintTimer = -1;\n\n        this.screen = new RunGameScreen(defaultMap);\n    }\n\n    start() {\n        this.runTick();\n    }\n\n    private runTick() {\n        this.tick();\n        this.repaintTimer = requestAnimationFrame(this.runTick.bind(this));\n    }\n\n    tick() {\n        this.screen.update(s => {\n            this.screen = s;\n        });\n        this.ctx.save();\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.screen.draw(this.canvas, this.ctx);\n        this.ctx.restore();\n    }\n\n    stop() {\n        if(this.repaintTimer !== -1) {\n            cancelAnimationFrame(this.repaintTimer);\n        }\n    }\n}","import * as React from 'react';\nimport Runner from '../../../projects/recurshooter/Runner';\n\nexport default function RecursiveShooterComponent() {\n    const ref = React.useRef<HTMLCanvasElement>();\n    React.useEffect(()=>{\n        const runner = new Runner(ref.current);\n        runner.start();\n        return ()=>runner.stop();\n    }, [ref.current]);\n    return <canvas ref={ref} />;\n}\n"],"names":["Point","constructor","x","y","static","angle","distance","Math","cos","sin","lengthSq","dot","this","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","direction","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","undefined","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","slice","rotate","theta","fromAngle","MapObstruction","bounds","blockMove","blockBullets","recursePosition","obstructions","center","scale","rotation","RunGameScreen","map","update","initOffscreenCanvas","canvas","offscreenCanvas","document","createElement","width","height","offscreenCtx","getContext","draw","ctx","renderWorld","save","recursiveRender","restore","i","drawImage","translate","tgtPoint","fillStyle","fillRect","beginPath","obstruction","moveTo","lineTo","strokeStyle","fill","stroke","Runner","repaintTimer","screen","start","runTick","tick","requestAnimationFrame","bind","s","stop","cancelAnimationFrame","RecursiveShooterComponent","ref","runner","current"],"sourceRoot":""}