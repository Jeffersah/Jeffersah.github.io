{"version":3,"file":"890.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/diplo/Map.ts","webpack://trading-game/./src/views/projects/diplo/DiploComponent.tsx"],"sourcesContent":["export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public LengthSq(): number {\n        return Point.Dot(this, this);\n    }\n\n    public Length(): number {\n        return Math.sqrt(this.LengthSq());\n    }\n\n    public Clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public Negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public NegateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static Dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public DotWith(other: Point): number {\n        return Point.Dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.Length();\n        return Point.Multiply(this, 1 / len);\n    }\n\n    public Direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public Truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public AddWith(x: number, y: number): this;\n    public AddWith(other: Point): this;\n    public AddWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public MultWith(s: number): this;\n    public MultWith(x: number, y: number): this;\n    public MultWith(other: Point): this;\n    public MultWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public SubtractWith(x: number, y: number): this;\n    public SubtractWith(other: Point): this;\n    public SubtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public DivideWith(x: number, y: number): this;\n    public DivideWith(other: Point): this;\n    public DivideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public Equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static Multiply(a: Point, s: number, sy?: number): Point;\n    static Multiply(a: Point, b: Point): Point;\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\n        return Point.add(\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.Length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import { findMax, flatMap } from \"../../LinqLike\";\nimport Point from \"../common/position/Point\";\nimport IMapDataJson, { IProvinceJson } from \"./assets/IMapDataJson\";\nimport { FactionType, ProvinceType } from \"./Enums\";\n\nexport default class Map {\n    provinces: { [key: string]: Province };\n\n    constructor(mapJson: IMapDataJson) {\n        this.provinces = {};\n\n        for(let key of Object.keys(mapJson)) {\n            let json = mapJson[key];\n            this.provinces[key] = new Province(key, json);\n        }\n\n        for(let key of Object.keys(this.provinces)){\n            let province = this.provinces[key];\n            if(province.type === 'impassable') continue;\n            for(let key2 of Object.keys(this.provinces)){\n                let other = this.provinces[key2];\n                if(other == province || other.type === 'impassable') continue;\n                if((mapJson[province.name].connect?.indexOf(other.name)??-1) !== -1 || areNeighbors(province, other)) {\n                    province.neighbors.push(other);\n                    other.neighbors.push(province);\n                    if(other.type === 'sea' && province.type === 'land') province.type = 'coast';\n                    if(other.type === 'land' && province.type === 'sea') other.type = 'coast';\n                }\n            }\n        }\n    }\n}\n\nfunction areNeighbors(p1: Province, p2: Province): boolean {\n    for(const pol1 of p1.polygons) {\n        for(const pol2 of p2.polygons) {\n            if(arePolysTouching(pol1, pol2)) return true;\n        }\n    }\n    return false;\n}\n\nconst ADJ_THRESH = 4;\nfunction arePolysTouching(p1: Point[], pt2: Point[]): boolean {\n    for(let i = 0; i < p1.length; i++) {\n        let line = [p1[i], p1[(i+1)%p1.length]];\n        for(let j = 0; j < pt2.length; j++) {\n            let otherLine = [pt2[j], pt2[(j+1)%pt2.length]];\n            if(Point.subtract(otherLine[0], line[0]).LengthSq() < ADJ_THRESH\n                && Point.subtract(otherLine[1], line[1]).LengthSq() < ADJ_THRESH)\n                return true;\n                \n            if(Point.subtract(otherLine[1], line[0]).LengthSq() < ADJ_THRESH\n                && Point.subtract(otherLine[0], line[1]).LengthSq() < ADJ_THRESH)\n                return true;\n        }\n    }\n    return false;\n}\n\nexport class Province {\n    name: string;\n    abbr: string;\n    type: ProvinceType;\n    supply: boolean;\n    owner?: FactionType;\n    polygons: Point[][];\n    svgData: string;\n    neighbors: Province[];\n    midpoint: Point;\n\n    constructor(key: string, json: IProvinceJson) {\n        this.neighbors = [];\n        this.polygons = [];\n        this.owner = json.owner;\n        this.supply = json.supply ?? false;\n        this.type = json.type;\n        this.name = key;\n        this.abbr = json.abbr;\n        this.svgData = json.data;\n\n        let svgPath = json.data.split(' ');\n        let svgMode: 'm' | 'v' | 'h' = 'm';\n        let svgRelative: boolean = false;\n        let polygon: Point[] = [];\n        for(let component of svgPath) {\n            switch(component) {\n                case 'm':\n                case 'l':\n                case 'M':\n                case 'L':\n                    svgMode = 'm';\n                    svgRelative = component.toUpperCase() != component;\n                    break;\n                case 'v':\n                case 'V':\n                    svgMode = 'v';\n                    svgRelative = component.toUpperCase() != component;\n                    break;\n                case 'h':\n                case 'H':\n                    svgMode = 'h';\n                    svgRelative = component.toUpperCase() != component;\n                    break;\n                case 'z':\n                case 'Z':\n                    this.polygons.push(polygon);\n                    polygon = [];\n                    break;\n                default:\n                    var lastPt = polygon.length === 0 \n                        ? this.polygons.length === 0 ? new Point(0,0) : this.polygons[this.polygons.length - 1][this.polygons[this.polygons.length - 1].length - 1]\n                        : polygon[polygon.length - 1];\n\n                    var pt = component.split(',');\n\n                    var parsed = svgMode === 'm' \n                        ? new Point(parseFloat(pt[0]), parseFloat(pt[1]))\n                        : svgMode === 'h'\n                        ? new Point(parseFloat(pt[0]), svgRelative ? 0 : lastPt.y)\n                        : new Point(svgRelative ? 0 : lastPt.x, parseFloat(pt[0]));\n\n                    if(isNaN(parsed.x) || isNaN(parsed.y))\n                    {\n                        console.log(key + ' parse FAILED: ' + component);\n                    }\n\n                    polygon.push(\n                        svgRelative ? Point.add(lastPt, parsed) : parsed\n                    );\n                    break;\n            }\n        }\n        if(polygon.length !== 0) this.polygons.push(polygon);\n        \n        let maxX = 0;\n        let minX = 1024;\n        let maxY = 0; \n        let minY = 1024;\n        for(const poly of this.polygons) {\n            for(const pt of poly) {\n                if(pt.x < minX) minX = pt.x;\n                if(pt.y < minY) minY = pt.y;\n                if(pt.x > maxX) maxX = pt.x;\n                if(pt.y > maxY) maxY = pt.y;\n            }\n        }\n        this.midpoint = new Point((minX + maxX) / 2, (minY + maxY) / 2);\n    }\n}","import * as React from 'react';\nimport Map from '../../../projects/diplo/Map';\nimport mapJson from '../../../projects/diplo/assets/map.json';\nimport IMapDataJson from '../../../projects/diplo/assets/IMapDataJson';\n\nconst map = new Map(mapJson as IMapDataJson);\n\nexport default function DiploComponent() {\n    const [selProvince, setSelection] = React.useState<string|undefined>(undefined);\n\n    return <div className='conway conway_body full_body'>\n        <svg viewBox='0 0 1024 1024' fill='#888'>\n            {Object.keys(map.provinces).map(key => \n            {\n                let province = map.provinces[key];\n                return <g key={key}>\n                    <path \n                        fill={\n                            key === selProvince ? '#ffff00' :\n                            province.type == 'impassable' ? '#888' :\n                            province.type == 'coast' ? '#00aa00' :\n                            province.type == 'land' ? '#00ff00' : '#0000ff'} \n                        stroke='black'\n                        d={province.svgData}\n                        onClick={()=>setSelection(key)}\n                    />\n                    <text fontSize='10' fill='black' x={province.midpoint.x} y={province.midpoint.y} style={{ pointerEvents: 'none' }}>{province.abbr}</text>\n                </g>;\n            })}\n            <g>\n                {Object.keys(map.provinces).map(key => {\n                    let province = map.provinces[key];\n                    let fromPt = province.midpoint;\n                    return <g key={key}>\n                        {province.neighbors.map(n => \n                            <line key={province.abbr + '-' + n.abbr} x1={fromPt.x} y1={fromPt.y} x2={n.midpoint.x} y2={n.midpoint.y} stroke='red' />)}\n                    </g>\n                })}\n            </g>\n        </svg>\n    </div>;\n}"],"names":["Point","constructor","x","y","static","angle","distance","Math","cos","sin","LengthSq","Dot","this","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","Direction","atan2","Truncate","trunc","AddWith","nx","ny","splitArgs","MultWith","undefined","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","rotate","theta","fromAngle","areNeighbors","pol1","polygons","pol2","arePolysTouching","pt2","i","line","j","otherLine","Province","key","json","neighbors","owner","supply","type","name","abbr","svgData","data","svgPath","split","svgMode","svgRelative","polygon","component","toUpperCase","push","lastPt","pt","parsed","parseFloat","isNaN","console","log","maxX","minX","maxY","minY","poly","midpoint","map","mapJson","provinces","Object","keys","province","key2","connect","indexOf","DiploComponent","selProvince","setSelection","className","viewBox","fill","stroke","d","onClick","fontSize","style","pointerEvents","fromPt","n","x1","y1","x2","y2"],"sourceRoot":""}