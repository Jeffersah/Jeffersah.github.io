{"version":3,"file":"blendTest.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common-assets/RockLavaAllBlends_crop.png","webpack://trading-game/./src/projects/common-assets/Selectors16x16.png","webpack://trading-game/./src/projects/tile-blend-test-1/Terrain.ts","webpack://trading-game/./src/projects/tile-blend-test-1/index.ts"],"sourcesContent":["import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export default __webpack_public_path__ + \"e6ca7ebcac9136ce5511288e898c8371.png\";","export default __webpack_public_path__ + \"f1cd5c392c5447559f3a20ac58e20646.png\";","import { Direction, cardinalDirections, diagonalDirections, ToPoint, allDirections } from '../common/position/Direction';\r\n\r\nexport enum TileType {\r\n    Rock,\r\n    Lava\r\n}\r\n\r\nexport class Terrain {\r\n    private tiles: TileType[];\r\n    private subTileIds: number[];\r\n\r\n    constructor(public tilesWide: number, public tilesHigh: number) {\r\n        this.tiles = new Array(tilesHigh * tilesWide);\r\n        for (let x = 0; x < tilesWide * tilesHigh; x++) {\r\n            this.tiles[x] = TileType.Rock;\r\n        }\r\n\r\n        this.subTileIds = new Array(tilesHigh * tilesWide * 4);\r\n        for (let x = 0; x < tilesWide * tilesHigh * 4; x++) {\r\n            this.subTileIds[x] = 0;\r\n        }\r\n\r\n        for (let x = 0; x < tilesWide; x++) {\r\n            for (let y = 0; y < tilesHigh; y++) {\r\n                this.updateTile(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private fixCoords(x: number, y: number) {\r\n        return x + y * this.tilesWide;\r\n    }\r\n\r\n    private fixSubCoords(x: number, y: number, d: Direction) {\r\n        return x * 4 + (y * this.tilesWide * 4) + ((d - Direction.UpRight) / 2);\r\n    }\r\n\r\n    public getTile(x: number, y: number): TileType {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return TileType.Lava;\r\n        const coords = this.fixCoords(x, y);\r\n        return this.tiles[this.fixCoords(x, y)];\r\n    }\r\n\r\n    public getSubTileId(x: number, y: number, d: Direction) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return 0;\r\n        const coords = this.fixSubCoords(x, y, d);\r\n        return this.subTileIds[coords];\r\n    }\r\n\r\n    public setTile(x: number, y: number, t: TileType) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return;\r\n        const coords = this.fixCoords(x, y);\r\n        if (this.tiles[coords] === t) return;\r\n\r\n        this.tiles[coords] = t;\r\n        this.updateSelfAndAdjacent(x, y);\r\n    }\r\n\r\n    private updateSelfAndAdjacent(tx: number, ty: number) {\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                this.updateTile(tx + dx, ty + dy);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateTile(tx: number, ty: number): void {\r\n        if (tx < 0 || ty < 0 || tx >= this.tilesWide || ty >= this.tilesWide) return;\r\n        const tid = this.fixCoords(tx, ty);\r\n        const type = this.tiles[tid];\r\n\r\n        let adjacency = 0x00;\r\n        allDirections.forEach((dir, i) => {\r\n            const adjMask = 1 << i;\r\n            const pt = ToPoint(dir);\r\n            if (this.getTile(pt.x + tx, pt.y + ty) !== type) {\r\n                adjacency |= adjMask;\r\n            }\r\n        });\r\n\r\n        // adjacency now contains a bitmask of (adjacent=different) where\r\n        // b[0] == T diff, b[1] = TR diff, b[2] = R diff, etc...\r\n        // Therefore, bits [0..2] are the TopRight id,\r\n        // bits [2..4] are the BottomRight id,\r\n        // bits [4..6] are the BottomLeft id,\r\n        // bits [6, 7, 0] are the TopLeft id\r\n\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpRight)] = adjacency & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownRight)] = (adjacency >> 2) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownLeft)] = (adjacency >> 4) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpLeft)] = (adjacency >> 6) | ((adjacency & 1) << 2) & 0b111;\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { ResizeCanvas, NearestNeighborScaling } from '../common/CanvasHelpers';\r\nimport blendTilesUrl from '../common-assets/RockLavaAllBlends_crop.png';\r\nimport seletorsUrl from '../common-assets/Selectors16x16.png';\r\nimport { Terrain, TileType } from './Terrain';\r\nimport { Direction, ToPoint } from '../common/position/Direction';\r\nimport Point from '../common/position/Point';\r\n\r\nlet tiles: SpriteSheet;\r\nlet selectors: SpriteSheet;\r\nlet pvMousePos: Point | undefined;\r\nlet terrain: Terrain;\r\nlet context: CanvasRenderingContext2D;\r\n\r\nconst SCALE_FACTOR = 3;\r\n\r\n\r\nfunction Run() {\r\n    const assetLoader = new AssetLoader();\r\n    tiles = new SpriteSheet(8, 8, blendTilesUrl, assetLoader.registerAssetLoadCallback());\r\n    selectors = new SpriteSheet(16, 16, seletorsUrl, assetLoader.registerAssetLoadCallback());\r\n    pvMousePos = undefined;\r\n\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    terrain = new Terrain(20, 20);\r\n\r\n    ResizeCanvas(canvas, terrain.tilesWide * 16 * SCALE_FACTOR, terrain.tilesHigh * 16 * SCALE_FACTOR);\r\n    context = canvas.getContext('2d');\r\n    NearestNeighborScaling(context);\r\n\r\n    RenderTerrain(context, terrain, tiles);\r\n\r\n    canvas.addEventListener('mousemove', onMouseMove);\r\n    canvas.addEventListener('mouseleave', onMouseLeave);\r\n    canvas.addEventListener('mousedown', onMouseClick);\r\n}\r\n\r\nfunction RenderTerrain(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet) {\r\n    for (let x = 0; x < terr.tilesWide; x++) {\r\n        for (let y = 0; y < terr.tilesHigh; y++) {\r\n            RenderTerrainCell(ctx, terr, sprites, x, y);\r\n        }\r\n    }\r\n}\r\nfunction RenderTerrainCell(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet, x: number, y: number) {\r\n    for (let d = 0; d < 4; d++) {\r\n        const dir = Direction.UpRight + (d * 2);\r\n        const spriteSheetX = terr.getSubTileId(x, y, dir);\r\n        let spriteSheetY = d;\r\n        if (terr.getTile(x, y) === TileType.Lava) spriteSheetY += 4;\r\n\r\n        const rtx = x * 16 + (ToPoint(dir).x === 1 ? 8 : 0);\r\n        const rty = y * 16 + (ToPoint(dir).y === 1 ? 8 : 0);\r\n        sprites.render(ctx, rtx * SCALE_FACTOR, rty * SCALE_FACTOR, 8 * SCALE_FACTOR, 8 * SCALE_FACTOR,\r\n            spriteSheetX, spriteSheetY);\r\n    }\r\n}\r\n\r\nfunction onMouseMove(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    if (pvMousePos !== undefined) {\r\n        if (!mouseCoords.Equals(pvMousePos)) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x, pvMousePos.y);\r\n            selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n                1, 0);\r\n            pvMousePos = mouseCoords;\r\n        }\r\n    }\r\n    else {\r\n        selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n            1, 0);\r\n        pvMousePos = mouseCoords;\r\n    }\r\n}\r\n\r\nfunction onMouseLeave(ev: MouseEvent) {\r\n    if (pvMousePos !== undefined) {\r\n        pvMousePos = undefined;\r\n    }\r\n}\r\n\r\nfunction onMouseClick(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    const tile = terrain.getTile(mouseCoords.x, mouseCoords.y);\r\n    terrain.setTile(mouseCoords.x, mouseCoords.y, tile === TileType.Lava ? TileType.Rock : TileType.Lava);\r\n\r\n    for (let dx = -1; dx <= 1; dx ++) {\r\n        for (let dy = -1; dy <= 1; dy++) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x + dx, pvMousePos.y + dy);\r\n        }\r\n    }\r\n\r\n    selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n        1, 0);\r\n}\r\n\r\nexport default Run;"],"names":["Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","constructor","x","y","angle","distance","Math","cos","sin","LengthSq","Dot","this","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","atan2","AddWith","nx","ny","splitArgs","MultWith","undefined","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","rotate","theta","fromAngle","TileType","Terrain","tilesWide","tilesHigh","tiles","Array","Rock","subTileIds","updateTile","fixCoords","fixSubCoords","d","getTile","Lava","getSubTileId","coords","setTile","updateSelfAndAdjacent","tx","ty","dx","dy","tid","type","adjacency","dir","i","adjMask","pt","selectors","pvMousePos","terrain","context","assetLoadDone","canvas","document","getElementById","getContext","ctx","terr","sprites","RenderTerrainCell","RenderTerrain","addEventListener","onMouseMove","onMouseLeave","onMouseClick","spriteSheetX","spriteSheetY","rtx","rty","render","ev","mouseCoords","floor","offsetX","offsetY","tile","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished"],"sourceRoot":""}