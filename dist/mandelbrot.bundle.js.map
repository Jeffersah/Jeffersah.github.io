{"version":3,"file":"mandelbrot.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/3d/Vector.ts","webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/gravitation/Rock.ts","webpack://trading-game/./src/projects/gravitation/Constants.ts","webpack://trading-game/./src/projects/gravitation/main.ts","webpack://trading-game/./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack://trading-game/./src/projects/mandelbrot/Renderer.ts","webpack://trading-game/./src/projects/mandelbrot/Constants.ts","webpack://trading-game/./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack://trading-game/./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack://trading-game/./src/projects/mandelbrot/ClickDragWrapper.ts","webpack://trading-game/./src/projects/mandelbrot/main.ts"],"sourcesContent":["\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import Vector from \"../common/3d/Vector\";\r\nimport { Color } from \"../common/Color\";\r\nimport * as C from './Constants';\r\n\r\nexport default class Rock {\r\n    Position: Vector;\r\n    Velocity: Vector;\r\n    Mass: number;\r\n    Color: Color;\r\n\r\n    constructor(pos: Vector, vel: Vector, mass: number, color: Color) {\r\n        this.Position = pos;\r\n        this.Velocity = vel;\r\n        this.Mass = mass;\r\n        this.Color = color;\r\n    }\r\n\r\n    applyGravitation(other: Rock) {\r\n        let gravVector = other.Position.subtract(this.Position);\r\n        const minlength = (this.Mass + other.Mass) * C.MASS_COLISION_SCALE;\r\n        const lengthSq = Math.max(gravVector.lengthSq() * C.LEN_SCALE_SQ, minlength * minlength);\r\n        let force = gravVector.normalize().multiply(other.Mass).multiply(C.G_CONST / lengthSq);\r\n        let accel = force.multiply(1/this.Mass);\r\n        this.Velocity = this.Velocity.add(accel);\r\n    }\r\n\r\n    finishTick() {\r\n        this.Position = this.Position.add(this.Velocity);\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, project: (v: Vector) => {x: number, y: number, depth: number}) {\r\n        ctx.save();\r\n        const { x, y, depth } = project(this.Position);\r\n        const colorScale = Math.max(Math.min(depth, 1), 0);\r\n        ctx.fillStyle = Color.rgb(this.Color.r() * colorScale, this.Color.g() * colorScale, this.Color.b() * colorScale).toString();\r\n        let size = C.SCALE_PER_MASS * this.Mass * depth;\r\n        size = Math.min(Math.max(size, 1), 100);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, size, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;\r\nexport const SCALE_PER_MASS = 2;\r\nexport const G_CONST = 60;\r\nexport const MASS_COLISION_SCALE = 3;\r\nexport const LEN_SCALE = 1;\r\nexport const LEN_SCALE_SQ = LEN_SCALE * LEN_SCALE;","import { VERSION } from '@microsoft/signalr';\r\nimport { Range } from '../common';\r\nimport Vector from '../common/3d/Vector';\r\nimport { ResizeCanvas } from '../common/CanvasHelpers';\r\nimport { Color } from '../common/Color';\r\nimport { unitRange } from '../common/Range';\r\nimport * as Const from './Constants';\r\nimport Rock from './Rock';\r\n\r\nconst NUM_ROCKS = 50;\r\n\r\nconst MIN_POS = -100;\r\nconst MAX_POS = 100;\r\nconst MAX_V = 0.3;\r\nconst MIN_MASS = 1;\r\nconst MAX_MASS = 5;\r\n\r\nlet rocks: Rock[] = [];\r\n\r\nfunction randBetween(min: number, max: number){\r\n    return Math.random() * (max-min) + min;\r\n}\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n\r\n    ResizeCanvas(canvas, Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < NUM_ROCKS; i++){\r\n        rocks.push(new Rock(\r\n            new Vector(randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS)),\r\n            new Vector(randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V)),\r\n            randBetween(MIN_MASS, MAX_MASS),\r\n            Color.rgb(1, 1, 1)\r\n        ));\r\n    }\r\n\r\n    rocks.push(new Rock(new Vector( 0,0,0),\r\n    new Vector(0,0,0),\r\n    MAX_MASS * 5,\r\n    Color.rgb(1, 0, 0)));\r\n\r\n    loop(canvas.getContext('2d'));\r\n}\r\n\r\nfunction loop(ctx: CanvasRenderingContext2D) {\r\n    tick(ctx);\r\n    requestAnimationFrame(()=>loop(ctx));\r\n}\r\n\r\nfunction tick(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0,0,Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < rocks.length; i++) {\r\n        for(let j = 0; j < rocks.length; j++) {\r\n            if(i !== j) { \r\n                rocks[i].applyGravitation(rocks[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    let heaviest = rocks.reduce((m, c) => m.Mass >= c.Mass ? m : c);\r\n\r\n    rocks.forEach(rock => {\r\n        rock.Position = rock.Position.subtract(heaviest.Position);\r\n        rock.finishTick();\r\n    });\r\n    rocks.sort((a, b) => a.Position.z - b.Position.z);\r\n    rocks.forEach(rock => {\r\n        rock.paint(ctx, projectPosition);\r\n    });\r\n}\r\n\r\nconst windowRange: Range = new Range(0, Math.min(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT));\r\nconst worldRange: Range = new Range(MIN_POS, MAX_POS);\r\n\r\nfunction projectPosition(v: Vector): {x: number, y: number, depth: number} {\r\n    return {\r\n        x: worldRange.ConvertTo(v.x, windowRange),\r\n        y: worldRange.ConvertTo(v.y, windowRange),\r\n        depth: worldRange.ConvertTo(v.z, unitRange),\r\n    };\r\n}","export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}"],"names":["Vector","constructor","x","y","z","dot","other","this","length","Math","sqrt","lengthSq","normalize","multiply","negate","sx","sy","sz","isVector","getxyz","add","dx","dy","dz","subtract","undefined","Color","vals","h","s","v","hsv","rgb","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","Rock","pos","vel","mass","color","Position","Velocity","Mass","applyGravitation","gravVector","minlength","LEN_SCALE","accel","finishTick","paint","ctx","project","save","depth","colorScale","fillStyle","size","beginPath","arc","PI","fill","restore","MIN_POS","MAX_POS","rocks","randBetween","random","Run","canvas","document","getElementById","i","push","MAX_MASS","loop","getContext","fillRect","j","heaviest","reduce","m","c","forEach","rock","sort","a","projectPosition","tick","requestAnimationFrame","windowRange","worldRange","ConvertTo","ProgressiveRepaint","canvasWidth","canvasHeight","finished","scale","maxScale","fastLog2","shift","X","Y","Scale","Advance","Reset","paintColor","Renderer","func","repainter","screenRange","offsetWidth","offsetHeight","Paint","worldCoords","CalcColor","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","ResetPaint","Mandelbrot","multiplyWith","addWith","Julia","radius","abs","ClickDragWrapper","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","reset","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","Shift","Tick","mandelRender","juliaRender","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout"],"sourceRoot":""}