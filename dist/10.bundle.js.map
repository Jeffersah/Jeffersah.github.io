{"version":3,"sources":["webpack:///./src/projects/common/3d/Camera.ts","webpack:///./src/projects/glsl-cubes/GlslCubesRunner.ts","webpack:///./src/projects/glsl-cubes/ShaderCode.ts","webpack:///./src/views/projects/glsl-cubes/GlslCubesComponent.tsx","webpack:///./src/projects/common/3d/Vector.ts","webpack:///./src/projects/common/3d/GlslHelpers.ts","webpack:///./src/projects/common/3d/Point3.ts","webpack:///./src/projects/common/3d/Quaternion.ts","webpack:///./src/projects/common/3d/Matrix4.ts","webpack:///./src/utils/rand.ts"],"names":["position","facing","this","Point3","zero","Quaternion","offsetMtx","Matrix4","translate","mult","toMatrix","window","Q","unit_cube_tristrip","canvas","ctx","getContext","program","enable","CULL_FACE","pbuffer","posBuffer","bufferCount","length","camera","renderPoints","i","push","pt","Float","sc","tickloop","tickNumber","tick","percent","x","Math","sin","PI","z","cos","axisRotation","Vector","requestAnimationFrame","cameraRowMajor","getViewMatrix","rowMajor","bufferOffset","gl","realScale","pow","abs","uniformMatrix4fv","getUniformLocation","y","GlslCubesComponent","renderer","current","cleanup","className","id","ref","other","sqrt","lengthSq","multiply","sx","sy","sz","isVector","getxyz","dx","dy","dz","undefined","loadShader","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","t","b","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","dot","len","div","pxs","iy","iz","splitArgs","allowSingle","real","j","k","denom","Dot","a","axis","radians","point","inverse","inputQ","qOut","mtx","identity","p","multRow","w","output","row","col","Array","Rand","min","max","random","floor","Number","MAX_SAFE_INTEGER"],"mappings":"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","file":"10.bundle.js","sourcesContent":["import Matrix4 from \"./Matrix4\";\r\nimport Point3 from \"./Point3\";\r\nimport Quaternion from \"./Quaternion\";\r\n\r\nexport default class Camera {\r\n    position: Point3;\r\n    facing: Quaternion;\r\n\r\n    constructor(position?: Point3, facing?: Quaternion) {\r\n        this.position = position ?? Point3.zero();\r\n        this.facing = facing ?? new Quaternion(1, 0, 0, 0);\r\n    }\r\n\r\n    getViewMatrix(): Matrix4 { \r\n        let offsetMtx = Matrix4.translate(this.position.mult(-1));\r\n        let rotMtx = this.facing.toMatrix();\r\n        return rotMtx.mult(offsetMtx);\r\n    }\r\n}","import Rand from \"../../utils/rand\";\r\nimport { Complex, Range, Range2d } from \"../common\";\r\nimport Camera from \"../common/3d/Camera\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport Point3 from \"../common/3d/Point3\";\r\nimport Quaternion from \"../common/3d/Quaternion\";\r\nimport Vector from \"../common/3d/Vector\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport { FRAGMENT_SHADER, VERTEX_SHADER } from \"./ShaderCode\";\r\n\r\n(window as any).Q = Quaternion;\r\n\r\nconst tris = [\r\n    -.8, -.8, 1,\r\n    .8, -.8, 1,\r\n    -.8, .8, 1,\r\n    \r\n    -.7, .7, 0,\r\n    -.7, -.7, 0,\r\n    .7, .7, 1,\r\n]\r\n\r\nconst unit_cube_tristrip = [\r\n    -1, 1, 1,     // Front-top-left\r\n    1, 1, 1,      // Front-top-right\r\n    -1, -1, 1,    // Front-bottom-left\r\n    1, -1, 1,     // Front-bottom-right\r\n    1, -1, -1,    // Back-bottom-right\r\n    1, 1, 1,      // Front-top-right\r\n    1, 1, -1,     // Back-top-right\r\n    -1, 1, 1,     // Front-top-left\r\n    -1, 1, -1,    // Back-top-left\r\n    -1, -1, 1,    // Front-bottom-left\r\n    -1, -1, -1,   // Back-bottom-left\r\n    1, -1, -1,    // Back-bottom-right\r\n    -1, 1, -1,    // Back-top-left\r\n    1, 1, -1      // Back-top-right\r\n];\r\n\r\nconst unit_cube_tristrip_2 = [\r\n    -1, 1, -1,     // Front-top-left\r\n    1, 1, -1,      // Front-top-right\r\n    -1, -1, -1,    // Front-bottom-left\r\n    1, -1, -1,     // Front-bottom-right\r\n    1, -1, 1,    // Back-bottom-right\r\n    1, 1, -1,      // Front-top-right\r\n    1, 1, 1,     // Back-top-right\r\n    -1, 1, -1,     // Front-top-left\r\n    -1, 1, 1,    // Back-top-left\r\n    -1, -1, -1,    // Front-bottom-left\r\n    -1, -1, 1,   // Back-bottom-left\r\n    1, -1, 1,    // Back-bottom-right\r\n    -1, 1, 1,    // Back-top-left\r\n    1, 1, 1      // Back-top-right\r\n];\r\n\r\nconst unit_cube_out_tristrip = [\r\n    -1, -1, -1,\r\n    -1, 1, -1,\r\n    1, -1, -1,\r\n    1, 1, -1,\r\n    1, 1, 1,\r\n    -1, 1, -1,\r\n    -1, 1, 1,\r\n    -1, -1, 1,\r\n    1, 1, 1,\r\n    1, -1, 1,\r\n    1, -1, -1,\r\n    -1, -1, 1,\r\n    -1, -1, -1,\r\n    -1, 1, -1,\r\n];\r\n\r\nexport default class GlslCubesRunner {\r\n\r\n    ctx: WebGLRenderingContext;\r\n    program: WebGLProgram;\r\n    posBuffer: WebGLBuffer;\r\n    bufferCount: number;\r\n    camera: Camera;\r\n\r\n    renderPoints: { pt: Point3, sc: number } [];\r\n\r\n\r\n    constructor(private canvas: HTMLCanvasElement) {\r\n        ResizeCanvas(canvas, 1024, 800);\r\n        this.ctx = canvas.getContext('webgl');\r\n        this.program = GLSL.initShaderProgram(this.ctx, VERTEX_SHADER, FRAGMENT_SHADER);\r\n        this.ctx.enable(this.ctx.CULL_FACE);\r\n\r\n        const pbuffer = unit_cube_tristrip;\r\n\r\n        this.posBuffer = GLSL.initGLBuffer(this.ctx, pbuffer);\r\n        this.bufferCount = pbuffer.length;\r\n\r\n        this.camera = new Camera(new Point3(0, 0, -3));\r\n\r\n        this.renderPoints = [];\r\n        for(let i = 0; i < 1000; i++)\r\n        {\r\n            this.renderPoints.push(\r\n                {\r\n                    pt: new Point3(Rand.Float(-2, 2), Rand.Float(-2, 2), Rand.Float(-4, 4)),\r\n                    sc: Rand.Float(0.01, 0.3)\r\n                });\r\n        }\r\n\r\n        this.tickloop(0);\r\n    }\r\n\r\n    tickloop(tickNumber: number) {\r\n        this.tick(tickNumber);\r\n        const percent = (tickNumber / (60 * 15)) % 1;\r\n        this.camera.position.x = 2 * Math.sin(percent * Math.PI * 2);\r\n        this.camera.position.z = -2 * Math.cos(percent * Math.PI * 2);\r\n        this.camera.facing = Quaternion.axisRotation(new Vector(0, 1, 0), percent * Math.PI * 2);\r\n        requestAnimationFrame(()=>this.tickloop(tickNumber+1));\r\n    }\r\n\r\n    tick(tickNumber: number) {\r\n\r\n\r\n        let cameraRowMajor = this.camera.getViewMatrix().rowMajor();\r\n        const maxTickNumber = 60*5;\r\n\r\n        GLSL.shaderDrawMultiple(this.ctx, this.program, this.posBuffer, 3, 'tristrip', this.renderPoints.length, (i) => ({ bufferOffset: 0, bufferCount: this.bufferCount / 3}), (gl, i) => {\r\n            let pt = this.renderPoints[i];\r\n            const realScale = Math.pow(Math.abs(Math.sin(Math.PI * 2 * (((tickNumber + i)/maxTickNumber) % 1))), 3);\r\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'move'), false, [\r\n                pt.sc*realScale, 0, 0, 0,\r\n                0, pt.sc*realScale, 0, 0,\r\n                0, 0, pt.sc*realScale, 0,\r\n                -pt.pt.x, - pt.pt.y, -pt.pt.z, 1\r\n            ]);\r\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'project'), false, cameraRowMajor);\r\n        });\r\n    }\r\n\r\n    cleanup() {\r\n    }\r\n}","export const VERTEX_SHADER = `\r\nattribute vec4 aVertexPosition;\r\nuniform mat4 project;\r\nuniform mat4 move;\r\nvarying vec3 vPos;\r\nvarying vec3 ptPos;\r\n\r\nvoid main() {\r\n  vPos = aVertexPosition.xyz;\r\n  vec4 transformed = project * move * aVertexPosition;\r\n  ptPos = transformed.xyz;\r\n  gl_Position = vec4(transformed.xyz, transformed.z + 1.0);\r\n}`;\r\n\r\nexport const FRAGMENT_SHADER = `\r\nprecision mediump float;\r\nvarying vec3 vPos;\r\nvarying vec3 ptPos;\r\nvoid main() {\r\n    vec3 adjpos = (vPos.xyz + 1.0) / 2.0;\r\n\r\n    vec3 adjPt = (ptPos + 1.0)/2.0;\r\n\r\n    float mxX = max(adjPt.x, 1.0-adjPt.x);\r\n\r\n    float distAdj = 1.0 - (ptPos.z / 6.0);\r\n\r\n    gl_FragColor = vec4(adjPt.xy * distAdj, distAdj, 1.0);\r\n}\r\n`;","import * as React from 'react';\r\nimport GlslCubesRunner from '../../../projects/glsl-cubes/GlslCubesRunner';\r\n\r\nexport default function GlslCubesComponent() {\r\n    const canvas = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        const renderer = new GlslCubesRunner(canvas.current);\r\n        return () => renderer.cleanup();\r\n    }, [canvas]);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas' ref={canvas}></canvas>\r\n    </div>;\r\n}","\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n\r\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n\r\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            positionNumComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n}\r\n\r\n\r\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n    const normalize = false;  // don't normalize\r\n    const stride = 0;         // how many bytes to get from one set of values to the next\r\n                              // 0 = use type and numComponents above\r\n    const offset = 0;         // how many bytes inside the buffer to start from\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n          gl.getAttribLocation(shader, 'aVertexPosition'),\r\n          positionNumComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n    gl.enableVertexAttribArray(\r\n      gl.getAttribLocation(shader, 'aVertexPosition'));\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(shader);\r\n  for(let i = 0; i < drawCounts; i++) {\r\n    bindUniforms(gl, i);\r\n    let {bufferOffset, bufferCount} = getGeom(i);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n  }\r\n}\r\n\r\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n}\r\n\r\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\r\n     // Create a buffer for the square's positions.\r\n     const positionBuffer = gl.createBuffer();\r\n\r\n     // Select the positionBuffer as the one to apply buffer\r\n     // operations to from here out.\r\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n     const l = left ?? -1.0;\r\n     const r = right ?? 1.0;\r\n     const t = top ?? -1.0;\r\n     const b = bottom ?? 1.0;\r\n \r\n     // Now create an array of positions for the square.\r\n     const positions = [\r\n         b, r,\r\n         t, r,\r\n         b, l,\r\n         t, l,\r\n     ];\r\n \r\n     // Now pass the list of positions into WebGL to build the\r\n     // shape. We do this by creating a Float32Array from the\r\n     // JavaScript array, then use it to fill the current buffer.\r\n     gl.bufferData(gl.ARRAY_BUFFER,\r\n                   new Float32Array(positions),\r\n                   gl.STATIC_DRAW);\r\n \r\n     return positionBuffer;\r\n}\r\n\r\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(components),\r\n                gl.STATIC_DRAW);\r\n\r\n  return positionBuffer;\r\n}\r\n\r\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\r\nvarying vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;","export default class Point3 {\r\n\r\n    static zero(): Point3  {\r\n        return new Point3(0,0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number, public z: number) {\r\n\r\n    }\r\n    public lengthSq(): number {\r\n        return this.dot(this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point3 {\r\n        return new Point3(this.x, this.y, this.z);\r\n    }\r\n\r\n    public dot(other: Point3): number {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    public normalize(): Point3 {\r\n        let len = this.length();\r\n        return this.div(len);\r\n    }\r\n\r\n    public mult(p: Point3): Point3\r\n    public mult(x: number, y: number, z: number): Point3\r\n    public mult(s: number): Point3\r\n    public mult(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\r\n        return new Point3(x * this.x, y * this.y, z * this.z);\r\n    }\r\n\r\n    \r\n    public div(p: Point3): Point3\r\n    public div(x: number, y: number, z: number): Point3\r\n    public div(s: number): Point3\r\n    public div(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\r\n        return new Point3(this.x / x, this.y / y, this.z / z);\r\n    }\r\n\r\n    public add(p: Point3): Point3\r\n    public add(x: number, y: number, z: number): Point3\r\n    public add(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz);\r\n        return new Point3(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    public sub(p: Point3): Point3\r\n    public sub(x: number, y: number, z: number): Point3\r\n    public sub(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz);\r\n        return new Point3(this.x - x, this.y - y, this.z - z);\r\n    }\r\n}\r\n\r\nfunction splitArgs(pxs: Point3 | number, y?: number, z?: number, allowSingle: boolean = false): {x: number, y: number, z: number} {\r\n    if(y === undefined) {\r\n        if(!allowSingle || (pxs as Point3).x !== undefined) {\r\n            return (pxs as Point3);\r\n        } else {\r\n            return { x: pxs as number, y: pxs as number, z: pxs as number };\r\n        }\r\n    }\r\n    else {\r\n        return { x: pxs as number, y, z };\r\n    }\r\n}","import Vector from './Vector';\r\nimport { vec2 } from 'gl-matrix';\r\nimport Matrix4 from './Matrix4';\r\n\r\nexport default class Quaternion {\r\n    constructor(public real: number, public i: number, public j: number, public k: number) {\r\n    }\r\n\r\n    public inverse(): Quaternion {\r\n        const denom = Quaternion.Dot(this, this);\r\n        return new Quaternion(this.real / denom, -this.i / denom, -this.j / denom, -this.k / denom);\r\n    }\r\n\r\n    public static Dot(a: Quaternion, b: Quaternion): number {\r\n        return a.real * b.real + a.i * b.i + a.j * b.j + a.k * b.k;\r\n    }\r\n\r\n    public static axisRotation(axis: Vector, radians: number): Quaternion {\r\n        const cos = Math.cos(radians / 2);\r\n        const sin = Math.sin(radians / 2);\r\n        const len = axis.length();\r\n\r\n        return new Quaternion(cos, sin * axis.x / len, sin * axis.y / len, sin * axis.z / len);\r\n    }\r\n\r\n    public static multiply(a: Quaternion, b: Quaternion) {\r\n        return new Quaternion (\r\n            a.real * b.real - a.i * b.i - a.j * b.j - a.k * b.k,\r\n            a.real * b.i + a.i * b.real + a.j * b.k - a.k * b.j,\r\n            a.real * b.j - a.i * b.k + a.j * b.real + a.k * b.i,\r\n            a.real * b.k + a.i * b.j - a.j * b.i + a.k * b.real\r\n        );\r\n    }\r\n\r\n    public applyTransform(point: Quaternion): Quaternion;\r\n    public applyTransform(vec3: Vector): Vector;\r\n    public applyTransform(point: Quaternion|Vector): Quaternion|Vector {\r\n        if ((point as any).real !== undefined) {\r\n            return Quaternion.multiply(this, Quaternion.multiply(point as Quaternion, this.inverse()));\r\n        }\r\n        else {\r\n            const inputQ = new Quaternion(0, (point as Vector).x, (point as Vector).y, (point as Vector).z);\r\n            const qOut = Quaternion.multiply(this, Quaternion.multiply(inputQ, this.inverse()));\r\n            return new Vector(qOut.i, qOut.j, qOut.k);\r\n        }\r\n    }\r\n\r\n    // Stolen from https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\r\n    public toMatrix():Matrix4 {\r\n        const mtx = new Matrix4();\r\n        mtx.components[0][0] = 1 - 2 * this.j * this.j - 2 * this.k * this.k;\r\n        mtx.components[0][1] = 2 * this.i * this.j - 2 * this.k * this.real;\r\n        mtx.components[0][2] = 2 * this.i * this.k + 2 * this.j * this.real;\r\n        \r\n        mtx.components[1][0] = 2 * this.i * this.j + 2 * this.k * this.real;\r\n        mtx.components[1][1] = 1 - 2 * this.i * this.i - 2 * this.k * this.k;\r\n        mtx.components[1][2] = 2 * this.j * this.k - 2 * this.i * this.real;\r\n        \r\n        mtx.components[2][0] = 2 * this.i * this.k - 2 * this.j * this.real;\r\n        mtx.components[2][1] = 2 * this.j * this.k + 2 * this.i * this.real;\r\n        mtx.components[2][2] = 1 - 2 * this.i * this.i - 2 * this.j * this.j;\r\n\r\n        return mtx;\r\n    }\r\n}","import Point3 from \"./Point3\";\r\n\r\nconst identity = [\r\n    [1, 0, 0, 0],\r\n    [0, 1, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 1]\r\n];\r\n\r\nexport default class Matrix4 {\r\n    components: [\r\n        [number, number, number, number],\r\n        [number, number, number, number],\r\n        [number, number, number, number],\r\n        [number, number, number, number]\r\n    ];\r\n\r\n    constructor(identity: boolean = true) {\r\n        if(identity) {\r\n            this.components = [\r\n                [1, 0, 0, 0],\r\n                [0, 1, 0, 0],\r\n                [0, 0, 1, 0],\r\n                [0, 0, 0, 1]\r\n            ];\r\n        } else {\r\n            this.components = [\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 1]\r\n            ];\r\n        }\r\n    }\r\n\r\n    public transform(p: Point3) : Point3 {\r\n        let x = this.multRow(this.components[0], p);\r\n        let y = this.multRow(this.components[1], p);\r\n        let z = this.multRow(this.components[2], p);\r\n        let w = this.multRow(this.components[3], p);\r\n        return new Point3(x/w, y/w, z/w);\r\n    }\r\n\r\n    public mult(other: Matrix4): Matrix4 {\r\n        const output = new Matrix4();\r\n        for(let row = 0; row < 4; row++) {\r\n            for(let col = 0; col < 4; col ++) {\r\n                output.components[row][col] = 0;\r\n                for(let i = 0; i < 4; i++) {\r\n                    output.components[row][col] +=\r\n                        this.components[row][i] *\r\n                        other.components[i][col];\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private multRow(row: [number, number, number, number], p: Point3) {\r\n        return row[0] * p.x + row[1] * p.y + row[2] * p.z + row[3];\r\n    }\r\n    \r\n    public colMajor(): number[] {\r\n        let output = new Array(16);\r\n        let i = 0;\r\n        for(let row = 0; row < 4; row++) {\r\n            for(let col = 0; col < 4; col++) {\r\n                output[i++] = this.components[row][col];\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    public rowMajor(): number[] {\r\n        let output = new Array(16);\r\n        let i = 0;\r\n        for(let col = 0; col < 4; col++) {\r\n            for(let row = 0; row < 4; row++) {\r\n                output[i++] = this.components[row][col];\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    public static translate(pt: Point3) {\r\n        let output = new Matrix4();\r\n        output.components[0][3] = pt.x;\r\n        output.components[1][3] = pt.y;\r\n        output.components[2][3] = pt.z;\r\n        return output;\r\n    }\r\n}","export default class Rand {\r\n    static Int(): number;\r\n    static Int(maxExclusive: number): number;\r\n    static Int(minInclusive: number, maxExclusive: number): number;\r\n    static Int(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return Math.floor(r * Number.MAX_SAFE_INTEGER);\r\n        } else if(max === undefined) {\r\n            return Math.floor(r * min);\r\n        } else {\r\n            return min + Math.floor(r * (max - min));\r\n        }\r\n    }\r\n    static Float(): number;\r\n    static Float(maxExclusive: number): number;\r\n    static Float(minInclusive: number, maxExclusive: number): number;\r\n    static Float(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return r;\r\n        } else if(max === undefined) {\r\n            return r * min;\r\n        } else {\r\n            return min + (r * (max - min));\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}