{"version":3,"sources":["webpack:///./src/projects/sortVis/delta/EComplexity.ts","webpack:///./src/projects/sortVis/delta/SimpleOperations.ts","webpack:///./src/projects/sortVis/Record.ts","webpack:///./src/projects/sortVis/delta/SubArray.ts","webpack:///./src/projects/sortVis/SortArray.ts","webpack:///./src/projects/sortVis/SortState.ts","webpack:///./src/projects/sortVis/paints/BarDisplay.ts","webpack:///./src/views/projects/sortVis/SortVisPlaybackComponent.tsx","webpack:///./src/projects/sortVis/paints/RadialDisplay.ts","webpack:///./src/views/projects/sortVis/useAutoplay.ts","webpack:///./src/projects/sortVis/sorts/selectionSort.tsx","webpack:///./src/projects/sortVis/sortDescriptors/RenderArrayState.tsx","webpack:///./src/projects/sortVis/sorts/heapSorts/heapSort.tsx","webpack:///./src/projects/sortVis/sorts/quickSort.tsx","webpack:///./src/projects/sortVis/sorts/quickDualPivot.tsx","webpack:///./src/projects/sortVis/sorts/heapSorts/weakHeapSort.tsx","webpack:///./src/projects/sortVis/sorts/heapSorts/smoothSort.tsx","webpack:///./src/projects/sortVis/sorts/insertionSort.tsx","webpack:///./src/projects/sortVis/sorts/index.ts","webpack:///./src/projects/sortVis/sorts/CycleSort.tsx","webpack:///./src/projects/sortVis/sorts/mergeSort.tsx","webpack:///./src/projects/sortVis/sorts/radixSorts/BinaryMSDRadixSort.tsx","webpack:///./src/projects/sortVis/sorts/radixSorts/HexMSDRadixSort.tsx","webpack:///./src/projects/sortVis/dataGenerator/index.ts","webpack:///./src/projects/sortVis/dataGenerator/randomData.ts","webpack:///./src/projects/sortVis/dataGenerator/reverseSorted.ts","webpack:///./src/projects/sortVis/dataGenerator/nearSorted.ts","webpack:///./src/projects/sortVis/dataGenerator/sinData.ts","webpack:///./src/projects/sortVis/sortDescriptors/index.ts","webpack:///./src/projects/sortVis/sortDescriptors/SortingAlgorithm.tsx","webpack:///./src/views/projects/sortVis/SortVisTreeListComponent.tsx","webpack:///./src/views/projects/sortVis/SortVisComponent.tsx","webpack:///./node_modules/react-dropdown/dist/index.js","webpack:///./node_modules/classnames/index.js","webpack:///./src/hooks/useUpdateState.ts"],"names":["EComplexity","array1","index1","array2","index2","type","this","complexity","Compare","state","srcArray","srcIndex","tgtArray","tgtIndex","replacedValue","Set","internalSet","internalGet","value","internalPush","internalPop","Swap","v1","apply","array","index","other","pushDelta","v","startingSize","offset","Get","internalFill","Array","internalCreateArray","internalRemoveArray","endingData","arrayId","data","i","length","push","i1","i2","tmp","r","map","d","pop","initialValue","deltas","arrays","maxValue","nextArrayId","currentDeltaIndex","nextDecoratorId","requiresMemoryAllocation","allArrayInfo","arrId","delta","tgt","deltaHere","Math","abs","deltaStart","deltaEnd","seekToInternal","rollback","maxSteps","result","step","stepResult","undefined","newArr","arr","getDeleteDelta","splice","generateCoordFunc","arrLen","wx","wy","ww","wh","widthPer","heightPer","x","floor","height","y","allPainters","name","ctx","dx","max","coordsFrom","fillStyle","fillRect","canvas","width","mainArr","getArray","coordFuncsByArrayIndex","arrWindows","mainWindow","doesRequireMemory","rollingOffset","actualOffset","realLength","filter","a","window","repaintArr","bezierYAdj","arrid","strokeStyle","lineWidth","beginPath","get","x2","y2","bezierY","min","moveTo","bezierCurveTo","stroke","lineTo","midX","midY","radiansPerX","PI","transformCoords","angle","radius","cos","sin","coordsArr","closePath","fill","SortVisPlaybackComponent","props","deltaIndex","setDeltaIndex","painter","setCurrentPainter","useUpdateState","nv","repaint","autoplaying","setAutoplaying","currentSpeed","setCurrentSpeed","updateDeltaIndex","p","cvs","document","getElementById","getContext","callback","enable","speed","savedCallback","waitId","waitIdIsAnimationFrame","current","tick","triggerTick","frameRange","MAX_DELAY_TIME","sleepPercent","sleepTime","setTimeout","requestAnimationFrame","cancelAnimationFrame","clearTimeout","useAutoplayHook","applyUntil","speedPerc","numTicks","allDeltas","remainingStepsFwd","className","id","options","algo","onChange","ch","totalDeltas","ev","seekTo","target","valueAsNumber","onClick","rollbackUntil","SelectionSort","minV","minI","swpIndex","compare","swap","RenderArrayState","forceWidth","arc","color","dataLength","leftPadding","maxData","maxHeight","viewBox","style","background","key","y1","from","to","strokeWidth","arcHeight","HeapSort","upHeap","downHeap","val","parentIndex","pval","idx","cidx","childIndex","maxChildIdx","QuickSort","recurse","pivLocation","random","pivot","lp","rp","QuickDualPivot","mp","WeakHeapSort","flipChildren","fastUpheap","limit","downHeapSingle","siblingIndex","daIndex","fastDistinguishedAncestor","distinguishedAncestor","SmoothSort","heapChildDist","heapPrevDist","orders","growHeap","shrinkHeap","newSize","trinkle","order","hasChildren","leftChildIndex","orderIndex","selfValue","trinkleMax","swapTo","tgtHead","previousHeapIndex","heapDown","c1","c2","leftChildIdx","rightChildIdx","leftChildOrder","rightChildOrder","heapDownCompare","childOrder","getHeapChildDist","getHeapPrevDist","InsertionSort","nextIndex","slideBack","isInFinalPosition","item","swapIndex","midp","ceil","sortedArr","createArray","tp","set","deleteArray","radixFlag","arrV","bmsdrx_recurse","start","radix","hmsdrx_recurse","rightShift","subArrs","ptr","record","arrlens","j","totalLength","effectiveIndex","xp","descriptor","displayName","getDescription","children","algorithm","SortVisTreeListComponent","expanded","setExpanded","selectedDescriptor","setDescriptor","sortChosen","border","padding","top","left","bottom","right","position","TreeListItemComponent","tree","DescriptorContentComponent","margin","float","preventDefault","stopPropagation","marginLeft","child","overflowY","SortVisComponent","setArrLen","arrMax","setArrMax","currentAlgo","setCurrentAlgo","runningSortState","setSortState","currentDataGen","setDataGen","sort","disabled","initialValues","generate","sortState","Object","defineProperty","exports","_react","obj","__esModule","_typeof","cache","_getRequireWildcardCache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","call","desc","_interopRequireWildcard","_reactDom","_interopRequireDefault","_classnames","WeakMap","Symbol","iterator","constructor","_defineProperty","enumerable","configurable","writable","_defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","Dropdown","_Component","_this","instance","Constructor","TypeError","_classCallCheck","selected","parseValue","label","placeholder","isOpen","mounted","handleDocumentClick","bind","fireChangeEvent","protoProps","staticProps","subClass","superClass","create","_inherits","newProps","setState","addEventListener","removeEventListener","event","onFocus","button","option","num","match","items","newState","_classes","isSelected","classes","concat","baseClassName","optionClass","createElement","onMouseDown","setValue","role","_this2","_this$props","ops","groupTitle","_options","renderOption","tabIndex","findDOMNode","contains","_classNames","_classNames2","_classNames3","_classNames4","_classNames5","_this$props2","controlClassName","placeholderClassName","menuClassName","arrowClassName","arrowClosed","arrowOpen","disabledClass","placeHolderValue","dropdownClass","controlClass","placeholderClass","isValueSelected","menuClass","arrowClass","menu","buildMenu","handleMouseDown","onTouchEnd","Component","defaultProps","_default","hasOwn","classNames","arguments","arg","argType","isArray","inner","join","module","default","initial","beforeChange","updateValue","newValue"],"mappings":"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","file":"17.bundle.js","sourcesContent":["enum EComplexity {\r\n    Decorative = 0,\r\n    Get = 1,\r\n    Compare = 2,\r\n    Set = 3,\r\n    Swap = 4,\r\n    CSwap = 5\r\n}\r\n\r\nexport default EComplexity;","import IDelta from './IDelta';\r\nimport EComplexity from './EComplexity';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\n\r\nexport class Get implements IDelta {\r\n    complexity: EComplexity;\r\n    type = 'get';\r\n    constructor(public array: SortArray, public index: number) {\r\n        this.complexity = EComplexity.Get;\r\n    }\r\n    apply(state: SortState): void { return; }\r\n    rollback(state: SortState): void { return; }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Compare implements IDelta {\r\n    complexity: EComplexity;\r\n    type = 'compare';\r\n    constructor(public array1: SortArray, public index1: number, public array2: SortArray, public index2: number) {\r\n        this.complexity = EComplexity.Compare;\r\n    }\r\n    apply(state: SortState): void { return; }\r\n    rollback(state: SortState): void { return; }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Set implements IDelta {\r\n    complexity: EComplexity;\r\n    type = 'set';\r\n    constructor(public array: SortArray, public index: number, private oldValue: number, private newValue: number) {\r\n        this.complexity = EComplexity.Set;\r\n    }\r\n    apply(state: SortState): void {\r\n        this.array.internalSet(this.index, this.newValue);\r\n    }\r\n    rollback(state: SortState): void {\r\n        this.array.internalSet(this.index, this.oldValue);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Copy implements IDelta {\r\n    type = 'copy';\r\n    complexity: EComplexity;\r\n    constructor(public srcArray: SortArray, public srcIndex: number, public tgtArray: SortArray, public tgtIndex: number, private replacedValue: number) {\r\n        this.complexity = EComplexity.Set;\r\n    }\r\n    apply(state: SortState): void {\r\n        this.tgtArray.internalSet(this.tgtIndex, this.srcArray.internalGet(this.srcIndex).value);\r\n    }\r\n    rollback(state: SortState): void {\r\n        this.tgtArray.internalSet(this.tgtIndex, this.replacedValue);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Push implements IDelta {\r\n    type = 'push';\r\n    complexity: EComplexity;\r\n    constructor(public srcArray: SortArray, public srcIndex: number, public tgtArray: SortArray) {\r\n        this.complexity = EComplexity.Set;\r\n    }\r\n    apply(state: SortState): void {\r\n        this.tgtArray.internalPush(this.srcArray.internalGet(this.srcIndex).value);\r\n    }\r\n    rollback(state: SortState): void {\r\n        this.tgtArray.internalPop();\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Swap implements IDelta {\r\n    type = 'swap';\r\n    complexity: EComplexity;\r\n    constructor(public srcArray: SortArray, public srcIndex: number, public tgtArray: SortArray, public tgtIndex: number) {\r\n        this.complexity = EComplexity.Swap;\r\n    }\r\n    apply(state: SortState): void {\r\n        const v1 = this.srcArray.internalGet(this.srcIndex).value;\r\n        this.srcArray.internalSet(this.srcIndex, this.tgtArray.internalGet(this.tgtIndex).value);\r\n        this.tgtArray.internalSet(this.tgtIndex, v1);\r\n    }\r\n    rollback(state: SortState): void {\r\n        this.apply(state);\r\n    }\r\n}","import SortState from './SortState';\r\nimport { Compare } from './delta/SimpleOperations';\r\nimport SortArray from './SortArray';\r\n\r\nexport default class Record {\r\n    constructor(private state: SortState, public array: SortArray, public value: number, public index: number) {\r\n\r\n    }\r\n\r\n    public compare(other: Record): number {\r\n        this.state.pushDelta(new Compare(this.array, this.index, other.array, other.index));\r\n        const v = this.value - other.value;\r\n        return v === 0 ? 0 : v < 0 ? -1 : 1;\r\n    }\r\n}","import IDelta from './IDelta';\r\nimport EComplexity from './EComplexity';\r\nimport SortArray from '../SortArray';\r\nimport SortState from '../SortState';\r\n\r\nexport class CreateSubArray implements IDelta {\r\n    complexity: EComplexity;\r\n    type = 'createSubArray';\r\n    constructor(public array: SortArray, public startingSize: number, public offset: number) {\r\n        this.complexity = EComplexity.Get;\r\n    }\r\n    apply(state: SortState): void {\r\n        this.array.internalFill(new Array(this.startingSize));\r\n        state.internalCreateArray(this.array);\r\n    }\r\n    rollback(state: SortState): void {\r\n        state.internalRemoveArray(this.array);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class DeleteSubArray implements IDelta {\r\n    complexity: EComplexity;\r\n    type = 'deleteSubArray';\r\n    constructor(public array: SortArray, private endingData: number[]) {\r\n        this.complexity = EComplexity.Get;\r\n    }\r\n    apply(state: SortState): void {\r\n        state.internalRemoveArray(this.array);\r\n    }\r\n    rollback(state: SortState): void {\r\n        this.array.internalFill(this.endingData);\r\n        state.internalCreateArray(this.array);\r\n    }\r\n}","import SortState from './SortState';\r\nimport Record from './Record';\r\nimport { DeleteSubArray } from './delta/SubArray';\r\nimport { Get, Swap, Copy as Copy, Push } from './delta/SimpleOperations';\r\nimport { threadId } from 'worker_threads';\r\n\r\nexport default class SortArray {\r\n    private data: Record[];\r\n    constructor(private state: SortState, public arrayId: number, public offset: number | undefined, data: number[]) {\r\n        this.data = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.data.push(new Record(state, this, data[i], i));\r\n        }\r\n    }\r\n\r\n    public length () {\r\n        return this.data.length;\r\n    }\r\n\r\n    public get(index: number): Record {\r\n        // Don't record get accesses, it'll just clog everything up\r\n        // this.state.deltas.push(new Get(this.arrayId, index));\r\n        return this.data[index];\r\n    }\r\n\r\n    public swap(i1: number, i2: number) {\r\n        this.state.pushDelta(new Swap(this, i1, this, i2));\r\n        const tmp = this.data[i1].value;\r\n        this.data[i1].value = this.data[i2].value;\r\n        this.data[i2].value = tmp;\r\n    }\r\n\r\n    public set(index: number, r: Record) {\r\n        this.state.pushDelta(new Copy(r.array, r.index, this, index, this.data[index].value));\r\n        this.data[index].value = r.value;\r\n    }\r\n    \r\n    public push(r: Record) {\r\n        this.state.pushDelta(new Push(r.array, r.index, this));\r\n        this.internalPush(r.value);\r\n    }\r\n\r\n    public getDeleteDelta() {\r\n        return new DeleteSubArray(this, this.data.map(d => d.value));\r\n    }\r\n\r\n    public internalSet(index: number, value: number) {\r\n        this.data[index].value = value;\r\n    }\r\n\r\n    public internalPush(value: number) {\r\n        this.data.push(new Record(this.state, this, value, this.data.length));\r\n    }\r\n\r\n    public internalPop() {\r\n        this.data.pop();\r\n    }\r\n\r\n    public internalSwap(i1: number, i2: number) {\r\n        const tmp = this.data[i1].value;\r\n        this.data[i1].value = this.data[i2].value;\r\n        this.data[i2].value = tmp;\r\n    }\r\n\r\n    public internalGet(index: number): Record {\r\n        return this.data[index];\r\n    }\r\n\r\n    public internalFill (data: number[]) {\r\n        this.data = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.data.push(new Record(this.state, this, data[i], i));\r\n        }\r\n    }\r\n}","import IDelta from './delta/IDelta';\r\nimport SortArray from './SortArray';\r\nimport { CreateSubArray, DeleteSubArray } from './delta/SubArray';\r\nimport EComplexity from './delta/EComplexity';\r\n\r\nexport default class SortState {\r\n    private deltas: IDelta [];\r\n    public arrays: SortArray [];\r\n    private nextArrayId: number;\r\n    public currentDeltaIndex: number;\r\n    public maxValue: number;\r\n    private initialValue: number[];\r\n    private nextDecoratorId: number;\r\n    private requiresMemoryAllocation: boolean;\r\n    public allArrayInfo: {arrId: number, offset?: number, length?: number}[];\r\n\r\n    constructor(data: number[]) {\r\n        this.initialValue = data;\r\n        this.deltas = [];\r\n        this.arrays = [\r\n            new SortArray(this, 0, 0, data)\r\n        ];\r\n        this.maxValue = 0;\r\n        for (const d of data) {\r\n            if (d > this.maxValue) this.maxValue = d;\r\n        }\r\n        this.nextArrayId = 1;\r\n        this.currentDeltaIndex = 0;\r\n        this.nextDecoratorId = 0;\r\n        this.requiresMemoryAllocation = false;\r\n        this.allArrayInfo = [{\r\n            arrId: 0,\r\n            offset: 0,\r\n            length: data.length\r\n        }];\r\n    }\r\n\r\n    pushDelta(delta: IDelta) {\r\n        this.deltas.push(delta);\r\n        this.currentDeltaIndex ++;\r\n    }\r\n\r\n    totalDeltas(): number {\r\n        return this.deltas.length;\r\n    }\r\n\r\n    deltaIndex(): number {\r\n        return this.currentDeltaIndex;\r\n    }\r\n\r\n    remainingStepsFwd(): number {\r\n        return this.deltas.length - this.currentDeltaIndex;\r\n    }\r\n\r\n    remainingStepsBack(): number {\r\n        return this.currentDeltaIndex;\r\n    }\r\n\r\n    seekTo(tgt: number) {\r\n        const deltaHere = Math.abs(tgt - this.currentDeltaIndex);\r\n        const deltaStart = tgt;\r\n        const deltaEnd = this.deltas.length - tgt;\r\n\r\n        if (deltaStart <= deltaEnd && deltaStart <= deltaHere) {\r\n            // Skip to start, seek from there\r\n            this.arrays = [\r\n                this.arrays[0]\r\n            ];\r\n            this.arrays[0].internalFill(this.initialValue);\r\n            this.currentDeltaIndex = 0;\r\n        }\r\n        else if (deltaEnd <= deltaStart && deltaEnd <= deltaHere) {\r\n            // Skip to end, seek from there\r\n            // (Can't currently seek to end - save the terminal state?)\r\n        }\r\n\r\n        this.seekToInternal(tgt);\r\n    }\r\n\r\n    private seekToInternal(tgt: number) {\r\n        while (tgt > this.currentDeltaIndex) this.apply();\r\n        while (tgt < this.currentDeltaIndex) this.rollback();\r\n    }\r\n\r\n    apply(): IDelta|undefined {\r\n        if (this.currentDeltaIndex === this.deltas.length) return undefined;\r\n        this.deltas[this.currentDeltaIndex].apply(this);\r\n        return this.deltas[this.currentDeltaIndex++];\r\n    }\r\n\r\n    applyUntil(maxSteps: number, complexity: EComplexity): IDelta[] {\r\n        const result: IDelta[] = [];\r\n        for (let step = 0; maxSteps === -1 || step < maxSteps; step++) {\r\n            const stepResult = this.apply();\r\n            if (stepResult === undefined) return result;\r\n            result.push(stepResult);\r\n            if (stepResult.complexity >= complexity)  return result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    rollback(): IDelta|undefined {\r\n        if (this.currentDeltaIndex === 0) return undefined;\r\n        this.deltas[--this.currentDeltaIndex].rollback(this);\r\n        return this.deltas[this.currentDeltaIndex];\r\n    }\r\n\r\n    rollbackUntil(maxSteps: number, complexity: EComplexity): IDelta[] {\r\n        const result: IDelta[] = [];\r\n        for (let step = 0; maxSteps === -1 || step < maxSteps; step++) {\r\n            const stepResult = this.rollback();\r\n            if (stepResult === undefined) return result;\r\n            result.push(stepResult);\r\n            if (stepResult.complexity >= complexity)  return result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getArray(index: number): SortArray {\r\n        return this.arrays[index];\r\n    }\r\n\r\n    createArray(length?: number, offset?: number): SortArray {\r\n        this.requiresMemoryAllocation = true;\r\n        this.allArrayInfo.push({arrId: this.nextArrayId, offset: offset, length: length});\r\n        const newArr = new SortArray(this, this.nextArrayId++, offset, new Array(length === undefined ? 0 : length));\r\n        this.arrays.push(newArr);\r\n        this.deltas.push(new CreateSubArray(newArr, length ?? 0, offset));\r\n        return newArr;\r\n    }\r\n\r\n    deleteArray(arr: SortArray) {\r\n        this.deltas.push(arr.getDeleteDelta());\r\n        this.internalRemoveArray(arr);\r\n    }\r\n\r\n    internalCreateArray(arr: SortArray) {\r\n        this.arrays.push(arr);\r\n    }\r\n\r\n    internalRemoveArray(arr: SortArray) {\r\n        for (let i = 0; i < this.arrays.length; i++) {\r\n            if (this.arrays[i] === arr) {\r\n                this.arrays.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    doesRequireMemory(): boolean {\r\n        return this.requiresMemoryAllocation;\r\n    }\r\n}","import IPaint from './IPaint';\r\nimport SortState from '../SortState';\r\nimport IDelta from '../delta/IDelta';\r\nimport EComplexity from '../delta/EComplexity';\r\nimport { Compare, Swap, Copy, Push } from '../delta/SimpleOperations';\r\nimport SortArray from '../SortArray';\r\n\r\ntype GetCoordFunc = (index: number, value: number) => { x: number, y: number, height: number };\r\n\r\nfunction generateCoordFunc(state: SortState, arrLen: number, wx: number, wy: number, ww: number, wh: number): GetCoordFunc {\r\n    const widthPer = ww / arrLen;\r\n    const heightPer = wh / state.maxValue;\r\n    return (index: number, value: number) => {\r\n        const x = wx + Math.floor(widthPer * index);\r\n        const height = Math.floor(heightPer * value);\r\n        const y = wy + wh - height;\r\n        return { x, y, height};\r\n    };\r\n}\r\n\r\nexport default class BarDisplay implements IPaint {\r\n    public name = 'Bar';\r\n\r\n    repaintArr(state: SortState, arr: SortArray, wx: number, wy: number, ww: number, wh: number, ctx: CanvasRenderingContext2D) {\r\n        const widthPer = ww / arr.length();\r\n        const dx = Math.max(Math.floor(widthPer), 1);\r\n\r\n        const coordsFrom = generateCoordFunc(state, arr.length(), wx, wy, ww, wh);\r\n\r\n        ctx.fillStyle = '#333';\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            const { x, y, height } = coordsFrom(i, arr.internalGet(i).value);\r\n            ctx.fillRect(x, y, dx, height);\r\n        }\r\n\r\n        ctx.fillStyle = 'white';\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            const { x, y, height } = coordsFrom(i, arr.internalGet(i).value);\r\n            ctx.fillRect(x, wh + wy - height - dx, dx, dx);\r\n        }\r\n    }\r\n\r\n    repaint(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: SortState, deltas: IDelta[]): void {\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        const mainArr = state.getArray(0);\r\n        const widthPer = canvas.width / mainArr.length();\r\n        const PERC_WINDOW_FOR_SUBARR = 0.2;\r\n\r\n        const coordFuncsByArrayIndex: GetCoordFunc[] = [];\r\n        const arrWindows: { wx: number, wy: number, ww: number, wh: number }[] = [];\r\n\r\n        const mainWindow = {\r\n            wx: 0,\r\n            wy: 0,\r\n            ww: canvas.width,\r\n            wh: state.doesRequireMemory() ? Math.floor(canvas.height * (1 - PERC_WINDOW_FOR_SUBARR)) : canvas.height\r\n        };\r\n\r\n        let rollingOffset = 0;\r\n        for (const arr of state.allArrayInfo) {\r\n\r\n            const actualOffset = arr.offset ?? rollingOffset;\r\n            const realLength = arr.length ?? state.arrays.filter(a => a.arrayId === arr.arrId)[0]?.length() ?? 0;\r\n            if(arr.offset === undefined) {\r\n                rollingOffset += realLength;\r\n            }\r\n\r\n            const window = arr.arrId === 0 ? mainWindow : {\r\n                wx: Math.floor(actualOffset * widthPer),\r\n                wy: Math.floor(canvas.height - (canvas.height * PERC_WINDOW_FOR_SUBARR)),\r\n                ww: Math.floor(realLength * widthPer),\r\n                wh: Math.floor(canvas.height * PERC_WINDOW_FOR_SUBARR)\r\n            };\r\n            arrWindows[arr.arrId] = window;\r\n            coordFuncsByArrayIndex[arr.arrId] = generateCoordFunc(state, arr.length, window.wx, window.wy, window.ww, window.wh);\r\n        }\r\n\r\n\r\n        this.repaintArr(state, mainArr, mainWindow.wx, mainWindow.wy, mainWindow.ww, mainWindow.wh, ctx);\r\n        for (let i = 1; i < state.arrays.length; i++) {\r\n            const window = arrWindows[state.arrays[i].arrayId];\r\n            this.repaintArr(state, state.arrays[i], window.wx, window.wy, window.ww, window.wh, ctx);\r\n        }\r\n\r\n        const bezierYAdj = Math.floor(canvas.height / 20);\r\n\r\n        function coordsFrom(arrid: number, index: number, value: number) {\r\n            return coordFuncsByArrayIndex[arrid](index, value);\r\n        }\r\n\r\n        ctx.strokeStyle = '#D00';\r\n        ctx.lineWidth = 1;\r\n        for (const delta of deltas.filter(d => d.type === 'compare')) {\r\n            const d = delta as Compare;\r\n            ctx.beginPath();\r\n\r\n            const { x, y } = coordsFrom(d.array1.arrayId, d.index1, d.array1.get(d.index1).value);\r\n            const { x: x2, y: y2 } = coordsFrom(d.array2.arrayId, d.index2, d.array2.get(d.index2).value);\r\n            const bezierY = Math.min(y, y2) - bezierYAdj;\r\n\r\n            ctx.moveTo(x, y);\r\n            ctx.bezierCurveTo(x, bezierY, x2, bezierY, x2, y2);\r\n            // ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.strokeStyle = '#F80';\r\n        ctx.lineWidth = 1;\r\n        const crossSize = 5;\r\n        ctx.beginPath();\r\n        for (const delta of deltas.filter(d => d.type === 'copy')) {\r\n            const d = delta as Copy;\r\n\r\n            const { x, y } = coordsFrom(d.srcArray.arrayId, d.srcIndex, d.srcArray.get(d.srcIndex).value);\r\n            const { x: x2, y: y2 } = coordsFrom(d.tgtArray.arrayId, d.tgtIndex, d.tgtArray.get(d.tgtIndex).value);\r\n\r\n            ctx.moveTo(x - crossSize, y - crossSize);\r\n            ctx.lineTo(x + crossSize, y + crossSize);\r\n            ctx.moveTo(x + crossSize, y - crossSize);\r\n            ctx.lineTo(x - crossSize, y + crossSize);\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x2, y2);\r\n        }\r\n        ctx.stroke();\r\n\r\n        \r\n        ctx.strokeStyle = '#F80';\r\n        ctx.lineWidth = 1;\r\n        ctx.beginPath();\r\n        for (const delta of deltas.filter(d => d.type === 'push')) {\r\n            const d = delta as Push;\r\n\r\n            const { x, y } = coordsFrom(d.srcArray.arrayId, d.srcIndex, d.srcArray.get(d.srcIndex).value);\r\n            const { x: x2, y: y2 } = coordsFrom(d.tgtArray.arrayId, d.tgtArray.length()-1, d.tgtArray.get(d.tgtArray.length()-1).value);\r\n\r\n            ctx.moveTo(x - crossSize, y - crossSize);\r\n            ctx.lineTo(x + crossSize, y + crossSize);\r\n            ctx.moveTo(x + crossSize, y - crossSize);\r\n            ctx.lineTo(x - crossSize, y + crossSize);\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x2, y2);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.strokeStyle = '#0f0';\r\n        ctx.lineWidth = 2;\r\n        for (const delta of deltas.filter(d => d.type === 'swap')) {\r\n            const d = delta as Swap;\r\n            ctx.beginPath();\r\n\r\n            const { x, y } = coordsFrom(d.srcArray.arrayId, d.srcIndex, d.srcArray.get(d.srcIndex).value);\r\n            const { x: x2, y: y2 } = coordsFrom(d.tgtArray.arrayId, d.tgtIndex, d.tgtArray.get(d.tgtIndex).value);\r\n            const bezierY = Math.min(y, y2) - bezierYAdj;\r\n\r\n            ctx.moveTo(x, y);\r\n            ctx.bezierCurveTo(x, bezierY, x2, bezierY, x2, y2);\r\n            // ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport Dropdown from 'react-dropdown';\r\nimport SortState from '../../../projects/sortVis/SortState';\r\nimport { ResizeCanvas } from '../../../projects/common/CanvasHelpers';\r\nimport IDelta from '../../../projects/sortVis/delta/IDelta';\r\nimport BarDisplay from '../../../projects/sortVis/paints/BarDisplay';\r\nimport useUpdateState from '../../../hooks/useUpdateState';\r\nimport { first } from '../../../LinqLike';\r\nimport IPaint from '../../../projects/sortVis/paints/IPaint';\r\nimport EComplexity from '../../../projects/sortVis/delta/EComplexity';\r\nimport useAutoplayHook from './useAutoplay';\r\nimport RadialDisplay from '../../../projects/sortVis/paints/RadialDisplay';\r\n\r\nconst allPainters: IPaint[] = [\r\n    new BarDisplay(),\r\n    new RadialDisplay()\r\n];\r\n\r\nconst MaxUpdatesPerTick = 75;\r\n\r\nconst CVS_WIDTH = 1024;\r\nconst CVS_HEIGHT = 800;\r\n\r\nlet canvas: HTMLCanvasElement;\r\nlet ctx: CanvasRenderingContext2D;\r\n\r\n\r\nexport default function SortVisPlaybackComponent(props: { state: SortState }) {\r\n    const [deltaIndex, setDeltaIndex] = React.useState(props.state.deltaIndex());\r\n    const [painter, setCurrentPainter] = useUpdateState<IPaint>(allPainters[0], (nv) => repaint(props.state, [], nv));\r\n    const [autoplaying, setAutoplaying] = React.useState(false);\r\n    const [currentSpeed, setCurrentSpeed] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        const cvs = document.getElementById('canvas') as HTMLCanvasElement;\r\n        ResizeCanvas(cvs, CVS_WIDTH, CVS_HEIGHT);\r\n        canvas = cvs;\r\n        ctx = cvs.getContext('2d');\r\n        repaint(props.state, [], painter);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        repaint(props.state, [], painter);\r\n    }, [ props.state ]);\r\n\r\n    // Autoplay effect\r\n    useAutoplayHook(() => {\r\n        if (currentSpeed <= 0.25) {\r\n            const deltas = props.state.applyUntil(10, EComplexity.Compare);\r\n            updateDeltaIndex();\r\n            repaint(props.state, deltas, painter);\r\n        }\r\n        else {\r\n            const speedPerc = (currentSpeed - 0.25) * (1 / .75);\r\n            const numTicks = Math.floor(speedPerc * MaxUpdatesPerTick);\r\n            const allDeltas = [];\r\n            for (let i = 0; i < numTicks; i++) {\r\n                allDeltas.push(...props.state.applyUntil(-1, EComplexity.Compare));\r\n            }\r\n            updateDeltaIndex();\r\n            repaint(props.state, allDeltas, painter);\r\n        }\r\n        if (props.state.remainingStepsFwd() === 0) setAutoplaying(false);\r\n    }, autoplaying, currentSpeed);\r\n\r\n    function updateDeltaIndex() {\r\n        setDeltaIndex(props.state.deltaIndex());\r\n    }\r\n\r\n    function repaint(state: SortState, deltas: IDelta[], p: IPaint) {\r\n        // Not ready to paint yet, do nothing\r\n        if (canvas === undefined || ctx === undefined || p === undefined) return;\r\n        p.repaint(canvas, ctx, state, deltas);\r\n    }\r\n\r\n    return <div className='flex row'>\r\n        <canvas id='canvas'></canvas>\r\n        <div className='flex col'>\r\n            <div className='flex row'>\r\n                <span>Display:</span>\r\n                <Dropdown\r\n                    options={allPainters.map(algo => algo.name)}\r\n                    value={painter.name}\r\n                    onChange={ch => setCurrentPainter(first(allPainters, algo => algo.name === ch.value))} />\r\n            </div>\r\n            <input type='range' min={0} max={props.state.totalDeltas()} value={deltaIndex} onChange={ev => {\r\n                props.state.seekTo(ev.target.valueAsNumber);\r\n                updateDeltaIndex();\r\n                repaint(props.state, [], painter);\r\n            }} />\r\n            <span>Step {deltaIndex} / {props.state.totalDeltas()}</span>\r\n            <div className='flex row'>\r\n                <button onClick={() => { props.state.seekTo(0); updateDeltaIndex(); repaint(props.state, [], painter); }}>&lt;&lt;&lt;</button>\r\n                <button onClick={() => { const deltas = props.state.rollbackUntil(-1, EComplexity.Set); updateDeltaIndex(); repaint(props.state, deltas, painter); }}>&lt;&lt;</button>\r\n                <button onClick={() => { const deltas = [props.state.rollback()]; updateDeltaIndex(); repaint(props.state, deltas, painter); }}>&lt;</button>\r\n                <button onClick={() => { const deltas = [props.state.apply()]; updateDeltaIndex(); repaint(props.state, deltas, painter); }}>&gt;</button>\r\n                <button onClick={() => { const deltas = props.state.applyUntil(-1, EComplexity.Set); updateDeltaIndex(); repaint(props.state, deltas, painter); }}>&gt;&gt;</button>\r\n                <button onClick={() => { props.state.seekTo(props.state.totalDeltas()); updateDeltaIndex(); repaint(props.state, [], painter); }}>&gt;&gt;&gt;</button>\r\n            </div>\r\n            <span>Autoplay:</span>\r\n            <div className='flex row'>\r\n                <span>Speed: </span>\r\n                <input type='range' min={0} max={1} step={0.01} value={currentSpeed} onChange={ev => setCurrentSpeed(ev.target.valueAsNumber)} />\r\n                <button onClick={() => setAutoplaying(!autoplaying)}>{autoplaying ? 'Pause' : 'Play'}</button>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}","import IPaint from './IPaint';\r\nimport SortState from '../SortState';\r\nimport IDelta from '../delta/IDelta';\r\nimport EComplexity from '../delta/EComplexity';\r\nimport { Compare, Swap } from '../delta/SimpleOperations';\r\nimport { mkdirSync } from 'fs';\r\n\r\nexport default class RadialDisplay implements IPaint {\r\n    public name = 'Radial';\r\n\r\n    repaint(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: SortState, deltas: IDelta[]): void {\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        const midX = canvas.width / 2;\r\n        const midY = canvas.height / 2;\r\n\r\n        const arr = state.getArray(0);\r\n        const radiansPerX = 2 * Math.PI / arr.length();\r\n\r\n        function transformCoords(index: number, value: number) {\r\n            const angle = radiansPerX * index;\r\n            const radius = value / state.maxValue;\r\n            const x = Math.floor(midX + Math.cos(angle) * radius * midX);\r\n            const y = Math.floor(midY + Math.sin(angle) * radius * midY);\r\n            return { x, y };\r\n        }\r\n\r\n        ctx.fillStyle = '#333';\r\n        ctx.beginPath();\r\n        ctx.moveTo(midX, midY);\r\n        const coordsArr = [];\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            const { x, y } = transformCoords(i, arr.internalGet(i).value);\r\n            ctx.lineTo(x, y);\r\n            coordsArr.push({x, y});\r\n        }\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n\r\n        ctx.fillStyle = 'white';\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            const { x, y } = coordsArr[i];\r\n            ctx.fillRect(x, y, 1, 1);\r\n        }\r\n\r\n        ctx.strokeStyle = '#D00';\r\n        ctx.lineWidth = 1;\r\n        for (const delta of deltas.filter(d => d.type === 'compare')) {\r\n            const d = delta as Compare;\r\n            ctx.beginPath();\r\n\r\n            const { x, y } = transformCoords(d.index1, d.array1.get(d.index1).value);\r\n            const { x: x2, y: y2 } = transformCoords(d.index2, d.array2.get(d.index2).value);\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.strokeStyle = '#0f0';\r\n        ctx.lineWidth = 2;\r\n        for (const delta of deltas.filter(d => d.type === 'swap')) {\r\n            const d = delta as Swap;\r\n            ctx.beginPath();\r\n\r\n            const { x, y } = transformCoords(d.srcIndex, d.srcArray.get(d.srcIndex).value);\r\n            const { x: x2, y: y2 } = transformCoords(d.tgtIndex, d.tgtArray.get(d.tgtIndex).value);\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}","import useInterval from '../../../hooks/useInterval';\r\nimport useAnimationFrame from '../../../hooks/useAnimationFrame';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst MAX_DELAY_TIME = 1000;\r\nconst MIN_DELAY_BEFORE_FRAMES = 60;\r\n\r\nexport default function useAutoplayHook(callback: () => void, enable: boolean, speed: number) {\r\n    const savedCallback = useRef(() => { return; });\r\n    const waitId = useRef<number | NodeJS.Timeout>(0);\r\n    const waitIdIsAnimationFrame = useRef(false);\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the repeater.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n            triggerTick();\r\n        }\r\n\r\n        function triggerTick() {\r\n            if (speed <= 0.25) {\r\n                const frameRange = MAX_DELAY_TIME - MIN_DELAY_BEFORE_FRAMES;\r\n                const sleepPercent = 1 - (speed * 4);\r\n                const sleepTime = Math.floor(frameRange * sleepPercent) + MIN_DELAY_BEFORE_FRAMES;\r\n                waitId.current = setTimeout(tick, sleepTime);\r\n                waitIdIsAnimationFrame.current = false;\r\n            }\r\n            else  {\r\n                waitId.current = requestAnimationFrame(tick);\r\n                waitIdIsAnimationFrame.current = true;\r\n            }\r\n        }\r\n\r\n        if (enable) triggerTick();\r\n        return () => {\r\n            if  (waitIdIsAnimationFrame.current) {\r\n                cancelAnimationFrame(waitId.current as number);\r\n            } else {\r\n                clearTimeout(waitId.current as NodeJS.Timeout);\r\n            }\r\n        };\r\n    }, [enable, speed]);\r\n}","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class SelectionSort implements ISort {\r\n    public name = 'SelectionSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        for (let tgtIndex = 0; tgtIndex < arr.length(); tgtIndex++) {\r\n            let minV = arr.get(tgtIndex);\r\n            let minI = tgtIndex;\r\n            for (let swpIndex = tgtIndex + 1; swpIndex < arr.length(); swpIndex++) {\r\n                const v = arr.get(swpIndex);\r\n                if (v.compare(minV) < 0) {\r\n                    minV = v;\r\n                    minI = swpIndex;\r\n                }\r\n            }\r\n            if (minI !== tgtIndex) {\r\n                arr.swap(tgtIndex, minI);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getSelectionSortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Selection Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>Yes</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Selection sort is one of the basic sorting algorithms. It's probably one of the first solutions you'd think of to solve this problem.</p>\r\n        <p>Selection sort finds the minimum element, and moves it to the beginning. Then it finds the next smallest, and moves it to the second index. Then the third smallest, and moves it to the third index, so on and so forth.</p>\r\n        <p>This algorithm is very easy to write and very simple, but unfortunately, it's quite slow. For sorting large numbers of items, selection sort will spend a long time iterating over the whole array over and over again.</p>\r\n    </div>\r\n}","import * as React from 'react';\r\nimport { max } from '../../../LinqLike';\r\n\r\nexport function RenderArrayState(data: number[], forceWidth?: number, arc?: {from: number, to: number, color: string, arcHeight?: number}[], color?: string[]) {\r\n    const dataLength = forceWidth ?? data.length;\r\n    const leftPadding = ((forceWidth ?? data.length) - data.length) / 2;\r\n    const maxData = max(data, d => d);\r\n    const maxHeight = Math.floor(dataLength / 2);\r\n\r\n    return <svg width='100%' viewBox={(-leftPadding) + ' 0 ' + dataLength + ' ' + maxHeight} style={{ background: '#111' }}>\r\n        {data.map((v, i) => \r\n        <g key={i}>\r\n            <rect x={i} width={1} y={(1-(v/maxData))*maxHeight} height={(v/maxData)*maxHeight} fill={(color === null || color === undefined) ? '#222' : (color[i] ?? '#222')} /> \r\n            <rect x={i} width={1} y={(1-(v/maxData))*maxHeight} height={1} fill='#CCC' /> \r\n        </g>)}\r\n        {arc === null || arc === undefined ? <></> : arc.map((a, i) => {\r\n            const y1 = (1-((data[a.from] - 0.5)/maxData))*maxHeight;\r\n            const y2 = (1-((data[a.to] - 0.5)/maxData))*maxHeight;\r\n            return <path key={i} fill='transparent' strokeWidth='0.1' stroke={a.color} d={`M ${a.from + 0.5} ${y1} C ${a.from + 0.5} ${y1 - (a.arcHeight ?? 2)} ${a.to + 0.5} ${y2 - (a.arcHeight ?? 2)} ${a.to + 0.5} ${y2}`} />\r\n        })}\r\n    </svg>\r\n}","import ISort from '../ISort';\r\nimport SortState from '../../SortState';\r\nimport SortArray from '../../SortArray';\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from '../../sortDescriptors/RenderArrayState';\r\n\r\nexport default class HeapSort implements ISort {\r\n    public name = 'HeapSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            this.upHeap(arr, i);\r\n        }\r\n\r\n        for (let i = arr.length() - 1; i > 0; i--) {\r\n            arr.swap(0, i);\r\n            this.downHeap(arr, i);\r\n        }\r\n    }\r\n\r\n    upHeap(arr: SortArray, index: number) {\r\n        while (index > 0) {\r\n            const val = arr.get(index);\r\n            const parentIndex = this.parentIndex(index);\r\n            const pval = arr.get(parentIndex);\r\n            if (val.compare(pval) > 0) {\r\n                arr.swap(index, parentIndex);\r\n                index = parentIndex;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    downHeap(arr: SortArray, length: number) {\r\n        let idx = 0;\r\n        while (idx < length) {\r\n            const cidx = this.childIndex(idx);\r\n            // no children in range - done!\r\n            if (cidx >= length) return;\r\n            // Find my max child index\r\n            let maxChildIdx = cidx;\r\n            if (cidx + 1 < length) {\r\n                if (arr.get(maxChildIdx).compare(arr.get(maxChildIdx + 1)) <= 0) {\r\n                    maxChildIdx++;\r\n                }\r\n            }\r\n\r\n            if (arr.get(idx).compare(arr.get(maxChildIdx)) < 0) {\r\n                // I'm smaller - swap down and continue\r\n                arr.swap(idx, maxChildIdx);\r\n                idx = maxChildIdx;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    parentIndex(index: number) {\r\n        return Math.floor((index - 1) / 2);\r\n    }\r\n\r\n    childIndex(index: number) {\r\n        return index * 2 + 1;\r\n    }\r\n}\r\n\r\n\r\nexport function getHeapSortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Heap Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>There are many heap-like sorts, but the most basic of which is a heapsort as implemented here. Heap sorts are some of the very few sorting algorithms which are both very fast in the average case and also strictly in-place, requiring no additional memory, even on the stack.</p>\r\n        <p>Heapsort works by building a heap from the array, and then repeatedly popping the root element of the array and moving it to the end of the array, and then trickling the new root down to an appropriate position</p>\r\n        <p style={{color:'#aaa'}}>(Note: For this discussion of heaps, we'll treat our arrays as starting at 1. I know, it sounds blasphemous, but this is one of the very rare circumstances where starting at 1 makes things easier)</p>\r\n        <p>An array can \"implicitly\" be treated as a heap without too much difficulty. The first item (at index 1) is the \"Root\" of the heap, and has the maximum value.</p>\r\n        <p>Each item (including the root) at index [n] has two children, one at [2 * n], and one at [2 * n + 1], which must have values less than the parent. We can visualize the links between parents/children like this:</p>\r\n        {RenderArrayState([10, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [\r\n            { from: 0, to: 1, color: '#f00', arcHeight: 4 },\r\n            { from: 0, to: 2, color: '#f00', arcHeight: 4 },\r\n            \r\n            { from: 1, to: 3, color: '#f00', arcHeight: -3 },\r\n            { from: 1, to: 4, color: '#f00', arcHeight: -3 },\r\n            { from: 2, to: 5, color: '#0f0', arcHeight: -3 },\r\n            { from: 2, to: 6, color: '#0f0', arcHeight: -3 },\r\n            \r\n            { from: 3, to: 7, color: '#f00', arcHeight: 2 },\r\n            { from: 3, to: 8, color: '#f00', arcHeight: 2 },\r\n            { from: 4, to: 9, color: '#0f0', arcHeight: 2 },\r\n            { from: 4, to: 10, color: '#0f0', arcHeight: 2 },\r\n            { from: 5, to: 11, color: '#00f', arcHeight: 2 },\r\n            { from: 5, to: 12, color: '#00f', arcHeight: 2 },\r\n            { from: 6, to: 13, color: '#ff0', arcHeight: 2 },\r\n            { from: 6, to: 14, color: '#ff0', arcHeight: 2 },\r\n        ])}\r\n        <hr />\r\n        <h4>Upheap:</h4>\r\n        <p>Since each item has a value smaller than it's parent, the maximum value is always the root. First, we turn our input array into a heap by taking each element one at a time and performing an \"Upheap\" operation</p>\r\n        <p>To \"Upheap\" an item, we compare it with it's parent. If it's smaller, we're done. Otherwise, we swap it with it's parent and then try to upheap again, until either it's smaller than it's parent, or it's the new root, like so:</p>\r\n        {RenderArrayState([6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 10], undefined, [\r\n            { from: 6, to: 14, color: '#0f0', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([6, 6, 5, 5, 5, 5, 10, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [\r\n            { from: 2, to: 6, color: '#0f0', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([6, 6, 10, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [\r\n            { from: 0, to: 2, color: '#0f0', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([10, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3])}\r\n        <p>Or like this:</p>\r\n        {RenderArrayState([10, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 6], undefined, [\r\n            { from: 6, to: 14, color: '#0f0', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([10, 6, 5, 5, 5, 5, 6, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [\r\n            { from: 2, to: 6, color: '#0f0', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([10, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [\r\n            { from: 0, to: 2, color: '#f00', arcHeight: 2 },\r\n        ])}\r\n        {RenderArrayState([10, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3])}\r\n        <p>Now we have a valid heap, which we'll use to sort the array.</p>\r\n        <hr />\r\n        <h4>Downheap</h4>\r\n        <p>Since the max item is the first item, we swap it to the end (where it belongs). We'll never look at that element again, and we treat the array as one-element smaller. Now the heap is invalid, as the root is too small, so we \"Downheap\" it to move it to a valid position, like this:</p>\r\n        <p>First, if it has no children, we're done. If it does have children, we look for a child greater than the parent item. If there is a greater child, we swap the parent and child, and then downheap the moved parent again</p>\r\n        <p>Using our heap constructed above, we would downheap like this:</p>\r\n        {RenderArrayState([10, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3], undefined, [{from: 0, to: 14, color: '#0f0'}])}\r\n        {RenderArrayState([3, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 10], undefined, [{from: 0, to: 1, color: '#f00'}, {from: 0, to: 2, color: '#0f0'}], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, '#131'])}\r\n        <p style={{color:'#aaa'}}>(Note: we prioritize the right-child so that we hit the end of the array faster.)</p>\r\n        {RenderArrayState([6, 6, 3, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 10], undefined, [{from: 2, to: 5, color: '#f00'}, {from: 2, to: 6, color: '#0f0'}], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, '#131'])}\r\n        {RenderArrayState([6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 10], undefined, [{from: 6, to: 13, color: '#f00'}, {from: 6, to: 14, color: '#555'}], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, '#131'])}\r\n        <p style={{color:'#aaa'}}>(Note: At this point, this node only has one child. It's \"other child\" is already a correct value, so we count it as out-of-range)</p>\r\n        {RenderArrayState([6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, '#131'])}\r\n\r\n        <p>Now, we have a valid heap, except that the last element is in it's correct position. We can just swap and downheap again, shrinking the heap by another 1, so on and so forth. Each time we finish downheaping, we get closer to a sorted array, with a valid heap in front:</p>\r\n        {RenderArrayState([6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, '#131'])}\r\n        {RenderArrayState([6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, null, null, null, '#131', '#131'])}\r\n        {RenderArrayState([5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, null, null, '#131', '#131', '#131'])}\r\n        {RenderArrayState([5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 6, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, null, '#131', '#131', '#131', '#131'])}\r\n        {RenderArrayState([5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 6, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, null, '#131', '#131', '#131', '#131', '#131'])}\r\n        {RenderArrayState([5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 6, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, null, '#131', '#131', '#131', '#131', '#131', '#131'])}\r\n        {RenderArrayState([3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 6, 6, 10], undefined, undefined, [null, null, null, null, null, null, null, null, '#131', '#131', '#131', '#131', '#131', '#131', '#131'])}\r\n        \r\n        <p>And once the heap has only one element, you're done!</p>\r\n        {RenderArrayState([3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 6, 6, 10], undefined, undefined, ['#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131', '#131'])}\r\n\r\n        <hr />\r\n        <h4>The bad part</h4>\r\n        <p>While heapsort does work quite well on most data, it does have a problem in that building a heap can be slow if the data you're sorting is already nearly sorted. Heapsort doesn't take advantage of runs in the data, and ends up un-sorting the nearly-sorted data during the heap construction</p>\r\n    </div>;\r\n}","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from '../sortDescriptors/RenderArrayState';\r\n\r\nexport default class QuickSort implements ISort {\r\n    public name = 'Quicksort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        this.recurse(arr, 0, arr.length());\r\n    }\r\n\r\n    recurse(arr: SortArray, min: number, max: number) {\r\n        if (max - min <= 1) return;\r\n\r\n        // Use a random-element pivot\r\n        const pivLocation = Math.floor(min + Math.random() * (max - min));\r\n        arr.swap(min, pivLocation);\r\n\r\n        const pivot = arr.get(min);\r\n        let lp = min + 1;\r\n        let rp = max - 1;\r\n        while (lp <= rp) {\r\n            if (arr.get(lp).compare(pivot) < 0) {\r\n                lp++;\r\n            } else {\r\n                arr.swap(lp, rp--);\r\n            }\r\n        }\r\n        arr.swap(min, rp);\r\n        this.recurse(arr, min, rp);\r\n        this.recurse(arr, rp + 1, max);\r\n    }\r\n}\r\n\r\n\r\nexport function getQuicksortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Quicksort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes*</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Quicksort, as the name implies, is a quick divide-and-conquer sorting algorithm.</p>\r\n        <p>Quicksort first picks a pivot element. Different algorithms do this in slightly different ways, some pick the first element, some pick the last, some take a median of three elements.</p>\r\n        <p style={{color:'#aaa'}}>The implementation in the visualizer picks a random pivot element. For our example, we'll pick the first element, and mark it in yellow.</p>\r\n        {RenderArrayState([6, 3, 10, 6, 8, 4, 1, 9, 7, 5, 2], 20, undefined, ['#cc0'])}\r\n        <p>Then, each other element is checked against the pivot. If it is less than the pivot, it's moved to the left. Otherwise, it's moved to the right.</p>\r\n        {RenderArrayState([6, 3, 2, 5, 1, 4, 8, 9, 7, 6, 10], 20, undefined, ['#cc0', '#a00', '#a00', '#a00', '#a00', '#a00', '#0a0', '#0a0', '#0a0', '#0a0', '#0a0'])}\r\n        <p>This partitions the data between elements less than the pivot and elements greater than the pivot. The pivot is then swapped to the middle, which will be it's final location</p>\r\n        {RenderArrayState([4, 3, 2, 5, 1, 6, 8, 9, 7, 6, 10], 20, [{ from: 0, to: 5, color: '#0f0'}], ['#a00', '#a00', '#a00', '#a00', '#a00', '#cc0', '#0a0', '#0a0', '#0a0', '#0a0', '#0a0'])}\r\n        <p>Now the array is split into three sections. The left is a smaller, unsorted array. The right is a smaller unsorted array. The middle is a pivot, which won't move again.</p>\r\n        <p>That means we can just run this algorithm again, twice! We recursively quicksort the left side, then the right side. Each side will pick a pivot, split the list again, and then recurse.</p>\r\n        <p>The list will keep subdividing and subdividing until each sub-list is 1 element long, at which point the list is sorted.</p>\r\n        <hr />\r\n        <p>While quicksort is usually reasonably fast in the average case, it's not guaranteed to be fast in all cases. Bad choices of pivot can degrade the speed of quicksort down to the point of the trivial-slow algorithms, like Insertion and Selection sort.</p>\r\n        <p>Also, quicksort can spend a lot of time recursively sorting small, nearly-sorted lists at the \"bottom\" of the recursion. For this reason, Quicksort is often implemented as a hybrid algorithm which may switch to insertion sort when the list being sorted gets small enough.</p>\r\n        <p style={{color:'#aaa'}}>Quicksort is Loosely-In-Place. While it doesn't allocate any additional memory, its recursive nature leads to growing the stack. This can result in the stack overflowing when sorting a lot of data.</p>\r\n    </div>;\r\n}","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from '../sortDescriptors/RenderArrayState';\r\n\r\nexport default class QuickDualPivot implements ISort {\r\n    public name = 'QuickDualPivot';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        this.recurse(arr, 0, arr.length());\r\n    }\r\n\r\n    recurse(arr: SortArray, min: number, max: number) {\r\n        if (max - min <= 1) return;\r\n\r\n        // Use a random-element pivot\r\n        const pivLocation = Math.floor(min + Math.random() * (max - min));\r\n        arr.swap(min, pivLocation);\r\n\r\n        const pivot = arr.get(min);\r\n        let lp = min + 1;\r\n        let mp = min + 1;\r\n        let rp = max - 1;\r\n        while (mp <= rp) {\r\n            switch (arr.get(mp).compare(pivot)) {\r\n                case 0:\r\n                    mp++;\r\n                    break;\r\n                case -1:\r\n                    arr.swap(lp++, mp++);\r\n                    break;\r\n                case 1:\r\n                    arr.swap(mp, rp--);\r\n                    break;\r\n            }\r\n        }\r\n        arr.swap(min, rp);\r\n        this.recurse(arr, min, lp);\r\n        this.recurse(arr, mp, max);\r\n    }\r\n}\r\n\r\nexport function getQuicksortDualPivotDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Quicksort (Dual Pivot)</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes*</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Dual-Pivot Quicksort is very similar to regular quicksort, but it chooses two pivots and partitions the list into thirds instead of halves.</p>\r\n        <p>For example, one iteration may look like this:</p>\r\n        {RenderArrayState([4, 3, 2, 5, 1, 6, 7, 6, 8, 9, 10], 20, undefined, ['#a22', '#a22', '#a22', '#a22', '#a22', '#cc0', '#2a2', '#2a2', '#cc0', '#22a', '#22a'])}\r\n        <p>The three sections are (&lt;p1) (&gt;=p1 &amp; &lt;p2) (&gt;=p2)</p>\r\n        <p>Each of these sections is then recursively sorted, as in regular quicksort.</p>\r\n        <p style={{color:'#aaa'}}>Quicksort (even dual-pivot) is Loosely-In-Place. While it doesn't allocate any additional memory, its recursive nature leads to growing the stack. This can result in the stack overflowing when sorting a lot of data.</p>\r\n    </div>;\r\n}","import ISort from '../ISort';\r\nimport SortState from '../../SortState';\r\nimport SortArray from '../../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class WeakHeapSort implements ISort {\r\n    public name = 'WeakHeapSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        const flipChildren: boolean[] = new Array(arr.length()).fill(false);\r\n        for (let i = arr.length() - 1; i > 0; i--) {\r\n            this.fastUpheap(arr, i, flipChildren);\r\n        }\r\n\r\n        for (let i = arr.length() - 1; i > 0; i--) {\r\n            arr.swap(0, i);\r\n            this.downHeap(arr, flipChildren, i);\r\n        }\r\n    }\r\n\r\n    downHeap(arr: SortArray, flipChildren: boolean[], limit: number) {\r\n        this.downHeapSingle(arr, 1, flipChildren, limit);\r\n    }\r\n\r\n    downHeapSingle(arr: SortArray, index: number, flipChildren: boolean[], limit: number) {\r\n        const siblingIndex = flipChildren[index] ? index * 2 + 1 : index * 2;\r\n        if (siblingIndex < limit) {\r\n            this.downHeapSingle(arr, siblingIndex, flipChildren, limit);\r\n        }\r\n        if (arr.get(0).compare(arr.get(index)) < 0) {\r\n            // DA is smaller than this node. Swap and Flip\r\n            flipChildren[index] = !flipChildren[index];\r\n            arr.swap(0, index);\r\n        }\r\n    }\r\n\r\n    fastUpheap(arr: SortArray, index: number, flipChildren: boolean[]) {\r\n        const daIndex = this.fastDistinguishedAncestor(index);\r\n        if (arr.get(daIndex).compare(arr.get(index)) < 0) {\r\n            // DA is smaller than this node. Swap and Flip\r\n            flipChildren[index] = !flipChildren[index];\r\n            arr.swap(daIndex, index);\r\n        }\r\n    }\r\n\r\n    fastDistinguishedAncestor(index: number) {\r\n        if (index === 0) return 0;\r\n        while (index % 2 === 0) {\r\n            index /= 2;\r\n        }\r\n        return Math.floor(index / 2);\r\n    }\r\n\r\n    distinguishedAncestor(index: number, flipChildren: boolean[]): number {\r\n        const parentIndex = Math.floor(index / 2);\r\n        if (flipChildren[parentIndex] === (index % 2 === 0)) {\r\n            return parentIndex;\r\n        }\r\n        else {\r\n            return this.distinguishedAncestor(parentIndex, flipChildren);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getWeakHeapSortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Weak Heap Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>No</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Weak heap sort is a very fast, but somewhat complicated and non-in-place, variant of a heap sort. Instead of building a regular heap, it builds a \"weak heap\", which is a heap where every element in only the right child must be smaller than the parent, and where the root only has a right child.</p>\r\n        <p>Weak heaps can still be implmemented implicitly with an array (with one small exception, see \"memory use\" below) but the method by which this is achieved is different from a regular heap sort.</p>\r\n        <p>Like a regular heap sort, Weak Heap Sort first performs a bunch of \"Upheap\" operations to build a heap, and then repeatedly swaps the root and \"Downheaps\" to sort the array.</p>\r\n        <p style={{color:'#aaa'}}><i>TODO: Actually write out a good description for weak heap sort</i></p>\r\n        <h4>Memory Use</h4>\r\n        <p>Weak Heap Sort is no longer In-Place (Even Loosely), as it requires <i>one additional bit</i> per item being sorted. That's not a <i>lot</i> of memory, but it does violate in-placeness</p>\r\n        <p>These extra bits are used as flags per-element, which are used to simulate flipping an items left and right children without actually needing to rearrange the items in the array</p>\r\n    </div>;\r\n}","import ISort from '../ISort';\r\nimport SortState from '../../SortState';\r\nimport SortArray from '../../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class SmoothSort implements ISort {\r\n    public name = 'SmoothSort';\r\n    private heapChildDist: number[];\r\n    private heapPrevDist: number[];\r\n\r\n    constructor() {\r\n        this.heapChildDist = [0, 0, 2];\r\n        this.heapPrevDist = [1, 1];\r\n    }\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        const orders: number[] = [];\r\n        for (let i = 0; i < arr.length(); i++) {\r\n            this.growHeap(arr, orders, i);\r\n        }\r\n\r\n        for (let i = arr.length() - 1; i >= 1; i--) {\r\n            this.shrinkHeap(arr, orders, i);\r\n        }\r\n    }\r\n\r\n    growHeap(array: SortArray, orders: number[], index: number) {\r\n        if (orders.length >= 2 && orders[orders.length - 2] === orders[orders.length - 1] + 1) {\r\n            const newSize = orders[orders.length - 2] + 1;\r\n            orders.pop();\r\n            orders.pop();\r\n            orders.push(newSize);\r\n        }\r\n        else if (orders.length > 0 && orders[orders.length - 1] === 1) {\r\n            orders.push(0);\r\n        }\r\n        else {\r\n            orders.push(1);\r\n        }\r\n        this.trinkle(array, orders, index, orders.length - 1);\r\n    }\r\n\r\n    shrinkHeap(array: SortArray, orders: number[], index: number) {\r\n        const order = orders.pop();\r\n        if (!this.hasChildren(order)) {\r\n            return;\r\n        }\r\n        orders.push(order - 1);\r\n        orders.push(order - 2);\r\n        this.trinkle(array, orders, this.leftChildIndex(index, order), orders.length - 2);\r\n        this.trinkle(array, orders, index - 1, orders.length - 1);\r\n    }\r\n\r\n    trinkle(array: SortArray, orders: number[], index: number, orderIndex: number) {\r\n        if (orderIndex !== 0) {\r\n            let selfValue = this.trinkleMax(array, index, orders[orderIndex]);\r\n            for (let swapTo = orderIndex - 1; swapTo >= 0; swapTo--) {\r\n                const tgtHead = this.previousHeapIndex(index, orders[orderIndex]);\r\n                if (array.get(tgtHead).compare(selfValue) > 0) {\r\n                    array.swap(tgtHead, index);\r\n                    index = tgtHead;\r\n                    orderIndex = swapTo;\r\n                    selfValue = this.trinkleMax(array, index, orders[orderIndex]);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.heapDown(array, index, orders[orderIndex]);\r\n    }\r\n\r\n    trinkleMax(array: SortArray, index: number, order: number) {\r\n        if (this.hasChildren(order)) {\r\n            let max = array.get(index);\r\n            const c1 = array.get(index - 1);\r\n            max = max.compare(c1) >= 0 ? max : c1;\r\n            const c2 = array.get(this.leftChildIndex(index, order));\r\n            max = max.compare(c2) >= 0 ? max : c2;\r\n            return max;\r\n        }\r\n        return array.get(index);\r\n    }\r\n\r\n    heapDown(array: SortArray, index: number, order: number) {\r\n        if (!this.hasChildren(order)) return;\r\n        const leftChildIdx = this.leftChildIndex(index, order);\r\n        const rightChildIdx = index - 1;\r\n        const leftChildOrder = order - 1;\r\n        const rightChildOrder = order - 2;\r\n        if (array.get(leftChildIdx).compare(array.get(rightChildIdx)) > 0) {\r\n            this.heapDownCompare(array, index, leftChildIdx, leftChildOrder);\r\n        }\r\n        else {\r\n            this.heapDownCompare(array, index, rightChildIdx, rightChildOrder);\r\n        }\r\n    }\r\n\r\n    heapDownCompare(array: SortArray, index: number, childIndex: number, childOrder: number) {\r\n        if (array.get(childIndex).compare(array.get(index)) > 0) {\r\n            array.swap(index, childIndex);\r\n            this.heapDown(array, childIndex, childOrder);\r\n        }\r\n    }\r\n\r\n    hasChildren(order: number) {\r\n        return order > 1;\r\n    }\r\n\r\n    leftChildIndex(index: number, order: number): number {\r\n        return index - this.getHeapChildDist(order);\r\n    }\r\n\r\n    previousHeapIndex(index: number, order: number): number {\r\n        return index - this.getHeapPrevDist(order);\r\n    }\r\n    \r\n    getHeapChildDist(order: number): number {\r\n        while (order >= this.heapChildDist.length) {\r\n            this.heapChildDist.push(\r\n                this.heapChildDist[this.heapChildDist.length - 1]\r\n                + this.heapChildDist[this.heapChildDist.length - 2]);\r\n        }\r\n        return this.heapChildDist[order];\r\n    }\r\n\r\n    getHeapPrevDist(order: number): number {\r\n        while (order >= this.heapPrevDist.length) {\r\n            this.heapPrevDist.push(\r\n                this.heapPrevDist[this.heapPrevDist.length - 1]\r\n                + this.heapPrevDist[this.heapPrevDist.length - 2]\r\n                + 1);\r\n        }\r\n        return this.heapPrevDist[order];\r\n    }\r\n}\r\n\r\nexport function getSmoothSortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Smooth Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    {/* TODO: Check if it's in-place */}\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Smoothsort is a very fast heap-like sorting algorithm which uses a fibonacci heap instead of a typical binary heap to speed up heap construction</p>\r\n        <p style={{color:'#aaa'}}><i>TODO: Actually write out a good description for smooth sort</i></p>\r\n    </div>;\r\n}","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class InsertionSort implements ISort {\r\n    public name = 'InsertionSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        for (let nextIndex = 2; nextIndex < arr.length(); nextIndex++) {\r\n            for(let slideBack = nextIndex - 1; slideBack >= 0; slideBack--) {\r\n                if(arr.get(slideBack).compare(arr.get(slideBack+1)) < 0) break;\r\n                arr.swap(slideBack, slideBack + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getInsertionSortDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Insertion Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>Yes</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>Insertion sort is one of the basic sorting algorithms. It's probably one of the first solutions you'd think of to solve this problem.</p>\r\n        <p>Insertion sort grows a sorted array from left-to-right by shifting the next unsorted element left until it's in the right place.</p>\r\n        <p>Insertion sort is quick for very small numbers of elements, but quickly becomes very slow as you sort larger arrays. For this reason, some algorithms will switch to insertion sort for very small input lists, but otherwise, you're better off with a different algorithm</p>\r\n        <p style={{color:'#aaa'}}>Ok, technically, as implemented here, this is a \"Gnome sort\" and not an insertion sort. Real insertion sorts don't shift one element at a time, but rather binary search and then insert the sorted element at the correct location.</p>\r\n        <p style={{color:'#888'}}>However, this implies you're inserting elements into a list which can grow as you push elements to it. In reality, inserting an element to the middle of the list will USUALLY result in the rest of the items being shifted right, one at a time.</p>\r\n        <p style={{color:'#666'}}>So, a \"real\" insertion sort would faster than as implemented here, but only measuring by number of comparisons, not swaps, and the way it is now I can write it in like, five lines of code, and I think that's neat.</p>\r\n        <p style={{color:'#444'}}>And also, it's easier to follow what's happening without a binary search making things tricky. But anyway, this is getting pedantic, so I'm going to accelerate this fade out so you don't have to read any more</p>\r\n    </div>\r\n}","import ISort from './ISort';\r\nimport SelectionSort from './selectionSort';\r\nimport CycleSort from './CycleSort';\r\nimport HeapSort from './heapSorts/heapSort';\r\nimport QuickSort from './quickSort';\r\nimport QuickDualPivot from './quickDualPivot';\r\nimport MergeSort from './mergeSort';\r\nimport WeakHeapSort from './heapSorts/weakHeapSort';\r\nimport SmoothSort from './heapSorts/smoothSort';\r\nimport InsertionSort from './insertionSort';\r\nimport BinaryMSDRadixSort from './radixSorts/BinaryMSDRadixSort';\r\nimport HexMSDRadixSort from './radixSorts/HexMSDRadixSort';\r\n\r\nconst allSortingAlgorithms: ISort[] = [\r\n    new SelectionSort(),\r\n    new InsertionSort(),\r\n    new CycleSort(),\r\n    new HeapSort(),\r\n    new WeakHeapSort(),\r\n    new SmoothSort(),\r\n    new QuickSort(),\r\n    new QuickDualPivot(),\r\n    new MergeSort(),\r\n    new BinaryMSDRadixSort(),\r\n    new HexMSDRadixSort()\r\n];\r\n\r\nexport default allSortingAlgorithms;","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class CycleSort implements ISort {\r\n    public name = 'CycleSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        const isInFinalPosition = new Array(arr.length());\r\n        for (let i = 0; i < isInFinalPosition.length; i++) {\r\n            isInFinalPosition[i] = false;\r\n        }\r\n        for (let tgtIndex = 0; tgtIndex < arr.length() - 1;) {\r\n            if (isInFinalPosition[tgtIndex]) {\r\n                tgtIndex++;\r\n                continue;\r\n            }\r\n            const item = arr.get(tgtIndex);\r\n            let index = tgtIndex;\r\n            for (let swapIndex = tgtIndex + 1; swapIndex < arr.length(); swapIndex++) {\r\n                if (arr.get(swapIndex).compare(item) <= 0) index ++;\r\n            }\r\n\r\n            while (arr.get(index).compare(item) === 0 && index > tgtIndex) index--;\r\n\r\n            if (index === tgtIndex) tgtIndex++;\r\n            else {\r\n                arr.swap(tgtIndex, index);\r\n                isInFinalPosition[index] = true;\r\n            }\r\n        }\r\n    }\r\n}","import ISort from './ISort';\r\nimport SortState from '../SortState';\r\nimport SortArray from '../SortArray';\r\nimport * as React from 'react';\r\n\r\nexport default class MergeSort implements ISort {\r\n    public name = 'MergeSort';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        this.recurse(state, arr, 0, arr.length());\r\n    }\r\n\r\n    recurse(state: SortState, arr: SortArray, min: number, max: number) {\r\n        if (max - min <= 1) return;\r\n\r\n        // Use the ceiling, so that the left-side is always larger or equal.\r\n        // Then we only need to allocate for the left-side\r\n        const midp = min + Math.ceil((max - min) / 2);\r\n        this.recurse(state, arr, min, midp);\r\n        this.recurse(state, arr, midp, max);\r\n\r\n        const sortedArr = state.createArray(max - min, min);\r\n        let lp = min;\r\n        let rp = midp;\r\n        let tp = 0;\r\n        while (lp < midp && rp < max) {\r\n            if (arr.get(lp).compare(arr.get(rp)) <= 0) {\r\n                sortedArr.set(tp, arr.get(lp));\r\n                lp++;\r\n                tp++;\r\n            } else {\r\n                sortedArr.set(tp, arr.get(rp));\r\n                rp++;\r\n                tp++;\r\n            }\r\n        }\r\n        while (lp < midp) {\r\n            sortedArr.set(tp, arr.get(lp));\r\n            lp++;\r\n            tp++;\r\n        }\r\n        while (rp < max) {\r\n            sortedArr.set(tp, arr.get(rp));\r\n            rp++;\r\n            tp++;\r\n        }\r\n\r\n        // Copy sorted array back over this array\r\n        for (let i = 0; i < max - min; i++) {\r\n            arr.set(i + min, sortedArr.get(i));\r\n        }\r\n\r\n        state.deleteArray(sortedArr);\r\n    }\r\n}","import ISort from '../ISort';\r\nimport SortState from '../../SortState';\r\nimport SortArray from '../../SortArray';\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from '../../sortDescriptors/RenderArrayState';\r\n\r\nexport default class BinaryMSDRadixSort implements ISort {\r\n    public name = 'MSD Radix (Binary)';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        let radixFlag = 1;\r\n        for(let i = 0; i < arr.length(); i++) {\r\n            const arrV = arr.get(i).value;\r\n            while(radixFlag <= arrV) {\r\n                radixFlag <<= 1;\r\n            }\r\n        }\r\n        radixFlag >>= 1;\r\n        this.bmsdrx_recurse(arr, 0, arr.length(), radixFlag);\r\n    }\r\n\r\n    private bmsdrx_recurse(arr: SortArray, start: number, length: number, radix: number) {\r\n        if(radix === 0 || length < 2) return;\r\n        let lp = start, rp = start;\r\n        while(rp < start + length) {\r\n            if((arr.get(rp).value & radix) === 0) {\r\n                if(lp !== rp) arr.swap(lp, rp);\r\n                lp++;\r\n                rp++;\r\n            }\r\n            else {\r\n                rp++;\r\n            }\r\n        }\r\n\r\n        this.bmsdrx_recurse(arr, start, lp-start, radix >> 1);\r\n        this.bmsdrx_recurse(arr, lp, rp-lp, radix >> 1);\r\n    }\r\n}\r\n\r\n\r\nexport function getBinaryMSDRadixDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Heap Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>There are many radix sorts.</p>\r\n    </div>;\r\n}","import ISort from '../ISort';\r\nimport SortState from '../../SortState';\r\nimport SortArray from '../../SortArray';\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from '../../sortDescriptors/RenderArrayState';\r\n\r\nexport default class HexMSDRadixSort implements ISort {\r\n    public name = 'MSD Radix (Hex)';\r\n\r\n    sort(state: SortState, arr: SortArray): void {\r\n        let radixFlag = 0b1111;\r\n        for(let i = 0; i < arr.length(); i++) {\r\n            const arrV = arr.get(i).value;\r\n            while(radixFlag < arrV) {\r\n                radixFlag <<= 1;\r\n            }\r\n        }\r\n        this.hmsdrx_recurse(state, arr, 0, arr.length(), radixFlag);\r\n    }\r\n\r\n    private hmsdrx_recurse(state: SortState, arr: SortArray, start: number, length: number, radix: number) {\r\n        if(radix === 0 || length < 2) return;\r\n        let rightShift = 0;\r\n        while((radix >> rightShift) > 0b1111) rightShift++;\r\n        const subArrs = [];\r\n        for(let i = 0; i < 16; i++)\r\n            subArrs.push(state.createArray());\r\n        for(let ptr = start; ptr < start + length; ptr ++) {\r\n            const record = arr.get(ptr);\r\n            const category = (record.value & radix) >> rightShift;\r\n            subArrs[category].push(record);\r\n        }\r\n        let arrlens = [];\r\n        let offset = 0;\r\n        for(let i = 0; i < 16; i++) {\r\n            arrlens.push(subArrs[i].length())\r\n            for(let j = 0; j < subArrs[i].length(); j++) {\r\n                arr.set(start + (offset++), subArrs[i].get(j));\r\n            }\r\n        }\r\n        for(let i = 0; i < 16; i++) {\r\n            state.deleteArray(subArrs[i]);\r\n        }\r\n        offset = 0;\r\n        for(let i = 0; i < 16; i++) {\r\n            if(arrlens[i] === 0) continue;\r\n            this.hmsdrx_recurse(state, arr, start + offset, arrlens[i], radix >> 4);\r\n            offset += arrlens[i];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getBinaryMSDRadixDescription(): JSX.Element {\r\n    return <div>\r\n        <h2>Heap Sort</h2>\r\n        <table className='sortAttributeTable'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Stable</td>\r\n                    <td>No</td>\r\n                    <td>In-Place</td>\r\n                    <td>Yes</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <hr />\r\n        <p>There are many radix sorts.</p>\r\n    </div>;\r\n}","import RandomData from './randomData';\r\nimport IDataGenerator from './IDataGenerator';\r\nimport ReverseSorted from './reverseSorted';\r\nimport NearSorted from './nearSorted';\r\nimport SinData from './sinData';\r\n\r\nconst allDataGenerators: IDataGenerator[] = [\r\n    new RandomData(),\r\n    new ReverseSorted(),\r\n    new NearSorted(),\r\n    new SinData()\r\n];\r\n\r\nexport default allDataGenerators;","import IDataGenerator from './IDataGenerator';\r\n\r\nexport default class RandomData implements IDataGenerator {\r\n    name = 'Random';\r\n    generate(index: number, totalLength: number): number {\r\n        return Math.random();\r\n    }\r\n}","import IDataGenerator from './IDataGenerator';\r\n\r\nexport default class ReverseSorted implements IDataGenerator {\r\n    name = 'Reversed';\r\n    generate(index: number, totalLength: number): number {\r\n        return 1 - (index / totalLength);\r\n    }\r\n}","import IDataGenerator from './IDataGenerator';\r\n\r\nexport default class NearSorted implements IDataGenerator {\r\n    name = 'Near Sorted';\r\n    generate(index: number, totalLength: number): number {\r\n        let effectiveIndex = Math.floor(index + (Math.random() * (totalLength / 100) - (totalLength / 50)));\r\n        if (effectiveIndex < 0) effectiveIndex = 0;\r\n        if (effectiveIndex > totalLength) effectiveIndex = totalLength;\r\n        return effectiveIndex / totalLength;\r\n    }\r\n}","import IDataGenerator from './IDataGenerator';\r\n\r\nexport default class SinData implements IDataGenerator {\r\n    name = 'Sinusoidal';\r\n    generate(index: number, totalLength: number): number {\r\n        const xp = index / totalLength;\r\n        return (Math.sin(xp * 2 * Math.PI) / 2) + 0.5;\r\n    }\r\n}","import HeapSort, { getHeapSortDescription } from \"../sorts/heapSorts/heapSort\";\r\nimport InsertionSort, { getInsertionSortDescription } from \"../sorts/insertionSort\";\r\nimport QuickDualPivot, { getQuicksortDualPivotDescription } from \"../sorts/quickDualPivot\";\r\nimport QuickSort, { getQuicksortDescription } from \"../sorts/quickSort\";\r\nimport SelectionSort, { getSelectionSortDescription } from \"../sorts/selectionSort\";\r\nimport SmoothSort, { getSmoothSortDescription } from \"../sorts/heapSorts/smoothSort\";\r\nimport WeakHeapSort, { getWeakHeapSortDescription } from \"../sorts/heapSorts/weakHeapSort\";\r\nimport ISortDescriptor from \"./ISortDescriptor\";\r\nimport MainSortDescriptor from \"./SortingAlgorithm\";\r\n\r\nexport interface IDescriptorTree {\r\n    descriptor: ISortDescriptor;\r\n    children?: IDescriptorTree[];\r\n}\r\n\r\nconst descriptorTree: IDescriptorTree = {\r\n    descriptor: MainSortDescriptor,\r\n    children: [\r\n        { descriptor: { displayName: 'Selection Sort', algorithm: new SelectionSort(), getDescription: getSelectionSortDescription } },\r\n        { descriptor: { displayName: 'Insertion Sort', algorithm: new InsertionSort(), getDescription: getInsertionSortDescription } },\r\n        { descriptor: { displayName: 'Heap Sort', algorithm: new HeapSort(), getDescription: getHeapSortDescription },\r\n          children: [\r\n            { descriptor: { displayName: 'Weak Heap Sort', algorithm: new WeakHeapSort(), getDescription: getWeakHeapSortDescription } },\r\n            { descriptor: { displayName: 'Smooth Sort', algorithm: new SmoothSort(), getDescription: getSmoothSortDescription } }\r\n        ]},\r\n        { descriptor: { displayName: 'Quicksort', algorithm: new QuickSort(), getDescription: getQuicksortDescription },\r\n          children: [\r\n            { descriptor: { displayName: 'Quicksort (Dual Pivot)', algorithm: new QuickDualPivot(), getDescription: getQuicksortDualPivotDescription } },\r\n        ]},\r\n    ]\r\n}\r\n\r\nexport default descriptorTree;","import ISortDescriptor from \"./ISortDescriptor\";\r\nimport * as React from 'react';\r\nimport { RenderArrayState } from \"./RenderArrayState\";\r\n\r\nconst MainSortDescriptor: ISortDescriptor = {\r\n    displayName: 'Sorting Algorithms',\r\n    getDescription: () => {\r\n        return <div>\r\n            <h2>Sorting algorithms</h2>\r\n            <p>\r\n                This project provides visualizations of various sorting algorithms, to hopefully make them easier to learn and understand. Also, it's just because I think they're neat.\r\n            </p>\r\n            <h4>What is a sorting algorithm?</h4>\r\n            <p>Let's say you've got a bunch of data in an array. We'll visualize your array like a graph, as below:</p>\r\n            {RenderArrayState([8, 7, 2, 10, 1, 6, 4, 5, 3, 9], 20)}\r\n            <p>The X-coordinate is it's position in the list, and the Y-coordinate is the items value. When we sort the array, we'll get a result like this:</p>\r\n            {RenderArrayState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20)}\r\n            <p>All the elements are now in ascending order. We want to go from the random starting position to this sorted position as fast as possible, using only a few basic operations:</p>\r\n            <hr />\r\n\r\n            <h5>Compare</h5>\r\n            <p>Sorting algorithms can compare two items to see which is greater. We visualize this with a red arc. For example, comparing the first and last elements would look like this:</p>\r\n            {RenderArrayState([6, 2, 10], 20, [{ from: 0, to: 2, color: '#f00'}])}\r\n            <p>Sorting algorithms generally can only compare two items at a time, and this is the only way they can tell what order two elements should fall into.</p>\r\n            <h5>Swap</h5>\r\n            <p>To move elements, algorithms generally have to swap two items. We represent this with a green arc.</p>\r\n            {RenderArrayState([6, 2, 10], 20, [{ from: 0, to: 2, color: '#0f0'}])}\r\n            {RenderArrayState([10, 2, 6], 20)}\r\n            <h5>Get/Set</h5>\r\n            <p>Algorithms can move items to/from extra storage, which we represent with an orange line, or just read a value and then set a value later.\r\n                This happens rarely, as it means the algorithm is using additional storage space. The algorithms here try to avoid doing so to keep their operation apparent</p>\r\n            \r\n            <hr />\r\n            <h4>How do we grade a sorting algorithm?</h4>\r\n            <p>Sorting algorithms are usually rated in 'Big-O' notation, which tells you how well an algorithm works as the amount of data to sort grows. We're not going to talk much about big-O here, because I'm not a comp-sci teacher.</p>\r\n            <p>Instead, we'll use an experimental approach. Better algorithms are those which sort the result with fewer total comparisons and swaps. We'll assume each compare/swap takes the same amount of time, and therefore, the fewer swaps/compares, the better.</p>\r\n            <p>We can call this the \"speed\" of the sorting algorithm. \"Faster\" algorithms will use generally fewer comparisions than \"slower\" algorithms. However, this is not the only important consideration with algorithms. There are some others, such as:</p>\r\n\r\n            <h4>Stability</h4>\r\n            <p>Stability is a property that some algorithms have, which means that if more than one element has the same value, they'll <i>always</i> come out in the same order they went in. For example, sort the following, keeping an eye on the colored elements:</p>\r\n            {RenderArrayState([3, 2, 3, 3, 6, 3, 1], 16, undefined, ['#533', null, '#353', '#335', null, '#553', null])}\r\n            <p>When sorted by a stable sort, the colored elements will be in the same order after the sort:</p>\r\n            {RenderArrayState([1, 2, 3, 3, 3, 3, 6], 16, undefined, [null, null, '#533', '#353', '#335', '#553', null])}\r\n            <p>When sorted by an unstable sort, you may get a result like this:</p>\r\n            {RenderArrayState([1, 2, 3, 3, 3, 3, 6], 16, undefined, [null, null, '#353', '#533', '#553', '#335', null])}\r\n            <p>The output will still be sorted, but the elements with the same value may be shuffled around. Stable sorts are nice because they allow you to sort the same array multiple times with multiple criteria do a 'sort by this, then by that' type of operation</p>\r\n            <p>For the purposes of our visualisation, however, stability doesn't really matter.</p>\r\n            \r\n            <h4>In-Place</h4>\r\n            <p>An algorithm is \"In-Place\" if it always uses the same amount of memory, regardless of the amount of data it is sorting.</p>\r\n            <p>In-Placeness is a very useful attribute, as otherwise, a sorting algorithm may use a lot of memory when sorting large arrays.</p>\r\n            <p>Unfortunately, because nothing is ever easy in CS, there are two different common definitions of in-place. The first is what I'll call \"Strictly in-place\", which is exactly as defined above. An algorithm uses a fixed amount of extra memory, which doesn't scale at all with the quantity of data being sorted.</p>\r\n            <p>Many divide-and-conquer algorithms fail this requirement, but only because they are recursive, which requires allocating space on the stack. This stack-space allocation is sometimes considered \"free\", making these algorithms \"In-Place\" as long as they don't allocate additional memory outside of the stack growing.\r\n                I'll call this \"Loosely In-Place\". Most algorithms which are \"In Place\" are \"Looseley In-Place\" as using a strict upper memory limit is quite restrictive.</p>\r\n            <hr />\r\n            <p>Well, that's enough of an info-dump. Poke around with some algorithms!</p>\r\n        </div>;\r\n    }\r\n};\r\n\r\nexport default MainSortDescriptor;","import * as React from \"react\"\r\nimport descriptorTree, { IDescriptorTree } from \"../../../projects/sortVis/sortDescriptors\";\r\nimport ISortDescriptor from \"../../../projects/sortVis/sortDescriptors/ISortDescriptor\";\r\nimport ISort from \"../../../projects/sortVis/sorts/ISort\";\r\n\r\nexport default function SortVisTreeListComponent(props: { children: JSX.Element, sortChosen: (algo: ISort)=>void }) {\r\n    const [expanded, setExpanded] = React.useState<boolean>(true);\r\n    const [selectedDescriptor, setDescriptor] = React.useState<ISortDescriptor | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        if(selectedDescriptor !== null && selectedDescriptor.algorithm !== null) {\r\n            props.sortChosen(selectedDescriptor.algorithm);\r\n        }\r\n    }, [selectedDescriptor]);\r\n\r\n    if(!expanded) {\r\n        return <div>\r\n            <button style={{width: 34, height: 18, padding: 0, margin: 0, float:'left' }} onClick={() => setExpanded(true)}>&gt;&gt;</button>\r\n            {props.children}\r\n        </div>;\r\n    }\r\n    else {\r\n        return  <>\r\n            <div style={{ border: '1px solid black', background: '#111', padding: '0 16px 0 0', top:0, left:0, bottom:0, right:'66%', position: 'absolute' }}  onClick={()=>setDescriptor(null)}>\r\n                <div>\r\n                    <TreeListItemComponent tree={descriptorTree} setDescriptor={setDescriptor} />\r\n                </div>\r\n                <DescriptorContentComponent descriptor={selectedDescriptor} setDescriptor={setDescriptor} />\r\n            </div>\r\n            <div style={{ left:'34%', top:0, bottom:0, right:0, position: 'absolute' }}>\r\n                <button style={{width: 34, height: 18, padding: 0, margin: 0, position: 'absolute'}} onClick={() => setExpanded(false)}>&lt;&lt;</button>\r\n                {props.children}\r\n            </div>\r\n        </>;\r\n    }\r\n}\r\n\r\nfunction TreeListItemComponent(props: {tree: IDescriptorTree, setDescriptor: (d: ISortDescriptor)=>void }) {\r\n    return <div>\r\n        <a onClick={ev => { props.setDescriptor(props.tree.descriptor); ev.preventDefault(); ev.stopPropagation(); }}>{props.tree.descriptor.displayName}</a>\r\n        <div style={{ marginLeft: 15 }}>\r\n            {props.tree.children?.map(child => {\r\n                return <TreeListItemComponent key={child.descriptor.displayName} tree={child} setDescriptor={props.setDescriptor} />\r\n            }) ?? []}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nfunction DescriptorContentComponent(props: {descriptor: ISortDescriptor | null, setDescriptor: (d: ISortDescriptor)=>void}) {\r\n    if(props.descriptor === null) return <></>;\r\n    else {\r\n        return <div style={{ border: '1px solid black', background:'#333', position: 'absolute', left: '18px', top:0, right: 0, bottom: 0}}>\r\n            <div style={{overflowY: 'scroll', left: 0, right: 0, top: 0, bottom: 0, position: 'absolute', padding: '0 12px'}} onClick={ev => {ev.preventDefault(); ev.stopPropagation(); }}>\r\n                {props.descriptor.getDescription()}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import * as React from 'react';\r\nimport Dropdown from 'react-dropdown';\r\nimport ISort from '../../../projects/sortVis/sorts/ISort';\r\nimport SortState from '../../../projects/sortVis/SortState';\r\nimport { first } from '../../../LinqLike';\r\nimport SortVisPlaybackComponent from './SortVisPlaybackComponent';\r\nimport IDataGenerator from '../../../projects/sortVis/dataGenerator/IDataGenerator';\r\nimport allSortingAlgorithms from '../../../projects/sortVis/sorts';\r\nimport allDataGenerators from '../../../projects/sortVis/dataGenerator';\r\nimport SortVisTreeListComponent from './SortVisTreeListComponent';\r\n\r\nexport default function SortVisComponent() {\r\n    const [arrLen, setArrLen] = React.useState(1024);\r\n    const [arrMax, setArrMax] = React.useState(1000);\r\n    const [currentAlgo, setCurrentAlgo] = React.useState<ISort | undefined>(undefined);\r\n    const [runningSortState, setSortState] = React.useState<SortState | undefined>(undefined);\r\n    const [currentDataGen, setDataGen] = React.useState<IDataGenerator>(allDataGenerators[0]);\r\n\r\n    function runState() {\r\n        const initialValues = new Array(arrLen);\r\n        for (let i = 0; i < initialValues.length; i++) {\r\n            initialValues[i] = Math.floor(currentDataGen.generate(i, initialValues.length) * arrMax);\r\n        }\r\n        const sortState = new SortState(initialValues);\r\n        currentAlgo.sort(sortState, sortState.getArray(0));\r\n        sortState.seekTo(0);\r\n        setSortState(sortState);\r\n    }\r\n\r\n    return <div style={{top: 0, left: 0, bottom: 0, right: 0, position: 'absolute'}}>\r\n        <SortVisTreeListComponent sortChosen={sort => setCurrentAlgo(sort)}>\r\n            <>\r\n                <div className='flex col align-center'>\r\n                    <div className='flex col align-stretch'>\r\n                        <div className='flex row justify-space-between'>\r\n                            <span>Array Length:</span>\r\n                            <input type='number' value={arrLen} onChange={ch => setArrLen(ch.target.valueAsNumber)} />\r\n                        </div>\r\n                        <div className='flex row justify-space-between'>\r\n                            <span>Array Max:</span>\r\n                            <input type='number' value={arrMax} onChange={ch => setArrMax(ch.target.valueAsNumber)} />\r\n                        </div>\r\n                        <div>\r\n                            <span>Data: </span>\r\n                            <Dropdown\r\n                                options={allDataGenerators.map(item => item.name)}\r\n                                value={currentDataGen.name}\r\n                                onChange={ch => setDataGen(first(allDataGenerators, algo => algo.name === ch.value))}\r\n                                />\r\n                        </div>\r\n                        <div>Algorithm: <Dropdown\r\n                            options={allSortingAlgorithms.map(algo => algo.name)}\r\n                            value={currentAlgo === undefined ? undefined : currentAlgo.name}\r\n                            onChange={ch => setCurrentAlgo(first(allSortingAlgorithms, algo => algo.name === ch.value))} /></div>\r\n                        <button disabled={arrLen <= 0 || arrMax <= 0 || currentAlgo === undefined} onClick={runState}>Go!</button>\r\n                    </div>\r\n                </div>\r\n                {runningSortState === undefined ? <></> : <>\r\n                    <hr />\r\n                    <SortVisPlaybackComponent state={runningSortState} />\r\n                </>}\r\n            </>\r\n        </SortVisTreeListComponent>\r\n    </div>;\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DEFAULT_PLACEHOLDER_STRING = 'Select...';\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, props));\n    _this.state = {\n      selected: _this.parseValue(props.value, props.options) || {\n        label: typeof props.placeholder === 'undefined' ? DEFAULT_PLACEHOLDER_STRING : props.placeholder,\n        value: ''\n      },\n      isOpen: false\n    };\n    _this.mounted = true;\n    _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_this));\n    _this.fireChangeEvent = _this.fireChangeEvent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.value) {\n        var selected = this.parseValue(newProps.value, newProps.options);\n\n        if (selected !== this.state.selected) {\n          this.setState({\n            selected: selected\n          });\n        }\n      } else {\n        this.setState({\n          selected: {\n            label: typeof newProps.placeholder === 'undefined' ? DEFAULT_PLACEHOLDER_STRING : newProps.placeholder,\n            value: ''\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.handleDocumentClick, false);\n      document.addEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n      document.removeEventListener('click', this.handleDocumentClick, false);\n      document.removeEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(event) {\n      if (this.props.onFocus && typeof this.props.onFocus === 'function') {\n        this.props.onFocus(this.state.isOpen);\n      }\n\n      if (event.type === 'mousedown' && event.button !== 0) return;\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!this.props.disabled) {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(value, options) {\n      var option;\n\n      if (typeof value === 'string') {\n        for (var i = 0, num = options.length; i < num; i++) {\n          if (options[i].type === 'group') {\n            var match = options[i].items.filter(function (item) {\n              return item.value === value;\n            });\n\n            if (match.length) {\n              option = match[0];\n            }\n          } else if (typeof options[i].value !== 'undefined' && options[i].value === value) {\n            option = options[i];\n          }\n        }\n      }\n\n      return option || value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, label) {\n      var newState = {\n        selected: {\n          value: value,\n          label: label\n        },\n        isOpen: false\n      };\n      this.fireChangeEvent(newState);\n      this.setState(newState);\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(newState) {\n      if (newState.selected !== this.state.selected && this.props.onChange) {\n        this.props.onChange(newState.selected);\n      }\n    }\n  }, {\n    key: \"renderOption\",\n    value: function renderOption(option) {\n      var _classes;\n\n      var value = option.value;\n\n      if (typeof value === 'undefined') {\n        value = option.label || option;\n      }\n\n      var label = option.label || option.value || option;\n      var isSelected = value === this.state.selected.value || value === this.state.selected;\n      var classes = (_classes = {}, _defineProperty(_classes, \"\".concat(this.props.baseClassName, \"-option\"), true), _defineProperty(_classes, option.className, !!option.className), _defineProperty(_classes, 'is-selected', isSelected), _classes);\n      var optionClass = (0, _classnames[\"default\"])(classes);\n      return _react[\"default\"].createElement(\"div\", {\n        key: value,\n        className: optionClass,\n        onMouseDown: this.setValue.bind(this, value, label),\n        onClick: this.setValue.bind(this, value, label),\n        role: \"option\",\n        \"aria-selected\": isSelected ? 'true' : 'false'\n      }, label);\n    }\n  }, {\n    key: \"buildMenu\",\n    value: function buildMenu() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          options = _this$props.options,\n          baseClassName = _this$props.baseClassName;\n      var ops = options.map(function (option) {\n        if (option.type === 'group') {\n          var groupTitle = _react[\"default\"].createElement(\"div\", {\n            className: \"\".concat(baseClassName, \"-title\")\n          }, option.name);\n\n          var _options = option.items.map(function (item) {\n            return _this2.renderOption(item);\n          });\n\n          return _react[\"default\"].createElement(\"div\", {\n            className: \"\".concat(baseClassName, \"-group\"),\n            key: option.name,\n            role: \"listbox\",\n            tabIndex: \"-1\"\n          }, groupTitle, _options);\n        } else {\n          return _this2.renderOption(option);\n        }\n      });\n      return ops.length ? ops : _react[\"default\"].createElement(\"div\", {\n        className: \"\".concat(baseClassName, \"-noresults\")\n      }, \"No options found\");\n    }\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(event) {\n      if (this.mounted) {\n        if (!_reactDom[\"default\"].findDOMNode(this).contains(event.target)) {\n          if (this.state.isOpen) {\n            this.setState({\n              isOpen: false\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isValueSelected\",\n    value: function isValueSelected() {\n      return typeof this.state.selected === 'string' || this.state.selected.value !== '';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2, _classNames3, _classNames4, _classNames5;\n\n      var _this$props2 = this.props,\n          baseClassName = _this$props2.baseClassName,\n          controlClassName = _this$props2.controlClassName,\n          placeholderClassName = _this$props2.placeholderClassName,\n          menuClassName = _this$props2.menuClassName,\n          arrowClassName = _this$props2.arrowClassName,\n          arrowClosed = _this$props2.arrowClosed,\n          arrowOpen = _this$props2.arrowOpen,\n          className = _this$props2.className;\n      var disabledClass = this.props.disabled ? 'Dropdown-disabled' : '';\n      var placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label;\n      var dropdownClass = (0, _classnames[\"default\"])((_classNames = {}, _defineProperty(_classNames, \"\".concat(baseClassName, \"-root\"), true), _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, 'is-open', this.state.isOpen), _classNames));\n      var controlClass = (0, _classnames[\"default\"])((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(baseClassName, \"-control\"), true), _defineProperty(_classNames2, controlClassName, !!controlClassName), _defineProperty(_classNames2, disabledClass, !!disabledClass), _classNames2));\n      var placeholderClass = (0, _classnames[\"default\"])((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(baseClassName, \"-placeholder\"), true), _defineProperty(_classNames3, placeholderClassName, !!placeholderClassName), _defineProperty(_classNames3, 'is-selected', this.isValueSelected()), _classNames3));\n      var menuClass = (0, _classnames[\"default\"])((_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(baseClassName, \"-menu\"), true), _defineProperty(_classNames4, menuClassName, !!menuClassName), _classNames4));\n      var arrowClass = (0, _classnames[\"default\"])((_classNames5 = {}, _defineProperty(_classNames5, \"\".concat(baseClassName, \"-arrow\"), true), _defineProperty(_classNames5, arrowClassName, !!arrowClassName), _classNames5));\n\n      var value = _react[\"default\"].createElement(\"div\", {\n        className: placeholderClass\n      }, placeHolderValue);\n\n      var menu = this.state.isOpen ? _react[\"default\"].createElement(\"div\", {\n        className: menuClass,\n        \"aria-expanded\": \"true\"\n      }, this.buildMenu()) : null;\n      return _react[\"default\"].createElement(\"div\", {\n        className: dropdownClass\n      }, _react[\"default\"].createElement(\"div\", {\n        className: controlClass,\n        onMouseDown: this.handleMouseDown.bind(this),\n        onTouchEnd: this.handleMouseDown.bind(this),\n        \"aria-haspopup\": \"listbox\"\n      }, value, _react[\"default\"].createElement(\"div\", {\n        className: \"\".concat(baseClassName, \"-arrow-wrapper\")\n      }, arrowOpen && arrowClosed ? this.state.isOpen ? arrowOpen : arrowClosed : _react[\"default\"].createElement(\"span\", {\n        className: arrowClass\n      }))), menu);\n    }\n  }]);\n\n  return Dropdown;\n}(_react.Component);\n\nDropdown.defaultProps = {\n  baseClassName: 'Dropdown'\n};\nvar _default = Dropdown;\nexports[\"default\"] = _default;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { useState } from 'react';\r\n\r\n// Same as useState, but with a change handler that fires before the state is updated\r\nexport default function useUpdateState<T>(initial: T, beforeChange: (newValue: T, oldValue?: T) => void): [T, (item: T) => void] {\r\n  const [value, updateValue] = useState(initial);\r\n  return [value, (newValue: T) => { beforeChange(newValue, value); updateValue(newValue); }];\r\n}"],"sourceRoot":""}