{"version":3,"file":"843.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/entities/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    shift(x: number, y: number): Rect;\r\n    shift(p: Point): Rect;\r\n    shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    shiftBy(x: number, y: number): void;\r\n    shiftBy(p: Point): void;\r\n    shiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const MAP_SIZE = 6;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\r\n\r\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"1bece4b53ae0cc7f1c101b72c3505480.png\";","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\n\r\nexport default class Assets {\r\n    tiles: SpriteSheet;\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n    }\r\n\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport enum Direction {\r\n    Right = 0,\r\n    DownRight = 1,\r\n    DownLeft = 2,\r\n    Left = 3,\r\n    UpLeft = 4,\r\n    UpRight = 5\r\n}\r\n\r\nexport const AllDirections: Direction[] = [\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n    Direction.UpRight\r\n];\r\n\r\nexport class DirectionHelper {\r\n    public static ToPoint(direction: Direction): Point {\r\n        switch (direction) {\r\n            case Direction.Right: return new Point(1, 0);\r\n            case Direction.DownRight: return new Point(0, 1);\r\n            case Direction.DownLeft: return new Point(-1, 1);\r\n            case Direction.Left: return new Point(-1, 0);\r\n            case Direction.UpLeft: return new Point(0, -1);\r\n            case Direction.UpRight: return new Point(1, -1);\r\n        }\r\n    }\r\n\r\n    public static Turn(direction: Direction, amount: number): Direction {\r\n        const result = (direction + amount)%6;\r\n        return (result + 6) % 6;\r\n    }\r\n}","import Rect from \"../position/Rectangle\";\r\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\r\n\r\n    public origin: Point;\r\n\r\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        return this;\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return this;\r\n    }\r\n\r\n    public width() {\r\n        return this.sourceBounds.w;\r\n    }\r\n    public height() {\r\n        return this.sourceBounds.h;\r\n    }\r\n\r\n    tick(): boolean {\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\r\n        const oldTransform = ctx.getTransform();\r\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\r\n        ctx.drawImage(this.source, \r\n            this.sourceBounds.x, \r\n            this.sourceBounds.y, \r\n            this.sourceBounds.w, \r\n            this.sourceBounds.h, \r\n            0, \r\n            0, \r\n            destination.w, \r\n            destination.h);\r\n        ctx.setTransform(oldTransform);\r\n    }\r\n}","import { IWeaponArgs } from \"../../bullets/weapons/Weapon\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class PlayerWeapon {\r\n\r\n    public iconImage: IRenderable;\r\n    public sprite: IRenderable;\r\n\r\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\r\n        if(this.type === 'primary') {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n        else {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n}\r\n","import Point from \"../common/position/Point\";\r\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\r\nimport { Direction, DirectionHelper } from \"./Direction\";\r\n\r\nexport function HexToPixel(point: Point) {\r\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\r\n}\r\n\r\nexport function PixelToHex(point: Point) {\r\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\r\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\r\n    return new Point(tilesX, tilesY);\r\n}\r\n\r\nexport function HexLength(point: Point): number {\r\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\r\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\r\n    }\r\n    else {\r\n        return Math.abs(point.x) + Math.abs(point.y);\r\n    }\r\n}\r\n\r\nexport function GetRing(radius: number) {\r\n    if(radius === 0) return [new Point(0,0)];\r\n\r\n    const result: Point[] = [];\r\n    let pos = new Point(0, -radius);\r\n    \r\n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\r\n        var dir = DirectionHelper.ToPoint(direction);\r\n        for(var len = 0; len < radius; len++){\r\n            result.push(pos);\r\n            pos = Point.add(pos, dir);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport { OffsetRenderable } from \"../../common/rendering/OffsetRenderable\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport PlayerWeapon from \"./PlayerWeapon\";\r\nimport * as C from '../Constants';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { HexToPixel } from \"../Hex\";\r\n\r\nexport default class Player extends Entity {\r\n\r\n    public primary: PlayerWeapon;\r\n    public secondary: PlayerWeapon;\r\n    private renderable: Sprite;\r\n\r\n    constructor(assets: Assets, pos: Point) {\r\n        super(pos);\r\n\r\n        this.primary = new PlayerWeapon('primary', assets, new Point(8, 1));\r\n        this.secondary = new PlayerWeapon('secondary', assets, new Point(10, 0));\r\n\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n\r\n        this.renderable.draw(ctx, rect, 0);\r\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\r\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\r\n    }\r\n}","import { LinkedInterpolation } from \"../common/interpolation/Interpolated\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport GameState from \"./GameState\";\r\n\r\nexport default abstract class Entity {\r\n    isFlying: boolean;\r\n    maxHp: number;\r\n    hp: number;\r\n    position: Point;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n    }\r\n    \r\n    TakeDamage(dmg: number) {\r\n\r\n    }\r\n\r\n    tick(state: GameState) {\r\n\r\n    }\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport default class HexArray<T> {\r\n    private data: T[][];\r\n    private _size: number;\r\n\r\n    constructor(size: number, defaultValue: T) {\r\n        this._size = size;\r\n        this.data = [];\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: T[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                row.push(defaultValue);\r\n            }\r\n            this.data.push(row);\r\n        }\r\n    }\r\n\r\n    public size() {\r\n        return this._size;\r\n    }\r\n\r\n    public get(x: number, y: number): T;\r\n    public get(pt: Point): T;\r\n    public get(pt: [number, number]): T;\r\n    public get(xp: number|Point|[number, number], yp?: number): T {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        let [dx, row] = this.toArrayCoords(x, y);\r\n        return this.data[row][dx];\r\n    }\r\n\r\n    public set(value: T, x: number, y: number): void;\r\n    public set(value: T, pt: Point): void;\r\n    public set(value: T, pt: [number, number]): void;\r\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        const [dx, row] = this.toArrayCoords(x, y);\r\n        this.data[row][dx] = value;\r\n    }\r\n\r\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\r\n        if(typeof xp === \"number\"){\r\n            return [xp as number, y];\r\n        }\r\n        else if ((xp as Point).x !== undefined) {\r\n            return [(xp as Point).x, (xp as Point).y];\r\n        }\r\n        else {\r\n            return xp as [number, number];\r\n        }\r\n    }\r\n\r\n    public getRowLength(y: number): number {\r\n        return this._size * 2 - 1 - Math.abs(y);\r\n    }\r\n\r\n    public isInBounds(x: number, y: number): boolean {\r\n        if(y <= -this._size || y >= this._size) {\r\n            return false;\r\n        }\r\n        let [xMin, xMax] = this.getXRange(y);\r\n        return x >= xMin && x < xMax;\r\n    }\r\n\r\n    public getXRange(y: number): [number, number] {\r\n        const minX = this.getMinX(y);\r\n        const len = this.getRowLength(y);\r\n        return [minX, minX + len];\r\n    }\r\n\r\n    public getMinX(y: number): number {\r\n        const row = this._size - 1 + y;\r\n        return -Math.min(row, this._size - 1);\r\n    }\r\n\r\n    public iterate(func: (x: number, y: number, value: T) => void) {\r\n        for(let y = -this._size+1; y < this._size; y++) {\r\n            let [xMin, xMax] = this.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                func(x, y, this.get(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    private toArrayCoords(x: number, y: number): [number, number] {\r\n        const row = this._size - 1 + y;\r\n        const firstX = -Math.min(row, this._size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Player from \"./entities/Player\";\r\nimport HexArray from \"./HexArray\";\r\nimport HexCell from \"./HexCell\";\r\nimport IMapGen from \"./mapGen/IMapGen\";\r\nimport * as C from \"./Constants\";\r\nimport Entity from \"./Entity\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport Rect from \"../common/position/Rectangle\";\r\n\r\nexport default class GameState {\r\n\r\n    public player: Player;\r\n\r\n    public tiles: HexArray<HexCell>;\r\n    public entities: HexArray<Entity>;\r\n    \r\n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\r\n        this.entities = new HexArray<Entity>(size, null);\r\n        this.changeFloor(floorNum, generator);\r\n\r\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\r\n        this.entities.set(this.player, C.PLAYER_START_POSITION.x, C.PLAYER_START_POSITION.y);\r\n    }\r\n\r\n    changeFloor(floorNum: number, generator: IMapGen) {\r\n        this.entities = new HexArray<Entity>(this.entities.size(), null);\r\n        generator.generateMap(this.assets, floorNum, this);\r\n        this.tiles.iterate((x, y, tile) =>{\r\n            tile.AfterWorldLoad(this, new Point(x, y));\r\n        });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        this.tiles.iterate((x, y, cell) => {\r\n            cell.draw(ctx, this, new Point(x, y));\r\n        });\r\n\r\n        this.entities.iterate((x, y, entity) => {\r\n            if(entity !== null && entity !== undefined) {\r\n                entity.draw(ctx);\r\n            }\r\n        });\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class PlayerTurnGamePhase implements IGamePhase {\r\n\r\n    tick(state: GameState): IGamePhase {\r\n        return this;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n    }\r\n\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class EntryAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    tick(state: GameState): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        state.player.draw(ctx);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class GameStartAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    tick(state: GameState): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new EntryAnimationPhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.player.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\r\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n\r\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}\r\n\r\nexport class Floor extends SimpleCell {\r\n    constructor(assets: Assets) {\r\n        super(0, assets,new Point(0,0), true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n\r\n// TypeID 1 : Lava\r\n\r\nexport class DownStairs extends SimpleCell {\r\n    constructor(assets: Assets) {\r\n        super(2, assets, new Point(5, 0), true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}","import Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport class StackRenderable implements IRenderable {\r\n\r\n    public finishMode: 'any'|'all';\r\n\r\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\r\n        this.finishMode = renderableFinishMode ?? 'any';\r\n    }\r\n\r\n    tick(): boolean {\r\n        let allFinished = true;\r\n        let anyFinished = false;\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            const f = this.renderables[i].tick();\r\n            allFinished = allFinished && f;\r\n            anyFinished = anyFinished || f;\r\n        }\r\n        return this.finishMode === 'any' ? anyFinished : allFinished;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            this.renderables[i].draw(ctx, position, rotation);\r\n        }\r\n    }\r\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\r\nimport Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport class DeltaRenderable implements IRenderable {\r\n    constructor(private source: IRenderable, public delta: Rectangle) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport HexCell from \"./HexCell\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\r\n\r\ninterface ITilePart {\r\n    directions: Direction[];\r\n    tileCoords: Point;\r\n    tileSlice: Rect;\r\n}\r\n\r\nconst tileParts: ITilePart[] = [\r\n    {\r\n        // Top of Tile\r\n        directions: [Direction.UpLeft, Direction.UpRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0, 1, 0.5),\r\n    },\r\n    {\r\n        // Bottom of Tile\r\n        directions: [Direction.DownLeft, Direction.DownRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\r\n    }, \r\n    {\r\n        // TopLeft of Tile\r\n        directions: [Direction.Left, Direction.UpLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // TopRight of Tile\r\n        directions: [Direction.Right, Direction.UpRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomLeft of Tile\r\n        directions: [Direction.Left, Direction.DownLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomRight of Tile\r\n        directions: [Direction.Right, Direction.DownRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\r\n    }\r\n]\r\n\r\nexport default abstract class MultiPartCell extends HexCell{\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.assets = assets;\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        const adjacencyMap = AllDirections.map(d => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        const images = tileParts.map(part => {\r\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\r\n            const sourceBounds = new Rect(\r\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\r\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\r\n                (part.tileSlice.w) * C.TILE_WIDTH,\r\n                (part.tileSlice.h) * C.TILE_HEIGHT\r\n            );\r\n            return new DeltaRenderable(\r\n                new Sprite(this.assets.tiles.image, sourceBounds),\r\n                part.tileSlice\r\n            );\r\n        });\r\n\r\n        this.renderable = new StackRenderable(\r\n            images,\r\n            'all'\r\n        );\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport GameState from \"./GameState\";\r\nimport HexCell from \"./HexCell\";\r\nimport MultiPartCell from \"./MultiPartCell\";\r\n\r\nexport default class Lava extends MultiPartCell {\r\n\r\n    constructor(assets: Assets) {\r\n        super(1, assets, new Point(0, 4), false);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n        if(!entity.isFlying)\r\n            entity.TakeDamage(999);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Lava from \"../LavaCell\";\r\n\r\nexport default class FloorZeroGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n\r\n        const ring = GetRing(2);\r\n        for(var i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Lava(assets), ring[i]);\r\n        }\r\n\r\n        const ring2 = GetRing(3);\r\n        for(var i = 0; i < ring2.length; i += 3) {\r\n            state.tiles.set(new Lava(assets), ring2[i]);\r\n        }\r\n\r\n        state.tiles.set(new Lava(assets), 0,0);\r\n\r\n        state.tiles.set(new DownStairs(assets), 2, -4);\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport GameState from './GameState';\r\nimport StandardMapGen from './mapGen/StandardMapGen';\r\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\r\nimport IGamePhase from './phases/IGamePhase';\r\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\r\nimport FloorZeroGen from './mapGen/FloorZeroGen';\r\n\r\nexport default function Run(): (()=>void) {\r\n    let ctx: CanvasRenderingContext2D;\r\n    \r\n    let keys: KeyboardManager;\r\n    let scaleHelper: NearestNeighborScalingHelper;\r\n    \r\n    const assetLoader = new AssetLoader();\r\n    const assets = new Assets(assetLoader);\r\n\r\n    let state: GameState;\r\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\r\n\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n    \r\n    function assetLoadDone() {\r\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n        ctx = canvas.getContext('2d');\r\n        scaleHelper = new NearestNeighborScalingHelper(\r\n            canvas, \r\n            ctx, \r\n            C.MAP_PIXEL_SIZE, \r\n            C.MAP_PIXEL_SIZE, \r\n            true, \r\n            () => { return; }\r\n        );\r\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\r\n        NearestNeighborScaling(ctx);\r\n        tick();\r\n    }\r\n    \r\n    function tick() {\r\n\r\n        currentPhase = currentPhase.tick(state);\r\n\r\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        currentPhase.draw(ctx, state);\r\n\r\n\r\n        requestAnimationFrame(() => tick());\r\n    }\r\n\r\n    return (() => scaleHelper.Detatch());\r\n}\r\n","import * as React from 'react';\r\nimport Run from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>Run());\r\n    return <div className='rpgt rpgt_body full_body center'>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","Math","cos","sin","lengthSq","dot","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","rotate","theta","fromAngle","Rect","w","h","shift","xp","shiftBy","edge","corner","r","TILE_WIDTH","TILE_HEIGHT","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","tick","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","PlayerWeapon","type","assets","artTile","sprite","image","iconImage","AllDirections","DirectionHelper","amount","HexToPixel","point","GetRing","radius","result","pos","dir","Player","position","TakeDamage","dmg","state","super","primary","secondary","renderable","target","rect","HexArray","size","defaultValue","_size","data","midRowLength","dy","row","dx","abs","get","yp","extractInputCoords","toArrayCoords","set","value","getRowLength","isInBounds","xMin","xMax","getXRange","minX","getMinX","iterate","func","GameState","floorNum","generator","entities","changeFloor","player","generateMap","tile","AfterWorldLoad","cell","entity","PlayerTurnGamePhase","EntryAnimationPhase","animationTime","fillStyle","globalAlpha","fillRect","GameStartAnimationPhase","HexCell","typeId","pathable","isPathable","SimpleCell","spriteSheetPosition","bg_renderable","world","pt","Floor","OnEntityStep","DownStairs","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","i","f","DeltaRenderable","delta","Rectangle","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","map","d","hexPt","images","part","index","reduceRight","acc","Lava","isFlying","FloorZeroGen","floor","ring","ring2","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","id"],"sourceRoot":""}