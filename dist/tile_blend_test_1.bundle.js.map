{"version":3,"file":"tile_blend_test_1.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common-assets/RockLavaAllBlends_crop.png","webpack://trading-game/./src/projects/common-assets/Selectors16x16.png","webpack://trading-game/./src/projects/tile-blend-test-1/Terrain.ts","webpack://trading-game/./src/projects/tile-blend-test-1/index.ts"],"sourcesContent":["export default __webpack_public_path__ + \"e6ca7ebcac9136ce5511288e898c8371.png\";","export default __webpack_public_path__ + \"f1cd5c392c5447559f3a20ac58e20646.png\";","import { Direction, cardinalDirections, diagonalDirections, ToPoint, allDirections } from '../common/position/Direction';\r\n\r\nexport enum TileType {\r\n    Rock,\r\n    Lava\r\n}\r\n\r\nexport class Terrain {\r\n    private tiles: TileType[];\r\n    private subTileIds: number[];\r\n\r\n    constructor(public tilesWide: number, public tilesHigh: number) {\r\n        this.tiles = new Array(tilesHigh * tilesWide);\r\n        for (let x = 0; x < tilesWide * tilesHigh; x++) {\r\n            this.tiles[x] = TileType.Rock;\r\n        }\r\n\r\n        this.subTileIds = new Array(tilesHigh * tilesWide * 4);\r\n        for (let x = 0; x < tilesWide * tilesHigh * 4; x++) {\r\n            this.subTileIds[x] = 0;\r\n        }\r\n\r\n        for (let x = 0; x < tilesWide; x++) {\r\n            for (let y = 0; y < tilesHigh; y++) {\r\n                this.updateTile(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private fixCoords(x: number, y: number) {\r\n        return x + y * this.tilesWide;\r\n    }\r\n\r\n    private fixSubCoords(x: number, y: number, d: Direction) {\r\n        return x * 4 + (y * this.tilesWide * 4) + ((d - Direction.UpRight) / 2);\r\n    }\r\n\r\n    public getTile(x: number, y: number): TileType {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return TileType.Lava;\r\n        const coords = this.fixCoords(x, y);\r\n        return this.tiles[this.fixCoords(x, y)];\r\n    }\r\n\r\n    public getSubTileId(x: number, y: number, d: Direction) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return 0;\r\n        const coords = this.fixSubCoords(x, y, d);\r\n        return this.subTileIds[coords];\r\n    }\r\n\r\n    public setTile(x: number, y: number, t: TileType) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return;\r\n        const coords = this.fixCoords(x, y);\r\n        if (this.tiles[coords] === t) return;\r\n\r\n        this.tiles[coords] = t;\r\n        this.updateSelfAndAdjacent(x, y);\r\n    }\r\n\r\n    private updateSelfAndAdjacent(tx: number, ty: number) {\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                this.updateTile(tx + dx, ty + dy);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateTile(tx: number, ty: number): void {\r\n        if (tx < 0 || ty < 0 || tx >= this.tilesWide || ty >= this.tilesWide) return;\r\n        const tid = this.fixCoords(tx, ty);\r\n        const type = this.tiles[tid];\r\n\r\n        let adjacency = 0x00;\r\n        allDirections.forEach((dir, i) => {\r\n            const adjMask = 1 << i;\r\n            const pt = ToPoint(dir);\r\n            if (this.getTile(pt.x + tx, pt.y + ty) !== type) {\r\n                adjacency |= adjMask;\r\n            }\r\n        });\r\n\r\n        // adjacency now contains a bitmask of (adjacent=different) where\r\n        // b[0] == T diff, b[1] = TR diff, b[2] = R diff, etc...\r\n        // Therefore, bits [0..2] are the TopRight id,\r\n        // bits [2..4] are the BottomRight id,\r\n        // bits [4..6] are the BottomLeft id,\r\n        // bits [6, 7, 0] are the TopLeft id\r\n\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpRight)] = adjacency & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownRight)] = (adjacency >> 2) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownLeft)] = (adjacency >> 4) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpLeft)] = (adjacency >> 6) | ((adjacency & 1) << 2) & 0b111;\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { ResizeCanvas, NearestNeighborScaling } from '../common/CanvasHelpers';\r\nimport blendTilesUrl from '../common-assets/RockLavaAllBlends_crop.png';\r\nimport seletorsUrl from '../common-assets/Selectors16x16.png';\r\nimport { Terrain, TileType } from './Terrain';\r\nimport { Direction, ToPoint } from '../common/position/Direction';\r\nimport Point from '../common/position/Point';\r\n\r\nlet tiles: SpriteSheet;\r\nlet selectors: SpriteSheet;\r\nlet pvMousePos: Point | undefined;\r\nlet terrain: Terrain;\r\nlet context: CanvasRenderingContext2D;\r\n\r\nconst SCALE_FACTOR = 3;\r\n\r\n\r\nfunction Run() {\r\n    const assetLoader = new AssetLoader();\r\n    tiles = new SpriteSheet(8, 8, blendTilesUrl, assetLoader.registerAssetLoadCallback());\r\n    selectors = new SpriteSheet(16, 16, seletorsUrl, assetLoader.registerAssetLoadCallback());\r\n    pvMousePos = undefined;\r\n\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    terrain = new Terrain(20, 20);\r\n\r\n    ResizeCanvas(canvas, terrain.tilesWide * 16 * SCALE_FACTOR, terrain.tilesHigh * 16 * SCALE_FACTOR);\r\n    context = canvas.getContext('2d');\r\n    NearestNeighborScaling(context);\r\n\r\n    RenderTerrain(context, terrain, tiles);\r\n\r\n    canvas.addEventListener('mousemove', onMouseMove);\r\n    canvas.addEventListener('mouseleave', onMouseLeave);\r\n    canvas.addEventListener('mousedown', onMouseClick);\r\n}\r\n\r\nfunction RenderTerrain(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet) {\r\n    for (let x = 0; x < terr.tilesWide; x++) {\r\n        for (let y = 0; y < terr.tilesHigh; y++) {\r\n            RenderTerrainCell(ctx, terr, sprites, x, y);\r\n        }\r\n    }\r\n}\r\nfunction RenderTerrainCell(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet, x: number, y: number) {\r\n    for (let d = 0; d < 4; d++) {\r\n        const dir = Direction.UpRight + (d * 2);\r\n        const spriteSheetX = terr.getSubTileId(x, y, dir);\r\n        let spriteSheetY = d;\r\n        if (terr.getTile(x, y) === TileType.Lava) spriteSheetY += 4;\r\n\r\n        const rtx = x * 16 + (ToPoint(dir).x === 1 ? 8 : 0);\r\n        const rty = y * 16 + (ToPoint(dir).y === 1 ? 8 : 0);\r\n        sprites.render(ctx, rtx * SCALE_FACTOR, rty * SCALE_FACTOR, 8 * SCALE_FACTOR, 8 * SCALE_FACTOR,\r\n            spriteSheetX, spriteSheetY);\r\n    }\r\n}\r\n\r\nfunction onMouseMove(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    if (pvMousePos !== undefined) {\r\n        if (!mouseCoords.equals(pvMousePos)) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x, pvMousePos.y);\r\n            selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n                1, 0);\r\n            pvMousePos = mouseCoords;\r\n        }\r\n    }\r\n    else {\r\n        selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n            1, 0);\r\n        pvMousePos = mouseCoords;\r\n    }\r\n}\r\n\r\nfunction onMouseLeave(ev: MouseEvent) {\r\n    if (pvMousePos !== undefined) {\r\n        pvMousePos = undefined;\r\n    }\r\n}\r\n\r\nfunction onMouseClick(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    const tile = terrain.getTile(mouseCoords.x, mouseCoords.y);\r\n    terrain.setTile(mouseCoords.x, mouseCoords.y, tile === TileType.Lava ? TileType.Rock : TileType.Lava);\r\n\r\n    for (let dx = -1; dx <= 1; dx ++) {\r\n        for (let dy = -1; dy <= 1; dy++) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x + dx, pvMousePos.y + dy);\r\n        }\r\n    }\r\n\r\n    selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n        1, 0);\r\n}\r\n\r\nexport default Run;"],"names":["TileType","Terrain","constructor","tilesWide","tilesHigh","this","tiles","Array","x","Rock","subTileIds","y","updateTile","fixCoords","fixSubCoords","d","Direction","getTile","Lava","getSubTileId","coords","setTile","t","updateSelfAndAdjacent","tx","ty","dx","dy","tid","type","adjacency","dir","i","adjMask","pt","selectors","pvMousePos","terrain","context","assetLoadDone","canvas","document","getElementById","getContext","ctx","terr","sprites","RenderTerrainCell","RenderTerrain","addEventListener","onMouseMove","onMouseLeave","onMouseClick","spriteSheetX","spriteSheetY","rtx","rty","render","ev","mouseCoords","Point","Math","floor","offsetX","offsetY","undefined","equals","tile","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished"],"sourceRoot":""}