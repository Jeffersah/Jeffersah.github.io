{"version":3,"file":"bullets.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/bullets/const.ts","webpack://trading-game/./src/projects/bullets/assets/bullets_entities.png","webpack://trading-game/./src/projects/bullets/assets/Ships.png","webpack://trading-game/./src/projects/bullets/assets/Flares.png","webpack://trading-game/./src/projects/bullets/Player.ts","webpack://trading-game/./src/projects/bullets/ETeam.ts","webpack://trading-game/./src/projects/bullets/GameState.ts","webpack://trading-game/./src/projects/bullets/Effects/SingleExplosion.ts","webpack://trading-game/./src/projects/common/interpolation/TimingFunction.ts","webpack://trading-game/./src/projects/bullets/Effects/Explosion.ts","webpack://trading-game/./src/projects/common/Angle.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack://trading-game/./src/projects/common/position/Line.ts","webpack://trading-game/./src/projects/common/position/Bounds.ts","webpack://trading-game/./src/projects/bullets/Ship.ts","webpack://trading-game/./src/projects/common/assets/AnimationControl.ts","webpack://trading-game/./src/projects/bullets/data/parsing/parsers.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectControl.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectFuncs.ts","webpack://trading-game/./src/projects/bullets/weapons/Weapon.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponGroup.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponTimer.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack://trading-game/./src/projects/bullets/ai/IDebugMarker.ts","webpack://trading-game/./src/projects/bullets/ai/ShipAI.ts","webpack://trading-game/./src/projects/bullets/ai/BroadsideAI.ts","webpack://trading-game/./src/projects/bullets/ai/FighterAI.ts","webpack://trading-game/./src/projects/bullets/ai/IShipAI.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack://trading-game/./src/projects/bullets/data/parsing/weapons.ts","webpack://trading-game/./src/projects/bullets/index.ts","webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/assets/SpriteAnimation.ts","webpack://trading-game/./src/projects/common/assets/SpriteAtlas.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Angle.ts","webpack://trading-game/./src/projects/common/position/Point.ts"],"sourcesContent":["export default {\n    Width: 1000,\n    Height: 800\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","import Point from '../common/position/Point';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport ImageLoader from '../common/assets/ImageLoader';\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Angle from '../common/position/Angle';\n\nconst PHYS = {\n    acceleration: 0.2,\n    maxvelocity: 20,\n    vFricMin: 0.998,\n    vFricMax: 0.99,\n\n    engineAdjSpeed: 0.06,\n\n    turnBaseAccel: 0.002,\n    turnEngineMaxAccel: 0.004,\n    turnFric: 0.98,\n    turnPullMax: 0.003,\n    turnPullMaxV: 120,\n};\n\nexport default class Player {\n    position: Point;\n    velocity: Point;\n    angularVelocity: number;\n    rotation: number;\n\n    private isEngineOn: boolean;\n    private engineDeflect: number;\n    private tgtDeflect: number;\n\n    constructor(private sprites: SpriteSheet) {\n        this.position = new Point(0, 0);\n        this.velocity = new Point(0, 0);\n        this.angularVelocity = 0;\n        this.rotation = 0;\n        this.engineDeflect = 0;\n        this.tgtDeflect = 0;\n    }\n\n    tick(keys: KeyboardManager) {\n        if (keys.isKeyDown('w')) {\n            this.isEngineOn = true;\n        } else {\n            this.isEngineOn = false;\n        }\n\n        if (keys.isKeyDown('a')) {\n            this.tgtDeflect = 1;\n        } else if (keys.isKeyDown('d')) {\n            this.tgtDeflect = -1;\n        } else {\n            this.tgtDeflect = 0;\n        }\n\n        if (this.tgtDeflect >= this.engineDeflect) {\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\n        } else {\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\n        }\n\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\n        const diffPerc = diffDir / Math.PI;\n\n        this.angularVelocity *= PHYS.turnFric;\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\n\n        this.rotation += this.angularVelocity;\n\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\n        this.velocity.multWith(friction, friction);\n\n        if (this.isEngineOn) {\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\n        }\n\n        let vTotal = this.velocity.length();\n        let vAngle = this.velocity.direction();\n\n        if (vTotal >= PHYS.maxvelocity) {\n            vTotal = PHYS.maxvelocity;\n        }\n\n        let anglePullAmt = Math.sin(diffDir);\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\n        anglePullAmt *= PHYS.turnPullMax;\n\n        vAngle += anglePullAmt;\n        this.velocity.x = Math.cos(vAngle) * vTotal;\n        this.velocity.y = Math.sin(vAngle) * vTotal;\n\n\n        this.position.addWith(this.velocity);\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        ctx.save();\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\n        if (this.isEngineOn) {\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\n        }\n        if (this.tgtDeflect > 0) {\n            // Render spin flame\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\n        }\n        else if (this.tgtDeflect < 0) {\n            // Render spin flame\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\n        }\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\n        ctx.restore();\n    }\n}","import { type } from \"os\"\nexport enum ETeam\n{\n    ally,\n    enemy,\n    neutral\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\nimport Point from \"../common/position/Point\";\nimport { ETeam } from \"./ETeam\";\nimport { IEffect } from \"./IEffect\";\nimport IEntity from \"./IEntity\";\nimport Player from \"./Player\";\nimport { Ship } from \"./Ship\";\n\nexport default class GameState {\n    public Player: Player;\n    public Entities: { [key in ETeam]: IEntity[] }\n    public Effects: IEffect[];\n\n    constructor(player: Player, public keys: KeyboardManager){\n        this.Player = player;\n        this.Entities = <any>{};\n        this.Entities[ETeam.neutral] = [];\n        this.Entities[ETeam.ally] = [];\n        this.Entities[ETeam.enemy] = [];\n        this.Effects = [];\n    }\n\n    public tick(){\n        this.keys.update();\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\n            if(this.Effects[i].tick())\n                this.Effects.splice(i, 1);\n        }\n        this.updateEntities(this.Entities[ETeam.neutral]);\n        this.updateEntities(this.Entities[ETeam.ally]);\n        this.updateEntities(this.Entities[ETeam.enemy]);\n    }\n\n    private updateEntities(entities: IEntity[]) {\n        for(let i = entities.length - 1; i >= 0; i --) {\n            if(!entities[i].tick(this.keys, this))\n                entities.splice(i, 1);\n        }\n    }\n\n    public draw(ctx: CanvasRenderingContext2D){\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\n        for(let i = 0; i < this.Effects.length; i++) {\n            this.Effects[i].draw(ctx);\n        }\n    }\n    \n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\n        for(let i = entities.length - 1; i >= 0; i --) {\n            entities[i].render(ctx);\n        }\n    }\n\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\n        if(maxRange !== undefined) {\n            const rangeSq = maxRange * maxRange;\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).lengthSq() <= rangeSq);\n        }\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).lengthSq() }));\n        shipsAndRanges.sort((a, b) => a.range - b.range);\n        return shipsAndRanges.map(s => s.ship);\n    }\n}","import { Color } from \"../../common/Color\";\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport { IEffect } from \"../IEffect\";\n\nexport class SingleExplosion implements IEffect {\n\n    private timing: InterpolationTimer;\n\n    constructor(\n        public position: Point,\n        public outerRadius: Interpolated<number>,\n        public innerRadius: Interpolated<number>,\n        public fillColor: Interpolated<Color>,\n        totalTime: number)\n    {\n        this.timing = new InterpolationTimer(totalTime);\n    }\n\n    tick(): boolean {\n        return this.timing.tick();\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        const outer = this.timing.sample(this.outerRadius);\n        const inner = this.timing.sample(this.innerRadius);\n        const fill = this.timing.sample(this.fillColor);\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\n        if(inner >= 0) {\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\n        }\n        ctx.closePath();\n        ctx.fillStyle = fill.toString();\n        ctx.fill();\n    }\n\n}","export type TimingFunction = (t: number)=> number;\n\nexport const TimingFunctions = {\n    linear: (t:number) => t,\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\n    fastIn: Bezier(0, 0.8, 1),\n    fastOut: Bezier(0, 0.2, 1),\n};\n\nexport function Bezier(...pts: number[]): TimingFunction {\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\n}\n\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\n    if(pc === 1) return pts[pi];\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\n}","import { Color } from \"../../common/Color\";\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport { IEffect } from \"../IEffect\";\nimport { Range } from '../../common/Range';\nimport { SingleExplosion } from \"./SingleExplosion\";\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\nimport { any } from \"../../../LinqLike\";\n\nexport class Explosion implements IEffect {\n\n    private explosions: SingleExplosion[];\n    private currentBurstDelay = 0;\n    private maxExplosionIndex = 0;\n\n    constructor(\n        public position: Point,\n        public burstXVariance: Range,\n        public burstYVariance: Range,\n        public numBursts: Range,\n        public burstDelay: number,\n        public burstLifetime: Range,\n        public burstOuterRadius: Range,\n        )\n    {\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\n        this.explosions = new Array(nb);\n        this.triggerExplosions();\n    }\n\n    triggerExplosions() {\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\n            this.currentBurstDelay = this.burstDelay;\n            this.spawnBurst();\n        }\n    }\n\n    spawnBurst() {\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\n        const lifetime = this.burstLifetime.GetValue(Math.random());\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\n        const startingOuterRadius = outerRadius / 4;\n\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\n            new Point(bx, by),\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\n            lifetime\n        );\n    }\n\n    tick(): boolean {\n        let anyStillRunning = false;\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\n                if(this.explosions[i].tick()){\n                    this.explosions[i] = null;\n                } else {\n                    anyStillRunning = true;\n                }\n            }\n        }\n        this.currentBurstDelay --;\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\n                this.explosions[i].draw(ctx);\n            }\n        }\n    }\n\n}","import Point from \"./position/Point\";\n\nexport default class Angle {\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\n    static normalize(angle: number) {\n        angle %= Math.PI * 2;\n        if(angle < 0) angle += Math.PI * 2;\n        return angle;\n    }\n\n    /** Takes an angle and returns it in the range of [-PI, PI) */\n    static relativeNormalize(angle: number){\n        var norm = Angle.normalize(angle);\n        if(norm >= Math.PI) {\n            return norm - Math.PI * 2;;\n        } else {\n            return norm;\n        }\n    }   \n\n    static accuteAngle(from: number, to: number){\n        return Angle.relativeNormalize(to - from);\n    }\n\n    static angleBetween(from: Point, to: Point) {\n        return Math.atan2(to.y - from.y, to.x - from.x);\n    }\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\nimport Point from \"../../common/position/Point\";\nimport { Ship } from \"../Ship\";\n\nexport enum EFlareConditions {\n    Accel = \"accel\",\n    Deccel = \"deccel\",\n    TurnLeft = \"turnLeft\",\n    TurnRight = \"turnRight\"\n}\n\nexport class FlareDefinition {\n    private minTrigger: number;\n    private rotPerTurn: number;\n    private playing: PlayingAnimation;\n\n    private shouldRender: boolean;\n    private adjRot: number;\n\n    public conditions: EFlareConditions[];\n    \n    constructor(\n        public animation: SpriteAnimation,\n        public offset: Point,\n        public rotation: number,\n        conditions: EFlareConditions | EFlareConditions[],\n        minTrigger?: number,\n        rotPerTurn?: number) {\n        \n        if(typeof(conditions) === \"string\")\n            this.conditions = [<EFlareConditions>conditions];\n        else\n            this.conditions = <EFlareConditions[]>conditions;\n\n        this.rotPerTurn = rotPerTurn ?? 0;\n        this.minTrigger = minTrigger ?? 0\n        this.playing = animation.play(30, true);\n        this.shouldRender = false;\n    }\n\n    clone(): FlareDefinition {\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\n        return result;\n    }\n\n    tick(accel: number, turn: number) {\n        this.shouldRender = false;\n        for(let i = 0; i < this.conditions.length; i++)\n        {\n            switch(this.conditions[i]) {\n                case EFlareConditions.Accel: \n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\n                    break;\n                case EFlareConditions.Deccel: \n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\n                    break;\n                case EFlareConditions.TurnLeft:\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\n                    break;\n                case EFlareConditions.TurnRight:\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\n                    break;\n            }\n        }\n        this.adjRot = turn * this.rotPerTurn;\n        if(this.shouldRender) this.playing.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\n        if(!this.shouldRender) return;\n        let realPoint = this.offset.clone();\n        realPoint.subtractWith(Point.multiply(shipOrigin, shipSize));\n        realPoint = realPoint.rotate(rotation);\n        realPoint.addWith(location);\n        let realRot = this.adjRot + this.rotation + rotation;\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\n    }\n}","import Point from \"./Point\";\nimport { Range } from '../Range';\n\nexport default class Line {\n\n    constructor(public start: Point, public end: Point)\n    {\n\n    }\n\n    ray(): Point {\n        return Point.subtract(this.end, this.start);\n    }\n\n    midpoint(): Point {\n        return Point.interpolate(this.start, this.end, 0.5);\n    }\n\n    interpolate(p: number): Point {\n        return Point.interpolate(this.start, this.end, p);\n    }\n\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\n\n        if(denom === 0) {\n            return Line.parallelIntersection(a, b);\n        }\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\n\n        return { percentA, percentB };\n    }\n\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\n        const basis = a.ray().normalize();\n        function getBasisValue(pt: Point) {\n            return Point.dot(Point.subtract(pt, a.start), basis);\n        }\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\n\n        let bMinP = aRange.GetPercentage(bRange.min);\n        let bMaxP = aRange.GetPercentage(bRange.max);\n        \n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\n            return { percentA: bMinP, percentB: 0 };\n        }  else {\n            return { percentA: bMaxP, percentB: 1 };\n        }\n    }\n}","import Line from \"./Line\";\nimport Point from \"./Point\";\n\nexport default class Bounds {\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\n    {\n\n    }\n\n    getVertecies(): Point[] {\n        let relativePoints = [\n            new Point(0, 0),\n            new Point(this.size.x, 0),\n            new Point(this.size.x, this.size.y),\n            new Point(0, this.size.y)\n        ];\n\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\n        relativePoints = relativePoints.map(pt => {\n            const angle = Math.atan2(pt.y, pt.x);\n            const dist = pt.length();\n            return Point.fromAngle(angle + this.rotation, dist);\n        });\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\n        return relativePoints;\n    }\n\n    getEdges(): Line[] {\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\n    }\n\n    findLineIntersection(line: Line): number | null  {\n        let edges = this.getEdges();\n        let minLinePerc: number | null = null;\n        for(let i = 0; i < edges.length; i++) {\n            let colision = Line.intersection(line, edges[i]);\n            if( colision.percentA >= 0 && \n                colision.percentA < 1 && \n                colision.percentB >= 0 && \n                colision.percentB < 1 &&\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\n                    minLinePerc = colision.percentA;\n            }\n        }\n        return minLinePerc;\n    }\n}","import Angle from \"../common/Angle\";\nimport KeyboardManager from \"../common/input/KeyboardManager\";\nimport Bounds from \"../common/position/Bounds\";\nimport Point from \"../common/position/Point\";\nimport { IShipAI } from \"./ai/IShipAI\";\nimport { ETeam } from \"./ETeam\";\nimport GameState from \"./GameState\";\nimport IEntity from \"./IEntity\";\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\nimport { Weapon } from \"./weapons/Weapon\";\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\n\nexport class Ship implements IEntity{\n    \n    public Velocity: number;\n    private lastAccel: number;\n    private lastDeccel: number;\n    private lastTurn: number;\n    public currentHp: number;\n    private flares: FlareDefinition[];\n    \n    constructor(\n        public definition: ShipDefinition,\n        public position: Point,\n        public rotation: number,\n        public ai: IShipAI,\n        private team: ETeam,\n        private weaponGroups: WeaponGroup[]) {\n            this.Velocity = 0;\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\n            this.currentHp = this.definition.maxHp;\n            this.flares = this.definition.flares.map(f => f.clone());\n    }\n\n    getBounds(): Bounds {\n        return new Bounds(this.position, this.definition.size, Point.multiply(this.definition.origin, this.definition.size), this.rotation);\n    }\n\n    tick(keys: KeyboardManager, gs: GameState): boolean {\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\n        let actualAccelPercent = 0;\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\n            // Try deccel\n            var delta = this.Velocity - tgtVel;\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\n            actualAccelPercent = -this.lastDeccel;\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\n        } else if(tgtVel > this.Velocity) {\n            // Try accel\n            var delta = tgtVel - this.Velocity;\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\n            actualAccelPercent = this.lastAccel;\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\n        }\n\n        for(let i = 0; i < this.weaponGroups.length; i++){\n            this.weaponGroups[i].tick(gs, this);\n        }\n\n        // Try turn\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\n\n        var turnDirection = Math.sign(turnAmt);\n        turnAmt = Math.abs(turnAmt);\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\n\n        for(let i = 0; i < this.flares.length; i++){\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\n        }\n\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\n\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\n        this.position.addWith(Point.fromAngle(this.rotation, this.Velocity));\n        return this.currentHp > 0;\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        for(let i = 0; i < this.flares.length; i++){\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\n        }\n\n        for(let i = 0; i < this.weaponGroups.length; i++){\n            this.weaponGroups[i].draw(ctx, this);\n        }\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\n\n        this.ai.debugDraw(ctx, this);\n    }\n\n    getTeam() {\n        return this.team;\n    }\n}","import Point from \"../position/Point\";\nimport { PlayingAnimation } from \"./SpriteAnimation\";\nimport { AtlasSprite } from \"./SpriteAtlas\";\n\nexport class AnimationControl {\n    queue: (PlayingAnimation | AtlasSprite)[];\n    scaleFactor: Point;\n\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\n        this.queue = [initial];\n        if(size === undefined) {\n            this.scaleFactor = new Point(1, 1);\n        }\n        else if(isSprite(initial)) {\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\n        }\n        else {\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\n        }\n    }\n\n    current(): PlayingAnimation|AtlasSprite {\n        return this.queue[0];\n    }\n\n    enqueueFront(src: PlayingAnimation | AtlasSprite) {\n        this.queue.splice(0, 0, src);\n    }\n\n    play(src: PlayingAnimation | AtlasSprite) {\n        this.queue = [src];\n    }\n\n    enqueue(src: PlayingAnimation | AtlasSprite) {\n        this.queue.push(src);\n    }\n\n    tick() {\n        if(isSprite(this.queue[0])) {\n            this.advance();\n        }\n        else {\n            if(this.queue[0].tick()) this.advance();\n        }\n    }\n\n    advance() {\n        if(this.queue.length > 1) {\n            this.queue.splice(0, 1);\n        }\n    }\n\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\n    }\n\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\n        if(isSprite(src)) return Point.multiply(src.sourceSize, this.scaleFactor);\n        else return Point.multiply(src.source.sourceSize, this.scaleFactor);\n    }\n}\n\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\n    return (<AtlasSprite>src).origin !== undefined;\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\nimport INamedCollection from \"../../../common/INamedCollection\";\nimport Point from \"../../../common/position/Point\";\nimport { Range } from '../../../common/Range';\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\n\nexport function parseJsonPoint(jpt: [number, number]) {\n    return new Point(jpt[0], jpt[1]);\n}\n\nexport function parseJsonRange(jpt: [number, number]) {\n    return new Range(jpt[0], jpt[1]);\n}\n\nexport function parseJsonAngle(input: number) {\n    return input * Math.PI * 2;\n}\n\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\n}\n\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\n    return atlases[anim.file].getAnimation(\n        parseJsonPoint(anim.imgOffset),\n        parseJsonPoint(anim.frameSize),\n        parseJsonPoint(anim.origin),\n        anim.numFrames\n    );\n}","import Point from \"../../common/position/Point\";\nimport { IJsonEffect } from \"../data/IJsonEffect\";\nimport { IEffect } from \"../IEffect\";\nimport { CreateEffect } from \"./EffectFuncs\";\n\nexport default class EffectControl {\n    public effects: IEffect[];\n    constructor() {\n        this.effects = [];\n    }\n\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\n    }\n\n    tick() {\n        for(let i = this.effects.length - 1; i >= 0; i --) {\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D) {\n        for(let i = 0; i < this.effects.length; i++) {\n            this.effects[i].draw(ctx);\n        }\n    }\n}","import Point from \"../../common/position/Point\";\nimport { IJsonEffect } from \"../data/IJsonEffect\";\nimport { parseJsonRange } from \"../data/parsing/parsers\";\nimport { IEffect } from \"../IEffect\";\nimport { Explosion } from \"./Explosion\";\n\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\n    switch(effect.type) {\n        case \"explosion\":\n            return new Explosion(pt, \n                parseJsonRange(effect.burstXVariance),\n                parseJsonRange(effect.burstYVariance),\n                parseJsonRange(effect.numBursts),\n                effect.burstDelay,\n                parseJsonRange(effect.burstLifetime),\n                parseJsonRange(effect.burstOuterRadius));\n    }\n}","import Angle from \"../../common/Angle\";\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\nimport Point from \"../../common/position/Point\";\nimport { IJsonEffect } from \"../data/IJsonEffect\";\nimport EffectControl from \"../Effects/EffectControl\";\nimport GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\n\nexport interface IWeaponArgs {\n    offset: Point;\n    sprite?: AtlasSprite;\n    shootAnimation?: ISpriteAnimationArgs;\n    shootEffect?: IJsonEffect;\n\n    rotation: number;\n\n    turret?: {\n        maxAngle: number;\n        turnRate: number;\n    }\n\n    acquisitionAngle: number;\n    minRange?: number;\n    range: number;\n}\n\nexport class Weapon {\n    turretAngle: number;\n    actualAnchor: Point;\n    imgControl ?: AnimationControl;\n    effects: EffectControl;\n\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\n        this.turretAngle = 0;\n        this.actualAnchor = this.args.offset.clone();\n        this.actualAnchor.subtractWith(Point.multiply(shipDef.origin, shipDef.size));\n        if(args.sprite !== undefined) {\n            this.imgControl = new AnimationControl(args.sprite);\n        }\n        this.effects = new EffectControl();\n    }\n\n    getWeaponLocation(ship: Ship): Point {\n        const result = this.actualAnchor.rotate(ship.rotation);\n        result.addWith(ship.position);\n        return result;\n    }\n    getWeaponAnchorAngle(ship: Ship) {\n        return this.args.rotation + ship.rotation;\n    }\n    getWeaponCurrentAngle(ship: Ship) {\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\n    }\n\n    /**\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\n     */\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\n\n        this.effects.tick();\n        this.imgControl?.tick();\n\n        const location = this.getWeaponLocation(self);\n\n        // Filter down targets to those in range\n        possibleTargets = possibleTargets.filter(p => {\n            const pDist = Point.subtract(p, location).lengthSq();\n            return (\n                (this.args.minRange === undefined || \n                    (pDist > this.args.minRange * this.args.minRange)\n                ) &&\n                (pDist < this.args.range * this.args.range)\n            );\n        });\n\n        if(this.args.turret === undefined) {\n            if(possibleTargets.length === 0) return null; // No target in range.\n            const anchorAngle = this.getWeaponAnchorAngle(self);\n\n            // I have no turret, fire if anyone is in spray range\n            for(let i = 0; i < possibleTargets.length; i++) {\n                // Find absolute direction to target\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).direction();\n                // Find angle to target relative to turret anchor angle\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\n                // Check if relAngle is less than the spray angle (he's in range)\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\n                    return possibleTargets[i];\n            }\n            return null;\n        }\n        else {\n            if(possibleTargets.length === 0) {\n                // No targets. Return to angle 0.\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\n                return null;\n            }\n\n            const anchorAngle = this.getWeaponAnchorAngle(self);\n            const angle = this.getWeaponCurrentAngle(self);\n\n            let target: Point | null = null;\n            let targetAngle: number = 0;\n            let targetTurretAngle: number = 0;\n            let targetAbsoluteAngle: number = 0;\n\n            // Choose the target closest to anchor angle\n            for(let i = 0; i < possibleTargets.length; i++) {\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).direction();\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\n                    target = possibleTargets[i];\n                    targetAngle = turretRelAngle;\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\n                        // Target is outside of firing arc, we'll need to aim as close as possible\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\n                        targetAbsoluteAngle = angleToTarget;\n                    } else {\n                        // If we choose this target, we'll aim right at them\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\n                    }\n                }\n            }\n            // target is not null. If it was, we'd've exited earlier.\n            // Turn gun towards target\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\n                this.turretAngle += turretRelAngle;\n            }\n\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\n\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\n            else return null;\n        }\n    }\n\n    /** TODO: SHOOT */\n    shoot(gs: GameState, self: Ship) {\n        // Play the shoot animation, if necessary\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\n            this.imgControl.enqueue(this.args.sprite);\n        }\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\n    }\n\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\n        if(this.imgControl === undefined) return;\n        const realPoint = this.getWeaponLocation(ship);\n        let realRot = this.getWeaponCurrentAngle(ship);\n        this.imgControl.render(ctx, realPoint, realRot);\n        this.effects.draw(ctx);\n    }\n}","import Point from \"../../common/position/Point\";\nimport { ETeam } from \"../ETeam\";\nimport GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\n\nexport interface IWeaponGroupArgs {\n    timer: IWeaponTimingArgs,\n    weapons: IWeaponArgs[],\n    burstAll?: boolean\n}\n\nexport class WeaponGroup {\n    burstAllWeapons: boolean;\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\n        this.burstAllWeapons = burstAllWeapons ?? true;\n    }\n\n    /** Call once per tick, makes all turrets attempt to acquire targets\n     * @returns the number of weapons which have acquired targets\n     */\n    acquireTargets(ship: Ship, targets: Ship[]): number {\n        let acqCount = 0;\n        for(let i = 0; i < this.weapons.length; i++){\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\n                acqCount++;\n            }\n        }\n        return acqCount;\n    }\n\n    tick(gs: GameState, self: Ship) {\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\n        const acq = this.acquireTargets(self, targets);\n\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\n    }\n\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\n        if(!this.burstAllWeapons) {\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\n        } else {\n            for(let i = 0; i < this.weapons.length; i++) {\n                this.weapons[i].shoot(gs, ship);\n            }\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\n        for(let i = 0; i < this.weapons.length; i++) {\n            this.weapons[i].render(ctx, self);\n        }\n    }\n}","export interface IWeaponTimingArgs {\n    reloadTime: number;\n\n    burstCount: number;\n    burstDelay: number;\n\n    shotsPerBurst: number;\n}\n\nexport class WeaponTimer implements IWeaponTimingArgs {\n    public reloadTime: number; \n    public burstCount: number;\n    public burstDelay: number; \n    public shotsPerBurst: number;\n\n    private currentlyShooting: boolean;\n\n    public currentReload: number;\n    public currentBurstDelay: number;\n    public currentBurstIndex: number;\n\n    constructor(args: IWeaponTimingArgs) {\n        Object.assign(this, args);\n        this.currentlyShooting = false;\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\n    }\n\n    isShooting(): boolean {\n        return this.currentlyShooting;\n    }\n\n    canShoot(): boolean {\n        return !this.currentlyShooting && this.currentReload === 0;\n    }\n\n    shoot(): boolean {\n        if(this.canShoot()){\n            this.currentlyShooting = true;\n            this.currentReload = this.reloadTime;\n            this.currentBurstDelay = 0;\n            return true;\n        }\n        return false;\n    }\n\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\n        if(shouldShoot) this.shoot();\n        if(this.currentlyShooting) {\n            if(this.currentBurstDelay === 0) {\n                // Fire burst\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\n                    onShoot(this.currentBurstIndex, shell);\n                }\n                this.currentBurstIndex++;\n                if(this.currentBurstIndex === this.burstCount) {\n                    // Done burst! Reset and start reload\n                    this.currentReload = this.reloadTime;\n                    this.currentBurstIndex = 0;\n                    this.currentlyShooting = false;\n                } else {\n                    this.currentBurstDelay = this.burstDelay;\n                }\n            } else {\n                // Timedown for burst\n                this.currentBurstDelay --;\n            }\n        } else if (this.currentReload !== 0) {\n            // Timedown for reload\n            this.currentReload--;\n        }\n    }\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\nimport Point from \"../../common/position/Point\";\nimport FigherAI from \"../ai/FighterAI\";\nimport { IShipAI } from \"../ai/IShipAI\";\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\nimport { ETeam } from \"../ETeam\";\nimport { Ship } from \"../Ship\";\nimport { Weapon } from \"../weapons/Weapon\";\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\nimport { FlareDefinition } from \"./FlareDefinition\";\n\nexport class ShipDefinition {\n    sprite: AtlasSprite;\n    \n    constructor(\n        atlas: SpriteAtlas, \n        public size: Point,\n        srcPoint: Point,\n        srcSize: Point,\n        public origin: Point,\n        public maxHp: number,\n        public maxAccel: number,\n        public maxDeccel: number,\n        public maxSpeed: number,\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\n        public maxTurnRate: number,\n        public flares: FlareDefinition[],\n        public weapons: IWeaponGroupArgs[],\n        public buildAi: ()=>IShipAI) {\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\n    }\n\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\n        return new Ship(\n            this,\n            position,\n            rotation ?? 0,\n            this.buildAi(),\n            team,\n            this.weapons.map(\n                jsonWeaponGroup => new WeaponGroup(\n                    new WeaponTimer(jsonWeaponGroup.timer),\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\n                    jsonWeaponGroup.burstAll\n                )\n            )\n        );\n    }\n}\n","import Point from \"../../common/position/Point\";\n\nexport interface IDebugMarker {\n    draw(ctx: CanvasRenderingContext2D): void;\n}\n\nexport class DebugPoint implements IDebugMarker {\n    constructor(public point: Point, public color?: string, public radius?: number) {\n\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        ctx.strokeStyle = this.color ?? 'red';\n        ctx.beginPath();\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\n        ctx.stroke();\n    }\n}\n\nexport class DebugCross implements IDebugMarker {\n    constructor(public point: Point, public color?: string, public radius?: number) {\n\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        const radius = this.radius ?? 10;\n        ctx.strokeStyle = this.color ?? 'red';\n        ctx.beginPath();\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\n        ctx.stroke();\n    }\n}\n\nexport class DebugPlus implements IDebugMarker {\n    constructor(public point: Point, public color?: string, public radius?: number) {\n\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        const radius = this.radius ?? 10;\n        ctx.strokeStyle = this.color ?? 'red';\n        ctx.beginPath();\n        ctx.moveTo(this.point.x, this.point.y - radius);\n        ctx.lineTo(this.point.x, this.point.y + radius);\n        ctx.moveTo(this.point.x - radius, this.point.y);\n        ctx.lineTo(this.point.x + radius, this.point.y);\n        ctx.stroke();\n    }\n}\n\n\nexport class DebugRay implements IDebugMarker {\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\n\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        ctx.strokeStyle = this.color ?? 'red';\n        ctx.beginPath();\n        ctx.moveTo(this.point.x, this.point.y);\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\n        ctx.lineTo(tgt.x, tgt.y)\n        ctx.stroke();\n    }\n}\n\n\nexport class DebugLine implements IDebugMarker {\n    constructor(public point: Point, public point2: Point, public color?: string) {\n\n    }\n    draw(ctx: CanvasRenderingContext2D): void {\n        ctx.strokeStyle = this.color ?? 'red';\n        ctx.beginPath();\n        ctx.moveTo(this.point.x, this.point.y);\n        ctx.lineTo(this.point2.x, this.point2.y)\n        ctx.stroke();\n    }\n}","import Point from \"../../common/position/Point\";\nimport GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport BroadsideAI from \"./BroadsideAI\";\nimport FigherAI from \"./FighterAI\";\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\n\nexport abstract class ShipAI {\n    markers: IDebugMarker[];\n    doDebug: boolean;\n    constructor(args ?: { debug?: boolean }) {\n        this.markers = [];\n        this.doDebug = args?.debug ?? false;\n    }\n\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\n\n    debug(debug: IDebugMarker) {\n        if(!this.doDebug) return;\n        this.markers.push(debug);\n    }\n    debugPoint(pt: Point, color?:string, radius?:number) {\n        this.debug(new DebugPoint(pt, color, radius));\n    }\n    debugCross(pt: Point, color?:string, radius?:number) {\n        this.debug(new DebugCross(pt, color, radius));\n    }\n    debugPlus(pt: Point, color?:string, radius?:number) {\n        this.debug(new DebugPlus(pt, color, radius));\n    }\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\n        this.debug(new DebugRay(pt, angle, color, dist));\n    }\n    debugLine(pt: Point, pt2: Point, color?:string) {\n        this.debug(new DebugLine(pt, pt2, color));\n    }\n\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\n        if(this.markers.length === 0) return;\n        for(let i = 0; i < this.markers.length; i++) {\n            this.markers[i].draw(ctx);\n        }\n        this.markers = [];\n    }\n}","import Angle from \"../../common/Angle\";\nimport Point from \"../../common/position/Point\";\nimport GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\nimport { IShipAI } from \"./IShipAI\";\nimport { ShipAI } from \"./ShipAI\";\n\nexport interface IBroadsideAiArgs {\n    minDistance: number,\n    maxDistance: number,\n    orbitSpeed: number,\n    debug: boolean\n}\nconst defaultArgs = {\n    minDistance: 100,\n    maxDistance: 500,\n    orbitSpeed: 0.5,\n    debug: false,\n}\nexport default class BroadsideAI extends ShipAI {\n    private args: IBroadsideAiArgs;\n    constructor(args: Partial<IBroadsideAiArgs>) {\n        super(args);\n        this.args = { ...defaultArgs, ...args };\n    }\n\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\n        const targetLocation = gs.Player.position;\n        const toLocation = Point.subtract(targetLocation, ship.position);\n        const currentHeading = ship.rotation;\n        const inwardHeading = toLocation.direction();\n        const tangentHeadings = [\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\n            Angle.normalize(inwardHeading + (Math.PI / 2))\n        ];\n\n        if(toLocation.lengthSq() < this.args.minDistance * this.args.minDistance) {\n            const fleeHeadings = [\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\n            ];\n            const orbitDist = this.args.minDistance;\n            // Run away, but look for a tangent\n            this.debugPoint(targetLocation, 'orange', orbitDist);\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\n            for(let i = 0; i < tgtPoints.length; i++) {\n                this.debugLine(ship.position, tgtPoints[i]);\n            }\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).direction());\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \n            \n            return { \n                tgtVel: ship.definition.maxSpeed, \n                tgtHeading: bestHeading\n            };\n        } else if (toLocation.lengthSq() > this.args.maxDistance * this.args.maxDistance) {\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\n            // Close the gap\n            this.debugPoint(targetLocation, undefined, orbitDist);\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\n            for(let i = 0; i < tgtPoints.length; i++) {\n                this.debugPoint(tgtPoints[i]);\n            }\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).direction());\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \n            \n            return { \n                tgtVel: ship.definition.maxSpeed, \n                tgtHeading: bestHeading\n            };\n        } else {\n            // Orbit\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\n            return { \n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \n                tgtHeading: betterHeading\n            };\n        }\n    }\n}\n\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\n    let minHeading = relativeHeadings[0];\n    let actualTarget = targetHeadings[0];\n    for(let i = 1; i < relativeHeadings.length; i++) {\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\n            minHeading = relativeHeadings[i];\n            actualTarget = targetHeadings[i];\n        }\n    }\n    return actualTarget;\n}","import Angle from \"../../common/Angle\";\nimport { ETeam } from \"../ETeam\";\nimport GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport { ShipAI } from \"./ShipAI\";\n\nexport default class FigherAI extends ShipAI {\n    constructor() {\n        super();\n    }\n\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\n        var target = nearest[0];\n\n        if(target === undefined) {\n            // Nothing to do, no ships.\n            return {tgtHeading: 0, tgtVel: 0};\n        }\n\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\n\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\n\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\n    }\n}","import GameState from \"../GameState\";\nimport { Ship } from \"../Ship\";\nimport BroadsideAI from \"./BroadsideAI\";\nimport FigherAI from \"./FighterAI\";\n\nexport interface IShipAI {\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\n}\n\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\n    fighter: (args) => new FigherAI(),\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\nimport Point from \"../../common/position/Point\";\nimport FigherAI from \"../ai/FighterAI\";\nimport { ShipDefinition } from \"./ShipDefinition\";\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\nimport { FlareDefinition } from \"./FlareDefinition\";\nimport { AllAIGenerators } from \"../ai/IShipAI\";\nimport { IWeaponArgs } from \"../weapons/Weapon\";\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\nimport INamedCollection from \"../../common/INamedCollection\";\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\n\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\n    for(let key in json.animations) {\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\n    }\n    return json.ships.map(def => \n        parseShipDefinition(def, animationData, imgAtlases)\n    );\n}\n\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\n    const parsedFlares: FlareDefinition[] = [];\n    for(let i = 0; i < def.flares.length; i++)\n    {\n        const flare = def.flares[i];\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\n\n        parsedFlares.push(new FlareDefinition(\n            animation,\n            parseJsonPoint(flare.offset),\n            parseJsonAngle(flare.rotation),\n            flare.condition,\n            flare.minTrigger,\n            flare.rotPerTurn\n        ));\n    }\n\n    const aiFunc = AllAIGenerators[def.ai];\n    const aiGen = () => aiFunc(def.aiParams);\n\n    return new ShipDefinition(\n        imgAtlases[def.sprite.file],\n        parseJsonPoint(def.size),\n        parseJsonPoint(def.sprite.srcOffset),\n        parseJsonPoint(def.sprite.srcSize),\n        parseJsonPoint(def.sprite.origin),\n        def.hp,\n        def.maxAccel,\n        def.maxDeccel,\n        def.maxSpeed,\n        def.turnAccel,\n        def.maxTurnSpeed,\n        parsedFlares,\n        def.weaponGroups.map(group => \n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\n        aiGen\n    );\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\nimport INamedCollection from \"../../../common/INamedCollection\";\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\n\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\n    return {\n        timer: json.timer,\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\n        burstAll: json.burstAll\n    }\n}\n\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\n    if(isWeapon(json)) {\n        let sprite: AtlasSprite | undefined = undefined;\n        if(json.sprite !== undefined) {\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\n        }\n        return {\n            offset: parseJsonPoint(json.offset),\n            sprite: sprite,\n            rotation: json.rotation,\n            turret: json.turret,\n            acquisitionAngle: json.acquisitionAngle,\n            minRange: json.minRange,\n            range: json.range\n        };\n    }\n    else {\n        const def = defs[json.definition];\n        if(def === undefined) {\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\n        }\n        let sprite: AtlasSprite | undefined = undefined;\n        if(def.sprite !== undefined) {\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\n        }\n        return {\n            offset: parseJsonPoint(json.offset),\n            sprite: sprite,\n            rotation: json.rotation,\n            turret: def.turret,\n            acquisitionAngle: def.acquisitionAngle,\n            minRange: def.minRange,\n            range: def.range\n        };\n    }\n}\n\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\n    return (<any>json).range !== undefined;\n}","import AssetLoader from '../common/assets/AssetLoader';\nimport Const from './const';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport entitySheetUrl from './assets/bullets_entities.png';\nimport shipSheetUrl from './assets/Ships.png';\nimport flareSheetUrl from './assets/Flares.png';\nimport playerUrl from './assets/bullets_ship.png';\nimport ImageLoader from '../common/assets/ImageLoader';\nimport Player from './Player';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport KeyState from '../common/input/KeyState';\nimport Point from '../common/position/Point';\nimport GameState from './GameState';\nimport { SingleExplosion } from './Effects/SingleExplosion';\nimport { Interpolated } from '../common/interpolation/Interpolated';\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\nimport { Color } from '../common/Color';\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\nimport { Explosion } from './Effects/Explosion';\nimport { Range } from '../common';\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\nimport { ETeam } from './ETeam';\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\nimport INamedCollection from '../common/INamedCollection';\n\nlet atlases: INamedCollection<SpriteAtlas>;\nlet scalingHelper: NearestNeighborScalingHelper;\nlet shipSprite: AtlasSprite;\n\nexport default function Run() {\n    const assetLoader = new AssetLoader();\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\n    atlases = {\n        \"Ships\": shipAtlas,\n        \"Flares\": flareAtlas\n    };\n\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\n}\n\nfunction loadJson(entitySheet: SpriteSheet){\n    import(\n        /* webpackChunkName: \"bullets-ship-definitions\" */\n        './data/shipDefinitions.json'\n    ).then(value => {\n        console.log('Got shipDefinitions.json');\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\n        onLoadDone(entitySheet, definitions);\n    });\n}\n\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\n    NearestNeighborScaling(ctx);\n\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\n\n    const keys = new KeyboardManager(document.body, false);\n    const player = new Player(entitySheet);\n\n    const gs = new GameState(player, keys);\n\n    gs.Effects.push(new SingleExplosion(\n        new Point(0, 0),\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\n        120\n    ));\n\n    gs.Effects.push(new Explosion(\n        new Point(100, 0),\n        new Range(-30, 30),\n        new Range(-30, 30),\n        new Range(30, 30),\n        4,\n        new Range(20, 40),\n        new Range(20, 60)));\n\n    for(let i = 0; i < definitions.length; i++){\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\n    }\n\n    repaintLoop(gs, player, keys, canvas, ctx);\n}\n\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n    keys.update();\n    gameState.tick();\n    player.tick(keys);\n    repaint(gameState, player, canvas, ctx);\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\n}\n\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n    NearestNeighborScaling(ctx);\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\n    ctx.save();\n\n    const focusPoint = Point.add(player.position, Point.multiply(player.velocity, 10));\n\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\n    ctx.fillStyle = 'gray';\n\n    const bg_line_size = 400;\n\n    // Render some bg lines so we can see motion\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\n    }\n\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\n    }\n\n    player.render(ctx);\n\n    gameState.draw(ctx);\n\n    ctx.restore();\n}","export class Color {\n    private rgb?: { r: number, g: number, b: number };\n    private hsv?: { h: number, s: number, v: number };\n\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\n            this.hsv = vals as any;\n            this.rgb = undefined;\n        }\n        else  {\n            this.rgb = vals as any;\n            this.hsv = undefined;\n        }\n    }\n\n    /**\n     * Generate an RGB color\n     * @param r Red component [0, 1]\n     * @param g Green component [0, 1]\n     * @param b Blue component [0, 1]\n     */\n    public static rgb(r: number, g: number, b: number): Color {\n        return new Color({ r, g, b });\n    }\n\n    /**\n     * Generate an HSV color\n     * @param r Hue component [0, 1]\n     * @param g Saturation component [0, 1]\n     * @param b Value component [0, 1]\n     */\n    public static hsv(h: number, s: number, v: number): Color {\n        return new Color({ h, s, v });\n    }\n\n    public r(): number;\n    public r(v: number): void;\n    public r(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.r = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.r;\n        }\n    }\n\n    public g(): number;\n    public g(v: number): void;\n    public g(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.g = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.g;\n        }\n    }\n\n    public b(): number;\n    public b(v: number): void;\n    public b(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.b = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.b;\n        }\n    }\n\n    public h(): number;\n    public h(v: number): void;\n    public h(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.h = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.h;\n        }\n    }\n\n    public s(): number;\n    public s(v: number): void;\n    public s(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.s = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.s;\n        }\n    }\n\n    public v(): number;\n    public v(v: number): void;\n    public v(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.v = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.v;\n        }\n    }\n\n    private componentToRgb(n: number) {\n        const k = (n + this.hsv.h * 6) % 6;\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\n    }\n\n\n    private reqRgb() {\n        if (this.rgb === undefined) {\n            this.calcRgb();\n        }\n    }\n    private calcRgb() {\n        this.rgb = {\n            r: this.componentToRgb(5),\n            g: this.componentToRgb(3),\n            b: this.componentToRgb(1),\n        };\n    }\n\n    private reqHsv() {\n        if (this.hsv === undefined) {\n            this.calcHsv();\n        }\n    }\n    private calcHsv() {\n        const {r, g, b} = this.rgb;\n        const mx = Math.max(r, g, b);\n        const mn = Math.min(r, g, b);\n        let h = mx === mn ? 0\n            : mx === r ? (g - b) / (mx - mn)\n            : mx === g ? 2 + (b - r) / (mx - mn)\n            : 4 + (r - g) / (mx - mn);\n        h /= 6;\n        while (h < 0) {\n            h++;\n        }\n        this.hsv = {\n            h,\n            s: mx === mn ? 0 : (mx - mn) / mx,\n            v: mx\n        };\n    }\n\n    public toString(): string {\n        this.reqRgb();\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\n    }\n\n    private toByte(component: number) {\n        return Math.floor(component * 255);\n    }\n}","import Point from \"../position/Point\";\nimport { IJsonAnimation } from \"./json/IJsonAnimation\";\nimport { SpriteAtlas } from \"./SpriteAtlas\";\n\nexport class SpriteAnimation {\n    public origin: Point;\n\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\n        this.origin = origin ?? new Point(0,0);\n    }\n\n    static FromJson(atlas: SpriteAtlas, params: IJsonAnimation) : SpriteAnimation {\n\n        return new SpriteAnimation(atlas, \n            new Point(params.sourceOffset[0], params.sourceOffset[1]),\n            new Point(params.frameSize[0], params.frameSize[1]),\n            params.numFrames,\n            params.origin === undefined ? undefined : new Point(params.origin[0], params.origin[1]));\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\n        ctx.save();\n        ctx.translate(position.x, position.y);\n        if(rotation !== undefined)\n            ctx.rotate(rotation);\n        ctx.scale(size.x, size.y);\n        ctx.translate(-this.origin.x, -this.origin.y);\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\n        ctx.restore();\n    }\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\n        }\n        else {\n            return new PlayingAnimation(this, <number>args, loop ?? false);\n        }\n    }\n}\n\nexport interface ISpriteAnimationArgs {\n    animation: SpriteAnimation,\n    maxTime: number,\n    loop?: boolean\n}\n\nexport class PlayingAnimation {\n    private currentTime: number;\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\n    {\n        this.currentTime = 0;\n    }\n\n    tick(): boolean {\n        this.currentTime++;\n        if(this.currentTime < this.maxTime) {\n            return false;\n        } else {\n            if(this.loop) this.currentTime = 0;\n            return true;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\n        this.source.draw(ctx, position, size, frameNumber, rotation);\n    }\n}","import Point from \"../position/Point\";\nimport { SpriteAnimation } from \"./SpriteAnimation\";\n\nexport class SpriteAtlas {\n    public image: HTMLImageElement;\n    constructor(spriteUrl: string, private onload: () => void) {\n        this.image = document.createElement('img');\n        this.image.src = spriteUrl;\n        this.image.addEventListener('load', () => this.loadFinished());\n    }\n\n    private loadFinished() {\n        this.onload();\n    }\n\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\n    }\n\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\n    }\n}\n\nexport class AtlasSprite {\n    public origin: Point;\n    public sourceRotation: number;\n\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\n        this.origin = origin ?? new Point(0,0);\n        this.sourceRotation = sourceRotation ?? 0;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\n        ctx.save();\n        ctx.translate(position.x, position.y);\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\n        ctx.scale(size.x, size.y);\n        ctx.translate(-this.origin.x, -this.origin.y);\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\n        ctx.restore();\n    }\n}","import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","import { TimingFunction } from \"./TimingFunction\";\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\nimport { InterpolationFunction } from \"./InterpolationFunction\";\n\nexport class Interpolated<T> {\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\n\n    }\n\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\n    }\n}\n\nexport class InterpolationTimer {\n    public elapsedTime: number;\n    constructor(public totalTime: number) {\n        this.elapsedTime = 0;\n    }\n    tick(): boolean {\n        this.elapsedTime ++;\n        return this.elapsedTime >= this.totalTime;\n    }\n    sample<T>(animation: Interpolated<T>) {\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\n    }\n}\n\nexport class LinkedInterpolation<T> {\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\n\n    }\n\n    sample(): T {\n        return this.timer.sample(this.interp);\n    }\n}","import { Color } from \"../Color\";\n\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\n\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\n\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        numberInterpolator(a.r(), b.r(), p),\n        numberInterpolator(a.g(), b.g(), p),\n        numberInterpolator(a.b(), b.b(), p));\n\n        \nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\n\n        \nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.hsv(\n        numberInterpolator(a.h(), b.h(), p),\n        numberInterpolator(a.s(), b.s(), p),\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\n\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\n    if(typeof(interpolator) !== 'function') {\n        args.splice(0, 0, <T><any>interpolator);\n        interpolator = undefined;\n    }\n\n    let numFrames = args.length - 1;\n    let percPer = 1 / numFrames;\n    let keyframes = new Keyframes<T>(args[0], interpolator);\n    for(let i = 1; i < args.length; i++) {\n        keyframes.addKeyFrame(percPer * i, args[i]);\n    }\n    return keyframes;\n}\n\nexport class Keyframes<T> \n{\n    private interpolator: InterpolationFunction<T>;\n    private keys: {time: number, value: T}[];\n\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\n    {\n        if(interpolator === undefined) {\n            if(typeof(start) === \"number\") {\n                this.interpolator = <any>numberInterpolator;\n            } else if((<Color><unknown>start).r !== undefined) {\n                // Assume this is color\n                this.interpolator = <any>fastColorInterpolator;\n            }\n            else {\n                throw 'No default interpolator found';\n            }\n        } else {\n            this.interpolator = interpolator;\n        }\n        this.keys = [{time: 0, value: start}];\n    }\n\n    public addKeyFrame(time: number, value: T) {\n        for(let i = 0; i < this.keys.length; i++)\n        {\n            if(time < this.keys[i].time) {\n                this.keys.splice(i, 0, {time, value});\n                return;\n            }\n        }\n        this.keys.push({time, value});\n    }\n\n    public sample(p: number): T {\n        if(this.keys.length === 1) return this.keys[0].value;\n\n        var keyIndex = 0;\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\n            keyIndex ++;\n        }\n\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\n\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\n    }\n}","const twoPi = Math.PI * 2;\n\nexport default class Angle {\n    static normalize(angle: number): number {\n        angle = angle % twoPi;\n        if (angle < 0) angle += twoPi;\n        return angle;\n    }\n\n    static relativeNormalize(angle: number): number {\n        angle = angle % twoPi;\n        if (angle > Math.PI) {\n            angle -= twoPi;\n        } else if(angle < - Math.PI) {\n            angle += twoPi;\n        }\n        return angle;\n    }\n\n    static relativeAngle(a: number, b: number) {\n        return Angle.relativeNormalize(a - b);\n    }\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        if(p === 0) return a;\n        if(p === 1) return b;\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}"],"names":["Player","constructor","sprites","this","position","Point","velocity","angularVelocity","rotation","engineDeflect","tgtDeflect","tick","keys","isKeyDown","isEngineOn","Math","min","max","vDirection","atan2","y","x","diffDir","Angle","diffPerc","PI","friction","abs","multWith","cos","sin","vTotal","length","vAngle","direction","anglePullAmt","addWith","render","ctx","save","rotrender","floor","random","restore","ETeam","GameState","player","Entities","neutral","ally","enemy","Effects","update","i","splice","updateEntities","entities","draw","drawEntities","findNearestShips","originPoint","team","maxRange","ships","undefined","filter","item","currentHp","rangeSq","s","lengthSq","shipsAndRanges","map","ship","range","sort","a","b","SingleExplosion","outerRadius","innerRadius","fillColor","totalTime","timing","outer","sample","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","p","pi","pc","Explosion","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","Interpolated","Color","anyStillRunning","static","angle","norm","normalize","from","to","relativeNormalize","EFlareConditions","Line","start","end","ray","midpoint","interpolate","denom","parallelIntersection","percentA","percentB","basis","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","Bounds","size","origin","getVertecies","relativePoints","dist","getEdges","idx","arr","findLineIntersection","line","edges","minLinePerc","colision","intersection","Ship","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","getBounds","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","getTeam","AnimationControl","initial","queue","scaleFactor","isSprite","sourceSize","source","current","enqueueFront","src","play","enqueue","push","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","numFrames","EffectControl","effects","spawnEffect","effectArgs","effect","type","CreateEffect","Weapon","args","shipDef","turretAngle","actualAnchor","offset","subtractWith","imgControl","getWeaponLocation","result","rotate","getWeaponAnchorAngle","getWeaponCurrentAngle","self","possibleTargets","location","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shoot","shootAnimation","animation","shootEffect","realPoint","realRot","WeaponGroup","timer","weapons","burstAllWeapons","acquireTargets","targets","acqCount","acq","bi","onShoot","burstIndex","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","isShooting","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","ShipDefinition","atlas","srcPoint","turnAccel","buildAi","getSprite","buildShip","jsonWeaponGroup","w","burstAll","FlareDefinition","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","DebugRay","tgt","DebugLine","point2","ShipAI","markers","doDebug","debug","debugPoint","debugCross","debugPlus","debugRay","debugLine","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","BroadsideAI","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","tgtPoints","tangent","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","FigherAI","deltaHeading","AllAIGenerators","fighter","broadside","buildAllDefinitions","json","imgAtlases","animationData","key","animations","def","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","defs","weaponJson","isWeapon","console","error","parseWeaponDefinition","parseWeaponGroupDefinition","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","value","log","definitions","canvas","document","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","repaintLoop","onLoadDone","loadJson","gameState","fillRect","focusPoint","translate","bg_line_size","ty","tx","repaint","requestAnimationFrame","vals","h","v","hsv","rgb","r","g","reqRgb","reqHsv","componentToRgb","n","k","calcRgb","calcHsv","mx","mn","toByte","component","SpriteAnimation","sourceOffset","params","frame","scale","drawImage","image","loop","PlayingAnimation","maxTime","currentTime","frameNumber","spriteUrl","onload","createElement","addEventListener","loadFinished","sourceRotation","AtlasSprite","frameCount","KeyState","changes","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","onKeyDown","onKeyUp","downKeys","change","Update","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","isKeyPressed","isKeyReleased","timingFunction","interpolator","InterpolationTimer","elapsedTime","numberInterpolator","fastColorInterpolator","EvenlySpacedKeyframes","percPer","keyframes","Keyframes","addKeyFrame","time","keyIndex","sampleRange","samplePerc","twoPi","distance","dot","sqrt","negate","negateInPlace","p1","p2","dotWith","other","len","multiply","truncate","trunc","nx","ny","splitArgs","splitArgsOrSingle","divideWith","equals","sy","add","theta","fromAngle"],"sourceRoot":""}