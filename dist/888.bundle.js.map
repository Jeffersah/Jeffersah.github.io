{"version":3,"file":"888.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/hoplite/assets/hp.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_impacts.png","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/HpRenderer.ts","webpack://trading-game/./src/projects/common/rendering/SpriteAnimation.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AttackResolutionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\r\nimport { InterpolationFunction } from \"./InterpolationFunction\";\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n\r\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\r\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}\r\n\r\nexport class LinkedInterpolation<T> {\r\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\r\n\r\n    }\r\n\r\n    sample(): T {\r\n        return this.timer.sample(this.interp);\r\n    }\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(typeof(interpolator) !== 'function') {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        if(p === 0) return a;\r\n        if(p === 1) return b;\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    shift(x: number, y: number): Rect;\r\n    shift(p: Point): Rect;\r\n    shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    shiftBy(x: number, y: number): void;\r\n    shiftBy(p: Point): void;\r\n    shiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const MAP_SIZE = 6;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\r\n\r\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"1bece4b53ae0cc7f1c101b72c3505480.png\";","export default __webpack_public_path__ + \"73e309f8aae54c28b86a4cd95da4091d.png\";","export default __webpack_public_path__ + \"b78374db2fae35ea358c6a9e2b27ccd6.png\";","export default __webpack_public_path__ + \"1dd7bc64f3f66258a4764c991521bbab.png\";","import Rect from \"../position/Rectangle\";\r\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\r\n\r\n    public origin: Point;\r\n\r\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        return this;\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return this;\r\n    }\r\n\r\n    public width() {\r\n        return this.sourceBounds.w;\r\n    }\r\n    public height() {\r\n        return this.sourceBounds.h;\r\n    }\r\n\r\n    tick(): boolean {\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\r\n        const oldTransform = ctx.getTransform();\r\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\r\n        ctx.drawImage(this.source, \r\n            this.sourceBounds.x, \r\n            this.sourceBounds.y, \r\n            this.sourceBounds.w, \r\n            this.sourceBounds.h, \r\n            0, \r\n            0, \r\n            destination.w, \r\n            destination.h);\r\n        ctx.setTransform(oldTransform);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport enum Direction {\r\n    Right = 0,\r\n    DownRight = 1,\r\n    DownLeft = 2,\r\n    Left = 3,\r\n    UpLeft = 4,\r\n    UpRight = 5\r\n}\r\n\r\nexport const AllDirections: Direction[] = [\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n    Direction.UpRight\r\n];\r\n\r\nexport class DirectionHelper {\r\n    public static ToPoint(direction: Direction): Point {\r\n        switch (direction) {\r\n            case Direction.Right: return new Point(1, 0);\r\n            case Direction.DownRight: return new Point(0, 1);\r\n            case Direction.DownLeft: return new Point(-1, 1);\r\n            case Direction.Left: return new Point(-1, 0);\r\n            case Direction.UpLeft: return new Point(0, -1);\r\n            case Direction.UpRight: return new Point(1, -1);\r\n        }\r\n    }\r\n\r\n    public static Turn(direction: Direction, amount: number): Direction {\r\n        const result = (direction + amount)%6;\r\n        return (result + 6) % 6;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\r\nimport { Direction, DirectionHelper } from \"./Direction\";\r\n\r\nexport function TurnRight(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(-pt.y, pt.x + pt.y);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function TurnLeft(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(pt.x + pt.y, -pt.x);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function HexToPixel(point: Point) {\r\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\r\n}\r\n\r\nexport function PixelToHex(point: Point) {\r\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\r\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\r\n    return new Point(tilesX, tilesY);\r\n}\r\n\r\nexport function HexLength(point: Point): number {\r\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\r\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\r\n    }\r\n    else {\r\n        return Math.abs(point.x) + Math.abs(point.y);\r\n    }\r\n}\r\n\r\nexport function GetRing(radius: number) {\r\n    if(radius === 0) return [new Point(0,0)];\r\n\r\n    const result: Point[] = [];\r\n    let pos = new Point(0, -radius);\r\n    \r\n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\r\n        var dir = DirectionHelper.ToPoint(direction);\r\n        for(var len = 0; len < radius; len++){\r\n            result.push(pos);\r\n            pos = Point.add(pos, dir);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"./Hex\";\r\n\r\nconst originDelta = new Point(8, 26);\r\n\r\nconst deltaX = 3;\r\nconst deltaY = -2;\r\n\r\nconst maxTilesPerRow = 5;\r\n\r\nexport default class HpRenderer {\r\n    private emptyHpImage: Sprite;\r\n    private redHpImage: Sprite;\r\n    private yellowHpImage: Sprite;\r\n    private blueHpImage: Sprite;\r\n    constructor(image: ImageLoader) {\r\n        this.emptyHpImage = new Sprite(image.image, new Rect(0, 0, 4, 5));\r\n        this.redHpImage = new Sprite(image.image, new Rect(3, 0, 4, 5));\r\n        this.yellowHpImage = new Sprite(image.image, new Rect(6, 0, 4, 5));\r\n        this.blueHpImage = new Sprite(image.image, new Rect(9, 0, 4, 5));\r\n    }\r\n\r\n    public draw(ctx:CanvasRenderingContext2D, pos: Point, hp: number, maxHp: number) {\r\n        const rows = Math.ceil(maxHp / maxTilesPerRow);\r\n        let lastRowLength = maxHp % maxTilesPerRow;\r\n        if(lastRowLength === 0) { lastRowLength = maxTilesPerRow; }\r\n\r\n        const fullImage = hp <= maxHp / 4 ? this.redHpImage : hp <= maxHp / 2 ? this.yellowHpImage : this.blueHpImage;\r\n        const emptyImage = this.emptyHpImage;\r\n\r\n        let originPoint = Point.add(HexToPixel(pos), originDelta);\r\n\r\n        for(let row = 0; row < rows - 1; row++) {\r\n            const dy = (rows - row - 1) * deltaY;\r\n            for(let col = 0; col < maxTilesPerRow; col++) {\r\n                let image = hp <= 0 ? emptyImage : fullImage;\r\n                hp--;\r\n                image.draw(ctx, new Rect(originPoint.x + col * deltaX, originPoint.y + dy, 4, 5), 0);\r\n            }\r\n        }\r\n\r\n        // last row\r\n        const lastRowDx = (maxTilesPerRow - lastRowLength) * deltaX / 2;\r\n        for(let col = 0; col < lastRowLength; col++){\r\n            let image = hp <= 0 ? emptyImage : fullImage;\r\n            hp--;\r\n            image.draw(ctx, new Rect(originPoint.x + col * deltaX + lastRowDx, originPoint.y , 4, 5), 0);\r\n        }\r\n    }\r\n}","import Rect from \"../position/Rectangle\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\nimport Sprite from \"./Sprite\";\r\n\r\nexport class SpriteAnimation implements IRenderableSource {\r\n    constructor(\r\n        public source: CanvasImageSource,\r\n        public firstFrame: Rect, \r\n        public origin: Point,\r\n        public frameAdvance: Point,\r\n        public numFrames: number,\r\n        public duration: number,\r\n        public loop: boolean) {\r\n\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.firstFrame.w, this.firstFrame.y);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return new SpriteAnimationInstance(this, this.loop);\r\n    }\r\n\r\n    getSprite(frameNumber: number): Sprite {\r\n        const frame = new Rect(\r\n            this.firstFrame.x + (frameNumber * this.frameAdvance.x),\r\n            this.firstFrame.y + (frameNumber * this.frameAdvance.y),\r\n            this.firstFrame.w,\r\n            this.firstFrame.h\r\n        );\r\n        return new Sprite(this.source, frame, this.origin);\r\n    }\r\n}\r\n\r\nexport class SpriteAnimationInstance implements ISimpleRenderable, IRenderable {\r\n\r\n    private duration: number;\r\n    private currentTick: number;\r\n\r\n    constructor(public source: SpriteAnimation, public loop: boolean, private overrideDuration?: number) {\r\n        this.duration = overrideDuration ?? source.duration;\r\n        this.currentTick = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTick++;\r\n        if(this.currentTick === this.duration) {\r\n            if(this.loop) this.currentTick = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        const frameNumber = (this.currentTick * this.source.numFrames) / this.duration;\r\n        return this.source.getSprite(Math.floor(frameNumber));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\r\n        this.getSprite().draw(ctx, position, rotation);\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\nimport floor_digits_url from './assets/floor_and_digits.png';\r\nimport hp_image_url from './assets/hp.png';\r\nimport impact_url from './assets/hoplite_impacts.png';\r\nimport ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Point from \"../common/position/Point\";\r\nimport HpRenderer from \"./HpRenderer\";\r\nimport { SpriteAnimation } from \"../common/rendering/SpriteAnimation\";\r\n\r\nexport default class Assets {\r\n    tiles: SpriteSheet;\r\n    floor_and_digits: ImageLoader;\r\n    hpImage: ImageLoader;\r\n    hpRenderer: HpRenderer;\r\n    impacts: ImageLoader;\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n        this.floor_and_digits = new ImageLoader(floor_digits_url, loader.registerAssetLoadCallback());\r\n        this.hpImage = new ImageLoader(hp_image_url, loader.registerAssetLoadCallback());\r\n        this.impacts = new ImageLoader(impact_url, loader.registerAssetLoadCallback());\r\n    }\r\n\r\n    getImpactAnimation(row: number) {\r\n        return new SpriteAnimation(this.impacts.image, new Rect(0, row * 32, 32, 32), new Point(0, 0), new Point(32, 0), 8, 16, false);\r\n    }\r\n\r\n    onLoadFinished(){\r\n        this.hpRenderer = new HpRenderer(this.hpImage);\r\n    }\r\n\r\n    getDigitSprite(digit: number):Sprite {\r\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, 0, 7, 13));\r\n    }\r\n\r\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number) {\r\n        const digits = value.toString().split('').map(s => parseInt(s));\r\n        for(var i = 0; i < digits.length; i++) {\r\n            this.getDigitSprite(digits[i]).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\r\n        }\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport * as C from './Constants';\r\nimport Player from \"./entities/Player\";\r\n\r\nexport default abstract class Entity {\r\n    isFlying: boolean;\r\n    maxHp: number;\r\n    hp: number;\r\n    position: Point;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n\r\n    static IsPlayer(entity: Entity): entity is Player {\r\n        return (entity as Player).primary !== undefined;\r\n    }\r\n}\r\n\r\nexport abstract class SimpleEnemy extends Entity {\r\n    abstract getRenderable() : IRenderable;\r\n    override draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n        this.getRenderable().draw(ctx, rect, 0);\r\n    } \r\n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Entity from \"../Entity\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class EntityMoveAnimation implements IAnimation {\r\n    private timer: InterpolationTimer;\r\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\r\n        this.timer = new InterpolationTimer(duration);\r\n    }\r\n\r\n    tick(): boolean{ \r\n        if(this.timer.tick()) {\r\n            this.entity.position = this.target;\r\n            return true;\r\n        }\r\n        this.entity.position = this.timer.sample(this.motion);\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        // The gamestate drawing will draw this entity. No need to draw it twice.\r\n        // this.entity.draw(ctx);\r\n    }\r\n}","import Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class RenderableAnimation implements IAnimation {\r\n    private rotation: number;\r\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\r\n        this.rotation = rotation ?? 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.fixedDuraiton !== undefined) {\r\n            this.fixedDuraiton--;\r\n            if(this.fixedDuraiton === -1) return true;\r\n            this.renderable.tick();\r\n            return false;\r\n        }\r\n        return this.renderable.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.renderable.draw(ctx, this.bounds, this.rotation);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\r\nimport EntityMoveAnimation from \"./animation/EntityMoveAnimation\";\r\nimport IAnimation from \"./animation/IAnimation\";\r\nimport RenderableAnimation from \"./animation/RenderableAnimation\";\r\nimport Entity from \"./Entity\";\r\nimport * as C from \"./Constants\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../common/interpolation/Interpolated\";\r\n\r\nconst BUMP_ANIMATION_TIME = 10;\r\n\r\nexport default class AttackInfo {\r\n    public startPoint: Point;\r\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: IRenderableSource) {\r\n        this.startPoint = attacker.position;\r\n    }\r\n\r\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\r\n    }\r\n\r\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\r\n    }\r\n\r\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: IRenderableSource) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, null, projectile);\r\n    }\r\n\r\n    toAnimations():IAnimation[] {\r\n        let animations:IAnimation[] = [];\r\n        if(this.bumpAnimation) {\r\n            animations.push(new EntityMoveAnimation(\r\n                this.attacker, \r\n                Interpolated.linear<Point>(Point.interpolate, \r\n                    this.attacker.position, \r\n                    Point.interpolate(this.attacker.position, this.target, 1/2), \r\n                    this.attacker.position), \r\n                this.attacker.position, \r\n                BUMP_ANIMATION_TIME));\r\n        }\r\n        if(this.projectile) {\r\n            // TODO\r\n        }\r\n        if(this.impactAnimation) {\r\n            const pixTarget = HexToPixel(this.target);\r\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\r\n        }\r\n        return animations;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\r\nimport PlayerWeapon from \"./PlayerWeapon\";\r\n\r\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\r\n\r\nexport default class SimpleWeapon extends PlayerWeapon{\r\n    private attacks: ISimpleAttack[];\r\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, ...attacks: ISimpleAttack[]) {\r\n        super(type, assets, artTile);\r\n        this.attacks = attacks;\r\n    }\r\n\r\n\r\n    getAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        const attacks: AttackInfo[] = [];\r\n        const moveDelta = Point.subtract(moveTo, moveFrom);\r\n        for(const attack of this.attacks) {\r\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\r\n            const rot = this.getRotation(moveDelta, attack.onMove);\r\n            if(rot === undefined) continue;\r\n            for(const pattern of attack.pattern) {\r\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\r\n                const attackInfo = attack.attack(state, player, target);\r\n                if(attackInfo !== undefined) attacks.push(attackInfo);\r\n            }\r\n        }\r\n        return attacks;\r\n    }\r\n\r\n    getRotation(delta: Point, target: Point) {\r\n        for(let i = 0; i < 6; i++) {\r\n            if(delta.equals(target)) return i;\r\n            delta = TurnRight(delta);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport * as C from '../Constants';\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class PlayerWeapon {\r\n\r\n    public iconImage: IRenderable;\r\n    public sprite: IRenderable;\r\n\r\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\r\n        if(this.type === 'primary') {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n        else {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n\r\n    abstract getAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n}\r\n","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Sword extends SimpleWeapon {\r\n\r\n    impactAnimation: IRenderableSource;\r\n\r\n    constructor(assets: Assets) {\r\n        super('primary', assets, new Point(8, 1), \r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n\r\n        this.impactAnimation = assets.getImpactAnimation(0);\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.animationAttack(player, e, 2, this.impactAnimation, false);\r\n    }\r\n}","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Dagger extends SimpleWeapon {\r\n    constructor(assets: Assets) {\r\n        super('secondary', assets, new Point(10, 0), \r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(1, -1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.basicAttack(player, e, 1);\r\n    }\r\n}","import { LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport { OffsetRenderable } from \"../../common/rendering/OffsetRenderable\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\r\nimport * as C from '../Constants';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport Sword from \"../weapons/Sword\";\r\nimport Dagger from \"../weapons/Dagger\";\r\nimport HpRenderer from \"../HpRenderer\";\r\n\r\nexport default class Player extends Entity {\r\n\r\n    public primary: PlayerWeapon;\r\n    public secondary: PlayerWeapon;\r\n    private renderable: Sprite;\r\n    private hpRenderer: HpRenderer;\r\n\r\n    constructor(assets: Assets, pos: Point) {\r\n        super(pos);\r\n\r\n        this.hpRenderer = assets.hpRenderer;\r\n\r\n        this.maxHp = this.hp = 3;\r\n\r\n        this.primary = new Sword(assets);\r\n        this.secondary = new Dagger(assets);\r\n\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n\r\n        this.renderable.draw(ctx, rect, 0);\r\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\r\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\r\n\r\n        this.hpRenderer.draw(ctx, this.position, this.hp, this.maxHp);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Player from \"./entities/Player\";\r\nimport HexArray from \"./HexArray\";\r\nimport HexCell from \"./HexCell\";\r\nimport IMapGen from \"./mapGen/IMapGen\";\r\nimport * as C from \"./Constants\";\r\nimport Entity from \"./Entity\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Enemy from \"./entities/Enemy\";\r\n\r\nexport default class GameState {\r\n\r\n    public player: Player;\r\n    public enemies: Enemy[] = [];\r\n\r\n    public tiles: HexArray<HexCell>;\r\n    public currentFloor: number;\r\n    \r\n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\r\n        this.changeFloor(floorNum, generator);\r\n\r\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\r\n    }\r\n\r\n    entityAt(to: Point) {\r\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMove(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        if(to.equals(this.player.position)) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    changeFloor(floorNum: number, generator: IMapGen) {\r\n        this.enemies = [];\r\n        generator.generateMap(this.assets, floorNum, this);\r\n        this.currentFloor = floorNum;\r\n        this.tiles.iterate((x, y, tile) =>{\r\n            tile.AfterWorldLoad(this, new Point(x, y));\r\n        });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 0, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(41, 0), this.currentFloor);\r\n\r\n        this.tiles.iterate((x, y, cell) => {\r\n            cell.draw(ctx, this, new Point(x, y));\r\n        });\r\n\r\n        [this.player, ...this.enemies].forEach(entity => {\r\n            if(excludeEntities && excludeEntities.includes(entity)) {\r\n                return;\r\n            }\r\n            entity.draw(ctx);\r\n            if(entity.hp != entity.maxHp){\r\n                this.assets.hpRenderer.draw(ctx, entity.position, entity.hp, entity.maxHp);\r\n            }\r\n        });\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class ParallelAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        for(let i = this.steps.length - 1; i >= 0; i--) {\r\n            if(this.steps[i].tick()) {\r\n                this.steps.splice(i, 1);\r\n            }\r\n        }\r\n        return this.steps.length === 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(const step of this.steps) {\r\n            step.draw(ctx);\r\n        }\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class SequentialAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.steps.length === 0) return true;\r\n        \r\n        while(this.steps[0].tick()){\r\n            this.steps.shift();\r\n            if(this.steps.length === 0) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.steps[0].draw(ctx);\r\n    }\r\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\r\nimport Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport class DeltaRenderable implements IRenderable {\r\n    constructor(private source: IRenderable, public delta: Rectangle) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\r\n    }\r\n}","import Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport class StackRenderable implements IRenderable {\r\n\r\n    public finishMode: 'any'|'all';\r\n\r\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\r\n        this.finishMode = renderableFinishMode ?? 'any';\r\n    }\r\n\r\n    tick(): boolean {\r\n        let allFinished = true;\r\n        let anyFinished = false;\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            const f = this.renderables[i].tick();\r\n            allFinished = allFinished && f;\r\n            anyFinished = anyFinished || f;\r\n        }\r\n        return this.finishMode === 'any' ? anyFinished : allFinished;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            this.renderables[i].draw(ctx, position, rotation);\r\n        }\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\r\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n\r\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.bg_renderable = \r\n            new DeltaRenderable(\r\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\r\n                new Rect(0, .75, 1, 1)\r\n            );\r\n\r\n        if(includeDefaultRenderable === true) {\r\n            this.bg_renderable = new StackRenderable(\r\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\r\n            );\r\n        }\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}\r\n\r\nexport class Floor extends SimpleCell {\r\n    public static TypeID = 0;\r\n\r\n    constructor(assets: Assets, customSprite?: Point) {\r\n        super(Floor.TypeID, assets, customSprite ?? new Point(0,0), true, customSprite !== undefined);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n\r\n// TypeID 1 : Lava\r\n\r\nexport class DownStairs extends SimpleCell {\r\n    public static TypeID = 2;\r\n    constructor(assets: Assets) {\r\n        super(DownStairs.TypeID, assets, new Point(5, 0), true, true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class AnimationPhase implements IGamePhase {\r\n\r\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\r\n    }\r\n\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        for(let i = this.animations.length - 1; i >= 0; i--) {\r\n            if(this.animations[i].tick()) {\r\n                this.animations.splice(i, 1);\r\n            }\r\n        }\r\n        if(this.animations.length === 0) {\r\n            return this.onFinish(state);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        for(const animation of this.animations) { \r\n            animation.draw(ctx);\r\n        }\r\n    }\r\n\r\n}","import AttackInfo from \"../AttackInfo\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function AttackResolutionPhase(state: GameState, attacks: AttackInfo[], nextPhase: (state: GameState) => IGamePhase) : IGamePhase {\r\n    for(const attack of attacks) {\r\n        for(const pt of attack.affectedTiles) {\r\n            const entity = state.entityAt(pt);\r\n            entity.hp -= attack.damage;\r\n        }\r\n    }\r\n\r\n    state.enemies = state.enemies.filter(e => e.hp > 0);\r\n    if(state.player.hp <= 0) {\r\n        // TODO: GAME OVER\r\n    }\r\n    return nextPhase(state);\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\nconst duration = 20;\r\n\r\nexport default function EnemyMovePhase(state: GameState): IGamePhase {\r\n    const disallowed: Point[] = [];\r\n    const animations: IAnimation[] = [];\r\n    for(let i = 0; i < state.enemies.length; i++) { \r\n        const destination = state.enemies[i].getMove(state, state.enemies[i].lastAttacks, disallowed);\r\n        if(!destination.equals(state.enemies[i].position)) {\r\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\r\n            disallowed.push(destination);\r\n        }\r\n    }\r\n\r\n    return new AnimationPhase(animations, () => new PlayerTurnGamePhase());\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport default class HexArray<T> {\r\n    private data: T[][];\r\n    private _size: number;\r\n\r\n    constructor(size: number, defaultValue: T) {\r\n        this._size = size;\r\n        this.data = [];\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: T[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                row.push(defaultValue);\r\n            }\r\n            this.data.push(row);\r\n        }\r\n    }\r\n\r\n    public size() {\r\n        return this._size;\r\n    }\r\n\r\n    public get(x: number, y: number): T;\r\n    public get(pt: Point): T;\r\n    public get(pt: [number, number]): T;\r\n    public get(xp: number|Point|[number, number], yp?: number): T {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        let [dx, row] = this.toArrayCoords(x, y);\r\n        return this.data[row][dx];\r\n    }\r\n\r\n    public set(value: T, x: number, y: number): void;\r\n    public set(value: T, pt: Point): void;\r\n    public set(value: T, pt: [number, number]): void;\r\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        const [dx, row] = this.toArrayCoords(x, y);\r\n        this.data[row][dx] = value;\r\n    }\r\n\r\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\r\n        if(typeof xp === \"number\"){\r\n            return [xp as number, y];\r\n        }\r\n        else if ((xp as Point).x !== undefined) {\r\n            return [(xp as Point).x, (xp as Point).y];\r\n        }\r\n        else {\r\n            return xp as [number, number];\r\n        }\r\n    }\r\n\r\n    public getRowLength(y: number): number {\r\n        return this._size * 2 - 1 - Math.abs(y);\r\n    }\r\n\r\n    public isInBounds(x: number, y: number): boolean {\r\n        if(y <= -this._size || y >= this._size) {\r\n            return false;\r\n        }\r\n        let [xMin, xMax] = this.getXRange(y);\r\n        return x >= xMin && x < xMax;\r\n    }\r\n\r\n    public getXRange(y: number): [number, number] {\r\n        const minX = this.getMinX(y);\r\n        const len = this.getRowLength(y);\r\n        return [minX, minX + len];\r\n    }\r\n\r\n    public getMinX(y: number): number {\r\n        const row = this._size - 1 + y;\r\n        return -Math.min(row, this._size - 1);\r\n    }\r\n\r\n    public iterate(func: (x: number, y: number, value: T) => void) {\r\n        for(let y = -this._size+1; y < this._size; y++) {\r\n            let [xMin, xMax] = this.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                func(x, y, this.get(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    private toArrayCoords(x: number, y: number): [number, number] {\r\n        const row = this._size - 1 + y;\r\n        const firstX = -Math.min(row, this._size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport * as C from \"./Constants\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport GameState from \"./GameState\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport HexCell from \"./HexCell\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\r\n\r\ninterface ITilePart {\r\n    directions: Direction[];\r\n    tileCoords: Point;\r\n    tileSlice: Rect;\r\n}\r\n\r\nconst tileParts: ITilePart[] = [\r\n    {\r\n        // Top of Tile\r\n        directions: [Direction.UpLeft, Direction.UpRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0, 1, 0.5),\r\n    },\r\n    {\r\n        // Bottom of Tile\r\n        directions: [Direction.DownLeft, Direction.DownRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\r\n    }, \r\n    {\r\n        // TopLeft of Tile\r\n        directions: [Direction.Left, Direction.UpLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // TopRight of Tile\r\n        directions: [Direction.Right, Direction.UpRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomLeft of Tile\r\n        directions: [Direction.Left, Direction.DownLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomRight of Tile\r\n        directions: [Direction.Right, Direction.DownRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\r\n    }\r\n]\r\n\r\nexport default abstract class MultiPartCell extends HexCell{\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.assets = assets;\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        const adjacencyMap = AllDirections.map(d => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        const images = tileParts.map(part => {\r\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\r\n            const sourceBounds = new Rect(\r\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\r\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\r\n                (part.tileSlice.w) * C.TILE_WIDTH,\r\n                (part.tileSlice.h) * C.TILE_HEIGHT\r\n            );\r\n            return new DeltaRenderable(\r\n                new Sprite(this.assets.tiles.image, sourceBounds),\r\n                part.tileSlice\r\n            );\r\n        });\r\n\r\n        this.renderable = new StackRenderable(\r\n            images,\r\n            'all'\r\n        );\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\r\nimport Assets from \"./Assets\";\r\nimport Entity from \"./Entity\";\r\nimport GameState from \"./GameState\";\r\nimport HexCell from \"./HexCell\";\r\nimport MultiPartCell from \"./MultiPartCell\";\r\n\r\nexport default class Lava extends MultiPartCell {\r\n    public static TypeID = 1;\r\n\r\n    constructor(assets: Assets) {\r\n        super(Lava.TypeID, assets, new Point(0, 4), false);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n        if(!entity.isFlying)\r\n            entity.hp -= 100;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Lava from \"../LavaCell\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst playerMoveTileArts = [\r\n    new Point(6,2),\r\n    new Point(7,2),\r\n    new Point(9,2),\r\n    new Point(7,3),\r\n    new Point(6,3),\r\n    new Point(8,2),\r\n];\r\n\r\nexport default class FloorZeroGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n\r\n        const ring = GetRing(2);\r\n        for(var i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Lava(assets), ring[i]);\r\n        }\r\n\r\n        const ring2 = GetRing(3);\r\n        for(var i = 0; i < ring2.length; i += 3) {\r\n            state.tiles.set(new Lava(assets), ring2[i]);\r\n        }\r\n\r\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\r\n        for(let i = 0; i < playerRing.length; i++) {\r\n            state.tiles.set(\r\n                new Floor(assets, playerMoveTileArts[i]),\r\n                playerRing[i]\r\n            )\r\n        }\r\n\r\n\r\n        state.tiles.set(new DownStairs(assets), 2, -4);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport { SimpleEnemy } from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class Enemy extends SimpleEnemy {\r\n\r\n    lastAttacks: AttackInfo[];\r\n\r\n    abstract getAttacks(state: GameState): AttackInfo[];\r\n    abstract getMove(state: GameState, attack: AttackInfo[], disallow: Point[]): Point;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Zombie extends Enemy {\r\n    static sprite: IRenderable;\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Zombie.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(0, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        )\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 3;\r\n        this.isFlying = false;\r\n    }\r\n\r\n    getAttacks(state: GameState): AttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len === 1) {\r\n            return [AttackInfo.basicAttack(this, state.player, 1)];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: AttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMove(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Zombie.sprite;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Zombie from \"../entities/Zombie\";\r\n\r\nexport default class StandardMapGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.enemies = [];\r\n\r\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\r\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\r\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\r\n        state.tiles.set(new DownStairs(assets), downStairX, downStairY);\r\n\r\n        let validEnemySpawns: Point[] = [];\r\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\r\n            const [xMin, xMax] = state.tiles.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\r\n                    validEnemySpawns.push(new Point(x, y));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(12, floor); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const zombie = new Zombie(pos);\r\n            state.enemies.push(zombie);\r\n        }\r\n    }\r\n}","import Assets from \"../Assets\";\r\nimport GameState from \"../GameState\";\r\nimport Floor12Gen from \"./Floor12Gen\";\r\nimport FloorZeroGen from \"./FloorZeroGen\";\r\nimport StandardMapGen from \"./StandardMapGen\";\r\n\r\nexport default interface IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void;\r\n}\r\n\r\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\r\n    {range: [0,1], gen: new FloorZeroGen()},\r\n    {range: [1,12], gen: new StandardMapGen()},\r\n    {range: [12,13], gen: new Floor12Gen()},\r\n    {range: [13,-1], gen: new StandardMapGen()}\r\n]","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nexport default class Floor12Gen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.tiles.set(new DownStairs(assets), 0, 0);\r\n        const ring = GetRing(2);\r\n        for (let i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Floor(assets, new Point(12, 0)), ring[i]);\r\n        }\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport { MapGenerators } from \"../mapGen/IMapGen\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst FADE_OUT_ANIM_TIME = 30;\r\nconst PLAYER_MOVE_TIME = 30;\r\n\r\nexport default class FloorTransitionPhase implements IGamePhase {\r\n\r\n    time = 0;\r\n\r\n    init(state: GameState): void {\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= FADE_OUT_ANIM_TIME) {\r\n            return new FloorTransitionPlayerMovePhase();\r\n        } else {\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.globalAlpha = 1;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}\r\n\r\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\r\n\r\n    time = 0;\r\n    playerStartPoint: Point;\r\n\r\n    init(state: GameState): void {\r\n        const floor = state.currentFloor + 1;\r\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\r\n        this.playerStartPoint = state.player.position;\r\n        state.changeFloor(floor, generator);\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= PLAYER_MOVE_TIME) {\r\n            state.player.position = C.PLAYER_START_POSITION.clone();\r\n            return new EntryAnimationPhase();\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        const lerp = this.time / PLAYER_MOVE_TIME;\r\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\r\n        state.player.position = tgt;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\n\r\nconst dirKeys = [\r\n    { key: 'a', dir: Direction.Left },\r\n    { key: '4', dir: Direction.Left },\r\n    \r\n    { key: 'q', dir: Direction.UpLeft },\r\n    { key: '7', dir: Direction.UpLeft },\r\n\r\n    { key: 'w', dir: Direction.UpRight },\r\n    { key: '9', dir: Direction.UpRight },\r\n\r\n    { key: 'd', dir: Direction.Right },\r\n    { key: '6', dir: Direction.Right },\r\n\r\n    { key: 'x', dir: Direction.DownRight },\r\n    { key: '3', dir: Direction.DownRight },\r\n\r\n    { key: 'z', dir: Direction.DownLeft },\r\n    { key: '1', dir: Direction.DownLeft },\r\n]\r\n\r\nexport default class PlayerTurnGamePhase implements IGamePhase {\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        const dir = this.tryGetDirection(keys);\r\n        if(dir !== undefined) {\r\n            const destination = Point.add(state.player.position, DirectionHelper.ToPoint(dir));\r\n\r\n            if(!state.isValidMove(destination, false))\r\n                return this;\r\n\r\n            return PlayerMoveAnimPhase(state, state.player.position, destination);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tryGetDirection(keys: KeyboardManager): Direction | undefined {\r\n        for(let i = 0; i < dirKeys.length; i++) {\r\n            if(keys.isKeyPressed(dirKeys[i].key)) {\r\n                return dirKeys[i].dir;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n    }\r\n\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel, PixelToHex } from \"../Hex\";\r\nimport HexCell, { DownStairs } from \"../HexCell\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\r\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\n\r\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point):IGamePhase {\r\n\r\n    const onFinish = (gs: GameState) => {\r\n        if(gs.tiles.get(gs.player.position).typeId === DownStairs.TypeID) {\r\n            return new FloorTransitionPhase();\r\n        }\r\n        else if(gs.enemies.length === 0) {\r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else return EnemyAttackPhase(state);\r\n    }\r\n\r\n    const playerMove = new AnimationPhase(\r\n        [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, to), to, state.enemies.length === 0 ? 2 : 10)],\r\n        onFinish\r\n    );\r\n\r\n    if(state.enemies.length === 0) {\r\n        return playerMove;\r\n    }\r\n    if(state.enemies.length > 0) {\r\n        const attacks = [\r\n            ...state.player.primary.getAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return playerMove;\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, state => playerMove));\r\n    }\r\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyMovePhase from \"./EnemyMovePhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\r\n    const enemyAttacks: AttackInfo[][] = []\r\n    for(let i = 0; i < state.enemies.length; i++) {\r\n        state.enemies[i].lastAttacks = state.enemies[i].getAttacks(state);\r\n        enemyAttacks.push(state.enemies[i].lastAttacks);\r\n    }\r\n    if(enemyAttacks.some(e => e.length > 0)) {\r\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations()))));\r\n        return new AnimationPhase(animations, ()=>\r\n            AttackResolutionPhase(state, enemyAttacks.reduce((acc, c) => acc.concat(c), []), state => EnemyMovePhase(state))\r\n        );\r\n    }\r\n    else{\r\n        return EnemyMovePhase(state);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 60;\r\n\r\nexport default class EntryAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        state.player.draw(ctx);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class GameStartAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new EntryAnimationPhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.player.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport GameState from './GameState';\r\nimport StandardMapGen from './mapGen/StandardMapGen';\r\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\r\nimport IGamePhase from './phases/IGamePhase';\r\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\r\nimport FloorZeroGen from './mapGen/FloorZeroGen';\r\nimport Zombie from './entities/Zombie';\r\n\r\nexport default function Run(): (()=>void) {\r\n    let ctx: CanvasRenderingContext2D;\r\n    \r\n    let keys: KeyboardManager;\r\n    let scaleHelper: NearestNeighborScalingHelper;\r\n    \r\n    const assetLoader = new AssetLoader();\r\n    const assets = new Assets(assetLoader);\r\n\r\n    let state: GameState;\r\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\r\n\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n    \r\n    function assetLoadDone() {\r\n        assets.onLoadFinished();\r\n        \r\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n        ctx = canvas.getContext('2d');\r\n        scaleHelper = new NearestNeighborScalingHelper(\r\n            canvas, \r\n            ctx, \r\n            C.MAP_PIXEL_SIZE, \r\n            C.MAP_PIXEL_SIZE, \r\n            true, \r\n            () => { return; }\r\n        );\r\n\r\n        Zombie.onAssetsLoaded(assets);\r\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\r\n        NearestNeighborScaling(ctx);\r\n        tick();\r\n    }\r\n    \r\n    function tick() {\r\n        scaleHelper.TryRescale();\r\n        NearestNeighborScaling(ctx);\r\n\r\n        const nextPhase = currentPhase.tick(state, keys);\r\n\r\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        currentPhase.draw(ctx, state);\r\n\r\n        if(nextPhase !== currentPhase) {\r\n            currentPhase = nextPhase;\r\n            nextPhase.init(state);\r\n        }\r\n\r\n        keys.update();\r\n        requestAnimationFrame(() => tick());\r\n    }\r\n\r\n    return (() => scaleHelper.Detatch());\r\n}\r\n","import * as React from 'react';\r\nimport Run from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>Run());\r\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","cos","sin","lengthSq","dot","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","sy","pts","add","Bezier","rotate","theta","fromAngle","Rect","w","shift","xp","shiftBy","edge","corner","TILE_WIDTH","TILE_HEIGHT","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","AllDirections","DirectionHelper","amount","TurnRight","pt","amt","TurnLeft","HexToPixel","point","HexLength","sign","abs","GetRing","radius","result","pos","dir","originDelta","HpRenderer","image","emptyHpImage","redHpImage","yellowHpImage","blueHpImage","hp","maxHp","rows","ceil","lastRowLength","fullImage","emptyImage","originPoint","row","dy","col","lastRowDx","SpriteAnimation","firstFrame","frameAdvance","numFrames","duration","loop","SpriteAnimationInstance","frameNumber","frame","overrideDuration","currentTick","position","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","hpImage","impacts","getImpactAnimation","onLoadFinished","hpRenderer","getDigitSprite","digit","drawNumber","digits","split","map","parseInt","Entity","entity","primary","SimpleEnemy","target","rect","EntityMoveAnimation","motion","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","impactAnimation","projectile","startPoint","toAnimations","animations","pixTarget","SimpleWeapon","type","assets","artTile","sprite","iconImage","attacks","super","getAttacks","state","player","moveFrom","moveTo","moveDelta","attack","onMove","rot","getRotation","pattern","attackInfo","delta","Sword","getAttack","e","entityAt","IsPlayer","animationAttack","Dagger","basicAttack","Player","secondary","GameState","size","floorNum","generator","enemies","changeFloor","to","find","isValidMove","flying","isInBounds","get","isPathable","some","generateMap","currentFloor","iterate","tile","AfterWorldLoad","excludeEntities","cell","forEach","includes","ParallelAnimation","steps","step","SequentialAnimation","DeltaRenderable","Rectangle","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","HexCell","typeId","pathable","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","world","Floor","customSprite","TypeID","OnEntityStep","DownStairs","AnimationPhase","onFinish","init","AttackResolutionPhase","nextPhase","filter","EnemyMovePhase","disallowed","getMove","lastAttacks","PlayerTurnGamePhase","HexArray","defaultValue","_size","data","midRowLength","dx","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","func","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","d","hexPt","images","part","index","reduceRight","acc","Lava","isFlying","playerMoveTileArts","FloorZeroGen","ring","ring2","playerRing","Enemy","Zombie","playerLocation","possibleMoves","rp","minMoves","minMoveDist","random","StandardMapGen","downStairY","downStairX","validEnemySpawns","spawnId","zombie","MapGenerators","gen","FloorTransitionPhase","FloorTransitionPlayerMovePhase","fillStyle","globalAlpha","fillRect","playerStartPoint","EntryAnimationPhase","lerp","tgt","dirKeys","tryGetDirection","from","playerMove","gs","enemyAttacks","attackSet","reduce","c","concat","EnemyAttackPhase","PlayerMoveAnimPhase","animationTime","GameStartAnimationPhase","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","TryRescale","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","onAssetsLoaded","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}