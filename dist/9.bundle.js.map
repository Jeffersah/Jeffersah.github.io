{"version":3,"sources":["webpack:///./src/projects/gridlock/ECarColor.ts","webpack:///./src/projects/gridlock/EAnchorConnectionFlag.ts","webpack:///./src/projects/gridlock/ETileAnchor.ts","webpack:///./src/projects/gridlock/Constants.ts","webpack:///./src/projects/gridlock/Car.ts","webpack:///./src/projects/gridlock/signalCtrl/signalCtrlPanel.ts","webpack:///./src/projects/gridlock/AnchorColisions.ts","webpack:///./src/projects/gridlock/Signal.ts","webpack:///./src/projects/gridlock/tiles/MapTile.ts","webpack:///./src/projects/gridlock/tiles/MapConnections.ts","webpack:///./src/projects/gridlock/tiles/MapTileDefintion.ts","webpack:///./src/projects/gridlock/GameState.ts","webpack:///./src/projects/gridlock/assets/gridlocktrack.png","webpack:///./src/projects/gridlock/assets/cars.png","webpack:///./src/projects/gridlock/assets/signal_arrows.png","webpack:///./src/projects/gridlock/assets/signal_hub.png","webpack:///./src/projects/gridlock/assets/gridlock_ctrlpanel.png","webpack:///./src/projects/gridlock/assets/fire.png","webpack:///./src/projects/gridlock/assets/control_uielements.png","webpack:///./src/projects/gridlock/assets/gray_anim.png","webpack:///./src/projects/gridlock/assets/gridlock_spawns.png","webpack:///./src/projects/gridlock/CarAnimationControl.ts","webpack:///./src/projects/gridlock/assets/index.ts","webpack:///./src/projects/gridlock/Runner.ts","webpack:///./src/projects/gridlock/assets/gridlock_preview.png","webpack:///./src/views/projects/gridlock/GridlockLevelPreviewComponent.tsx","webpack:///./src/views/projects/gridlock/GridlockComponent.tsx","webpack:///./src/hooks/useLoader.ts","webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/position/Angle.ts","webpack:///./src/utils/rand.ts"],"names":["ECarColor","AllCarColors","Red","Green","Yellow","Blue","Gray_Bounce","Gray_TurnLeft","Gray_TurnRight","EAnchorConnectionFlag","ETileAnchor","TileAnchorConnectionMap","RR","RB","RL","RT","BR","BB","BL","BT","LR","LB","LL","LT","TR","TB","TL","TT","HALF_PI","Math","PI","pos","undefined","position","Point","add","AnchorToTileMove","anchor","ReverseDirection","Right","Bottom","Left","Top","index","GetExitRotation","tileSize","tilePosition","Multiply","offsetPosition","GetAnchorOffset","AddWith","from","to","AllAnchors","TILE_SIZE_PT","CAR_SIZE_PT","color","sprite","assets","this","nextPosition","parkedAt","parkAnimationComplete","hasPlayedCrashAnimation","flameRenders","animations","animationControllers","currentAnimationDefinition","crashedAt","isCrashed","startFlames","state","facing","outputs","direction","length","fwd","indexOf","dt","preffered","flameCount","Int","i","flame","anim","fire","play","offset","sourceSize","x","y","ticks","tick","push","tile","map","validOutputs","definition","connections","allConnections","chosen","chooseOutputDirection","isStop","cars","c","crashHere","moveDirection","valid","FindOutputForAlwaysTurn","signalAnchor","TryGetSignal","ctx","interpPercent","positionAdjust","fromAnchor","GetRealPosition","tileMidpoint","GetMidpoint","fromAngle","GetEntryRotation","shouldRotate","animInterp","repeatCount","frameNumber","floor","numFrames","overridesRotation","carAnimations","getSprite","sourceOffset","effectiveNext","maxInterp","useInterp","toAnchor","renderPosition","Bezier","exitAngle","rel","Angle","relativeAngle","draw","source","UICoords","signal","dx","dy","selectedColor","colorButtonUp","ctrlPanelElements","colorButtonDown","sqButtonUp","sqButtonDown","roundButtonUp","roundButtonDown","arrowIndicators","SIGNAL_CTRL_PANEL_SIZE","newColor","clearInstructions","abs","outputDirs","setInstruction","ctrlPanelBackground","image","console","log","drawImage","colorButton","carImageAtlas","selectedDir","getInstruction","dir","draw_offgrid","ARROW_DIR","currentSignals","Map","forceInstructions","isDisabled","car","has","get","set","clear","delete","SubtractWith","ARROW_SIZE","hub","arrows","midpoint","render","arrowOffsets","entries","offsetDir","endpointColor","signals","signalDef","overdrawAnchors","tileId","id","forceDisplay","disable","inputDirs","c1","c2","path1","GetConnection","path2","hit","isCrossover","interp","shiftStrength","pow","signalHubSheet","signalArrowsImage","center_offset","spawnRingSheet","spriteWidth","spriteHeight","getTrackSprite","packed","connectionArr","value","fromIndex","AnchorToIndex","toIndex","minIndex","min","maxIndex","max","output","connection","packedConnections","signalPerInput","tgtSignal","getSignalOffset","outDir","MultWith","level","canvas","width","col","r","height","allEndpoints","Array","mapdata","end","endpoints","disableSignals","DisableSignal","signalIndex","forceSignals","ResetLevel","clickLocation","cvsScaleFactor","tilePt","nearestSignal","subtract","getRenderPosition","LengthSq","preferredRenderLocation","spawn","spawns","EquivalentPosition","updateCars","LogicTick","CalculateNextPosition","checkColis","p1","p2","j","CheckColisions","equivPoint","otherCar","Equals","crashAt","EveryTick","overdrawCars","mapTile","checkOverdrawPos","coords","GetPositionAdjust","overdraw","CarAnimationControl","animation","conditions","key","loader","trackImageAtlas","SpriteAtlas","registerAssetLoadCallback","SpriteSheet","ImageLoader","SpriteAnimation","carColor","carType","addAnimation","tx","ty","NextRunnerId","runnerID","getContext","save","repaintTimer","interpFrameCount","isRunning","isDestroyed","boundEventListener","handleMouseEvent","bind","overlay","addEventListener","ev","relCoords","offsetX","canvasScale","offsetY","tryHandleClick","gameState","tryGetOverlay","AssetLoader","onAllFinished","loadComplete","restore","levelWidth","levelHeight","scale","levels","loadLevel","runTick","requestAnimationFrame","fillStyle","fillRect","cancelAnimationFrame","removeEventListener","GridlockLevelPreviewComponent","props","ref","current","previewSheet","clearRect","mapDataIndex","mapData","atlasX","atlasY","className","style","border","padding","onClick","nativeEvent","name","GridlockComponent","previewImage","loadItem","deps","setState","resultItem","useLoader","onFinish","runner","setRunner","showLevels","setShowLevels","start","stop","tabIndex","onKeyDown","keyCode","toggleRunning","preventDefault","stopPropagation","handleKeyEvent","stopImmediatePropagation","angle","distance","cos","sin","Dot","sqrt","other","len","Length","atan2","nx","ny","splitArgs","splitArgsOrSingle","src","a","b","sy","p","pts","t","slice","theta","spriteUrl","onload","document","createElement","loadFinished","origin","sourceRotation","AtlasSprite","frameCount","atlas","size","rotation","translate","rotate","params","frameSize","frame","args","loop","PlayingAnimation","maxTime","currentTime","twoPi","relativeNormalize","Rand","random","Number","MAX_SAFE_INTEGER"],"mappings":"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","file":"9.bundle.js","sourcesContent":["enum ECarColor {\r\n    Red = 0,\r\n    Green = 1,\r\n    Yellow = 2,\r\n    Blue = 3,\r\n    Gray_Bounce = -1,\r\n    Gray_TurnLeft = -2,\r\n    Gray_TurnRight = -3,\r\n}\r\n\r\nexport default ECarColor;\r\nexport const AllCarColors = [\r\n    ECarColor.Red,\r\n    ECarColor.Green,\r\n    ECarColor.Yellow,\r\n    ECarColor.Blue,\r\n    \r\n    ECarColor.Gray_Bounce,\r\n    ECarColor.Gray_TurnLeft,\r\n    ECarColor.Gray_TurnRight,\r\n]","import Point from \"../common/position/Point\";\r\n\r\nenum EAnchorConnectionFlag {\r\n    RR = 1 << 0,\r\n\r\n    RB = 1 << 1,\r\n    BR = 1 << 1,\r\n\r\n    RL = 1 << 2,\r\n    LR = 1 << 2,\r\n\r\n    RT = 1 << 3,\r\n    TR = 1 << 3,\r\n\r\n    BB = 1 << 4,\r\n\r\n    BL = 1 << 5,\r\n    LB = 1 << 5,\r\n\r\n    BT = 1 << 6,\r\n    TB = 1 << 6,\r\n\r\n    LL = 1 << 7,\r\n\r\n    LT = 1 << 8,\r\n    TL = 1 << 8,\r\n\r\n    TT = 1 << 9,\r\n}\r\n\r\nexport default EAnchorConnectionFlag;","import Point from \"../common/position/Point\";\r\nimport EAnchorConnectionFlag from \"./EAnchorConnectionFlag\";\r\n\r\nenum ETileAnchor {\r\n    Right = 0,\r\n    Bottom = 1,\r\n    Left = 2,\r\n    Top = 3,\r\n}\r\n\r\nconst TileAnchorConnectionMap = [\r\n    [ EAnchorConnectionFlag.RR, EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RL, EAnchorConnectionFlag.RT ],\r\n    [ EAnchorConnectionFlag.BR, EAnchorConnectionFlag.BB, EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BT ],\r\n    [ EAnchorConnectionFlag.LR, EAnchorConnectionFlag.LB, EAnchorConnectionFlag.LL, EAnchorConnectionFlag.LT ],\r\n    [ EAnchorConnectionFlag.TR, EAnchorConnectionFlag.TB, EAnchorConnectionFlag.TL, EAnchorConnectionFlag.TT ]\r\n];\r\n\r\nexport interface ITilePosition {\r\n    anchor: ETileAnchor;\r\n    position: Point;\r\n}\r\n\r\nexport default ETileAnchor;\r\n\r\nconst HALF_PI = Math.PI / 2;\r\nexport class TileAnchorHelper {\r\n\r\n    static AllAnchors: ETileAnchor[] = [ETileAnchor.Right, ETileAnchor.Bottom, ETileAnchor.Left, ETileAnchor.Top];\r\n\r\n    static EquivalentPosition(pos: ITilePosition): ITilePosition {\r\n        if(pos === undefined) return undefined;\r\n        return {\r\n            position: Point.add(pos.position, TileAnchorHelper.AnchorToTileMove(pos.anchor)),\r\n            anchor: TileAnchorHelper.ReverseDirection(pos.anchor)\r\n        };\r\n    }\r\n\r\n    static AnchorToIndex(anchor: ETileAnchor): number {\r\n        return <number>anchor;\r\n    }\r\n\r\n    static AnchorToTileMove(anchor: ETileAnchor): Point {\r\n        switch(anchor) {\r\n            case ETileAnchor.Right: return new Point(1, 0);\r\n            case ETileAnchor.Bottom: return new Point(0, 1);\r\n            case ETileAnchor.Left: return new Point(-1, 0);\r\n            case ETileAnchor.Top: return new Point(0, -1);\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n    static ReverseDirection(anchor: ETileAnchor): ETileAnchor {\r\n        return <ETileAnchor>((anchor + 2) % 4);\r\n    }\r\n\r\n    static IndexToAnchor(index: number): ETileAnchor {\r\n        switch(index) {\r\n            case 0: return ETileAnchor.Right;\r\n            case 1: return ETileAnchor.Bottom;\r\n            case 2: return ETileAnchor.Left;\r\n            case 3: return ETileAnchor.Top;\r\n            default: throw \"Bad Index\";\r\n        }\r\n    }\r\n\r\n    static GetAnchorOffset(anchor: ETileAnchor): Point {\r\n        switch(anchor) {\r\n            case ETileAnchor.Top: return new Point(0.5, 0);\r\n            case ETileAnchor.Bottom: return new Point(0.5, 1);\r\n            case ETileAnchor.Left: return new Point(0, 0.5);\r\n            case ETileAnchor.Right: return new Point(1, 0.5);\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n\r\n    static GetExitRotation(anchor: ETileAnchor): number {\r\n        switch(anchor) {\r\n            case ETileAnchor.Top: return HALF_PI * 3;\r\n            case ETileAnchor.Bottom: return HALF_PI;\r\n            case ETileAnchor.Left: return HALF_PI * 2;\r\n            case ETileAnchor.Right: return 0;\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n    static GetEntryRotation(anchor: ETileAnchor): number {\r\n        return TileAnchorHelper.GetExitRotation(TileAnchorHelper.ReverseDirection(anchor));\r\n    }\r\n\r\n    static GetRealPosition(position: ITilePosition, tileSize: Point) {\r\n        var tilePosition = Point.Multiply(position.position, tileSize);\r\n        var offsetPosition = Point.Multiply(TileAnchorHelper.GetAnchorOffset(position.anchor), tileSize);\r\n        return tilePosition.AddWith(offsetPosition);\r\n    }\r\n    \r\n    static GetMidpoint(position: { position: Point }, tileSize: Point) {\r\n        var tilePosition = Point.Multiply(position.position, tileSize);\r\n        return tilePosition.AddWith(Point.Multiply(tileSize, 0.5));\r\n    }\r\n\r\n    static GetConnection(from: ETileAnchor, to: ETileAnchor) : EAnchorConnectionFlag {\r\n        return TileAnchorConnectionMap[from][to];\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_SIZE = 64;\r\nexport const TILE_SIZE_PT = new Point(TILE_SIZE, TILE_SIZE);\r\nexport const CAR_SIZE = 18;\r\nexport const CAR_SIZE_PT = new Point(CAR_SIZE, CAR_SIZE);\r\nexport const ATLAS_WIDTH = 4;","import GameState from \"./GameState\";\r\nimport { AtlasSprite } from \"../common/assets/SpriteAtlas\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { ITilePosition, TileAnchorHelper } from \"./ETileAnchor\";\r\nimport Point from \"../common/position/Point\";\r\nimport Angle from \"../common/position/Angle\";\r\nimport { TILE_SIZE_PT } from \"./Constants\";\r\nimport { any } from \"../../LinqLike\";\r\nimport MapTile from \"./tiles/MapTile\";\r\nimport { PlayingAnimation } from \"../common/assets/SpriteAnimation\";\r\nimport Rand from \"../../utils/rand\";\r\nimport Assets from \"./assets\";\r\nimport CarAnimationControl from \"./CarAnimationControl\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport { AnimationPlayCondition, IJsonAnimationInfo } from \"./assets/leveldata/IJsonAnimationInfo\";\r\n\r\nconst TILE_CRASH_MAX_INTERP = 0.4;\r\nconst EDGE_CRASH_MAX_INTERP = 0.9;\r\n\r\nconst MAX_FLAME_RENDER = 4;\r\nconst MIN_FLAME_RENDER = 1;\r\n\r\nexport class Car {\r\n    nextPosition?: ITilePosition;\r\n    parkedAt?: Point;\r\n\r\n    private parkAnimationComplete:boolean;\r\n\r\n    public crashedAt?: { position: Point, anchor?: ETileAnchor };\r\n\r\n    hasPlayedCrashAnimation: boolean;\r\n\r\n    flameRenders: { anim: PlayingAnimation, offset: Point }[];\r\n    private animations: CarAnimationControl;\r\n\r\n    private currentAnimationDefinition?: IJsonAnimationInfo;\r\n\r\n    constructor(public color: ECarColor, public sprite: AtlasSprite, public position: ITilePosition, private assets: Assets) {\r\n        this.nextPosition = undefined;\r\n        this.parkedAt = undefined;\r\n        this.parkAnimationComplete = false;\r\n        this.hasPlayedCrashAnimation = false;\r\n        this.flameRenders = [];\r\n        this.animations = assets.animationControllers[color];\r\n        this.currentAnimationDefinition = undefined;\r\n    }\r\n\r\n    isCrashed(): boolean {\r\n        return this.crashedAt !== undefined;\r\n    }\r\n\r\n    crashHere(anchor?: ETileAnchor) {\r\n        if(!this.isCrashed()) {\r\n            this.startFlames();\r\n        }\r\n        this.crashedAt = { position: this.position.position, anchor };\r\n    }\r\n\r\n    crashAt(pos: {position: Point, anchor?: ETileAnchor}) {\r\n        if(!this.isCrashed()) {\r\n            this.startFlames();\r\n        }\r\n        this.crashedAt = pos;\r\n    }\r\n\r\n    private FindOutputForAlwaysTurn(state: GameState, facing: ETileAnchor, outputs: ETileAnchor[], direction: number): ETileAnchor {\r\n        if(outputs.length === 1) return outputs[0];\r\n        if(direction === 0) {\r\n            const fwd = TileAnchorHelper.ReverseDirection(facing); \r\n            if(outputs.indexOf(fwd) !== -1) return fwd;\r\n            return facing;\r\n        }\r\n        else {\r\n            for(let dt = 0; dt < 4; dt++)\r\n            {\r\n                let preffered = <ETileAnchor>((facing + dt * direction)%4);\r\n                if(outputs.indexOf(preffered) !== -1) return preffered;\r\n            }\r\n            return facing;\r\n        }\r\n    }\r\n\r\n    private startFlames() {\r\n        const flameCount = Rand.Int(MIN_FLAME_RENDER, MAX_FLAME_RENDER);\r\n        for(let i = 0; i < flameCount; i++) {\r\n            const flame: { anim: PlayingAnimation, offset: Point } = {\r\n                anim: this.assets.fire.play(30, true),\r\n                offset: new Point(Rand.Int(-6, 6) - this.assets.fire.sourceSize.x / 2, Rand.Int(-6, 6) - this.assets.fire.sourceSize.y)\r\n            };\r\n            // Tick a few times, so the flames aren't all in sync\r\n            const ticks = Rand.Int(8);\r\n            for(let tick = 0; tick < ticks; tick++)\r\n                flame.anim.tick();\r\n            this.flameRenders.push(flame);\r\n        }\r\n    }\r\n\r\n    public EveryTick() {\r\n        for(const flame of this.flameRenders) {\r\n            flame.anim.tick();\r\n        }\r\n    }\r\n\r\n    public LogicTick() {\r\n        if(this.isCrashed() && !this.hasPlayedCrashAnimation) { \r\n            this.hasPlayedCrashAnimation = true; \r\n        }\r\n        this.currentAnimationDefinition = undefined;\r\n    }\r\n\r\n    public CalculateNextPosition(state: GameState): ITilePosition | undefined {\r\n        if(this.isCrashed()) { this.hasPlayedCrashAnimation = true; return undefined; }\r\n        if(this.parkedAt !== undefined) {\r\n            this.parkAnimationComplete = true;\r\n            return undefined;\r\n        }\r\n\r\n        const tile = state.map[this.position.position.x][this.position.position.y];\r\n        const validOutputs = tile.definition.connections.allConnections(this.position.anchor);\r\n\r\n        const chosen = this.chooseOutputDirection(state, tile, validOutputs);\r\n        if(chosen === undefined){\r\n            // TODO: Parking animation\r\n            if(tile.definition.isStop) {\r\n                this.parkedAt = this.position.position;\r\n                this.parkAnimationComplete = false;\r\n                if(any(state.cars, c => c !== this && c.parkedAt !== undefined && c.parkedAt.x === this.position.position.x && c.parkedAt.y === this.position.position.y)) {\r\n                    // There's someoene there, crash into them.\r\n                    this.crashHere(this.position.anchor);\r\n                }\r\n            }\r\n            else {\r\n                this.crashHere();\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Figure out what direction we're moving\r\n        let moveDirection : AnimationPlayCondition = \r\n            this.position.anchor === chosen ? 'reverse'\r\n            : this.position.anchor === TileAnchorHelper.ReverseDirection(chosen) ? 'straight'\r\n            : this.position.anchor === (chosen + 1) % 4 ? 'turnRight'\r\n            : 'turnLeft';\r\n\r\n        this.currentAnimationDefinition = this.animations.animations[moveDirection];\r\n\r\n        return {\r\n            position: Point.add(this.position.position, TileAnchorHelper.AnchorToTileMove(chosen)),\r\n            anchor: TileAnchorHelper.ReverseDirection(chosen)\r\n        };\r\n    }\r\n\r\n    private chooseOutputDirection(state: GameState, tile: MapTile, valid: ETileAnchor[]) : ETileAnchor | undefined\r\n    {\r\n        switch(this.color) {\r\n            case ECarColor.Gray_Bounce:\r\n            case ECarColor.Gray_TurnLeft:\r\n            case ECarColor.Gray_TurnRight:\r\n                if(valid.length === 0) \r\n                    return this.position.anchor;\r\n                else\r\n                {\r\n                    return this.FindOutputForAlwaysTurn(state, this.position.anchor, valid, \r\n                        this.color === ECarColor.Gray_Bounce ? 0\r\n                        : this.color === ECarColor.Gray_TurnLeft ? 1 : \r\n                        3);\r\n                }\r\n            default: \r\n                if(valid.length === 0) return undefined\r\n                else if(valid.length === 1) {\r\n                    return valid[0];\r\n                }\r\n                else {\r\n                    let signalAnchor = tile.TryGetSignal(this.position.anchor, this.color);\r\n                    if (signalAnchor !== null && signalAnchor !== undefined && signalAnchor !== this.position.anchor) return signalAnchor;\r\n                    if (valid.indexOf(TileAnchorHelper.ReverseDirection(this.position.anchor)) !== -1) return TileAnchorHelper.ReverseDirection(this.position.anchor);\r\n                    return undefined;\r\n                }\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, interpPercent: number, positionAdjust: Point){\r\n        const fromAnchor = TileAnchorHelper.GetRealPosition(this.position, TILE_SIZE_PT);\r\n        const tileMidpoint = TileAnchorHelper.GetMidpoint(this.position, TILE_SIZE_PT);\r\n        const fromAngle = TileAnchorHelper.GetEntryRotation(this.position.anchor);\r\n\r\n        let sprite: AtlasSprite;\r\n        let shouldRotate: boolean;\r\n        if(this.currentAnimationDefinition === undefined) {\r\n            sprite = this.sprite;\r\n            shouldRotate = true;\r\n        } else {\r\n            const animInterp = (interpPercent * this.currentAnimationDefinition.repeatCount) % 1;\r\n            const frameNumber = Math.floor(animInterp * this.currentAnimationDefinition.numFrames);\r\n            shouldRotate = !(this.currentAnimationDefinition.overridesRotation ?? false);\r\n            sprite = this.assets.carAnimations.getSprite(\r\n                new Point(18 * (this.currentAnimationDefinition.sourceOffset[0] + frameNumber), 18 * this.currentAnimationDefinition.sourceOffset[1]),\r\n                new Point(18, 18),\r\n                new Point(0.5, 0.5));\r\n        }\r\n\r\n        if(this.isCrashed()) {\r\n            let effectiveNext : ITilePosition;\r\n            if(this.nextPosition !== undefined) effectiveNext = this.nextPosition;\r\n            else if(this.crashedAt?.anchor !== undefined) effectiveNext = this.crashedAt as ITilePosition;\r\n            else effectiveNext = {\r\n                position: Point.add(this.position.position, TileAnchorHelper.AnchorToTileMove(TileAnchorHelper.ReverseDirection(this.position.anchor))),\r\n                anchor: this.position.anchor\r\n            };\r\n\r\n            const maxInterp = this.crashedAt.anchor === undefined ? TILE_CRASH_MAX_INTERP : EDGE_CRASH_MAX_INTERP;\r\n\r\n            const useInterp = this.hasPlayedCrashAnimation ? maxInterp : (interpPercent < maxInterp ? interpPercent : maxInterp);\r\n\r\n            const toAnchor = TileAnchorHelper.GetRealPosition(effectiveNext, TILE_SIZE_PT);\r\n\r\n            let renderPosition: Point;\r\n\r\n            if(this.parkedAt !== undefined) {\r\n                renderPosition = tileMidpoint;\r\n            }\r\n            else {\r\n                renderPosition = Point.Bezier([fromAnchor, tileMidpoint, toAnchor], useInterp);\r\n            }\r\n\r\n            renderPosition = renderPosition.AddWith(positionAdjust);\r\n\r\n            const exitAngle = TileAnchorHelper.GetEntryRotation(effectiveNext.anchor);\r\n\r\n            const rel = Angle.relativeAngle(fromAngle, exitAngle);\r\n\r\n\r\n            sprite.draw(ctx, renderPosition, sprite.sourceSize, shouldRotate ? (fromAngle - rel * useInterp) : fromAngle);\r\n\r\n            if(this.hasPlayedCrashAnimation || interpPercent > useInterp) {\r\n                for(const flame of this.flameRenders) {\r\n                    flame.anim.draw(ctx, Point.add(renderPosition, flame.offset), flame.anim.source.sourceSize);\r\n                }\r\n            }\r\n        }\r\n        else if(this.nextPosition !== undefined) {\r\n            const toAnchor = TileAnchorHelper.GetRealPosition(this.nextPosition, TILE_SIZE_PT);\r\n\r\n            const renderPosition = Point.Bezier([fromAnchor, tileMidpoint, toAnchor], interpPercent).AddWith(positionAdjust);\r\n\r\n            const exitAngle = TileAnchorHelper.GetEntryRotation(this.nextPosition.anchor);\r\n\r\n            const rel = Angle.relativeAngle(fromAngle, exitAngle);\r\n\r\n            sprite.draw(ctx, renderPosition, sprite.sourceSize, shouldRotate ? (fromAngle - rel * interpPercent) : fromAngle);\r\n        }\r\n        else if(this.parkedAt !== undefined) {\r\n            if(!this.parkAnimationComplete) {\r\n                const renderPosition = Point.Bezier([fromAnchor, tileMidpoint, tileMidpoint], interpPercent).AddWith(positionAdjust);\r\n                sprite.draw(ctx, renderPosition, sprite.sourceSize, fromAngle);\r\n            } else {\r\n                sprite.draw(ctx, tileMidpoint, sprite.sourceSize, fromAngle);\r\n            }\r\n        }\r\n    }\r\n}","import { selected } from \"../../../views/projects/chess3d/css/singleBoard.css\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../assets\";\r\nimport ECarColor from \"../ECarColor\";\r\nimport ETileAnchor from \"../ETileAnchor\";\r\nimport Signal from \"../Signal\";\r\nimport MapTile from \"../tiles/MapTile\";\r\n\r\nexport const SIGNAL_CTRL_PANEL_SIZE = 128;\r\n\r\nconst UICoords = {\r\n    round: new Point(88, 88),\r\n    directions: [\r\n        new Point(108, 88),\r\n        new Point(88, 108),\r\n        new Point(68, 88),\r\n        new Point(88, 68),\r\n    ],\r\n    tilePreview: new Point(0, 64)\r\n};\r\n\r\nexport default class SignalCtrlPanel {\r\n\r\n    selectedColor: ECarColor;\r\n    private colorButtonDown: AtlasSprite;\r\n    private colorButtonUp: AtlasSprite;\r\n\r\n    private sqButtonUp: AtlasSprite;\r\n    private sqButtonDown: AtlasSprite;\r\n    \r\n    private roundButtonUp: AtlasSprite;\r\n    private roundButtonDown: AtlasSprite;\r\n\r\n    private arrowIndicators: AtlasSprite[];\r\n\r\n    constructor(public tile: MapTile, public signal: Signal, public assets: Assets, public dx: number, public dy: number) {\r\n        this.selectedColor = ECarColor.Red;\r\n        this.colorButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(0, 0), new Point(63, 32));\r\n        this.colorButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(0, 32), new Point(63, 32));\r\n        \r\n        this.sqButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(63, 0), new Point(16, 16));\r\n        this.sqButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(63, 16), new Point(16, 16));\r\n\r\n        this.roundButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(63, 32), new Point(16, 16));\r\n        this.roundButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(63, 48), new Point(16, 16));\r\n\r\n        this.arrowIndicators = [];\r\n        for(let i = 0; i < 4; i++){\r\n            this.arrowIndicators.push(this.assets.ctrlPanelElements.getSprite(new Point(79, 16 * i), new Point(16, 16)));\r\n        }\r\n    }\r\n\r\n    tryHandleClick(x: number, y: number): boolean {\r\n        if(x < this.dx || y < this.dy || x > this.dx + SIGNAL_CTRL_PANEL_SIZE || y > this.dy + SIGNAL_CTRL_PANEL_SIZE) return false;\r\n\r\n        x -= this.dx;\r\n        y -= this.dy;\r\n\r\n        if(x <= SIGNAL_CTRL_PANEL_SIZE / 2) {\r\n            const newColor = Math.floor(y / (SIGNAL_CTRL_PANEL_SIZE / 4));\r\n            this.selectedColor = newColor;\r\n            return true;\r\n        }\r\n        else if(y >= SIGNAL_CTRL_PANEL_SIZE / 2) {\r\n            // Bottom-right quadrant: Car controls.\r\n            if(x >= UICoords.round.x && y >= UICoords.round.y && x <= UICoords.round.x + 16 && y <= UICoords.round.y + 16) {\r\n                // Clicked round buton\r\n                this.signal.clearInstructions(this.selectedColor);\r\n            }\r\n            else {\r\n                // Find the best dir\r\n                x -= SIGNAL_CTRL_PANEL_SIZE / 2;\r\n                y -= SIGNAL_CTRL_PANEL_SIZE / 2;\r\n\r\n                // Coords are now relative to the frame\r\n\r\n                x -= SIGNAL_CTRL_PANEL_SIZE / 4;\r\n                y -= SIGNAL_CTRL_PANEL_SIZE / 4;\r\n                \r\n                // Coords are now relative to round button\r\n                let anchor;\r\n                if(Math.abs(x) >= Math.abs(y)) {\r\n                    anchor = x < 0 ? ETileAnchor.Left : ETileAnchor.Right;\r\n                }\r\n                else {\r\n                    anchor = y < 0 ? ETileAnchor.Top : ETileAnchor.Bottom;\r\n                }\r\n\r\n                if(this.signal.definition.outputDirs.indexOf(anchor) === -1) return true;\r\n\r\n                this.signal.setInstruction(this.selectedColor, anchor);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if(!this.assets.ctrlPanelBackground.image)  {\r\n            console.log('ASSETS IMAGE: ' + this.assets.ctrlPanelBackground.image);\r\n        }\r\n        ctx.drawImage(this.assets.ctrlPanelBackground.image, this.dx, this.dy);\r\n        for(let colorButton = 0; colorButton < 4; colorButton++) {\r\n            const selected = this.selectedColor === colorButton;\r\n            const buttonImg = selected ? this.colorButtonDown : this.colorButtonUp;\r\n\r\n            buttonImg.draw(ctx, new Point(this.dx + 1, this.dy + 32 * colorButton), new Point(63, 32));\r\n\r\n            this.assets.carImageAtlas.getSprite(new Point(18 * colorButton, 0), new Point(18, 18))\r\n                .draw(ctx, new Point(this.dx + 1 + 63/2 - 8, this.dy + 32 * colorButton + 16 - 8), new Point(18, 18));\r\n        }\r\n\r\n        const selectedDir = this.signal.getInstruction(this.selectedColor) ?? -1;\r\n\r\n        for(let dir = 0; dir < 4; dir++) {\r\n            const buttonImg = selectedDir === dir ? this.sqButtonDown : this.sqButtonUp;\r\n            buttonImg.draw(ctx, new Point(this.dx + UICoords.directions[dir].x, this.dy + UICoords.directions[dir].y), new Point(16, 16));\r\n            this.arrowIndicators[dir].draw(ctx, new Point(this.dx + UICoords.directions[dir].x, this.dy + UICoords.directions[dir].y), new Point(16, 16));\r\n        }\r\n\r\n        const roundImg = selectedDir === -1 ? this.roundButtonDown : this.roundButtonUp;\r\n        roundImg.draw(ctx, new Point(this.dx + UICoords.round.x, this.dy + UICoords.round.y), new Point(16, 16));\r\n\r\n        this.tile.draw_offgrid(ctx, this.dx + 72, this.dy + 8, 48, this.assets);\r\n    }\r\n}","import EAnchorConnectionFlag from \"./EAnchorConnectionFlag\";\r\n\r\nconst AnchorColisions: [EAnchorConnectionFlag, EAnchorConnectionFlag][] = [\r\n\r\n    [ EAnchorConnectionFlag.LR, 0b1111111111 ],\r\n    [ EAnchorConnectionFlag.TB, 0b1111111111 ],\r\n\r\n    [ EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RB |  EAnchorConnectionFlag.LB | EAnchorConnectionFlag.TR | EAnchorConnectionFlag.RR | EAnchorConnectionFlag.BB ],\r\n    [ EAnchorConnectionFlag.RT, EAnchorConnectionFlag.RT |  EAnchorConnectionFlag.LT | EAnchorConnectionFlag.RB | EAnchorConnectionFlag.RR | EAnchorConnectionFlag.TT ],\r\n    [ EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BL |  EAnchorConnectionFlag.RB | EAnchorConnectionFlag.TL | EAnchorConnectionFlag.BB | EAnchorConnectionFlag.LL ],\r\n    [ EAnchorConnectionFlag.LT, EAnchorConnectionFlag.LT |  EAnchorConnectionFlag.RT | EAnchorConnectionFlag.LB | EAnchorConnectionFlag.LL | EAnchorConnectionFlag.TT ],\r\n    \r\n    [ EAnchorConnectionFlag.RR, 0 ],\r\n    [ EAnchorConnectionFlag.BB, 0 ],\r\n    [ EAnchorConnectionFlag.LL, 0 ],\r\n    [ EAnchorConnectionFlag.TT, 0 ],\r\n]\r\n\r\nexport default { colisions: AnchorColisions, crossoverColisions: [\r\n    [ EAnchorConnectionFlag.LR, EAnchorConnectionFlag.LR ],\r\n    [ EAnchorConnectionFlag.TB, EAnchorConnectionFlag.TB ],\r\n    \r\n    [ EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RB ],\r\n    [ EAnchorConnectionFlag.RT, EAnchorConnectionFlag.RT ],\r\n    [ EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BL ],\r\n    [ EAnchorConnectionFlag.LT, EAnchorConnectionFlag.LT ],\r\n    \r\n    [ EAnchorConnectionFlag.RR, 0 ],\r\n    [ EAnchorConnectionFlag.BB, 0 ],\r\n    [ EAnchorConnectionFlag.LL, 0 ],\r\n    [ EAnchorConnectionFlag.TT, 0 ],\r\n] };","import { off } from \"process\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport Point from \"../common/position/Point\";\r\nimport { TILE_SIZE_PT, TILE_SIZE } from \"./Constants\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"./ETileAnchor\";\r\nimport { ISignalDefinition } from \"./tiles/MapTileDefintion\";\r\n\r\nconst ARROW_SIZE = 6;\r\nconst ARROW_SHIFT_HUB = 6;\r\nconst ARROW_SHIFT = 3; \r\n\r\nconst ARROW_DIR: Point[] = [\r\n    new Point(1, 0),\r\n    new Point(0, 1),\r\n    new Point(-1, 0),\r\n    new Point(0, -1)\r\n];\r\n\r\nexport default class Signal {\r\n    private currentSignals: Map<ECarColor, ETileAnchor>;\r\n    public isDisabled: boolean;\r\n    constructor(public definition: ISignalDefinition)\r\n    {\r\n        this.currentSignals = new Map<ECarColor, ETileAnchor>();\r\n    }\r\n\r\n    disable(forceInstructions: number){\r\n        this.isDisabled = true;\r\n        for(let color = 0; color < 4; color++) {\r\n            for(let anchor = 0; anchor < 4; anchor++) {\r\n                if((forceInstructions & 1) === 1)\r\n                    this.setInstruction(color, anchor);\r\n                forceInstructions >>= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    getInstruction(car: ECarColor) : ETileAnchor | undefined {\r\n        if(this.currentSignals.has(car)) return this.currentSignals.get(car);\r\n        return undefined;\r\n    }\r\n\r\n    setInstruction(car: ECarColor, anchor: ETileAnchor) {\r\n        this.currentSignals.set(car, anchor);\r\n    }\r\n    \r\n    clearInstructions(car ?: ECarColor) {\r\n        if(car === undefined || car === null) {\r\n            this.currentSignals.clear();\r\n        }\r\n        else {\r\n            this.currentSignals.delete(car);\r\n        }\r\n    }\r\n\r\n    getRenderPosition(tile: Point): Point {\r\n        return TileAnchorHelper.GetMidpoint({ position: tile }, TILE_SIZE_PT)\r\n            .SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2)\r\n            .AddWith(this.definition.dx, this.definition.dy);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, tile: Point, hub: SpriteSheet, arrows: SpriteSheet) {\r\n        const midpoint = TileAnchorHelper.GetMidpoint({ position: tile }, TILE_SIZE_PT).SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2); \r\n        hub.render(ctx,\r\n            midpoint.x + this.definition.dx, midpoint.y + this.definition.dy,\r\n            6, 6,\r\n            this.isDisabled ? 1 : 0, 0);\r\n\r\n        const arrowOffsets: number[] = [0,0,0,0];\r\n        for(var [car, anchor] of this.currentSignals.entries()){\r\n            const offset = arrowOffsets[anchor]++;\r\n            const offsetDir = ARROW_DIR[anchor];\r\n\r\n            const position = Point.add(midpoint, Point.Multiply(offsetDir, (ARROW_SHIFT_HUB + ARROW_SHIFT * offset))).AddWith(this.definition.dx, this.definition.dy);\r\n            arrows.render(ctx, position.x, position.y, ARROW_SIZE, ARROW_SIZE, anchor, car);\r\n        }\r\n    }\r\n    \r\n    draw_offgrid(ctx: CanvasRenderingContext2D, position: Point, tileSize: Point, hub: SpriteSheet, arrows: SpriteSheet) {\r\n        const midpoint = position.AddWith(Point.Multiply(tileSize, 0.5, 0.5)).SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2); \r\n        hub.render(ctx, midpoint.x + this.definition.dx, midpoint.y + this.definition.dy,\r\n            6, 6,\r\n            this.isDisabled ? 1 : 0, 0);\r\n\r\n        const arrowOffsets: number[] = [0,0,0,0];\r\n        for(var [car, anchor] of this.currentSignals.entries()){\r\n            const offset = arrowOffsets[anchor]++;\r\n            const offsetDir = ARROW_DIR[anchor];\r\n\r\n            const position = Point.add(midpoint, Point.Multiply(offsetDir, (ARROW_SHIFT_HUB + ARROW_SHIFT * offset))).AddWith(this.definition.dx, this.definition.dy);\r\n            arrows.render(ctx, position.x, position.y, ARROW_SIZE, ARROW_SIZE, anchor, car);\r\n        }\r\n    }\r\n}","import { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport AnchorColisions from \"../AnchorColisions\";\r\nimport Assets from \"../assets\";\r\nimport { Car } from \"../Car\";\r\nimport { TILE_SIZE, TILE_SIZE_PT } from \"../Constants\";\r\nimport ECarColor from \"../ECarColor\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\nimport Signal from \"../Signal\";\r\nimport { MapTileDefinition } from \"./MapTileDefintion\";\r\n\r\nexport default class MapTile { \r\n    public signals: Signal[];\r\n    public overdrawAnchors: ETileAnchor[];\r\n\r\n    constructor(public definition: MapTileDefinition, public image: AtlasSprite, public endpointColor?: ECarColor) {\r\n        this.signals = [];\r\n        for(const signalDef of definition.signals) {\r\n            this.signals.push(new Signal(signalDef));\r\n        }\r\n        this.overdrawAnchors = this.definition.tileId === 3 ? [ ETileAnchor.Left, ETileAnchor.Right ] : [];\r\n    }\r\n\r\n    DisableSignal(id: number, forceDisplay: number) {\r\n        this.signals[id].disable(forceDisplay);\r\n    }\r\n\r\n    TryGetSignal(from: ETileAnchor, color: ECarColor): ETileAnchor|undefined {\r\n        for(const signal of this.signals) {\r\n            if(signal.definition.inputDirs.indexOf(from) !== -1) {\r\n                return signal.getInstruction(color);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    CheckColisions(c1: Car, c2: Car): boolean {\r\n        // TODO: what if one of them is undefined?\r\n        if(c1.nextPosition === undefined || c2.nextPosition === undefined) return true;\r\n        let path1 = TileAnchorHelper.GetConnection(c1.position.anchor, TileAnchorHelper.ReverseDirection(c1.nextPosition.anchor));\r\n        let path2 = TileAnchorHelper.GetConnection(c2.position.anchor, TileAnchorHelper.ReverseDirection(c2.nextPosition.anchor));\r\n\r\n        for(const [from, hit] of (this.definition.isCrossover ? AnchorColisions.crossoverColisions : AnchorColisions.colisions)) {\r\n            if(from === path1) {\r\n                if((hit & path2) > 0) return true;\r\n            }\r\n            if(from === path2) {\r\n                if((hit & path1) > 0) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    GetPositionAdjust(from: ETileAnchor, to: ETileAnchor | undefined, interp: number): Point {\r\n        // Not the best way of doing this, but hey, it works.\r\n        if(this.definition.tileId === 3) {\r\n            if((from === ETileAnchor.Left || from === ETileAnchor.Right) && (to === ETileAnchor.Left || to === ETileAnchor.Right)) {\r\n                let shiftStrength = interp * 2;\r\n                if(shiftStrength > 1) {\r\n                    shiftStrength = 1 - (shiftStrength % 1);\r\n                }\r\n\r\n                shiftStrength = Math.pow(shiftStrength, 0.5);\r\n\r\n                // shiftStrength is [0, 1], 0 when interp approaches 0 or 1, and 1 when interp is 0.5 (Triangle wave)\r\n\r\n                return new Point(0, - shiftStrength * 5);\r\n            }\r\n        }\r\n        return new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, x: number, y: number, assets: Assets) {\r\n        this.image.draw(ctx, new Point(x * TILE_SIZE, y * TILE_SIZE), TILE_SIZE_PT);\r\n        for(const signal of this.signals) {\r\n            signal.draw(ctx, new Point(x, y), assets.signalHubSheet, assets.signalArrowsImage);\r\n        }\r\n\r\n        if(this.definition.isStop && this.endpointColor !== undefined && this.endpointColor !== null) {\r\n            const center_offset = (TILE_SIZE - assets.spawnRingSheet.spriteWidth) / 2;\r\n            assets.spawnRingSheet.render(ctx, \r\n                x * TILE_SIZE + center_offset, \r\n                y * TILE_SIZE + center_offset, \r\n                assets.spawnRingSheet.spriteWidth, \r\n                assets.spawnRingSheet.spriteHeight, \r\n                this.endpointColor,\r\n                1);\r\n        }\r\n    }\r\n\r\n    overdraw(ctx: CanvasRenderingContext2D, x: number, y: number, assets: Assets) {\r\n        if(this.definition.tileId !== 3) return;\r\n\r\n        assets.getTrackSprite(39).draw(ctx, new Point(x * TILE_SIZE, y * TILE_SIZE), TILE_SIZE_PT);\r\n        \r\n    }\r\n\r\n    draw_offgrid(ctx: CanvasRenderingContext2D, x: number, y: number, tileSize: number, assets: Assets) {\r\n        this.image.draw(ctx, new Point(x, y), new Point(tileSize, tileSize));\r\n        for(const signal of this.signals) {\r\n            signal.draw_offgrid(ctx, new Point(x, y), new Point(tileSize, tileSize), assets.signalHubSheet, assets.signalArrowsImage);\r\n        }\r\n    }\r\n}","import DirectionHelper from \"../DirectionHelper\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\n\r\nexport default class MapConnections {\r\n    private connections: boolean[][];\r\n\r\n    constructor(packed: number) {\r\n        \r\n        this.connections = [];\r\n        for(let dir = 0; dir < 4; dir++) {\r\n            const connectionArr = [];\r\n            for(let to = dir; to < 4; to++) {\r\n                connectionArr.push((packed & 1) > 0);\r\n                packed >>= 1;\r\n            }\r\n            this.connections.push(connectionArr);\r\n        }\r\n\r\n    }\r\n\r\n    public connection(from: ETileAnchor, to: ETileAnchor): boolean;\r\n    public connection(from: ETileAnchor, to: ETileAnchor, value: boolean): void;\r\n    public connection(from: ETileAnchor, to: ETileAnchor, value?: boolean): void|boolean {\r\n        const fromIndex = TileAnchorHelper.AnchorToIndex(from);\r\n        const toIndex = TileAnchorHelper.AnchorToIndex(to);\r\n        const minIndex = Math.min(fromIndex, toIndex);\r\n        const maxIndex = Math.max(fromIndex, toIndex);\r\n        if (value === undefined) {\r\n            return this.connections[minIndex][maxIndex-minIndex];\r\n        }\r\n        else {\r\n            this.connections[minIndex][maxIndex-minIndex] = value;\r\n        }\r\n\r\n    }\r\n\r\n    public allConnections(from: ETileAnchor): ETileAnchor[] {\r\n        let output = [];\r\n        for(const to of TileAnchorHelper.AllAnchors) {\r\n            if(this.connection(from, to)) {\r\n                output.push(to);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}","import { clearLine } from \"readline\";\r\nimport C from \"../EAnchorConnectionFlag\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\nimport MapConnections from \"./MapConnections\";\r\n\r\nconst EDGE_SIGNAL_OFFSET = 16;\r\n\r\nexport interface ISignalDefinition {\r\n    dx: number;\r\n    dy: number;\r\n    inputDirs: ETileAnchor[];\r\n    outputDirs: ETileAnchor[];\r\n}\r\n\r\nexport class MapTileDefinition {\r\n    connections: MapConnections;\r\n    signals: ISignalDefinition[];\r\n\r\n    constructor(public tileId: number, packedConnections: number, signalPerInput: boolean = false, public isStop: boolean = false, public isCrossover: boolean = false) {\r\n        this.connections = new MapConnections(packedConnections);\r\n        this.signals = [];\r\n        for(const anchor of TileAnchorHelper.AllAnchors) {\r\n            const output = this.connections.allConnections(anchor);\r\n            if(output.length > 1) {\r\n                // ambiguous, we need a signal here\r\n                let tgtSignal: ISignalDefinition;\r\n                if(signalPerInput || this.signals.length === 0) {\r\n                    tgtSignal = { ...getSignalOffset(signalPerInput, anchor), inputDirs: [], outputDirs: [] };\r\n                    this.signals.push(tgtSignal);\r\n                }\r\n                else {\r\n                    tgtSignal = this.signals[0];\r\n                }\r\n\r\n                tgtSignal.inputDirs.push(anchor);\r\n                for(const outDir of output) {\r\n                    tgtSignal.outputDirs.push(outDir)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSignalOffset(signalPerInput: boolean, anchor: ETileAnchor): {dx: number, dy: number} {\r\n    if(!signalPerInput) return { dx: 0, dy: 0 };\r\n    const pos = TileAnchorHelper.AnchorToTileMove(anchor).MultWith(EDGE_SIGNAL_OFFSET);\r\n    return {dx: pos.x, dy: pos.y };\r\n}\r\n\r\n\r\nconst allMapTileDefinitions: MapTileDefinition[] = [\r\n    null,\r\n    new MapTileDefinition(1, C.TB),\r\n    new MapTileDefinition(2, C.LR),\r\n    new MapTileDefinition(3, C.TB|C.LR, false, false, true),\r\n\r\n    new MapTileDefinition(4, C.RT),\r\n    new MapTileDefinition(5, C.RB),\r\n    new MapTileDefinition(6, C.LB),\r\n    new MapTileDefinition(7, C.LT),\r\n\r\n    new MapTileDefinition(8, C.RT|C.RB, true),\r\n    new MapTileDefinition(9, C.RB|C.LB, true),\r\n    new MapTileDefinition(10, C.LT|C.LB, true),\r\n    new MapTileDefinition(11, C.LT|C.RT, true),\r\n\r\n    new MapTileDefinition(12, C.RT|C.RB|C.TB),\r\n    new MapTileDefinition(13, C.RB|C.LB|C.LR),\r\n    new MapTileDefinition(14, C.LT|C.LB|C.TB),\r\n    new MapTileDefinition(15, C.LT|C.RT|C.LR),\r\n\r\n    new MapTileDefinition(16, 0, false, true),\r\n    new MapTileDefinition(17, 0, false, true),\r\n    new MapTileDefinition(18, 0, false, true),\r\n    new MapTileDefinition(19, 0, false, true),\r\n\r\n    new MapTileDefinition(20, C.LT|C.RB),\r\n    new MapTileDefinition(21, C.RT|C.LB),\r\n    new MapTileDefinition(22, C.RB|C.RT|C.LB|C.LT|C.LR|C.TB),\r\n    new MapTileDefinition(23, C.RB|C.RT|C.LB|C.LT, true),\r\n\r\n    new MapTileDefinition(24, C.RR),\r\n    new MapTileDefinition(25, C.BB),\r\n    new MapTileDefinition(26, C.LL),\r\n    new MapTileDefinition(27, C.TT),\r\n    \r\n    new MapTileDefinition(28, C.RR|C.TT),\r\n    new MapTileDefinition(29, C.BB|C.RR),\r\n    new MapTileDefinition(30, C.LL|C.BB),\r\n    new MapTileDefinition(31, C.TT|C.LL),\r\n    \r\n    new MapTileDefinition(32, C.RR|C.TT|C.BB),\r\n    new MapTileDefinition(33, C.BB|C.RR|C.LL),\r\n    new MapTileDefinition(34, C.LL|C.BB|C.TT),\r\n    new MapTileDefinition(35, C.TT|C.LL|C.RR),\r\n    \r\n    new MapTileDefinition(36, C.RR|C.LL),\r\n    new MapTileDefinition(37, C.BB|C.TT),\r\n    new MapTileDefinition(38, C.RR|C.LL|C.BB|C.TT),\r\n    null, // Special: The overlay for bridges\r\n\r\n    new MapTileDefinition(39, C.RT|C.LL, false, false, true),\r\n    new MapTileDefinition(40, C.RB|C.TT, false, false, true),\r\n    new MapTileDefinition(41, C.LB|C.TT, false, false, true),\r\n    new MapTileDefinition(42, C.LT|C.RR, false, false, true),\r\n    \r\n    new MapTileDefinition(43, C.RT|C.BB, false, false, true),\r\n    new MapTileDefinition(44, C.RB|C.LL, false, false, true),\r\n    new MapTileDefinition(45, C.LB|C.RR, false, false, true),\r\n    new MapTileDefinition(46, C.LT|C.BB, false, false, true),\r\n    \r\n    new MapTileDefinition(47, C.RT|C.LL|C.BB, false, false, true),\r\n    new MapTileDefinition(48, C.RB|C.TT|C.LL, false, false, true),\r\n    new MapTileDefinition(49, C.LB|C.TT|C.RR, false, false, true),\r\n    new MapTileDefinition(50, C.LT|C.RR|C.BB, false, false, true),\r\n];\r\n\r\n\r\nexport default allMapTileDefinitions;","import { any, customGroupBy, findMin, groupBy } from \"../../LinqLike\";\r\nimport Angle from \"../common/position/Angle\";\r\nimport Point from \"../common/position/Point\";\r\nimport Assets from \"./assets\";\r\nimport { Car } from \"./Car\";\r\nimport { ATLAS_WIDTH, CAR_SIZE, CAR_SIZE_PT, TILE_SIZE, TILE_SIZE_PT } from \"./Constants\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { ITilePosition, TileAnchorHelper } from \"./ETileAnchor\";\r\nimport ILevelData from \"./ILevelData\";\r\nimport SignalCtrlPanel from \"./signalCtrl/signalCtrlPanel\";\r\nimport MapTile from \"./tiles/MapTile\";\r\nimport allMapTileDefinitions, { MapTileDefinition } from \"./tiles/MapTileDefintion\";\r\n\r\n\r\nexport default class GameState {\r\n    map: (MapTile | null)[][]\r\n    cars: Car[];\r\n\r\n    constructor(private level: ILevelData, private canvas: HTMLCanvasElement, public assets: Assets) {\r\n        this.map = [];\r\n        for(let c = 0; c < level.width; c++) {\r\n            let col = [];\r\n            for(let r = 0; r < level.height; r++) {\r\n                col.push(null);\r\n            }\r\n            this.map.push(col);\r\n        }\r\n\r\n        let allEndpoints: (ECarColor | undefined)[] = new Array(level.mapdata.length);\r\n        for(const end of level.endpoints) {\r\n            allEndpoints[end.position.x + end.position.y * level.width] = end.color;\r\n        }\r\n\r\n        for(let i = 0; i < level.mapdata.length; i++) {\r\n            let x = i % level.width;\r\n            let y = Math.floor(i / level.width);\r\n            const definition = allMapTileDefinitions[level.mapdata[i]];\r\n            if(definition === null) {\r\n                this.map[x][y] = null;\r\n            }\r\n            else {\r\n                this.map[x][y] = new MapTile(definition, assets.getTrackSprite(definition.tileId), allEndpoints[i]);\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < level.disableSignals.length; i++) {\r\n            this.map[level.disableSignals[i].tile.x][level.disableSignals[i].tile.y].DisableSignal(level.disableSignals[i].signalIndex, level.disableSignals[i].forceSignals);\r\n        }\r\n\r\n        this.ResetLevel();\r\n    }\r\n\r\n    public tryGetOverlay(clickLocation: Point, cvsScaleFactor: number): SignalCtrlPanel | undefined {\r\n        const tilePt = new Point(Math.floor(clickLocation.x / TILE_SIZE), Math.floor(clickLocation.y / TILE_SIZE));\r\n        const tile = this.map[tilePt.x][tilePt.y];\r\n        if(tile === undefined || tile === null || tile.signals.length === 0) return undefined;\r\n        const nearestSignal = findMin(tile.signals, signal => Point.subtract(signal.getRenderPosition(tilePt), clickLocation).LengthSq());\r\n\r\n        if(nearestSignal.isDisabled) return undefined;\r\n\r\n        const preferredRenderLocation = new Point(tilePt.x * TILE_SIZE + TILE_SIZE, tilePt.y * TILE_SIZE);\r\n        if(this.canvas.width / cvsScaleFactor - preferredRenderLocation.x < this.assets.ctrlPanelBackground.image.width) {\r\n            // Move to left side\r\n            preferredRenderLocation.x = tilePt.x * TILE_SIZE - this.assets.ctrlPanelBackground.image.width;\r\n        }\r\n\r\n        if(this.canvas.height / cvsScaleFactor - preferredRenderLocation.y < this.assets.ctrlPanelBackground.image.height) {\r\n            // Shift up to fit\r\n            preferredRenderLocation.y = this.canvas.height / cvsScaleFactor - this.assets.ctrlPanelBackground.image.height;\r\n        }\r\n\r\n        return new SignalCtrlPanel(tile, nearestSignal, this.assets, preferredRenderLocation.x, preferredRenderLocation.y);\r\n    }\r\n\r\n    public ResetLevel() {\r\n        this.cars = [];\r\n        for(const spawn of this.level.spawns) {\r\n            if(spawn.color >= 0) {\r\n                this.cars.push(new Car(\r\n                    spawn.color, \r\n                    this.assets.carImageAtlas.getSprite(\r\n                        new Point(CAR_SIZE * (spawn.color as number), 0),\r\n                        CAR_SIZE_PT,\r\n                        new Point(0.5, 0.5)\r\n                    ), \r\n                    TileAnchorHelper.EquivalentPosition({\r\n                        position: new Point(spawn.position.x, spawn.position.y),\r\n                        anchor: spawn.direction\r\n                    }), \r\n                    this.assets));\r\n            }\r\n            else {\r\n                this.cars.push(new Car(\r\n                    spawn.color, \r\n                    this.assets.carImageAtlas.getSprite(\r\n                        new Point(CAR_SIZE * (3 -(spawn.color as number)), 0),\r\n                        CAR_SIZE_PT,\r\n                        new Point(0.5, 0.5)\r\n                    ), \r\n                    TileAnchorHelper.EquivalentPosition({\r\n                        position: new Point(spawn.position.x, spawn.position.y),\r\n                        anchor: spawn.direction\r\n                    }), \r\n                    this.assets));\r\n            }\r\n        }\r\n        this.updateCars();\r\n    }\r\n\r\n    public updateCars() {\r\n        // Update all cars next positions\r\n        for(const car of this.cars) {\r\n            car.LogicTick();\r\n\r\n            if(car.isCrashed()) continue;\r\n            if(car.nextPosition !== undefined) {\r\n                car.position = car.nextPosition;\r\n            }\r\n            car.nextPosition = car.CalculateNextPosition(this);\r\n        }\r\n\r\n        for(const [pos, checkColis] of customGroupBy(this.cars, car => car.position.position, (p1, p2) => p1.x === p2.x && p1.y === p2.y)) {\r\n            for(let i = 0; i < checkColis.length; i++) {\r\n                for(let j = i + 1; j < checkColis.length; j++) {\r\n                    if(this.map[pos.x][pos.y].CheckColisions(checkColis[i], checkColis[j])) {\r\n                        checkColis[i].crashHere();\r\n                        checkColis[j].crashHere();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(const car of this.cars) {\r\n            if(car.nextPosition === undefined) continue;\r\n            const equivPoint = TileAnchorHelper.EquivalentPosition(car.nextPosition);\r\n\r\n            for(const otherCar of this.cars) {\r\n                if(car === otherCar || otherCar.nextPosition === undefined) continue;\r\n                if(equivPoint.anchor === otherCar.nextPosition.anchor && equivPoint.position.Equals(otherCar.nextPosition.position)) {\r\n                    car.crashAt(car.nextPosition);\r\n                    otherCar.crashAt(otherCar.nextPosition);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, interpPercent: number) {\r\n        for(const car of this.cars) {\r\n            car.EveryTick();\r\n        }\r\n\r\n        for(let dx = 0; dx < this.map.length; dx++) {\r\n            for(let dy = 0; dy < this.map[dx].length; dy++) {\r\n                if(this.map[dx][dy] !== null) {\r\n                    this.map[dx][dy].draw(ctx, dx, dy, this.assets);\r\n                }\r\n            }\r\n        }\r\n\r\n        const overdrawCars: Car[] = [];\r\n\r\n        for(const car of this.cars) {\r\n            const mapTile = this.map[car.position.position.x][car.position.position.y];\r\n            const fromAnchor = car.position.anchor;\r\n            const toAnchor = car.nextPosition?.anchor;\r\n            const checkOverdrawPos = [\r\n                car.position, car.nextPosition,\r\n                TileAnchorHelper.EquivalentPosition(car.position), TileAnchorHelper.EquivalentPosition(car.nextPosition)\r\n            ];\r\n\r\n            if(any(checkOverdrawPos, coords => \r\n                coords !== undefined && this.map[coords.position.x][coords.position.y].overdrawAnchors.indexOf(coords.anchor) !== -1\r\n            ))\r\n            {\r\n                overdrawCars.push(car);\r\n                continue;\r\n            }\r\n\r\n            car.draw(ctx, interpPercent, mapTile.GetPositionAdjust(fromAnchor, toAnchor, interpPercent));\r\n        }\r\n        \r\n\r\n        for(let dx = 0; dx < this.map.length; dx++) {\r\n            for(let dy = 0; dy < this.map[dx].length; dy++) {\r\n                if(this.map[dx][dy] !== null) {\r\n                    this.map[dx][dy].overdraw(ctx, dx, dy, this.assets);\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(const car of overdrawCars) {\r\n            const mapTile = this.map[car.position.position.x][car.position.position.y];\r\n            const fromAnchor = car.position.anchor;\r\n            const toAnchor = car.nextPosition?.anchor;\r\n            car.draw(ctx, interpPercent, mapTile.GetPositionAdjust(fromAnchor, toAnchor, interpPercent));\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"92b0680d8018abdf6ab4dce2cb8e7f4d.png\";","export default __webpack_public_path__ + \"40546b074d24707026ba482019c4d3b4.png\";","export default __webpack_public_path__ + \"068a4cb9e7cd5cde1c23e8fb17e230c2.png\";","export default __webpack_public_path__ + \"48175440e29eba81547fb6a3aae3f6ea.png\";","export default __webpack_public_path__ + \"c8060df9573385c396cd3cb0a91f4424.png\";","export default __webpack_public_path__ + \"f50a8f7fc9e146163272568decddbc2a.png\";","export default __webpack_public_path__ + \"560f633704b347d793db51e0a3fb7475.png\";","export default __webpack_public_path__ + \"dbe0d35db913eb26c862f06ff1aad1b0.png\";","export default __webpack_public_path__ + \"41279bc0b13b415202281fa495c04151.png\";","import { AnimationPlayCondition, IJsonAnimationInfo } from \"./assets/leveldata/IJsonAnimationInfo\";\r\nimport ECarColor from \"./ECarColor\";\r\n\r\nexport default class CarAnimationControl {\r\n    animations: {\r\n        [key in AnimationPlayCondition]?: IJsonAnimationInfo\r\n    };\r\n\r\n    constructor(public color: ECarColor) {\r\n        this.animations = {};\r\n    }\r\n\r\n    addAnimation(animation: IJsonAnimationInfo) {\r\n        if(typeof(animation.conditions) === 'string') {\r\n            this.animations[animation.conditions] = animation;\r\n        }\r\n        else {\r\n            for(const key of animation.conditions) {\r\n                this.animations[key] = animation;\r\n            }\r\n        }\r\n    }\r\n}","import gridlockTrackUrl from './gridlocktrack.png';\r\nimport carUrl from './cars.png';\r\nimport signalArrowUrl from './signal_arrows.png';\r\nimport signalHubUrl from './signal_hub.png';\r\nimport ctrlpanelUrl from './gridlock_ctrlpanel.png';\r\nimport fireUrl from './fire.png';\r\nimport ctrlpanelElementUrl from './control_uielements.png';\r\nimport carAnimationsUrl from './gray_anim.png';\r\nimport spawnRingUrl from './gridlock_spawns.png';\r\nimport { AtlasSprite, SpriteAtlas } from '../../common/assets/SpriteAtlas';\r\nimport ImageLoader from '../../common/assets/ImageLoader';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport AssetLoader from '../../common/assets/AssetLoader';\r\nimport { SpriteAnimation } from '../../common/assets/SpriteAnimation';\r\nimport Point from '../../common/position/Point';\r\nimport { ATLAS_WIDTH, TILE_SIZE_PT, TILE_SIZE } from '../Constants';\r\nimport ECarColor, { AllCarColors } from '../ECarColor';\r\nimport CarAnimationControl from '../CarAnimationControl';\r\nimport animationJson from './leveldata/animations.json';\r\nimport { IJsonAnimationInfo } from './leveldata/IJsonAnimationInfo';\r\n\r\nexport default class Assets {\r\n    public trackImageAtlas: SpriteAtlas;\r\n    public carImageAtlas: SpriteAtlas;\r\n    public signalHubSheet: SpriteSheet;\r\n    public signalArrowsImage: SpriteSheet;\r\n    public ctrlPanelBackground: ImageLoader;\r\n    public ctrlPanelElements: SpriteAtlas;\r\n    public spawnRingSheet: SpriteSheet;\r\n    public carAnimations: SpriteAtlas;\r\n    public fire: SpriteAnimation;\r\n\r\n    public animationControllers: {\r\n        [key in ECarColor]: CarAnimationControl\r\n    };\r\n    \r\n    constructor(loader: AssetLoader) {\r\n        this.trackImageAtlas = new SpriteAtlas(gridlockTrackUrl, loader.registerAssetLoadCallback());\r\n        this.carImageAtlas = new SpriteAtlas(carUrl, loader.registerAssetLoadCallback());\r\n        this.signalArrowsImage = new SpriteSheet(6, 6, signalArrowUrl, loader.registerAssetLoadCallback());\r\n        this.signalHubSheet = new SpriteSheet(6, 6, signalHubUrl, loader.registerAssetLoadCallback());\r\n        this.ctrlPanelBackground = new ImageLoader(ctrlpanelUrl, loader.registerAssetLoadCallback());\r\n        this.ctrlPanelElements = new SpriteAtlas(ctrlpanelElementUrl, loader.registerAssetLoadCallback());\r\n        this.spawnRingSheet = new SpriteSheet(48, 48, spawnRingUrl, loader.registerAssetLoadCallback());\r\n        this.carAnimations = new SpriteAtlas(carAnimationsUrl, loader.registerAssetLoadCallback());\r\n        this.fire = new SpriteAnimation(new SpriteAtlas(fireUrl, loader.registerAssetLoadCallback()), new Point(0,0), new Point(8, 16), 4);\r\n\r\n        this.animationControllers = <any>{};\r\n        \r\n        for(const carColor of AllCarColors) {\r\n            this.animationControllers[carColor] = new CarAnimationControl(carColor);\r\n        }\r\n\r\n        for(const animation of animationJson) {\r\n            this.animationControllers[<ECarColor> animation.carType].addAnimation(<IJsonAnimationInfo> animation);\r\n        }\r\n    }\r\n\r\n    getTrackSprite(tileId: number): AtlasSprite {\r\n        const tx = tileId % ATLAS_WIDTH;\r\n        const ty = Math.floor(tileId / ATLAS_WIDTH);\r\n        return this.trackImageAtlas.getSprite(\r\n            new Point(tx * TILE_SIZE, ty * TILE_SIZE),\r\n            TILE_SIZE_PT\r\n        );\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { NearestNeighborScaling, ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport GameState from \"./GameState\";\r\nimport levelsJson from './assets/leveldata/levels.json';\r\nimport ILevelData from \"./ILevelData\";\r\nimport Assets from \"./assets\";\r\nimport Point from \"../common/position/Point\";\r\nimport SignalCtrlPanel from \"./signalCtrl/signalCtrlPanel\";\r\nimport { TILE_SIZE } from \"./Constants\";\r\n\r\nconst NUM_INTERP_FRAMES = 40;\r\n\r\nconst MAX_CVS_WIDTH = 1024;\r\nconst MAX_CVS_HEIGHT = 1024;\r\n\r\nvar NextRunnerId = 0;\r\n\r\nexport default class Runner {\r\n    ctx: CanvasRenderingContext2D;\r\n    private repaintTimer: number;\r\n    private assets: Assets;\r\n    private boundEventListener: (ev: MouseEvent) => void;\r\n\r\n    gameState: GameState;\r\n    interpFrameCount: number;\r\n\r\n    isRunning: boolean;\r\n\r\n    overlay: SignalCtrlPanel | undefined;\r\n\r\n    private runnerID: number;\r\n\r\n    private isDestroyed: boolean;\r\n    private canvasScale: number;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        this.runnerID = NextRunnerId++;\r\n        console.log(`Create runner ${this.runnerID}`);\r\n        ResizeCanvas(canvas, 512 * 2, 384 * 2);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.ctx.save();\r\n        this.repaintTimer = -1;\r\n        this.interpFrameCount = 0;\r\n        this.isRunning = false;\r\n        this.isDestroyed = false;\r\n\r\n        this.boundEventListener = this.handleMouseEvent.bind(this);\r\n        this.overlay = undefined;\r\n\r\n        canvas.addEventListener('click', this.boundEventListener);\r\n    }\r\n\r\n    handleKeyEvent(ev: KeyboardEvent): boolean {\r\n        if(ev.key === 'escape') {\r\n            this.overlay = undefined;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleMouseEvent(ev: MouseEvent) {\r\n        if(this.isRunning) return;\r\n        const relCoords = new Point(ev.offsetX / this.canvasScale, ev.offsetY / this.canvasScale);\r\n        if(!(this.overlay?.tryHandleClick(relCoords.x, relCoords.y) ?? false)) {\r\n            this.overlay = this.gameState.tryGetOverlay(relCoords, this.canvasScale);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        const loader = new AssetLoader();\r\n        this.assets = new Assets(loader); \r\n        loader.onAllFinished(this.loadComplete.bind(this));\r\n    }\r\n\r\n    toggleRunning() {\r\n\r\n        this.gameState.ResetLevel();\r\n        this.interpFrameCount = 0;\r\n        this.isRunning = !this.isRunning;\r\n        \r\n        this.overlay = undefined;\r\n    }\r\n\r\n    loadLevel(level: ILevelData) {\r\n        console.log('LOAD');\r\n        \r\n        this.ctx.restore();\r\n        this.ctx.save();\r\n        \r\n        const levelWidth = level.width * TILE_SIZE;\r\n        const levelHeight = level.height * TILE_SIZE;\r\n        \r\n        console.log(`${levelWidth * 2}, ${MAX_CVS_WIDTH}`);\r\n        if(levelWidth * 2 <= MAX_CVS_WIDTH && levelHeight * 2 <= MAX_CVS_HEIGHT) {\r\n            ResizeCanvas(this.canvas, levelWidth * 2, levelHeight * 2);\r\n            NearestNeighborScaling(this.ctx);\r\n            this.ctx.scale(2, 2);\r\n            this.canvasScale = 2;\r\n        } else {\r\n            ResizeCanvas(this.canvas, levelWidth, levelHeight);\r\n            this.canvasScale = 1;\r\n        }\r\n\r\n        this.gameState = new GameState(level, this.canvas, this.assets);\r\n        this.interpFrameCount = 0;\r\n        this.overlay = undefined;\r\n\r\n    }\r\n\r\n    private loadComplete() {\r\n        this.gameState = new GameState((levelsJson as ILevelData[])[0], this.canvas, this.assets);\r\n        this.loadLevel((levelsJson as ILevelData[])[0]);\r\n        this.runTick();\r\n    }\r\n\r\n    private runTick() {\r\n        if(this.isDestroyed) return;\r\n        this.tick();\r\n        this.draw();\r\n        this.repaintTimer = requestAnimationFrame(this.runTick.bind(this));\r\n    }\r\n\r\n    tick() {\r\n        if(!this.isRunning) {\r\n            this.interpFrameCount = 0;\r\n        }\r\n        else {\r\n            this.interpFrameCount++;\r\n            if(this.interpFrameCount >= NUM_INTERP_FRAMES) {\r\n                this.interpFrameCount = 0;\r\n                this.gameState.updateCars();\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.save();\r\n        this.gameState.draw(this.canvas, this.ctx, this.interpFrameCount / NUM_INTERP_FRAMES);\r\n        this.ctx.restore();\r\n\r\n        if(this.overlay !== undefined) {\r\n            this.overlay.draw(this.ctx);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.repaintTimer !== -1) {\r\n            cancelAnimationFrame(this.repaintTimer);\r\n        }\r\n        this.isDestroyed = true;\r\n        this.canvas.removeEventListener('click', this.boundEventListener);\r\n        console.log(`Destroy runner ${this.runnerID}`);\r\n    }\r\n}","export default __webpack_public_path__ + \"a787dffd8ab2ddec59191932b3f33b53.png\";","import * as React from 'react';\r\nimport { SpriteSheet } from \"../../../projects/common/assets/SpriteSheet\";\r\nimport { ResizeCanvas } from '../../../projects/common/CanvasHelpers';\r\nimport { ATLAS_WIDTH } from '../../../projects/gridlock/Constants';\r\nimport ILevelData from \"../../../projects/gridlock/ILevelData\";\r\n\r\nexport const PREVIEW_TILE_SIZE = 16;\r\n\r\nexport default function GridlockLevelPreviewComponent(props: { level: ILevelData, previewSheet: SpriteSheet, onClick?: (ev: MouseEvent) => void}) {\r\n    const ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        if(ref.current === undefined || props.previewSheet === undefined) return;\r\n        ResizeCanvas(ref.current, PREVIEW_TILE_SIZE * props.level.width, PREVIEW_TILE_SIZE * props.level.height);\r\n        const ctx = ref.current.getContext('2d');\r\n        ctx.clearRect(0, 0, PREVIEW_TILE_SIZE * props.level.width, PREVIEW_TILE_SIZE * props.level.height);\r\n        let mapDataIndex = 0;\r\n        for(var dy = 0; dy < props.level.height; dy++) {\r\n            for(var dx = 0; dx < props.level.width; dx++) {\r\n                const mapData = props.level.mapdata[mapDataIndex++];\r\n                const atlasX = Math.floor(mapData % ATLAS_WIDTH);\r\n                const atlasY = Math.floor(mapData / ATLAS_WIDTH);\r\n\r\n                props.previewSheet.render(ctx, PREVIEW_TILE_SIZE * dx, PREVIEW_TILE_SIZE * dy, PREVIEW_TILE_SIZE, PREVIEW_TILE_SIZE, atlasX, atlasY);\r\n            }\r\n        }\r\n    }, [ref.current])\r\n\r\n    return <div className='flex row align-center' style={{border: '1px solid black', padding: '0 0 0 8px'}} onClick={ev => props.onClick(ev.nativeEvent)}>\r\n        <span>{props.level.id}: {props.level.name}</span>\r\n        <canvas ref={ref}  />\r\n    </div>;\r\n}","import * as React from 'react';\r\nimport Runner from '../../../projects/gridlock/Runner';\r\nimport levelJson from '../../../projects/gridlock/assets/leveldata/levels.json';\r\nimport previewUrl  from '../../../projects/gridlock/assets/gridlock_preview.png';\r\nimport ILevelData from \"../../../projects/gridlock/ILevelData\";\r\nimport useLoader from '../../../hooks/useLoader';\r\nimport { SpriteSheet } from '../../../projects/common/assets/SpriteSheet';\r\nimport GridlockLevelPreviewComponent, { PREVIEW_TILE_SIZE } from './GridlockLevelPreviewComponent';\r\n\r\nexport default function GridlockComponent() {\r\n    const ref = React.useRef<HTMLCanvasElement>();\r\n    const previewImage = useLoader(onFinish => new SpriteSheet(PREVIEW_TILE_SIZE, PREVIEW_TILE_SIZE, previewUrl, onFinish), []);\r\n    const [runner, setRunner] = React.useState<Runner>(undefined);\r\n    const [showLevels, setShowLevels] = React.useState<boolean>(false);\r\n    \r\n    React.useEffect(()=>{\r\n        if(ref.current === undefined) return;\r\n\r\n        const runner = new Runner(ref.current);\r\n        setRunner(runner);\r\n        runner.start();\r\n        return ()=>runner.stop();\r\n    }, [ref.current, previewImage]);\r\n\r\n    if(previewImage === undefined) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <div className='flex row'>\r\n        <canvas ref={ref} tabIndex={0} onKeyDown={key => {\r\n            if(key.keyCode === 32) {\r\n                runner?.toggleRunning();\r\n                key.preventDefault();\r\n                key.stopPropagation();\r\n            }\r\n            else {\r\n                if(runner?.handleKeyEvent(key.nativeEvent) ?? false)\r\n                {\r\n                    key.preventDefault();\r\n                    key.stopPropagation();\r\n                }\r\n            }\r\n        }} />\r\n        <div className='flex col'>\r\n            <button onClick={ev => {\r\n                if(runner) {\r\n                    runner.toggleRunning();\r\n                }\r\n            }}>Start/Reset</button>\r\n            \r\n            <button onClick={() => setShowLevels(!showLevels)}>{showLevels ? 'Hide Level Select' : 'Show Level Select'}</button>\r\n            {showLevels ? levelJson.map(level => \r\n                <GridlockLevelPreviewComponent key={level.id} level={level} previewSheet={previewImage} onClick={(ev) => {\r\n                    runner?.loadLevel(level);\r\n                    ev.preventDefault();\r\n                    ev.stopImmediatePropagation();\r\n                }} />) : <></>}\r\n        </div>\r\n    </div>;\r\n}\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport AssetLoader from \"../projects/common/assets/AssetLoader\";\r\n\r\nexport default function useLoader<T>(loadItem : (finishCallback: () => void) => T, deps: React.DependencyList) : T | undefined {\r\n    const [state, setState] = useState<T>(undefined);\r\n\r\n    useEffect(() => {\r\n        console.log('Reload item');\r\n        const loader = new AssetLoader();\r\n        const resultItem = loadItem(loader.registerAssetLoadCallback());\r\n        loader.onAllFinished(() => {\r\n            setState(resultItem);\r\n        });\r\n    }, deps);\r\n\r\n    return state;\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { IJsonAnimation } from \"./json/IJsonAnimation\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    static FromJson(atlas: SpriteAtlas, params: IJsonAnimation) : SpriteAnimation {\r\n\r\n        return new SpriteAnimation(atlas, \r\n            new Point(params.sourceOffset[0], params.sourceOffset[1]),\r\n            new Point(params.frameSize[0], params.frameSize[1]),\r\n            params.numFrames,\r\n            params.origin === undefined ? undefined : new Point(params.origin[0], params.origin[1]));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","export default class Rand {\r\n    static Int(): number;\r\n    static Int(maxExclusive: number): number;\r\n    static Int(minInclusive: number, maxExclusive: number): number;\r\n    static Int(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return Math.floor(r * Number.MAX_SAFE_INTEGER);\r\n        } else if(max === undefined) {\r\n            return Math.floor(r * min);\r\n        } else {\r\n            return min + Math.floor(r * (max - min));\r\n        }\r\n    }\r\n    static Float(): number;\r\n    static Float(maxExclusive: number): number;\r\n    static Float(minInclusive: number, maxExclusive: number): number;\r\n    static Float(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return r;\r\n        } else if(max === undefined) {\r\n            return r * min;\r\n        } else {\r\n            return min + (r * (max - min));\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}