{"version":3,"file":"bullets.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/bullets/const.ts","webpack://trading-game/./src/projects/bullets/assets/bullets_entities.png","webpack://trading-game/./src/projects/bullets/assets/Ships.png","webpack://trading-game/./src/projects/bullets/assets/Flares.png","webpack://trading-game/./src/projects/bullets/Player.ts","webpack://trading-game/./src/projects/bullets/ETeam.ts","webpack://trading-game/./src/projects/bullets/GameState.ts","webpack://trading-game/./src/projects/bullets/Effects/SingleExplosion.ts","webpack://trading-game/./src/projects/common/interpolation/TimingFunction.ts","webpack://trading-game/./src/projects/bullets/Effects/Explosion.ts","webpack://trading-game/./src/projects/common/Angle.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack://trading-game/./src/projects/common/position/Line.ts","webpack://trading-game/./src/projects/common/position/Bounds.ts","webpack://trading-game/./src/projects/bullets/Ship.ts","webpack://trading-game/./src/projects/common/assets/AnimationControl.ts","webpack://trading-game/./src/projects/bullets/data/parsing/parsers.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectControl.ts","webpack://trading-game/./src/projects/bullets/Effects/EffectFuncs.ts","webpack://trading-game/./src/projects/bullets/weapons/Weapon.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponGroup.ts","webpack://trading-game/./src/projects/bullets/weapons/WeaponTimer.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack://trading-game/./src/projects/bullets/ai/IDebugMarker.ts","webpack://trading-game/./src/projects/bullets/ai/ShipAI.ts","webpack://trading-game/./src/projects/bullets/ai/BroadsideAI.ts","webpack://trading-game/./src/projects/bullets/ai/FighterAI.ts","webpack://trading-game/./src/projects/bullets/ai/IShipAI.ts","webpack://trading-game/./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack://trading-game/./src/projects/bullets/data/parsing/weapons.ts","webpack://trading-game/./src/projects/bullets/index.ts","webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/assets/SpriteAnimation.ts","webpack://trading-game/./src/projects/common/assets/SpriteAtlas.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Angle.ts","webpack://trading-game/./src/projects/common/position/Point.ts"],"sourcesContent":["export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.multWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.length();\r\n        let vAngle = this.velocity.direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.addWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Point from \"../common/position/Point\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n\r\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\r\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\r\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\r\n        if(maxRange !== undefined) {\r\n            const rangeSq = maxRange * maxRange;\r\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).lengthSq() <= rangeSq);\r\n        }\r\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).lengthSq() }));\r\n        shipsAndRanges.sort((a, b) => a.range - b.range);\r\n        return shipsAndRanges.map(s => s.ship);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.clone();\r\n        realPoint.subtractWith(Point.multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.addWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\nimport { Weapon } from \"./weapons/Weapon\";\r\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    public currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam,\r\n        private weaponGroups: WeaponGroup[]) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].tick(gs, this);\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.addWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].draw(ctx, this);\r\n        }\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n\r\n        this.ai.debugDraw(ctx, this);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { PlayingAnimation } from \"./SpriteAnimation\";\r\nimport { AtlasSprite } from \"./SpriteAtlas\";\r\n\r\nexport class AnimationControl {\r\n    queue: (PlayingAnimation | AtlasSprite)[];\r\n    scaleFactor: Point;\r\n\r\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\r\n        this.queue = [initial];\r\n        if(size === undefined) {\r\n            this.scaleFactor = new Point(1, 1);\r\n        }\r\n        else if(isSprite(initial)) {\r\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\r\n        }\r\n        else {\r\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\r\n        }\r\n    }\r\n\r\n    current(): PlayingAnimation|AtlasSprite {\r\n        return this.queue[0];\r\n    }\r\n\r\n    enqueueFront(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.splice(0, 0, src);\r\n    }\r\n\r\n    play(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue = [src];\r\n    }\r\n\r\n    enqueue(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.push(src);\r\n    }\r\n\r\n    tick() {\r\n        if(isSprite(this.queue[0])) {\r\n            this.advance();\r\n        }\r\n        else {\r\n            if(this.queue[0].tick()) this.advance();\r\n        }\r\n    }\r\n\r\n    advance() {\r\n        if(this.queue.length > 1) {\r\n            this.queue.splice(0, 1);\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\r\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\r\n    }\r\n\r\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\r\n        if(isSprite(src)) return Point.multiply(src.sourceSize, this.scaleFactor);\r\n        else return Point.multiply(src.source.sourceSize, this.scaleFactor);\r\n    }\r\n}\r\n\r\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\r\n    return (<AtlasSprite>src).origin !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport Point from \"../../../common/position/Point\";\r\nimport { Range } from '../../../common/Range';\r\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\r\n\r\nexport function parseJsonPoint(jpt: [number, number]) {\r\n    return new Point(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonRange(jpt: [number, number]) {\r\n    return new Range(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonAngle(input: number) {\r\n    return input * Math.PI * 2;\r\n}\r\n\r\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\r\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\r\n}\r\n\r\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\r\n    return atlases[anim.file].getAnimation(\r\n        parseJsonPoint(anim.imgOffset),\r\n        parseJsonPoint(anim.frameSize),\r\n        parseJsonPoint(anim.origin),\r\n        anim.numFrames\r\n    );\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { CreateEffect } from \"./EffectFuncs\";\r\n\r\nexport default class EffectControl {\r\n    public effects: IEffect[];\r\n    constructor() {\r\n        this.effects = [];\r\n    }\r\n\r\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\r\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\r\n    }\r\n\r\n    tick() {\r\n        for(let i = this.effects.length - 1; i >= 0; i --) {\r\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.effects.length; i++) {\r\n            this.effects[i].draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { parseJsonRange } from \"../data/parsing/parsers\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Explosion } from \"./Explosion\";\r\n\r\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\r\n    switch(effect.type) {\r\n        case \"explosion\":\r\n            return new Explosion(pt, \r\n                parseJsonRange(effect.burstXVariance),\r\n                parseJsonRange(effect.burstYVariance),\r\n                parseJsonRange(effect.numBursts),\r\n                effect.burstDelay,\r\n                parseJsonRange(effect.burstLifetime),\r\n                parseJsonRange(effect.burstOuterRadius));\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\r\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport EffectControl from \"../Effects/EffectControl\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\r\n\r\nexport interface IWeaponArgs {\r\n    offset: Point;\r\n    sprite?: AtlasSprite;\r\n    shootAnimation?: ISpriteAnimationArgs;\r\n    shootEffect?: IJsonEffect;\r\n\r\n    rotation: number;\r\n\r\n    turret?: {\r\n        maxAngle: number;\r\n        turnRate: number;\r\n    }\r\n\r\n    acquisitionAngle: number;\r\n    minRange?: number;\r\n    range: number;\r\n}\r\n\r\nexport class Weapon {\r\n    turretAngle: number;\r\n    actualAnchor: Point;\r\n    imgControl ?: AnimationControl;\r\n    effects: EffectControl;\r\n\r\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\r\n        this.turretAngle = 0;\r\n        this.actualAnchor = this.args.offset.clone();\r\n        this.actualAnchor.subtractWith(Point.multiply(shipDef.origin, shipDef.size));\r\n        if(args.sprite !== undefined) {\r\n            this.imgControl = new AnimationControl(args.sprite);\r\n        }\r\n        this.effects = new EffectControl();\r\n    }\r\n\r\n    getWeaponLocation(ship: Ship): Point {\r\n        const result = this.actualAnchor.rotate(ship.rotation);\r\n        result.addWith(ship.position);\r\n        return result;\r\n    }\r\n    getWeaponAnchorAngle(ship: Ship) {\r\n        return this.args.rotation + ship.rotation;\r\n    }\r\n    getWeaponCurrentAngle(ship: Ship) {\r\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\r\n    }\r\n\r\n    /**\r\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\r\n     */\r\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\r\n\r\n        this.effects.tick();\r\n        this.imgControl?.tick();\r\n\r\n        const location = this.getWeaponLocation(self);\r\n\r\n        // Filter down targets to those in range\r\n        possibleTargets = possibleTargets.filter(p => {\r\n            const pDist = Point.subtract(p, location).lengthSq();\r\n            return (\r\n                (this.args.minRange === undefined || \r\n                    (pDist > this.args.minRange * this.args.minRange)\r\n                ) &&\r\n                (pDist < this.args.range * this.args.range)\r\n            );\r\n        });\r\n\r\n        if(this.args.turret === undefined) {\r\n            if(possibleTargets.length === 0) return null; // No target in range.\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n\r\n            // I have no turret, fire if anyone is in spray range\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                // Find absolute direction to target\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).direction();\r\n                // Find angle to target relative to turret anchor angle\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                // Check if relAngle is less than the spray angle (he's in range)\r\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\r\n                    return possibleTargets[i];\r\n            }\r\n            return null;\r\n        }\r\n        else {\r\n            if(possibleTargets.length === 0) {\r\n                // No targets. Return to angle 0.\r\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\r\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\r\n                return null;\r\n            }\r\n\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n            const angle = this.getWeaponCurrentAngle(self);\r\n\r\n            let target: Point | null = null;\r\n            let targetAngle: number = 0;\r\n            let targetTurretAngle: number = 0;\r\n            let targetAbsoluteAngle: number = 0;\r\n\r\n            // Choose the target closest to anchor angle\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).direction();\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\r\n                    target = possibleTargets[i];\r\n                    targetAngle = turretRelAngle;\r\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\r\n                        // Target is outside of firing arc, we'll need to aim as close as possible\r\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\r\n                        targetAbsoluteAngle = angleToTarget;\r\n                    } else {\r\n                        // If we choose this target, we'll aim right at them\r\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\r\n                    }\r\n                }\r\n            }\r\n            // target is not null. If it was, we'd've exited earlier.\r\n            // Turn gun towards target\r\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\r\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\r\n                this.turretAngle += turretRelAngle;\r\n            }\r\n\r\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\r\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\r\n\r\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\r\n            else return null;\r\n        }\r\n    }\r\n\r\n    /** TODO: SHOOT */\r\n    shoot(gs: GameState, self: Ship) {\r\n        // Play the shoot animation, if necessary\r\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\r\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\r\n            this.imgControl.enqueue(this.args.sprite);\r\n        }\r\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\r\n        if(this.imgControl === undefined) return;\r\n        const realPoint = this.getWeaponLocation(ship);\r\n        let realRot = this.getWeaponCurrentAngle(ship);\r\n        this.imgControl.render(ctx, realPoint, realRot);\r\n        this.effects.draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\r\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\r\n\r\nexport interface IWeaponGroupArgs {\r\n    timer: IWeaponTimingArgs,\r\n    weapons: IWeaponArgs[],\r\n    burstAll?: boolean\r\n}\r\n\r\nexport class WeaponGroup {\r\n    burstAllWeapons: boolean;\r\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\r\n        this.burstAllWeapons = burstAllWeapons ?? true;\r\n    }\r\n\r\n    /** Call once per tick, makes all turrets attempt to acquire targets\r\n     * @returns the number of weapons which have acquired targets\r\n     */\r\n    acquireTargets(ship: Ship, targets: Ship[]): number {\r\n        let acqCount = 0;\r\n        for(let i = 0; i < this.weapons.length; i++){\r\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\r\n                acqCount++;\r\n            }\r\n        }\r\n        return acqCount;\r\n    }\r\n\r\n    tick(gs: GameState, self: Ship) {\r\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\r\n        const acq = this.acquireTargets(self, targets);\r\n\r\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\r\n    }\r\n\r\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\r\n        if(!this.burstAllWeapons) {\r\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\r\n        } else {\r\n            for(let i = 0; i < this.weapons.length; i++) {\r\n                this.weapons[i].shoot(gs, ship);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\r\n        for(let i = 0; i < this.weapons.length; i++) {\r\n            this.weapons[i].render(ctx, self);\r\n        }\r\n    }\r\n}","export interface IWeaponTimingArgs {\r\n    reloadTime: number;\r\n\r\n    burstCount: number;\r\n    burstDelay: number;\r\n\r\n    shotsPerBurst: number;\r\n}\r\n\r\nexport class WeaponTimer implements IWeaponTimingArgs {\r\n    public reloadTime: number; \r\n    public burstCount: number;\r\n    public burstDelay: number; \r\n    public shotsPerBurst: number;\r\n\r\n    private currentlyShooting: boolean;\r\n\r\n    public currentReload: number;\r\n    public currentBurstDelay: number;\r\n    public currentBurstIndex: number;\r\n\r\n    constructor(args: IWeaponTimingArgs) {\r\n        Object.assign(this, args);\r\n        this.currentlyShooting = false;\r\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\r\n    }\r\n\r\n    isShooting(): boolean {\r\n        return this.currentlyShooting;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this.currentlyShooting && this.currentReload === 0;\r\n    }\r\n\r\n    shoot(): boolean {\r\n        if(this.canShoot()){\r\n            this.currentlyShooting = true;\r\n            this.currentReload = this.reloadTime;\r\n            this.currentBurstDelay = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\r\n        if(shouldShoot) this.shoot();\r\n        if(this.currentlyShooting) {\r\n            if(this.currentBurstDelay === 0) {\r\n                // Fire burst\r\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\r\n                    onShoot(this.currentBurstIndex, shell);\r\n                }\r\n                this.currentBurstIndex++;\r\n                if(this.currentBurstIndex === this.burstCount) {\r\n                    // Done burst! Reset and start reload\r\n                    this.currentReload = this.reloadTime;\r\n                    this.currentBurstIndex = 0;\r\n                    this.currentlyShooting = false;\r\n                } else {\r\n                    this.currentBurstDelay = this.burstDelay;\r\n                }\r\n            } else {\r\n                // Timedown for burst\r\n                this.currentBurstDelay --;\r\n            }\r\n        } else if (this.currentReload !== 0) {\r\n            // Timedown for reload\r\n            this.currentReload--;\r\n        }\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { Weapon } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\r\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public weapons: IWeaponGroupArgs[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(\r\n            this,\r\n            position,\r\n            rotation ?? 0,\r\n            this.buildAi(),\r\n            team,\r\n            this.weapons.map(\r\n                jsonWeaponGroup => new WeaponGroup(\r\n                    new WeaponTimer(jsonWeaponGroup.timer),\r\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\r\n                    jsonWeaponGroup.burstAll\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n","import Point from \"../../common/position/Point\";\r\n\r\nexport interface IDebugMarker {\r\n    draw(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class DebugPoint implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugCross implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\r\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugPlus implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y - radius);\r\n        ctx.lineTo(this.point.x, this.point.y + radius);\r\n        ctx.moveTo(this.point.x - radius, this.point.y);\r\n        ctx.lineTo(this.point.x + radius, this.point.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugRay implements IDebugMarker {\r\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\r\n        ctx.lineTo(tgt.x, tgt.y)\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugLine implements IDebugMarker {\r\n    constructor(public point: Point, public point2: Point, public color?: string) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        ctx.lineTo(this.point2.x, this.point2.y)\r\n        ctx.stroke();\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\r\n\r\nexport abstract class ShipAI {\r\n    markers: IDebugMarker[];\r\n    doDebug: boolean;\r\n    constructor(args ?: { debug?: boolean }) {\r\n        this.markers = [];\r\n        this.doDebug = args?.debug ?? false;\r\n    }\r\n\r\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n\r\n    debug(debug: IDebugMarker) {\r\n        if(!this.doDebug) return;\r\n        this.markers.push(debug);\r\n    }\r\n    debugPoint(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPoint(pt, color, radius));\r\n    }\r\n    debugCross(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugCross(pt, color, radius));\r\n    }\r\n    debugPlus(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPlus(pt, color, radius));\r\n    }\r\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\r\n        this.debug(new DebugRay(pt, angle, color, dist));\r\n    }\r\n    debugLine(pt: Point, pt2: Point, color?:string) {\r\n        this.debug(new DebugLine(pt, pt2, color));\r\n    }\r\n\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\r\n        if(this.markers.length === 0) return;\r\n        for(let i = 0; i < this.markers.length; i++) {\r\n            this.markers[i].draw(ctx);\r\n        }\r\n        this.markers = [];\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\r\nimport { IShipAI } from \"./IShipAI\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport interface IBroadsideAiArgs {\r\n    minDistance: number,\r\n    maxDistance: number,\r\n    orbitSpeed: number,\r\n    debug: boolean\r\n}\r\nconst defaultArgs = {\r\n    minDistance: 100,\r\n    maxDistance: 500,\r\n    orbitSpeed: 0.5,\r\n    debug: false,\r\n}\r\nexport default class BroadsideAI extends ShipAI {\r\n    private args: IBroadsideAiArgs;\r\n    constructor(args: Partial<IBroadsideAiArgs>) {\r\n        super(args);\r\n        this.args = { ...defaultArgs, ...args };\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const targetLocation = gs.Player.position;\r\n        const toLocation = Point.subtract(targetLocation, ship.position);\r\n        const currentHeading = ship.rotation;\r\n        const inwardHeading = toLocation.direction();\r\n        const tangentHeadings = [\r\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\r\n            Angle.normalize(inwardHeading + (Math.PI / 2))\r\n        ];\r\n\r\n        if(toLocation.lengthSq() < this.args.minDistance * this.args.minDistance) {\r\n            const fleeHeadings = [\r\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\r\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\r\n            ];\r\n            const orbitDist = this.args.minDistance;\r\n            // Run away, but look for a tangent\r\n            this.debugPoint(targetLocation, 'orange', orbitDist);\r\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugLine(ship.position, tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else if (toLocation.lengthSq() > this.args.maxDistance * this.args.maxDistance) {\r\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\r\n            // Close the gap\r\n            this.debugPoint(targetLocation, undefined, orbitDist);\r\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugPoint(tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else {\r\n            // Orbit\r\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\r\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\r\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\r\n            return { \r\n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \r\n                tgtHeading: betterHeading\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\r\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\r\n    let minHeading = relativeHeadings[0];\r\n    let actualTarget = targetHeadings[0];\r\n    for(let i = 1; i < relativeHeadings.length; i++) {\r\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\r\n            minHeading = relativeHeadings[i];\r\n            actualTarget = targetHeadings[i];\r\n        }\r\n    }\r\n    return actualTarget;\r\n}","import Angle from \"../../common/Angle\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport default class FigherAI extends ShipAI {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\r\n        var target = nearest[0];\r\n\r\n        if(target === undefined) {\r\n            // Nothing to do, no ships.\r\n            return {tgtHeading: 0, tgtVel: 0};\r\n        }\r\n\r\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\n\r\nexport interface IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\r\n}\r\n\r\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\r\n    fighter: (args) => new FigherAI(),\r\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { ShipDefinition } from \"./ShipDefinition\";\r\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\r\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\nimport { AllAIGenerators } from \"../ai/IShipAI\";\r\nimport { IWeaponArgs } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\r\nimport INamedCollection from \"../../common/INamedCollection\";\r\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\r\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\r\n\r\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\r\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\r\n    for(let key in json.animations) {\r\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\r\n    }\r\n    return json.ships.map(def => \r\n        parseShipDefinition(def, animationData, imgAtlases)\r\n    );\r\n}\r\n\r\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\r\n\r\n        parsedFlares.push(new FlareDefinition(\r\n            animation,\r\n            parseJsonPoint(flare.offset),\r\n            parseJsonAngle(flare.rotation),\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    const aiFunc = AllAIGenerators[def.ai];\r\n    const aiGen = () => aiFunc(def.aiParams);\r\n\r\n    return new ShipDefinition(\r\n        imgAtlases[def.sprite.file],\r\n        parseJsonPoint(def.size),\r\n        parseJsonPoint(def.sprite.srcOffset),\r\n        parseJsonPoint(def.sprite.srcSize),\r\n        parseJsonPoint(def.sprite.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        def.weaponGroups.map(group => \r\n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\r\n        aiGen\r\n    );\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\r\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\r\n\r\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\r\n    return {\r\n        timer: json.timer,\r\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\r\n        burstAll: json.burstAll\r\n    }\r\n}\r\n\r\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\r\n    if(isWeapon(json)) {\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(json.sprite !== undefined) {\r\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: json.turret,\r\n            acquisitionAngle: json.acquisitionAngle,\r\n            minRange: json.minRange,\r\n            range: json.range\r\n        };\r\n    }\r\n    else {\r\n        const def = defs[json.definition];\r\n        if(def === undefined) {\r\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\r\n        }\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(def.sprite !== undefined) {\r\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: def.turret,\r\n            acquisitionAngle: def.acquisitionAngle,\r\n            minRange: def.minRange,\r\n            range: def.range\r\n        };\r\n    }\r\n}\r\n\r\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\r\n    return (<any>json).range !== undefined;\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\r\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\r\nimport INamedCollection from '../common/INamedCollection';\r\n\r\nlet atlases: INamedCollection<SpriteAtlas>;\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    atlases = {\r\n        \"Ships\": shipAtlas,\r\n        \"Flares\": flareAtlas\r\n    };\r\n\r\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\r\n}\r\n\r\nfunction loadJson(entitySheet: SpriteSheet){\r\n    import(\r\n        /* webpackChunkName: \"bullets-ship-definitions\" */\r\n        './data/shipDefinitions.json'\r\n    ).then(value => {\r\n        console.log('Got shipDefinitions.json');\r\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\r\n        onLoadDone(entitySheet, definitions);\r\n    });\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\r\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { IJsonAnimation } from \"./json/IJsonAnimation\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    static FromJson(atlas: SpriteAtlas, params: IJsonAnimation) : SpriteAnimation {\r\n\r\n        return new SpriteAnimation(atlas, \r\n            new Point(params.sourceOffset[0], params.sourceOffset[1]),\r\n            new Point(params.frameSize[0], params.frameSize[1]),\r\n            params.numFrames,\r\n            params.origin === undefined ? undefined : new Point(params.origin[0], params.origin[1]));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\r\nimport { InterpolationFunction } from \"./InterpolationFunction\";\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n\r\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\r\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}\r\n\r\nexport class LinkedInterpolation<T> {\r\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\r\n\r\n    }\r\n\r\n    sample(): T {\r\n        return this.timer.sample(this.interp);\r\n    }\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(typeof(interpolator) !== 'function') {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        if(p === 0) return a;\r\n        if(p === 1) return b;\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}"],"names":["Player","constructor","sprites","this","position","Point","velocity","angularVelocity","rotation","engineDeflect","tgtDeflect","tick","keys","isKeyDown","isEngineOn","Math","min","max","vDirection","atan2","y","x","diffDir","Angle","diffPerc","PI","friction","abs","multWith","cos","sin","vTotal","length","vAngle","direction","anglePullAmt","addWith","render","ctx","save","rotrender","floor","random","restore","ETeam","GameState","player","Entities","neutral","ally","enemy","Effects","update","i","splice","updateEntities","entities","draw","drawEntities","findNearestShips","originPoint","team","maxRange","ships","undefined","filter","item","currentHp","rangeSq","s","lengthSq","shipsAndRanges","map","ship","range","sort","a","b","SingleExplosion","outerRadius","innerRadius","fillColor","totalTime","timing","outer","sample","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","p","pi","pc","Explosion","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","Interpolated","Color","anyStillRunning","angle","norm","normalize","from","to","relativeNormalize","EFlareConditions","Line","start","end","ray","midpoint","interpolate","denom","parallelIntersection","percentA","percentB","basis","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","Bounds","size","origin","getVertecies","relativePoints","dist","getEdges","idx","arr","findLineIntersection","line","edges","minLinePerc","colision","intersection","Ship","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","getBounds","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","getTeam","AnimationControl","initial","queue","scaleFactor","isSprite","sourceSize","source","current","enqueueFront","src","play","enqueue","push","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","numFrames","EffectControl","effects","spawnEffect","effectArgs","effect","type","CreateEffect","Weapon","args","shipDef","turretAngle","actualAnchor","offset","subtractWith","imgControl","getWeaponLocation","result","rotate","getWeaponAnchorAngle","getWeaponCurrentAngle","self","possibleTargets","location","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shoot","shootAnimation","animation","shootEffect","realPoint","realRot","WeaponGroup","timer","weapons","burstAllWeapons","acquireTargets","targets","acqCount","acq","bi","onShoot","burstIndex","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","isShooting","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","ShipDefinition","atlas","srcPoint","turnAccel","buildAi","getSprite","buildShip","jsonWeaponGroup","w","burstAll","FlareDefinition","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","DebugRay","tgt","DebugLine","point2","ShipAI","markers","doDebug","debug","debugPoint","debugCross","debugPlus","debugRay","debugLine","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","BroadsideAI","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","tgtPoints","tangent","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","FigherAI","deltaHeading","AllAIGenerators","fighter","broadside","buildAllDefinitions","json","imgAtlases","animationData","key","animations","def","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","defs","weaponJson","isWeapon","console","error","parseWeaponDefinition","parseWeaponGroupDefinition","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","value","log","definitions","canvas","document","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","repaintLoop","onLoadDone","loadJson","gameState","fillRect","focusPoint","translate","bg_line_size","ty","tx","repaint","requestAnimationFrame","vals","h","v","hsv","rgb","r","g","reqRgb","reqHsv","componentToRgb","n","k","calcRgb","calcHsv","mx","mn","toByte","component","SpriteAnimation","sourceOffset","params","frame","scale","drawImage","image","loop","PlayingAnimation","maxTime","currentTime","frameNumber","spriteUrl","onload","createElement","addEventListener","loadFinished","sourceRotation","AtlasSprite","frameCount","KeyState","changes","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","onKeyDown","onKeyUp","downKeys","change","Update","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","isKeyPressed","isKeyReleased","timingFunction","interpolator","InterpolationTimer","elapsedTime","numberInterpolator","fastColorInterpolator","EvenlySpacedKeyframes","percPer","keyframes","Keyframes","addKeyFrame","time","keyIndex","sampleRange","samplePerc","twoPi","distance","dot","sqrt","negate","negateInPlace","p1","p2","dotWith","other","len","multiply","truncate","trunc","nx","ny","splitArgs","splitArgsOrSingle","divideWith","equals","sy","add","theta","fromAngle"],"sourceRoot":""}