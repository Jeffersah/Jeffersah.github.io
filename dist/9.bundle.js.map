{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/position/Angle.ts","webpack:///./src/utils/rand.ts","webpack:///./src/projects/gridlock/ECarColor.ts","webpack:///./src/projects/gridlock/EAnchorConnectionFlag.ts","webpack:///./src/projects/gridlock/ETileAnchor.ts","webpack:///./src/projects/gridlock/Constants.ts","webpack:///./src/projects/gridlock/Car.ts","webpack:///./src/projects/gridlock/signalCtrl/signalCtrlPanel.ts","webpack:///./src/projects/gridlock/AnchorColisions.ts","webpack:///./src/projects/gridlock/Signal.ts","webpack:///./src/projects/gridlock/tiles/MapTile.ts","webpack:///./src/projects/gridlock/tiles/MapConnections.ts","webpack:///./src/projects/gridlock/tiles/MapTileDefintion.ts","webpack:///./src/projects/gridlock/GameState.ts","webpack:///./src/projects/gridlock/assets/gridlocktrack.png","webpack:///./src/projects/gridlock/assets/cars.png","webpack:///./src/projects/gridlock/assets/signal_arrows.png","webpack:///./src/projects/gridlock/assets/signal_hub.png","webpack:///./src/projects/gridlock/assets/gridlock_ctrlpanel.png","webpack:///./src/projects/gridlock/assets/fire.png","webpack:///./src/projects/gridlock/assets/control_uielements.png","webpack:///./src/projects/gridlock/assets/gray_anim.png","webpack:///./src/projects/gridlock/assets/gridlock_spawns.png","webpack:///./src/projects/gridlock/CarAnimationControl.ts","webpack:///./src/projects/gridlock/assets/index.ts","webpack:///./src/projects/gridlock/Runner.ts","webpack:///./src/projects/gridlock/assets/gridlock_preview.png","webpack:///./src/views/projects/gridlock/GridlockLevelPreviewComponent.tsx","webpack:///./src/views/projects/gridlock/GridlockComponent.tsx","webpack:///./src/hooks/useLoader.ts"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","undefined","splitArgsOrSingle","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","theta","fromAngle","SpriteAtlas","spriteUrl","onload","image","document","createElement","addEventListener","loadFinished","sourceOffset","sourceSize","origin","sourceRotation","AtlasSprite","offset","frameCount","atlas","ctx","position","size","rotation","save","translate","rotate","scale","drawImage","restore","SpriteAnimation","numFrames","params","frameSize","frame","args","loop","animation","PlayingAnimation","maxTime","source","currentTime","frameNumber","floor","draw","twoPi","PI","Angle","relativeNormalize","Rand","r","random","Number","MAX_SAFE_INTEGER","ECarColor","AllCarColors","Red","Green","Yellow","Blue","Gray_Bounce","Gray_TurnLeft","Gray_TurnRight","EAnchorConnectionFlag","ETileAnchor","TileAnchorConnectionMap","RR","RB","RL","RT","BR","BB","BL","BT","LR","LB","LL","LT","TR","TB","TL","TT","HALF_PI","pos","AnchorToTileMove","anchor","ReverseDirection","Right","Bottom","Left","Top","index","GetExitRotation","tileSize","tilePosition","offsetPosition","GetAnchorOffset","AddWith","from","to","AllAnchors","TILE_SIZE_PT","CAR_SIZE_PT","color","sprite","assets","nextPosition","parkedAt","parkAnimationComplete","hasPlayedCrashAnimation","flameRenders","animations","animationControllers","currentAnimationDefinition","crashedAt","isCrashed","startFlames","state","facing","outputs","direction","fwd","indexOf","dt","preffered","flameCount","Int","i","flame","anim","fire","play","ticks","tick","push","tile","map","validOutputs","definition","connections","allConnections","chosen","chooseOutputDirection","isStop","cars","c","crashHere","moveDirection","valid","FindOutputForAlwaysTurn","signalAnchor","TryGetSignal","interpPercent","positionAdjust","fromAnchor","GetRealPosition","tileMidpoint","GetMidpoint","GetEntryRotation","shouldRotate","animInterp","repeatCount","overridesRotation","carAnimations","getSprite","effectiveNext","maxInterp","useInterp","toAnchor","renderPosition","exitAngle","rel","relativeAngle","UICoords","signal","dx","dy","selectedColor","colorButtonUp","ctrlPanelElements","colorButtonDown","sqButtonUp","sqButtonDown","roundButtonUp","roundButtonDown","arrowIndicators","SIGNAL_CTRL_PANEL_SIZE","newColor","clearInstructions","abs","outputDirs","setInstruction","ctrlPanelBackground","console","log","colorButton","carImageAtlas","selectedDir","getInstruction","dir","draw_offgrid","ARROW_DIR","currentSignals","Map","forceInstructions","isDisabled","car","has","get","set","clear","delete","SubtractWith","ARROW_SIZE","hub","arrows","midpoint","render","arrowOffsets","entries","offsetDir","endpointColor","signals","signalDef","overdrawAnchors","tileId","id","forceDisplay","disable","inputDirs","c1","c2","path1","GetConnection","path2","hit","isCrossover","interp","shiftStrength","pow","signalHubSheet","signalArrowsImage","center_offset","spawnRingSheet","spriteWidth","spriteHeight","getTrackSprite","packed","connectionArr","value","fromIndex","AnchorToIndex","toIndex","minIndex","maxIndex","output","connection","packedConnections","signalPerInput","tgtSignal","getSignalOffset","outDir","MultWith","level","canvas","width","col","height","allEndpoints","Array","mapdata","end","endpoints","disableSignals","DisableSignal","signalIndex","forceSignals","ResetLevel","clickLocation","cvsScaleFactor","tilePt","nearestSignal","subtract","getRenderPosition","preferredRenderLocation","spawn","spawns","EquivalentPosition","updateCars","LogicTick","CalculateNextPosition","checkColis","j","CheckColisions","equivPoint","otherCar","Equals","crashAt","EveryTick","overdrawCars","mapTile","checkOverdrawPos","coords","GetPositionAdjust","overdraw","CarAnimationControl","conditions","key","loader","trackImageAtlas","registerAssetLoadCallback","SpriteSheet","ImageLoader","carColor","carType","addAnimation","tx","ty","NextRunnerId","runnerID","getContext","repaintTimer","interpFrameCount","isRunning","isDestroyed","boundEventListener","handleMouseEvent","bind","overlay","ev","relCoords","offsetX","canvasScale","offsetY","tryHandleClick","gameState","tryGetOverlay","AssetLoader","onAllFinished","loadComplete","levelWidth","levelHeight","levels","loadLevel","runTick","requestAnimationFrame","fillStyle","fillRect","cancelAnimationFrame","removeEventListener","GridlockLevelPreviewComponent","props","ref","current","previewSheet","clearRect","mapDataIndex","mapData","atlasX","atlasY","className","style","border","padding","onClick","nativeEvent","name","GridlockComponent","previewImage","loadItem","deps","setState","resultItem","useLoader","onFinish","runner","setRunner","showLevels","setShowLevels","start","stop","tabIndex","onKeyDown","keyCode","toggleRunning","preventDefault","stopPropagation","handleKeyEvent","stopImmediatePropagation"],"mappings":"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","file":"9.bundle.js","sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { IJsonAnimation } from \"./json/IJsonAnimation\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    static FromJson(atlas: SpriteAtlas, params: IJsonAnimation) : SpriteAnimation {\r\n\r\n        return new SpriteAnimation(atlas, \r\n            new Point(params.sourceOffset[0], params.sourceOffset[1]),\r\n            new Point(params.frameSize[0], params.frameSize[1]),\r\n            params.numFrames,\r\n            params.origin === undefined ? undefined : new Point(params.origin[0], params.origin[1]));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","export default class Rand {\r\n    static Int(): number;\r\n    static Int(maxExclusive: number): number;\r\n    static Int(minInclusive: number, maxExclusive: number): number;\r\n    static Int(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return Math.floor(r * Number.MAX_SAFE_INTEGER);\r\n        } else if(max === undefined) {\r\n            return Math.floor(r * min);\r\n        } else {\r\n            return min + Math.floor(r * (max - min));\r\n        }\r\n    }\r\n    static Float(): number;\r\n    static Float(maxExclusive: number): number;\r\n    static Float(minInclusive: number, maxExclusive: number): number;\r\n    static Float(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return r;\r\n        } else if(max === undefined) {\r\n            return r * min;\r\n        } else {\r\n            return min + (r * (max - min));\r\n        }\r\n    }\r\n\r\n}","enum ECarColor {\r\n    Red = 0,\r\n    Green = 1,\r\n    Yellow = 2,\r\n    Blue = 3,\r\n    Gray_Bounce = -1,\r\n    Gray_TurnLeft = -2,\r\n    Gray_TurnRight = -3,\r\n}\r\n\r\nexport default ECarColor;\r\nexport const AllCarColors = [\r\n    ECarColor.Red,\r\n    ECarColor.Green,\r\n    ECarColor.Yellow,\r\n    ECarColor.Blue,\r\n    \r\n    ECarColor.Gray_Bounce,\r\n    ECarColor.Gray_TurnLeft,\r\n    ECarColor.Gray_TurnRight,\r\n]","import Point from \"../common/position/Point\";\r\n\r\nenum EAnchorConnectionFlag {\r\n    RR = 1 << 0,\r\n\r\n    RB = 1 << 1,\r\n    BR = 1 << 1,\r\n\r\n    RL = 1 << 2,\r\n    LR = 1 << 2,\r\n\r\n    RT = 1 << 3,\r\n    TR = 1 << 3,\r\n\r\n    BB = 1 << 4,\r\n\r\n    BL = 1 << 5,\r\n    LB = 1 << 5,\r\n\r\n    BT = 1 << 6,\r\n    TB = 1 << 6,\r\n\r\n    LL = 1 << 7,\r\n\r\n    LT = 1 << 8,\r\n    TL = 1 << 8,\r\n\r\n    TT = 1 << 9,\r\n}\r\n\r\nexport default EAnchorConnectionFlag;","import Point from \"../common/position/Point\";\r\nimport EAnchorConnectionFlag from \"./EAnchorConnectionFlag\";\r\n\r\nenum ETileAnchor {\r\n    Right = 0,\r\n    Bottom = 1,\r\n    Left = 2,\r\n    Top = 3,\r\n}\r\n\r\nconst TileAnchorConnectionMap = [\r\n    [ EAnchorConnectionFlag.RR, EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RL, EAnchorConnectionFlag.RT ],\r\n    [ EAnchorConnectionFlag.BR, EAnchorConnectionFlag.BB, EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BT ],\r\n    [ EAnchorConnectionFlag.LR, EAnchorConnectionFlag.LB, EAnchorConnectionFlag.LL, EAnchorConnectionFlag.LT ],\r\n    [ EAnchorConnectionFlag.TR, EAnchorConnectionFlag.TB, EAnchorConnectionFlag.TL, EAnchorConnectionFlag.TT ]\r\n];\r\n\r\nexport interface ITilePosition {\r\n    anchor: ETileAnchor;\r\n    position: Point;\r\n}\r\n\r\nexport default ETileAnchor;\r\n\r\nconst HALF_PI = Math.PI / 2;\r\nexport class TileAnchorHelper {\r\n\r\n    static AllAnchors: ETileAnchor[] = [ETileAnchor.Right, ETileAnchor.Bottom, ETileAnchor.Left, ETileAnchor.Top];\r\n\r\n    static EquivalentPosition(pos: ITilePosition): ITilePosition {\r\n        if(pos === undefined) return undefined;\r\n        return {\r\n            position: Point.add(pos.position, TileAnchorHelper.AnchorToTileMove(pos.anchor)),\r\n            anchor: TileAnchorHelper.ReverseDirection(pos.anchor)\r\n        };\r\n    }\r\n\r\n    static AnchorToIndex(anchor: ETileAnchor): number {\r\n        return <number>anchor;\r\n    }\r\n\r\n    static AnchorToTileMove(anchor: ETileAnchor): Point {\r\n        switch(anchor) {\r\n            case ETileAnchor.Right: return new Point(1, 0);\r\n            case ETileAnchor.Bottom: return new Point(0, 1);\r\n            case ETileAnchor.Left: return new Point(-1, 0);\r\n            case ETileAnchor.Top: return new Point(0, -1);\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n    static ReverseDirection(anchor: ETileAnchor): ETileAnchor {\r\n        return <ETileAnchor>((anchor + 2) % 4);\r\n    }\r\n\r\n    static IndexToAnchor(index: number): ETileAnchor {\r\n        switch(index) {\r\n            case 0: return ETileAnchor.Right;\r\n            case 1: return ETileAnchor.Bottom;\r\n            case 2: return ETileAnchor.Left;\r\n            case 3: return ETileAnchor.Top;\r\n            default: throw \"Bad Index\";\r\n        }\r\n    }\r\n\r\n    static GetAnchorOffset(anchor: ETileAnchor): Point {\r\n        switch(anchor) {\r\n            case ETileAnchor.Top: return new Point(0.5, 0);\r\n            case ETileAnchor.Bottom: return new Point(0.5, 1);\r\n            case ETileAnchor.Left: return new Point(0, 0.5);\r\n            case ETileAnchor.Right: return new Point(1, 0.5);\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n\r\n    static GetExitRotation(anchor: ETileAnchor): number {\r\n        switch(anchor) {\r\n            case ETileAnchor.Top: return HALF_PI * 3;\r\n            case ETileAnchor.Bottom: return HALF_PI;\r\n            case ETileAnchor.Left: return HALF_PI * 2;\r\n            case ETileAnchor.Right: return 0;\r\n            default: throw \"Bad Anchor\";\r\n        }\r\n    }\r\n\r\n    static GetEntryRotation(anchor: ETileAnchor): number {\r\n        return TileAnchorHelper.GetExitRotation(TileAnchorHelper.ReverseDirection(anchor));\r\n    }\r\n\r\n    static GetRealPosition(position: ITilePosition, tileSize: Point) {\r\n        var tilePosition = Point.Multiply(position.position, tileSize);\r\n        var offsetPosition = Point.Multiply(TileAnchorHelper.GetAnchorOffset(position.anchor), tileSize);\r\n        return tilePosition.AddWith(offsetPosition);\r\n    }\r\n    \r\n    static GetMidpoint(position: { position: Point }, tileSize: Point) {\r\n        var tilePosition = Point.Multiply(position.position, tileSize);\r\n        return tilePosition.AddWith(Point.Multiply(tileSize, 0.5));\r\n    }\r\n\r\n    static GetConnection(from: ETileAnchor, to: ETileAnchor) : EAnchorConnectionFlag {\r\n        return TileAnchorConnectionMap[from][to];\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_SIZE = 64;\r\nexport const TILE_SIZE_PT = new Point(TILE_SIZE, TILE_SIZE);\r\nexport const CAR_SIZE = 18;\r\nexport const CAR_SIZE_PT = new Point(CAR_SIZE, CAR_SIZE);\r\nexport const ATLAS_WIDTH = 4;","import GameState from \"./GameState\";\r\nimport { AtlasSprite } from \"../common/assets/SpriteAtlas\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { ITilePosition, TileAnchorHelper } from \"./ETileAnchor\";\r\nimport Point from \"../common/position/Point\";\r\nimport Angle from \"../common/position/Angle\";\r\nimport { TILE_SIZE_PT } from \"./Constants\";\r\nimport { any } from \"../../LinqLike\";\r\nimport MapTile from \"./tiles/MapTile\";\r\nimport { PlayingAnimation } from \"../common/assets/SpriteAnimation\";\r\nimport Rand from \"../../utils/rand\";\r\nimport Assets from \"./assets\";\r\nimport CarAnimationControl from \"./CarAnimationControl\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport { AnimationPlayCondition, IJsonAnimationInfo } from \"./assets/leveldata/IJsonAnimationInfo\";\r\n\r\nconst TILE_CRASH_MAX_INTERP = 0.4;\r\nconst EDGE_CRASH_MAX_INTERP = 0.9;\r\n\r\nconst MAX_FLAME_RENDER = 4;\r\nconst MIN_FLAME_RENDER = 1;\r\n\r\nexport class Car {\r\n    nextPosition?: ITilePosition;\r\n    parkedAt?: Point;\r\n\r\n    private parkAnimationComplete:boolean;\r\n\r\n    public crashedAt?: { position: Point, anchor?: ETileAnchor };\r\n\r\n    hasPlayedCrashAnimation: boolean;\r\n\r\n    flameRenders: { anim: PlayingAnimation, offset: Point }[];\r\n    private animations: CarAnimationControl;\r\n\r\n    private currentAnimationDefinition?: IJsonAnimationInfo;\r\n\r\n    constructor(public color: ECarColor, public sprite: AtlasSprite, public position: ITilePosition, private assets: Assets) {\r\n        this.nextPosition = undefined;\r\n        this.parkedAt = undefined;\r\n        this.parkAnimationComplete = false;\r\n        this.hasPlayedCrashAnimation = false;\r\n        this.flameRenders = [];\r\n        this.animations = assets.animationControllers[color];\r\n        this.currentAnimationDefinition = undefined;\r\n    }\r\n\r\n    isCrashed(): boolean {\r\n        return this.crashedAt !== undefined;\r\n    }\r\n\r\n    crashHere(anchor?: ETileAnchor) {\r\n        if(!this.isCrashed()) {\r\n            this.startFlames();\r\n        }\r\n        this.crashedAt = { position: this.position.position, anchor };\r\n    }\r\n\r\n    crashAt(pos: {position: Point, anchor?: ETileAnchor}) {\r\n        if(!this.isCrashed()) {\r\n            this.startFlames();\r\n        }\r\n        this.crashedAt = pos;\r\n    }\r\n\r\n    private FindOutputForAlwaysTurn(state: GameState, facing: ETileAnchor, outputs: ETileAnchor[], direction: number): ETileAnchor {\r\n        if(outputs.length === 1) return outputs[0];\r\n        if(direction === 0) {\r\n            const fwd = TileAnchorHelper.ReverseDirection(facing); \r\n            if(outputs.indexOf(fwd) !== -1) return fwd;\r\n            return facing;\r\n        }\r\n        else {\r\n            for(let dt = 0; dt < 4; dt++)\r\n            {\r\n                let preffered = <ETileAnchor>((facing + dt * direction)%4);\r\n                if(outputs.indexOf(preffered) !== -1) return preffered;\r\n            }\r\n            return facing;\r\n        }\r\n    }\r\n\r\n    private startFlames() {\r\n        const flameCount = Rand.Int(MIN_FLAME_RENDER, MAX_FLAME_RENDER);\r\n        for(let i = 0; i < flameCount; i++) {\r\n            const flame: { anim: PlayingAnimation, offset: Point } = {\r\n                anim: this.assets.fire.play(30, true),\r\n                offset: new Point(Rand.Int(-6, 6) - this.assets.fire.sourceSize.x / 2, Rand.Int(-6, 6) - this.assets.fire.sourceSize.y)\r\n            };\r\n            // Tick a few times, so the flames aren't all in sync\r\n            const ticks = Rand.Int(8);\r\n            for(let tick = 0; tick < ticks; tick++)\r\n                flame.anim.tick();\r\n            this.flameRenders.push(flame);\r\n        }\r\n    }\r\n\r\n    public EveryTick() {\r\n        for(const flame of this.flameRenders) {\r\n            flame.anim.tick();\r\n        }\r\n    }\r\n\r\n    public LogicTick() {\r\n        if(this.isCrashed() && !this.hasPlayedCrashAnimation) { \r\n            this.hasPlayedCrashAnimation = true; \r\n        }\r\n        this.currentAnimationDefinition = undefined;\r\n    }\r\n\r\n    public CalculateNextPosition(state: GameState): ITilePosition | undefined {\r\n        if(this.isCrashed()) { this.hasPlayedCrashAnimation = true; return undefined; }\r\n        if(this.parkedAt !== undefined) {\r\n            this.parkAnimationComplete = true;\r\n            return undefined;\r\n        }\r\n\r\n        const tile = state.map[this.position.position.x][this.position.position.y];\r\n        const validOutputs = tile.definition.connections.allConnections(this.position.anchor);\r\n\r\n        const chosen = this.chooseOutputDirection(state, tile, validOutputs);\r\n        if(chosen === undefined){\r\n            // TODO: Parking animation\r\n            if(tile.definition.isStop) {\r\n                this.parkedAt = this.position.position;\r\n                this.parkAnimationComplete = false;\r\n                if(any(state.cars, c => c !== this && c.parkedAt !== undefined && c.parkedAt.x === this.position.position.x && c.parkedAt.y === this.position.position.y)) {\r\n                    // There's someoene there, crash into them.\r\n                    this.crashHere(this.position.anchor);\r\n                }\r\n            }\r\n            else {\r\n                this.crashHere();\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Figure out what direction we're moving\r\n        let moveDirection : AnimationPlayCondition = \r\n            this.position.anchor === chosen ? 'reverse'\r\n            : this.position.anchor === TileAnchorHelper.ReverseDirection(chosen) ? 'straight'\r\n            : this.position.anchor === (chosen + 1) % 4 ? 'turnRight'\r\n            : 'turnLeft';\r\n\r\n        this.currentAnimationDefinition = this.animations.animations[moveDirection];\r\n\r\n        return {\r\n            position: Point.add(this.position.position, TileAnchorHelper.AnchorToTileMove(chosen)),\r\n            anchor: TileAnchorHelper.ReverseDirection(chosen)\r\n        };\r\n    }\r\n\r\n    private chooseOutputDirection(state: GameState, tile: MapTile, valid: ETileAnchor[]) : ETileAnchor | undefined\r\n    {\r\n        switch(this.color) {\r\n            case ECarColor.Gray_Bounce:\r\n            case ECarColor.Gray_TurnLeft:\r\n            case ECarColor.Gray_TurnRight:\r\n                if(valid.length === 0) \r\n                    return this.position.anchor;\r\n                else\r\n                {\r\n                    return this.FindOutputForAlwaysTurn(state, this.position.anchor, valid, \r\n                        this.color === ECarColor.Gray_Bounce ? 0\r\n                        : this.color === ECarColor.Gray_TurnLeft ? 1 : \r\n                        3);\r\n                }\r\n            default: \r\n                if(valid.length === 0) return undefined\r\n                else if(valid.length === 1) {\r\n                    return valid[0];\r\n                }\r\n                else {\r\n                    let signalAnchor = tile.TryGetSignal(this.position.anchor, this.color);\r\n                    if (signalAnchor !== null && signalAnchor !== undefined && signalAnchor !== this.position.anchor) return signalAnchor;\r\n                    if (valid.indexOf(TileAnchorHelper.ReverseDirection(this.position.anchor)) !== -1) return TileAnchorHelper.ReverseDirection(this.position.anchor);\r\n                    return undefined;\r\n                }\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, interpPercent: number, positionAdjust: Point){\r\n        const fromAnchor = TileAnchorHelper.GetRealPosition(this.position, TILE_SIZE_PT);\r\n        const tileMidpoint = TileAnchorHelper.GetMidpoint(this.position, TILE_SIZE_PT);\r\n        const fromAngle = TileAnchorHelper.GetEntryRotation(this.position.anchor);\r\n\r\n        let sprite: AtlasSprite;\r\n        let shouldRotate: boolean;\r\n        if(this.currentAnimationDefinition === undefined) {\r\n            sprite = this.sprite;\r\n            shouldRotate = true;\r\n        } else {\r\n            const animInterp = (interpPercent * this.currentAnimationDefinition.repeatCount) % 1;\r\n            const frameNumber = Math.floor(animInterp * this.currentAnimationDefinition.numFrames);\r\n            shouldRotate = !(this.currentAnimationDefinition.overridesRotation ?? false);\r\n            sprite = this.assets.carAnimations.getSprite(\r\n                new Point(18 * (this.currentAnimationDefinition.sourceOffset[0] + frameNumber), 18 * this.currentAnimationDefinition.sourceOffset[1]),\r\n                new Point(18, 18),\r\n                new Point(0.5, 0.5));\r\n        }\r\n\r\n        if(this.isCrashed()) {\r\n            let effectiveNext : ITilePosition;\r\n            if(this.nextPosition !== undefined) effectiveNext = this.nextPosition;\r\n            else if(this.crashedAt?.anchor !== undefined) effectiveNext = this.crashedAt as ITilePosition;\r\n            else effectiveNext = {\r\n                position: Point.add(this.position.position, TileAnchorHelper.AnchorToTileMove(TileAnchorHelper.ReverseDirection(this.position.anchor))),\r\n                anchor: this.position.anchor\r\n            };\r\n\r\n            const maxInterp = this.crashedAt.anchor === undefined ? TILE_CRASH_MAX_INTERP : EDGE_CRASH_MAX_INTERP;\r\n\r\n            const useInterp = this.hasPlayedCrashAnimation ? maxInterp : (interpPercent < maxInterp ? interpPercent : maxInterp);\r\n\r\n            const toAnchor = TileAnchorHelper.GetRealPosition(effectiveNext, TILE_SIZE_PT);\r\n\r\n            let renderPosition: Point;\r\n\r\n            if(this.parkedAt !== undefined) {\r\n                renderPosition = tileMidpoint;\r\n            }\r\n            else {\r\n                renderPosition = Point.Bezier([fromAnchor, tileMidpoint, toAnchor], useInterp);\r\n            }\r\n\r\n            renderPosition = renderPosition.AddWith(positionAdjust);\r\n\r\n            const exitAngle = TileAnchorHelper.GetEntryRotation(effectiveNext.anchor);\r\n\r\n            const rel = Angle.relativeAngle(fromAngle, exitAngle);\r\n\r\n\r\n            sprite.draw(ctx, renderPosition, sprite.sourceSize, shouldRotate ? (fromAngle - rel * useInterp) : fromAngle);\r\n\r\n            if(this.hasPlayedCrashAnimation || interpPercent > useInterp) {\r\n                for(const flame of this.flameRenders) {\r\n                    flame.anim.draw(ctx, Point.add(renderPosition, flame.offset), flame.anim.source.sourceSize);\r\n                }\r\n            }\r\n        }\r\n        else if(this.nextPosition !== undefined) {\r\n            const toAnchor = TileAnchorHelper.GetRealPosition(this.nextPosition, TILE_SIZE_PT);\r\n\r\n            const renderPosition = Point.Bezier([fromAnchor, tileMidpoint, toAnchor], interpPercent).AddWith(positionAdjust);\r\n\r\n            const exitAngle = TileAnchorHelper.GetEntryRotation(this.nextPosition.anchor);\r\n\r\n            const rel = Angle.relativeAngle(fromAngle, exitAngle);\r\n\r\n            sprite.draw(ctx, renderPosition, sprite.sourceSize, shouldRotate ? (fromAngle - rel * interpPercent) : fromAngle);\r\n        }\r\n        else if(this.parkedAt !== undefined) {\r\n            if(!this.parkAnimationComplete) {\r\n                const renderPosition = Point.Bezier([fromAnchor, tileMidpoint, tileMidpoint], interpPercent).AddWith(positionAdjust);\r\n                sprite.draw(ctx, renderPosition, sprite.sourceSize, fromAngle);\r\n            } else {\r\n                sprite.draw(ctx, tileMidpoint, sprite.sourceSize, fromAngle);\r\n            }\r\n        }\r\n    }\r\n}","import { selected } from \"../../../views/projects/chess3d/css/singleBoard.css\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../assets\";\r\nimport ECarColor from \"../ECarColor\";\r\nimport ETileAnchor from \"../ETileAnchor\";\r\nimport Signal from \"../Signal\";\r\nimport MapTile from \"../tiles/MapTile\";\r\n\r\nexport const SIGNAL_CTRL_PANEL_SIZE = 128;\r\n\r\nconst UICoords = {\r\n    round: new Point(88, 88),\r\n    directions: [\r\n        new Point(108, 88),\r\n        new Point(88, 108),\r\n        new Point(68, 88),\r\n        new Point(88, 68),\r\n    ],\r\n    tilePreview: new Point(0, 64)\r\n};\r\n\r\nexport default class SignalCtrlPanel {\r\n\r\n    selectedColor: ECarColor;\r\n    private colorButtonDown: AtlasSprite;\r\n    private colorButtonUp: AtlasSprite;\r\n\r\n    private sqButtonUp: AtlasSprite;\r\n    private sqButtonDown: AtlasSprite;\r\n    \r\n    private roundButtonUp: AtlasSprite;\r\n    private roundButtonDown: AtlasSprite;\r\n\r\n    private arrowIndicators: AtlasSprite[];\r\n\r\n    constructor(public tile: MapTile, public signal: Signal, public assets: Assets, public dx: number, public dy: number) {\r\n        this.selectedColor = ECarColor.Red;\r\n        this.colorButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(0, 0), new Point(63, 32));\r\n        this.colorButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(0, 32), new Point(63, 32));\r\n        \r\n        this.sqButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(63, 0), new Point(16, 16));\r\n        this.sqButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(63, 16), new Point(16, 16));\r\n\r\n        this.roundButtonUp = this.assets.ctrlPanelElements.getSprite(new Point(63, 32), new Point(16, 16));\r\n        this.roundButtonDown = this.assets.ctrlPanelElements.getSprite(new Point(63, 48), new Point(16, 16));\r\n\r\n        this.arrowIndicators = [];\r\n        for(let i = 0; i < 4; i++){\r\n            this.arrowIndicators.push(this.assets.ctrlPanelElements.getSprite(new Point(79, 16 * i), new Point(16, 16)));\r\n        }\r\n    }\r\n\r\n    tryHandleClick(x: number, y: number): boolean {\r\n        if(x < this.dx || y < this.dy || x > this.dx + SIGNAL_CTRL_PANEL_SIZE || y > this.dy + SIGNAL_CTRL_PANEL_SIZE) return false;\r\n\r\n        x -= this.dx;\r\n        y -= this.dy;\r\n\r\n        if(x <= SIGNAL_CTRL_PANEL_SIZE / 2) {\r\n            const newColor = Math.floor(y / (SIGNAL_CTRL_PANEL_SIZE / 4));\r\n            this.selectedColor = newColor;\r\n            return true;\r\n        }\r\n        else if(y >= SIGNAL_CTRL_PANEL_SIZE / 2) {\r\n            // Bottom-right quadrant: Car controls.\r\n            if(x >= UICoords.round.x && y >= UICoords.round.y && x <= UICoords.round.x + 16 && y <= UICoords.round.y + 16) {\r\n                // Clicked round buton\r\n                this.signal.clearInstructions(this.selectedColor);\r\n            }\r\n            else {\r\n                // Find the best dir\r\n                x -= SIGNAL_CTRL_PANEL_SIZE / 2;\r\n                y -= SIGNAL_CTRL_PANEL_SIZE / 2;\r\n\r\n                // Coords are now relative to the frame\r\n\r\n                x -= SIGNAL_CTRL_PANEL_SIZE / 4;\r\n                y -= SIGNAL_CTRL_PANEL_SIZE / 4;\r\n                \r\n                // Coords are now relative to round button\r\n                let anchor;\r\n                if(Math.abs(x) >= Math.abs(y)) {\r\n                    anchor = x < 0 ? ETileAnchor.Left : ETileAnchor.Right;\r\n                }\r\n                else {\r\n                    anchor = y < 0 ? ETileAnchor.Top : ETileAnchor.Bottom;\r\n                }\r\n\r\n                if(this.signal.definition.outputDirs.indexOf(anchor) === -1) return true;\r\n\r\n                this.signal.setInstruction(this.selectedColor, anchor);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if(!this.assets.ctrlPanelBackground.image)  {\r\n            console.log('ASSETS IMAGE: ' + this.assets.ctrlPanelBackground.image);\r\n        }\r\n        ctx.drawImage(this.assets.ctrlPanelBackground.image, this.dx, this.dy);\r\n        for(let colorButton = 0; colorButton < 4; colorButton++) {\r\n            const selected = this.selectedColor === colorButton;\r\n            const buttonImg = selected ? this.colorButtonDown : this.colorButtonUp;\r\n\r\n            buttonImg.draw(ctx, new Point(this.dx + 1, this.dy + 32 * colorButton), new Point(63, 32));\r\n\r\n            this.assets.carImageAtlas.getSprite(new Point(18 * colorButton, 0), new Point(18, 18))\r\n                .draw(ctx, new Point(this.dx + 1 + 63/2 - 8, this.dy + 32 * colorButton + 16 - 8), new Point(18, 18));\r\n        }\r\n\r\n        const selectedDir = this.signal.getInstruction(this.selectedColor) ?? -1;\r\n\r\n        for(let dir = 0; dir < 4; dir++) {\r\n            const buttonImg = selectedDir === dir ? this.sqButtonDown : this.sqButtonUp;\r\n            buttonImg.draw(ctx, new Point(this.dx + UICoords.directions[dir].x, this.dy + UICoords.directions[dir].y), new Point(16, 16));\r\n            this.arrowIndicators[dir].draw(ctx, new Point(this.dx + UICoords.directions[dir].x, this.dy + UICoords.directions[dir].y), new Point(16, 16));\r\n        }\r\n\r\n        const roundImg = selectedDir === -1 ? this.roundButtonDown : this.roundButtonUp;\r\n        roundImg.draw(ctx, new Point(this.dx + UICoords.round.x, this.dy + UICoords.round.y), new Point(16, 16));\r\n\r\n        this.tile.draw_offgrid(ctx, this.dx + 72, this.dy + 8, 48, this.assets);\r\n    }\r\n}","import EAnchorConnectionFlag from \"./EAnchorConnectionFlag\";\r\n\r\nconst AnchorColisions: [EAnchorConnectionFlag, EAnchorConnectionFlag][] = [\r\n\r\n    [ EAnchorConnectionFlag.LR, 0b1111111111 ],\r\n    [ EAnchorConnectionFlag.TB, 0b1111111111 ],\r\n\r\n    [ EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RB |  EAnchorConnectionFlag.LB | EAnchorConnectionFlag.TR | EAnchorConnectionFlag.RR | EAnchorConnectionFlag.BB ],\r\n    [ EAnchorConnectionFlag.RT, EAnchorConnectionFlag.RT |  EAnchorConnectionFlag.LT | EAnchorConnectionFlag.RB | EAnchorConnectionFlag.RR | EAnchorConnectionFlag.TT ],\r\n    [ EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BL |  EAnchorConnectionFlag.RB | EAnchorConnectionFlag.TL | EAnchorConnectionFlag.BB | EAnchorConnectionFlag.LL ],\r\n    [ EAnchorConnectionFlag.LT, EAnchorConnectionFlag.LT |  EAnchorConnectionFlag.RT | EAnchorConnectionFlag.LB | EAnchorConnectionFlag.LL | EAnchorConnectionFlag.TT ],\r\n    \r\n    [ EAnchorConnectionFlag.RR, 0 ],\r\n    [ EAnchorConnectionFlag.BB, 0 ],\r\n    [ EAnchorConnectionFlag.LL, 0 ],\r\n    [ EAnchorConnectionFlag.TT, 0 ],\r\n]\r\n\r\nexport default { colisions: AnchorColisions, crossoverColisions: [\r\n    [ EAnchorConnectionFlag.LR, EAnchorConnectionFlag.LR ],\r\n    [ EAnchorConnectionFlag.TB, EAnchorConnectionFlag.TB ],\r\n    \r\n    [ EAnchorConnectionFlag.RB, EAnchorConnectionFlag.RB ],\r\n    [ EAnchorConnectionFlag.RT, EAnchorConnectionFlag.RT ],\r\n    [ EAnchorConnectionFlag.BL, EAnchorConnectionFlag.BL ],\r\n    [ EAnchorConnectionFlag.LT, EAnchorConnectionFlag.LT ],\r\n    \r\n    [ EAnchorConnectionFlag.RR, 0 ],\r\n    [ EAnchorConnectionFlag.BB, 0 ],\r\n    [ EAnchorConnectionFlag.LL, 0 ],\r\n    [ EAnchorConnectionFlag.TT, 0 ],\r\n] };","import { off } from \"process\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport Point from \"../common/position/Point\";\r\nimport { TILE_SIZE_PT, TILE_SIZE } from \"./Constants\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"./ETileAnchor\";\r\nimport { ISignalDefinition } from \"./tiles/MapTileDefintion\";\r\n\r\nconst ARROW_SIZE = 6;\r\nconst ARROW_SHIFT_HUB = 6;\r\nconst ARROW_SHIFT = 3; \r\n\r\nconst ARROW_DIR: Point[] = [\r\n    new Point(1, 0),\r\n    new Point(0, 1),\r\n    new Point(-1, 0),\r\n    new Point(0, -1)\r\n];\r\n\r\nexport default class Signal {\r\n    private currentSignals: Map<ECarColor, ETileAnchor>;\r\n    public isDisabled: boolean;\r\n    constructor(public definition: ISignalDefinition)\r\n    {\r\n        this.currentSignals = new Map<ECarColor, ETileAnchor>();\r\n    }\r\n\r\n    disable(forceInstructions: number){\r\n        this.isDisabled = true;\r\n        for(let color = 0; color < 4; color++) {\r\n            for(let anchor = 0; anchor < 4; anchor++) {\r\n                if((forceInstructions & 1) === 1)\r\n                    this.setInstruction(color, anchor);\r\n                forceInstructions >>= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    getInstruction(car: ECarColor) : ETileAnchor | undefined {\r\n        if(this.currentSignals.has(car)) return this.currentSignals.get(car);\r\n        return undefined;\r\n    }\r\n\r\n    setInstruction(car: ECarColor, anchor: ETileAnchor) {\r\n        this.currentSignals.set(car, anchor);\r\n    }\r\n    \r\n    clearInstructions(car ?: ECarColor) {\r\n        if(car === undefined || car === null) {\r\n            this.currentSignals.clear();\r\n        }\r\n        else {\r\n            this.currentSignals.delete(car);\r\n        }\r\n    }\r\n\r\n    getRenderPosition(tile: Point): Point {\r\n        return TileAnchorHelper.GetMidpoint({ position: tile }, TILE_SIZE_PT)\r\n            .SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2)\r\n            .AddWith(this.definition.dx, this.definition.dy);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, tile: Point, hub: SpriteSheet, arrows: SpriteSheet) {\r\n        const midpoint = TileAnchorHelper.GetMidpoint({ position: tile }, TILE_SIZE_PT).SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2); \r\n        hub.render(ctx,\r\n            midpoint.x + this.definition.dx, midpoint.y + this.definition.dy,\r\n            6, 6,\r\n            this.isDisabled ? 1 : 0, 0);\r\n\r\n        const arrowOffsets: number[] = [0,0,0,0];\r\n        for(var [car, anchor] of this.currentSignals.entries()){\r\n            const offset = arrowOffsets[anchor]++;\r\n            const offsetDir = ARROW_DIR[anchor];\r\n\r\n            const position = Point.add(midpoint, Point.Multiply(offsetDir, (ARROW_SHIFT_HUB + ARROW_SHIFT * offset))).AddWith(this.definition.dx, this.definition.dy);\r\n            arrows.render(ctx, position.x, position.y, ARROW_SIZE, ARROW_SIZE, anchor, car);\r\n        }\r\n    }\r\n    \r\n    draw_offgrid(ctx: CanvasRenderingContext2D, position: Point, tileSize: Point, hub: SpriteSheet, arrows: SpriteSheet) {\r\n        const midpoint = position.AddWith(Point.Multiply(tileSize, 0.5, 0.5)).SubtractWith(ARROW_SIZE / 2, ARROW_SIZE / 2); \r\n        hub.render(ctx, midpoint.x + this.definition.dx, midpoint.y + this.definition.dy,\r\n            6, 6,\r\n            this.isDisabled ? 1 : 0, 0);\r\n\r\n        const arrowOffsets: number[] = [0,0,0,0];\r\n        for(var [car, anchor] of this.currentSignals.entries()){\r\n            const offset = arrowOffsets[anchor]++;\r\n            const offsetDir = ARROW_DIR[anchor];\r\n\r\n            const position = Point.add(midpoint, Point.Multiply(offsetDir, (ARROW_SHIFT_HUB + ARROW_SHIFT * offset))).AddWith(this.definition.dx, this.definition.dy);\r\n            arrows.render(ctx, position.x, position.y, ARROW_SIZE, ARROW_SIZE, anchor, car);\r\n        }\r\n    }\r\n}","import { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport AnchorColisions from \"../AnchorColisions\";\r\nimport Assets from \"../assets\";\r\nimport { Car } from \"../Car\";\r\nimport { TILE_SIZE, TILE_SIZE_PT } from \"../Constants\";\r\nimport ECarColor from \"../ECarColor\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\nimport Signal from \"../Signal\";\r\nimport { MapTileDefinition } from \"./MapTileDefintion\";\r\n\r\nexport default class MapTile { \r\n    public signals: Signal[];\r\n    public overdrawAnchors: ETileAnchor[];\r\n\r\n    constructor(public definition: MapTileDefinition, public image: AtlasSprite, public endpointColor?: ECarColor) {\r\n        this.signals = [];\r\n        for(const signalDef of definition.signals) {\r\n            this.signals.push(new Signal(signalDef));\r\n        }\r\n        this.overdrawAnchors = this.definition.tileId === 3 ? [ ETileAnchor.Left, ETileAnchor.Right ] : [];\r\n    }\r\n\r\n    DisableSignal(id: number, forceDisplay: number) {\r\n        this.signals[id].disable(forceDisplay);\r\n    }\r\n\r\n    TryGetSignal(from: ETileAnchor, color: ECarColor): ETileAnchor|undefined {\r\n        for(const signal of this.signals) {\r\n            if(signal.definition.inputDirs.indexOf(from) !== -1) {\r\n                return signal.getInstruction(color);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    CheckColisions(c1: Car, c2: Car): boolean {\r\n        // TODO: what if one of them is undefined?\r\n        if(c1.nextPosition === undefined || c2.nextPosition === undefined) return true;\r\n        let path1 = TileAnchorHelper.GetConnection(c1.position.anchor, TileAnchorHelper.ReverseDirection(c1.nextPosition.anchor));\r\n        let path2 = TileAnchorHelper.GetConnection(c2.position.anchor, TileAnchorHelper.ReverseDirection(c2.nextPosition.anchor));\r\n\r\n        for(const [from, hit] of (this.definition.isCrossover ? AnchorColisions.crossoverColisions : AnchorColisions.colisions)) {\r\n            if(from === path1) {\r\n                if((hit & path2) > 0) return true;\r\n            }\r\n            if(from === path2) {\r\n                if((hit & path1) > 0) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    GetPositionAdjust(from: ETileAnchor, to: ETileAnchor | undefined, interp: number): Point {\r\n        // Not the best way of doing this, but hey, it works.\r\n        if(this.definition.tileId === 3) {\r\n            if((from === ETileAnchor.Left || from === ETileAnchor.Right) && (to === ETileAnchor.Left || to === ETileAnchor.Right)) {\r\n                let shiftStrength = interp * 2;\r\n                if(shiftStrength > 1) {\r\n                    shiftStrength = 1 - (shiftStrength % 1);\r\n                }\r\n\r\n                shiftStrength = Math.pow(shiftStrength, 0.5);\r\n\r\n                // shiftStrength is [0, 1], 0 when interp approaches 0 or 1, and 1 when interp is 0.5 (Triangle wave)\r\n\r\n                return new Point(0, - shiftStrength * 5);\r\n            }\r\n        }\r\n        return new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, x: number, y: number, assets: Assets) {\r\n        this.image.draw(ctx, new Point(x * TILE_SIZE, y * TILE_SIZE), TILE_SIZE_PT);\r\n        for(const signal of this.signals) {\r\n            signal.draw(ctx, new Point(x, y), assets.signalHubSheet, assets.signalArrowsImage);\r\n        }\r\n\r\n        if(this.definition.isStop && this.endpointColor !== undefined && this.endpointColor !== null) {\r\n            const center_offset = (TILE_SIZE - assets.spawnRingSheet.spriteWidth) / 2;\r\n            assets.spawnRingSheet.render(ctx, \r\n                x * TILE_SIZE + center_offset, \r\n                y * TILE_SIZE + center_offset, \r\n                assets.spawnRingSheet.spriteWidth, \r\n                assets.spawnRingSheet.spriteHeight, \r\n                this.endpointColor,\r\n                1);\r\n        }\r\n    }\r\n\r\n    overdraw(ctx: CanvasRenderingContext2D, x: number, y: number, assets: Assets) {\r\n        if(this.definition.tileId !== 3) return;\r\n\r\n        assets.getTrackSprite(39).draw(ctx, new Point(x * TILE_SIZE, y * TILE_SIZE), TILE_SIZE_PT);\r\n        \r\n    }\r\n\r\n    draw_offgrid(ctx: CanvasRenderingContext2D, x: number, y: number, tileSize: number, assets: Assets) {\r\n        this.image.draw(ctx, new Point(x, y), new Point(tileSize, tileSize));\r\n        for(const signal of this.signals) {\r\n            signal.draw_offgrid(ctx, new Point(x, y), new Point(tileSize, tileSize), assets.signalHubSheet, assets.signalArrowsImage);\r\n        }\r\n    }\r\n}","import DirectionHelper from \"../DirectionHelper\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\n\r\nexport default class MapConnections {\r\n    private connections: boolean[][];\r\n\r\n    constructor(packed: number) {\r\n        \r\n        this.connections = [];\r\n        for(let dir = 0; dir < 4; dir++) {\r\n            const connectionArr = [];\r\n            for(let to = dir; to < 4; to++) {\r\n                connectionArr.push((packed & 1) > 0);\r\n                packed >>= 1;\r\n            }\r\n            this.connections.push(connectionArr);\r\n        }\r\n\r\n    }\r\n\r\n    public connection(from: ETileAnchor, to: ETileAnchor): boolean;\r\n    public connection(from: ETileAnchor, to: ETileAnchor, value: boolean): void;\r\n    public connection(from: ETileAnchor, to: ETileAnchor, value?: boolean): void|boolean {\r\n        const fromIndex = TileAnchorHelper.AnchorToIndex(from);\r\n        const toIndex = TileAnchorHelper.AnchorToIndex(to);\r\n        const minIndex = Math.min(fromIndex, toIndex);\r\n        const maxIndex = Math.max(fromIndex, toIndex);\r\n        if (value === undefined) {\r\n            return this.connections[minIndex][maxIndex-minIndex];\r\n        }\r\n        else {\r\n            this.connections[minIndex][maxIndex-minIndex] = value;\r\n        }\r\n\r\n    }\r\n\r\n    public allConnections(from: ETileAnchor): ETileAnchor[] {\r\n        let output = [];\r\n        for(const to of TileAnchorHelper.AllAnchors) {\r\n            if(this.connection(from, to)) {\r\n                output.push(to);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}","import { clearLine } from \"readline\";\r\nimport C from \"../EAnchorConnectionFlag\";\r\nimport ETileAnchor, { TileAnchorHelper } from \"../ETileAnchor\";\r\nimport MapConnections from \"./MapConnections\";\r\n\r\nconst EDGE_SIGNAL_OFFSET = 16;\r\n\r\nexport interface ISignalDefinition {\r\n    dx: number;\r\n    dy: number;\r\n    inputDirs: ETileAnchor[];\r\n    outputDirs: ETileAnchor[];\r\n}\r\n\r\nexport class MapTileDefinition {\r\n    connections: MapConnections;\r\n    signals: ISignalDefinition[];\r\n\r\n    constructor(public tileId: number, packedConnections: number, signalPerInput: boolean = false, public isStop: boolean = false, public isCrossover: boolean = false) {\r\n        this.connections = new MapConnections(packedConnections);\r\n        this.signals = [];\r\n        for(const anchor of TileAnchorHelper.AllAnchors) {\r\n            const output = this.connections.allConnections(anchor);\r\n            if(output.length > 1) {\r\n                // ambiguous, we need a signal here\r\n                let tgtSignal: ISignalDefinition;\r\n                if(signalPerInput || this.signals.length === 0) {\r\n                    tgtSignal = { ...getSignalOffset(signalPerInput, anchor), inputDirs: [], outputDirs: [] };\r\n                    this.signals.push(tgtSignal);\r\n                }\r\n                else {\r\n                    tgtSignal = this.signals[0];\r\n                }\r\n\r\n                tgtSignal.inputDirs.push(anchor);\r\n                for(const outDir of output) {\r\n                    tgtSignal.outputDirs.push(outDir)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSignalOffset(signalPerInput: boolean, anchor: ETileAnchor): {dx: number, dy: number} {\r\n    if(!signalPerInput) return { dx: 0, dy: 0 };\r\n    const pos = TileAnchorHelper.AnchorToTileMove(anchor).MultWith(EDGE_SIGNAL_OFFSET);\r\n    return {dx: pos.x, dy: pos.y };\r\n}\r\n\r\n\r\nconst allMapTileDefinitions: MapTileDefinition[] = [\r\n    null,\r\n    new MapTileDefinition(1, C.TB),\r\n    new MapTileDefinition(2, C.LR),\r\n    new MapTileDefinition(3, C.TB|C.LR, false, false, true),\r\n\r\n    new MapTileDefinition(4, C.RT),\r\n    new MapTileDefinition(5, C.RB),\r\n    new MapTileDefinition(6, C.LB),\r\n    new MapTileDefinition(7, C.LT),\r\n\r\n    new MapTileDefinition(8, C.RT|C.RB, true),\r\n    new MapTileDefinition(9, C.RB|C.LB, true),\r\n    new MapTileDefinition(10, C.LT|C.LB, true),\r\n    new MapTileDefinition(11, C.LT|C.RT, true),\r\n\r\n    new MapTileDefinition(12, C.RT|C.RB|C.TB),\r\n    new MapTileDefinition(13, C.RB|C.LB|C.LR),\r\n    new MapTileDefinition(14, C.LT|C.LB|C.TB),\r\n    new MapTileDefinition(15, C.LT|C.RT|C.LR),\r\n\r\n    new MapTileDefinition(16, 0, false, true),\r\n    new MapTileDefinition(17, 0, false, true),\r\n    new MapTileDefinition(18, 0, false, true),\r\n    new MapTileDefinition(19, 0, false, true),\r\n\r\n    new MapTileDefinition(20, C.LT|C.RB),\r\n    new MapTileDefinition(21, C.RT|C.LB),\r\n    new MapTileDefinition(22, C.RB|C.RT|C.LB|C.LT|C.LR|C.TB),\r\n    new MapTileDefinition(23, C.RB|C.RT|C.LB|C.LT, true),\r\n\r\n    new MapTileDefinition(24, C.RR),\r\n    new MapTileDefinition(25, C.BB),\r\n    new MapTileDefinition(26, C.LL),\r\n    new MapTileDefinition(27, C.TT),\r\n    \r\n    new MapTileDefinition(28, C.RR|C.TT),\r\n    new MapTileDefinition(29, C.BB|C.RR),\r\n    new MapTileDefinition(30, C.LL|C.BB),\r\n    new MapTileDefinition(31, C.TT|C.LL),\r\n    \r\n    new MapTileDefinition(32, C.RR|C.TT|C.BB),\r\n    new MapTileDefinition(33, C.BB|C.RR|C.LL),\r\n    new MapTileDefinition(34, C.LL|C.BB|C.TT),\r\n    new MapTileDefinition(35, C.TT|C.LL|C.RR),\r\n    \r\n    new MapTileDefinition(36, C.RR|C.LL),\r\n    new MapTileDefinition(37, C.BB|C.TT),\r\n    new MapTileDefinition(38, C.RR|C.LL|C.BB|C.TT),\r\n    null, // Special: The overlay for bridges\r\n\r\n    new MapTileDefinition(39, C.RT|C.LL, false, false, true),\r\n    new MapTileDefinition(40, C.RB|C.TT, false, false, true),\r\n    new MapTileDefinition(41, C.LB|C.TT, false, false, true),\r\n    new MapTileDefinition(42, C.LT|C.RR, false, false, true),\r\n    \r\n    new MapTileDefinition(43, C.RT|C.BB, false, false, true),\r\n    new MapTileDefinition(44, C.RB|C.LL, false, false, true),\r\n    new MapTileDefinition(45, C.LB|C.RR, false, false, true),\r\n    new MapTileDefinition(46, C.LT|C.BB, false, false, true),\r\n    \r\n    new MapTileDefinition(47, C.RT|C.LL|C.BB, false, false, true),\r\n    new MapTileDefinition(48, C.RB|C.TT|C.LL, false, false, true),\r\n    new MapTileDefinition(49, C.LB|C.TT|C.RR, false, false, true),\r\n    new MapTileDefinition(50, C.LT|C.RR|C.BB, false, false, true),\r\n];\r\n\r\n\r\nexport default allMapTileDefinitions;","import { any, customGroupBy, findMin, groupBy } from \"../../LinqLike\";\r\nimport Angle from \"../common/position/Angle\";\r\nimport Point from \"../common/position/Point\";\r\nimport Assets from \"./assets\";\r\nimport { Car } from \"./Car\";\r\nimport { ATLAS_WIDTH, CAR_SIZE, CAR_SIZE_PT, TILE_SIZE, TILE_SIZE_PT } from \"./Constants\";\r\nimport ECarColor from \"./ECarColor\";\r\nimport ETileAnchor, { ITilePosition, TileAnchorHelper } from \"./ETileAnchor\";\r\nimport ILevelData from \"./ILevelData\";\r\nimport SignalCtrlPanel from \"./signalCtrl/signalCtrlPanel\";\r\nimport MapTile from \"./tiles/MapTile\";\r\nimport allMapTileDefinitions, { MapTileDefinition } from \"./tiles/MapTileDefintion\";\r\n\r\n\r\nexport default class GameState {\r\n    map: (MapTile | null)[][]\r\n    cars: Car[];\r\n\r\n    constructor(private level: ILevelData, private canvas: HTMLCanvasElement, public assets: Assets) {\r\n        this.map = [];\r\n        for(let c = 0; c < level.width; c++) {\r\n            let col = [];\r\n            for(let r = 0; r < level.height; r++) {\r\n                col.push(null);\r\n            }\r\n            this.map.push(col);\r\n        }\r\n\r\n        let allEndpoints: (ECarColor | undefined)[] = new Array(level.mapdata.length);\r\n        for(const end of level.endpoints) {\r\n            allEndpoints[end.position.x + end.position.y * level.width] = end.color;\r\n        }\r\n\r\n        for(let i = 0; i < level.mapdata.length; i++) {\r\n            let x = i % level.width;\r\n            let y = Math.floor(i / level.width);\r\n            const definition = allMapTileDefinitions[level.mapdata[i]];\r\n            if(definition === null) {\r\n                this.map[x][y] = null;\r\n            }\r\n            else {\r\n                this.map[x][y] = new MapTile(definition, assets.getTrackSprite(definition.tileId), allEndpoints[i]);\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < level.disableSignals.length; i++) {\r\n            this.map[level.disableSignals[i].tile.x][level.disableSignals[i].tile.y].DisableSignal(level.disableSignals[i].signalIndex, level.disableSignals[i].forceSignals);\r\n        }\r\n\r\n        this.ResetLevel();\r\n    }\r\n\r\n    public tryGetOverlay(clickLocation: Point, cvsScaleFactor: number): SignalCtrlPanel | undefined {\r\n        const tilePt = new Point(Math.floor(clickLocation.x / TILE_SIZE), Math.floor(clickLocation.y / TILE_SIZE));\r\n        const tile = this.map[tilePt.x][tilePt.y];\r\n        if(tile === undefined || tile === null || tile.signals.length === 0) return undefined;\r\n        const nearestSignal = findMin(tile.signals, signal => Point.subtract(signal.getRenderPosition(tilePt), clickLocation).LengthSq());\r\n\r\n        if(nearestSignal.isDisabled) return undefined;\r\n\r\n        const preferredRenderLocation = new Point(tilePt.x * TILE_SIZE + TILE_SIZE, tilePt.y * TILE_SIZE);\r\n        if(this.canvas.width / cvsScaleFactor - preferredRenderLocation.x < this.assets.ctrlPanelBackground.image.width) {\r\n            // Move to left side\r\n            preferredRenderLocation.x = tilePt.x * TILE_SIZE - this.assets.ctrlPanelBackground.image.width;\r\n        }\r\n\r\n        if(this.canvas.height / cvsScaleFactor - preferredRenderLocation.y < this.assets.ctrlPanelBackground.image.height) {\r\n            // Shift up to fit\r\n            preferredRenderLocation.y = this.canvas.height / cvsScaleFactor - this.assets.ctrlPanelBackground.image.height;\r\n        }\r\n\r\n        return new SignalCtrlPanel(tile, nearestSignal, this.assets, preferredRenderLocation.x, preferredRenderLocation.y);\r\n    }\r\n\r\n    public ResetLevel() {\r\n        this.cars = [];\r\n        for(const spawn of this.level.spawns) {\r\n            if(spawn.color >= 0) {\r\n                this.cars.push(new Car(\r\n                    spawn.color, \r\n                    this.assets.carImageAtlas.getSprite(\r\n                        new Point(CAR_SIZE * (spawn.color as number), 0),\r\n                        CAR_SIZE_PT,\r\n                        new Point(0.5, 0.5)\r\n                    ), \r\n                    TileAnchorHelper.EquivalentPosition({\r\n                        position: new Point(spawn.position.x, spawn.position.y),\r\n                        anchor: spawn.direction\r\n                    }), \r\n                    this.assets));\r\n            }\r\n            else {\r\n                this.cars.push(new Car(\r\n                    spawn.color, \r\n                    this.assets.carImageAtlas.getSprite(\r\n                        new Point(CAR_SIZE * (3 -(spawn.color as number)), 0),\r\n                        CAR_SIZE_PT,\r\n                        new Point(0.5, 0.5)\r\n                    ), \r\n                    TileAnchorHelper.EquivalentPosition({\r\n                        position: new Point(spawn.position.x, spawn.position.y),\r\n                        anchor: spawn.direction\r\n                    }), \r\n                    this.assets));\r\n            }\r\n        }\r\n        this.updateCars();\r\n    }\r\n\r\n    public updateCars() {\r\n        // Update all cars next positions\r\n        for(const car of this.cars) {\r\n            car.LogicTick();\r\n\r\n            if(car.isCrashed()) continue;\r\n            if(car.nextPosition !== undefined) {\r\n                car.position = car.nextPosition;\r\n            }\r\n            car.nextPosition = car.CalculateNextPosition(this);\r\n        }\r\n\r\n        for(const [pos, checkColis] of customGroupBy(this.cars, car => car.position.position, (p1, p2) => p1.x === p2.x && p1.y === p2.y)) {\r\n            for(let i = 0; i < checkColis.length; i++) {\r\n                for(let j = i + 1; j < checkColis.length; j++) {\r\n                    if(this.map[pos.x][pos.y].CheckColisions(checkColis[i], checkColis[j])) {\r\n                        checkColis[i].crashHere();\r\n                        checkColis[j].crashHere();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(const car of this.cars) {\r\n            if(car.nextPosition === undefined) continue;\r\n            const equivPoint = TileAnchorHelper.EquivalentPosition(car.nextPosition);\r\n\r\n            for(const otherCar of this.cars) {\r\n                if(car === otherCar || otherCar.nextPosition === undefined) continue;\r\n                if(equivPoint.anchor === otherCar.nextPosition.anchor && equivPoint.position.Equals(otherCar.nextPosition.position)) {\r\n                    car.crashAt(car.nextPosition);\r\n                    otherCar.crashAt(otherCar.nextPosition);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, interpPercent: number) {\r\n        for(const car of this.cars) {\r\n            car.EveryTick();\r\n        }\r\n\r\n        for(let dx = 0; dx < this.map.length; dx++) {\r\n            for(let dy = 0; dy < this.map[dx].length; dy++) {\r\n                if(this.map[dx][dy] !== null) {\r\n                    this.map[dx][dy].draw(ctx, dx, dy, this.assets);\r\n                }\r\n            }\r\n        }\r\n\r\n        const overdrawCars: Car[] = [];\r\n\r\n        for(const car of this.cars) {\r\n            const mapTile = this.map[car.position.position.x][car.position.position.y];\r\n            const fromAnchor = car.position.anchor;\r\n            const toAnchor = car.nextPosition?.anchor;\r\n            const checkOverdrawPos = [\r\n                car.position, car.nextPosition,\r\n                TileAnchorHelper.EquivalentPosition(car.position), TileAnchorHelper.EquivalentPosition(car.nextPosition)\r\n            ];\r\n\r\n            if(any(checkOverdrawPos, coords => \r\n                coords !== undefined && this.map[coords.position.x][coords.position.y].overdrawAnchors.indexOf(coords.anchor) !== -1\r\n            ))\r\n            {\r\n                overdrawCars.push(car);\r\n                continue;\r\n            }\r\n\r\n            car.draw(ctx, interpPercent, mapTile.GetPositionAdjust(fromAnchor, toAnchor, interpPercent));\r\n        }\r\n        \r\n\r\n        for(let dx = 0; dx < this.map.length; dx++) {\r\n            for(let dy = 0; dy < this.map[dx].length; dy++) {\r\n                if(this.map[dx][dy] !== null) {\r\n                    this.map[dx][dy].overdraw(ctx, dx, dy, this.assets);\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(const car of overdrawCars) {\r\n            const mapTile = this.map[car.position.position.x][car.position.position.y];\r\n            const fromAnchor = car.position.anchor;\r\n            const toAnchor = car.nextPosition?.anchor;\r\n            car.draw(ctx, interpPercent, mapTile.GetPositionAdjust(fromAnchor, toAnchor, interpPercent));\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"92b0680d8018abdf6ab4dce2cb8e7f4d.png\";","export default __webpack_public_path__ + \"40546b074d24707026ba482019c4d3b4.png\";","export default __webpack_public_path__ + \"068a4cb9e7cd5cde1c23e8fb17e230c2.png\";","export default __webpack_public_path__ + \"48175440e29eba81547fb6a3aae3f6ea.png\";","export default __webpack_public_path__ + \"c8060df9573385c396cd3cb0a91f4424.png\";","export default __webpack_public_path__ + \"f50a8f7fc9e146163272568decddbc2a.png\";","export default __webpack_public_path__ + \"560f633704b347d793db51e0a3fb7475.png\";","export default __webpack_public_path__ + \"dbe0d35db913eb26c862f06ff1aad1b0.png\";","export default __webpack_public_path__ + \"41279bc0b13b415202281fa495c04151.png\";","import { AnimationPlayCondition, IJsonAnimationInfo } from \"./assets/leveldata/IJsonAnimationInfo\";\r\nimport ECarColor from \"./ECarColor\";\r\n\r\nexport default class CarAnimationControl {\r\n    animations: {\r\n        [key in AnimationPlayCondition]?: IJsonAnimationInfo\r\n    };\r\n\r\n    constructor(public color: ECarColor) {\r\n        this.animations = {};\r\n    }\r\n\r\n    addAnimation(animation: IJsonAnimationInfo) {\r\n        if(typeof(animation.conditions) === 'string') {\r\n            this.animations[animation.conditions] = animation;\r\n        }\r\n        else {\r\n            for(const key of animation.conditions) {\r\n                this.animations[key] = animation;\r\n            }\r\n        }\r\n    }\r\n}","import gridlockTrackUrl from './gridlocktrack.png';\r\nimport carUrl from './cars.png';\r\nimport signalArrowUrl from './signal_arrows.png';\r\nimport signalHubUrl from './signal_hub.png';\r\nimport ctrlpanelUrl from './gridlock_ctrlpanel.png';\r\nimport fireUrl from './fire.png';\r\nimport ctrlpanelElementUrl from './control_uielements.png';\r\nimport carAnimationsUrl from './gray_anim.png';\r\nimport spawnRingUrl from './gridlock_spawns.png';\r\nimport { AtlasSprite, SpriteAtlas } from '../../common/assets/SpriteAtlas';\r\nimport ImageLoader from '../../common/assets/ImageLoader';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport AssetLoader from '../../common/assets/AssetLoader';\r\nimport { SpriteAnimation } from '../../common/assets/SpriteAnimation';\r\nimport Point from '../../common/position/Point';\r\nimport { ATLAS_WIDTH, TILE_SIZE_PT, TILE_SIZE } from '../Constants';\r\nimport ECarColor, { AllCarColors } from '../ECarColor';\r\nimport CarAnimationControl from '../CarAnimationControl';\r\nimport animationJson from './leveldata/animations.json';\r\nimport { IJsonAnimationInfo } from './leveldata/IJsonAnimationInfo';\r\n\r\nexport default class Assets {\r\n    public trackImageAtlas: SpriteAtlas;\r\n    public carImageAtlas: SpriteAtlas;\r\n    public signalHubSheet: SpriteSheet;\r\n    public signalArrowsImage: SpriteSheet;\r\n    public ctrlPanelBackground: ImageLoader;\r\n    public ctrlPanelElements: SpriteAtlas;\r\n    public spawnRingSheet: SpriteSheet;\r\n    public carAnimations: SpriteAtlas;\r\n    public fire: SpriteAnimation;\r\n\r\n    public animationControllers: {\r\n        [key in ECarColor]: CarAnimationControl\r\n    };\r\n    \r\n    constructor(loader: AssetLoader) {\r\n        this.trackImageAtlas = new SpriteAtlas(gridlockTrackUrl, loader.registerAssetLoadCallback());\r\n        this.carImageAtlas = new SpriteAtlas(carUrl, loader.registerAssetLoadCallback());\r\n        this.signalArrowsImage = new SpriteSheet(6, 6, signalArrowUrl, loader.registerAssetLoadCallback());\r\n        this.signalHubSheet = new SpriteSheet(6, 6, signalHubUrl, loader.registerAssetLoadCallback());\r\n        this.ctrlPanelBackground = new ImageLoader(ctrlpanelUrl, loader.registerAssetLoadCallback());\r\n        this.ctrlPanelElements = new SpriteAtlas(ctrlpanelElementUrl, loader.registerAssetLoadCallback());\r\n        this.spawnRingSheet = new SpriteSheet(48, 48, spawnRingUrl, loader.registerAssetLoadCallback());\r\n        this.carAnimations = new SpriteAtlas(carAnimationsUrl, loader.registerAssetLoadCallback());\r\n        this.fire = new SpriteAnimation(new SpriteAtlas(fireUrl, loader.registerAssetLoadCallback()), new Point(0,0), new Point(8, 16), 4);\r\n\r\n        this.animationControllers = <any>{};\r\n        \r\n        for(const carColor of AllCarColors) {\r\n            this.animationControllers[carColor] = new CarAnimationControl(carColor);\r\n        }\r\n\r\n        for(const animation of animationJson) {\r\n            this.animationControllers[<ECarColor> animation.carType].addAnimation(<IJsonAnimationInfo> animation);\r\n        }\r\n    }\r\n\r\n    getTrackSprite(tileId: number): AtlasSprite {\r\n        const tx = tileId % ATLAS_WIDTH;\r\n        const ty = Math.floor(tileId / ATLAS_WIDTH);\r\n        return this.trackImageAtlas.getSprite(\r\n            new Point(tx * TILE_SIZE, ty * TILE_SIZE),\r\n            TILE_SIZE_PT\r\n        );\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { NearestNeighborScaling, ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport GameState from \"./GameState\";\r\nimport levelsJson from './assets/leveldata/levels.json';\r\nimport ILevelData from \"./ILevelData\";\r\nimport Assets from \"./assets\";\r\nimport Point from \"../common/position/Point\";\r\nimport SignalCtrlPanel from \"./signalCtrl/signalCtrlPanel\";\r\nimport { TILE_SIZE } from \"./Constants\";\r\n\r\nconst NUM_INTERP_FRAMES = 40;\r\n\r\nconst MAX_CVS_WIDTH = 1024;\r\nconst MAX_CVS_HEIGHT = 1024;\r\n\r\nvar NextRunnerId = 0;\r\n\r\nexport default class Runner {\r\n    ctx: CanvasRenderingContext2D;\r\n    private repaintTimer: number;\r\n    private assets: Assets;\r\n    private boundEventListener: (ev: MouseEvent) => void;\r\n\r\n    gameState: GameState;\r\n    interpFrameCount: number;\r\n\r\n    isRunning: boolean;\r\n\r\n    overlay: SignalCtrlPanel | undefined;\r\n\r\n    private runnerID: number;\r\n\r\n    private isDestroyed: boolean;\r\n    private canvasScale: number;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        this.runnerID = NextRunnerId++;\r\n        console.log(`Create runner ${this.runnerID}`);\r\n        ResizeCanvas(canvas, 512 * 2, 384 * 2);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.ctx.save();\r\n        this.repaintTimer = -1;\r\n        this.interpFrameCount = 0;\r\n        this.isRunning = false;\r\n        this.isDestroyed = false;\r\n\r\n        this.boundEventListener = this.handleMouseEvent.bind(this);\r\n        this.overlay = undefined;\r\n\r\n        canvas.addEventListener('click', this.boundEventListener);\r\n    }\r\n\r\n    handleKeyEvent(ev: KeyboardEvent): boolean {\r\n        if(ev.key === 'escape') {\r\n            this.overlay = undefined;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleMouseEvent(ev: MouseEvent) {\r\n        if(this.isRunning) return;\r\n        const relCoords = new Point(ev.offsetX / this.canvasScale, ev.offsetY / this.canvasScale);\r\n        if(!(this.overlay?.tryHandleClick(relCoords.x, relCoords.y) ?? false)) {\r\n            this.overlay = this.gameState.tryGetOverlay(relCoords, this.canvasScale);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        const loader = new AssetLoader();\r\n        this.assets = new Assets(loader); \r\n        loader.onAllFinished(this.loadComplete.bind(this));\r\n    }\r\n\r\n    toggleRunning() {\r\n\r\n        this.gameState.ResetLevel();\r\n        this.interpFrameCount = 0;\r\n        this.isRunning = !this.isRunning;\r\n        \r\n        this.overlay = undefined;\r\n    }\r\n\r\n    loadLevel(level: ILevelData) {\r\n        console.log('LOAD');\r\n        \r\n        this.ctx.restore();\r\n        this.ctx.save();\r\n        \r\n        const levelWidth = level.width * TILE_SIZE;\r\n        const levelHeight = level.height * TILE_SIZE;\r\n        \r\n        console.log(`${levelWidth * 2}, ${MAX_CVS_WIDTH}`);\r\n        if(levelWidth * 2 <= MAX_CVS_WIDTH && levelHeight * 2 <= MAX_CVS_HEIGHT) {\r\n            ResizeCanvas(this.canvas, levelWidth * 2, levelHeight * 2);\r\n            NearestNeighborScaling(this.ctx);\r\n            this.ctx.scale(2, 2);\r\n            this.canvasScale = 2;\r\n        } else {\r\n            ResizeCanvas(this.canvas, levelWidth, levelHeight);\r\n            this.canvasScale = 1;\r\n        }\r\n\r\n        this.gameState = new GameState(level, this.canvas, this.assets);\r\n        this.interpFrameCount = 0;\r\n        this.overlay = undefined;\r\n\r\n    }\r\n\r\n    private loadComplete() {\r\n        this.gameState = new GameState((levelsJson as ILevelData[])[0], this.canvas, this.assets);\r\n        this.loadLevel((levelsJson as ILevelData[])[0]);\r\n        this.runTick();\r\n    }\r\n\r\n    private runTick() {\r\n        if(this.isDestroyed) return;\r\n        this.tick();\r\n        this.draw();\r\n        this.repaintTimer = requestAnimationFrame(this.runTick.bind(this));\r\n    }\r\n\r\n    tick() {\r\n        if(!this.isRunning) {\r\n            this.interpFrameCount = 0;\r\n        }\r\n        else {\r\n            this.interpFrameCount++;\r\n            if(this.interpFrameCount >= NUM_INTERP_FRAMES) {\r\n                this.interpFrameCount = 0;\r\n                this.gameState.updateCars();\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.save();\r\n        this.gameState.draw(this.canvas, this.ctx, this.interpFrameCount / NUM_INTERP_FRAMES);\r\n        this.ctx.restore();\r\n\r\n        if(this.overlay !== undefined) {\r\n            this.overlay.draw(this.ctx);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.repaintTimer !== -1) {\r\n            cancelAnimationFrame(this.repaintTimer);\r\n        }\r\n        this.isDestroyed = true;\r\n        this.canvas.removeEventListener('click', this.boundEventListener);\r\n        console.log(`Destroy runner ${this.runnerID}`);\r\n    }\r\n}","export default __webpack_public_path__ + \"a787dffd8ab2ddec59191932b3f33b53.png\";","import * as React from 'react';\r\nimport { SpriteSheet } from \"../../../projects/common/assets/SpriteSheet\";\r\nimport { ResizeCanvas } from '../../../projects/common/CanvasHelpers';\r\nimport { ATLAS_WIDTH } from '../../../projects/gridlock/Constants';\r\nimport ILevelData from \"../../../projects/gridlock/ILevelData\";\r\n\r\nexport const PREVIEW_TILE_SIZE = 16;\r\n\r\nexport default function GridlockLevelPreviewComponent(props: { level: ILevelData, previewSheet: SpriteSheet, onClick?: (ev: MouseEvent) => void}) {\r\n    const ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        if(ref.current === undefined || props.previewSheet === undefined) return;\r\n        ResizeCanvas(ref.current, PREVIEW_TILE_SIZE * props.level.width, PREVIEW_TILE_SIZE * props.level.height);\r\n        const ctx = ref.current.getContext('2d');\r\n        ctx.clearRect(0, 0, PREVIEW_TILE_SIZE * props.level.width, PREVIEW_TILE_SIZE * props.level.height);\r\n        let mapDataIndex = 0;\r\n        for(var dy = 0; dy < props.level.height; dy++) {\r\n            for(var dx = 0; dx < props.level.width; dx++) {\r\n                const mapData = props.level.mapdata[mapDataIndex++];\r\n                const atlasX = Math.floor(mapData % ATLAS_WIDTH);\r\n                const atlasY = Math.floor(mapData / ATLAS_WIDTH);\r\n\r\n                props.previewSheet.render(ctx, PREVIEW_TILE_SIZE * dx, PREVIEW_TILE_SIZE * dy, PREVIEW_TILE_SIZE, PREVIEW_TILE_SIZE, atlasX, atlasY);\r\n            }\r\n        }\r\n    }, [ref.current])\r\n\r\n    return <div className='flex row align-center' style={{border: '1px solid black', padding: '0 0 0 8px'}} onClick={ev => props.onClick(ev.nativeEvent)}>\r\n        <span>{props.level.id}: {props.level.name}</span>\r\n        <canvas ref={ref}  />\r\n    </div>;\r\n}","import * as React from 'react';\r\nimport Runner from '../../../projects/gridlock/Runner';\r\nimport levelJson from '../../../projects/gridlock/assets/leveldata/levels.json';\r\nimport previewUrl  from '../../../projects/gridlock/assets/gridlock_preview.png';\r\nimport ILevelData from \"../../../projects/gridlock/ILevelData\";\r\nimport useLoader from '../../../hooks/useLoader';\r\nimport { SpriteSheet } from '../../../projects/common/assets/SpriteSheet';\r\nimport GridlockLevelPreviewComponent, { PREVIEW_TILE_SIZE } from './GridlockLevelPreviewComponent';\r\n\r\nexport default function GridlockComponent() {\r\n    const ref = React.useRef<HTMLCanvasElement>();\r\n    const previewImage = useLoader(onFinish => new SpriteSheet(PREVIEW_TILE_SIZE, PREVIEW_TILE_SIZE, previewUrl, onFinish), []);\r\n    const [runner, setRunner] = React.useState<Runner>(undefined);\r\n    const [showLevels, setShowLevels] = React.useState<boolean>(false);\r\n    \r\n    React.useEffect(()=>{\r\n        if(ref.current === undefined) return;\r\n\r\n        const runner = new Runner(ref.current);\r\n        setRunner(runner);\r\n        runner.start();\r\n        return ()=>runner.stop();\r\n    }, [ref.current, previewImage]);\r\n\r\n    if(previewImage === undefined) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <div className='flex row'>\r\n        <canvas ref={ref} tabIndex={0} onKeyDown={key => {\r\n            if(key.keyCode === 32) {\r\n                runner?.toggleRunning();\r\n                key.preventDefault();\r\n                key.stopPropagation();\r\n            }\r\n            else {\r\n                if(runner?.handleKeyEvent(key.nativeEvent) ?? false)\r\n                {\r\n                    key.preventDefault();\r\n                    key.stopPropagation();\r\n                }\r\n            }\r\n        }} />\r\n        <div className='flex col'>\r\n            <button onClick={ev => {\r\n                if(runner) {\r\n                    runner.toggleRunning();\r\n                }\r\n            }}>Start/Reset</button>\r\n            \r\n            <button onClick={() => setShowLevels(!showLevels)}>{showLevels ? 'Hide Level Select' : 'Show Level Select'}</button>\r\n            {showLevels ? levelJson.map(level => \r\n                <GridlockLevelPreviewComponent key={level.id} level={level} previewSheet={previewImage} onClick={(ev) => {\r\n                    runner?.loadLevel(level);\r\n                    ev.preventDefault();\r\n                    ev.stopImmediatePropagation();\r\n                }} />) : <></>}\r\n        </div>\r\n    </div>;\r\n}\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport AssetLoader from \"../projects/common/assets/AssetLoader\";\r\n\r\nexport default function useLoader<T>(loadItem : (finishCallback: () => void) => T, deps: React.DependencyList) : T | undefined {\r\n    const [state, setState] = useState<T>(undefined);\r\n\r\n    useEffect(() => {\r\n        console.log('Reload item');\r\n        const loader = new AssetLoader();\r\n        const resultItem = loadItem(loader.registerAssetLoadCallback());\r\n        loader.onAllFinished(() => {\r\n            setState(resultItem);\r\n        });\r\n    }, deps);\r\n\r\n    return state;\r\n}"],"sourceRoot":""}