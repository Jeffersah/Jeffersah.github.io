{"version":3,"file":"725.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/entities/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyTurnPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","import Point from './Point';\n\nexport enum Direction {\n    Up = 0,\n    UpRight,\n    Right,\n    DownRight,\n    Down,\n    DownLeft,\n    Left,\n    UpLeft,\n}\n\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\n\nexport const directionValues: Point[] = [\n    new Point(0, -1),\n    new Point(1, -1),\n    new Point(1, 0),\n    new Point(1, 1),\n    new Point(0, 1),\n    new Point(-1, 1),\n    new Point(-1, 0),\n    new Point(-1, -1),\n];\n\nexport const allDirections: Direction[] = [\n    Direction.Up,\n    Direction.UpRight,\n    Direction.Right,\n    Direction.DownRight,\n    Direction.Down,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n];\nexport const cardinalDirections: ECardinalDirection[] = [\n    Direction.Up,\n    Direction.Right,\n    Direction.Down,\n    Direction.Left\n];\nexport const diagonalDirections: EDiagonalDirection[] = [\n    Direction.UpRight,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.UpLeft,\n];\n\nexport function ToPoint(direction: Direction): Point {\n    return directionValues[direction];\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import Point from './Point';\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\n\nexport default class Rect {\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\n\n    shift(x: number, y: number): Rect;\n    shift(p: Point): Rect;\n    shift(xp: number | Point, y?: number): Rect {\n        if (y === undefined) {\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\n        }\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\n    }\n\n    shiftBy(x: number, y: number): void;\n    shiftBy(p: Point): void;\n    shiftBy(xp: number | Point, y?: number): void {\n        if (y === undefined) {\n            this.x += (xp as Point).x;\n            this.y += (xp as Point).y;\n        } else {\n            this.x += (xp as number);\n            this.y += y;\n        }\n    }\n\n    edge(direction: ECardinalDirection): number {\n        switch (direction) {\n            case Direction.Up: return this.y;\n            case Direction.Down: return this.y + this.h;\n            case Direction.Left: return this.x;\n            case Direction.Right: return this.x + this.w;\n        }\n    }\n\n    corner(direction: EDiagonalDirection): Point {\n        switch (direction) {\n            case Direction.UpRight: return new Point(this.x, this.y);\n            case Direction.DownRight: return new Point(this.x, this.y);\n            case Direction.DownLeft: return new Point(this.x, this.y);\n            case Direction.UpLeft: return new Point(this.x, this.y);\n        }\n    }\n\n    equals(r: Rect) {\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\n    }\n}","import Point from \"../common/position/Point\";\n\nexport const TILE_WIDTH = 32;\nexport const TILE_HEIGHT = 32;\nexport const PIX_PER_CELL_X = 32;\nexport const PIX_PER_CELL_Y = new Point(16, 24);\n\nexport const MAP_SIZE = 6;\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\n\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\n\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"01e11f7981f442c6037827f1760c4c3e.png\";","import AssetLoader from \"../common/assets/AssetLoader\";\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\n\nexport default class Assets {\n    tiles: SpriteSheet;\n\n    constructor(loader: AssetLoader) {\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\n    }\n\n}","import Point from \"../common/position/Point\";\n\nexport enum Direction {\n    Right = 0,\n    DownRight = 1,\n    DownLeft = 2,\n    Left = 3,\n    UpLeft = 4,\n    UpRight = 5\n}\n\nexport const AllDirections: Direction[] = [\n    Direction.Right,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n    Direction.UpRight\n];\n\nexport class DirectionHelper {\n    public static ToPoint(direction: Direction): Point {\n        switch (direction) {\n            case Direction.Right: return new Point(1, 0);\n            case Direction.DownRight: return new Point(0, 1);\n            case Direction.DownLeft: return new Point(-1, 1);\n            case Direction.Left: return new Point(-1, 0);\n            case Direction.UpLeft: return new Point(0, -1);\n            case Direction.UpRight: return new Point(1, -1);\n        }\n    }\n\n    public static Turn(direction: Direction, amount: number): Direction {\n        const result = (direction + amount)%6;\n        return (result + 6) % 6;\n    }\n}","import Rect from \"../position/Rectangle\";\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\nimport Point from \"../position/Point\";\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\n\n    public origin: Point;\n\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\n        this.origin = origin ?? new Point(0,0);\n    }\n\n    getSprite(): Sprite {\n        return this;\n    }\n\n    getPixelSize(): Point {\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\n    }\n\n    getRenderable(): IRenderable {\n        return this;\n    }\n\n    public width() {\n        return this.sourceBounds.w;\n    }\n    public height() {\n        return this.sourceBounds.h;\n    }\n\n    tick(): boolean {\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\n        const oldTransform = ctx.getTransform();\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\n        ctx.drawImage(this.source, \n            this.sourceBounds.x, \n            this.sourceBounds.y, \n            this.sourceBounds.w, \n            this.sourceBounds.h, \n            0, \n            0, \n            destination.w, \n            destination.h);\n        ctx.setTransform(oldTransform);\n    }\n}","import { IWeaponArgs } from \"../../bullets/weapons/Weapon\";\nimport Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport * as C from '../Constants';\n\nexport default class PlayerWeapon {\n\n    public iconImage: IRenderable;\n    public sprite: IRenderable;\n\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\n        if(this.type === 'primary') {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n        else {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n    }\n}\n","import Point from \"../common/position/Point\";\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\nimport { Direction, DirectionHelper } from \"./Direction\";\n\nexport function HexToPixel(point: Point) {\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\n}\n\nexport function PixelToHex(point: Point) {\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\n    return new Point(tilesX, tilesY);\n}\n\nexport function HexLength(point: Point): number {\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\n    }\n    else {\n        return Math.abs(point.x) + Math.abs(point.y);\n    }\n}\n\nexport function GetRing(radius: number) {\n    if(radius === 0) return [new Point(0,0)];\n\n    const result: Point[] = [];\n    let pos = new Point(0, -radius);\n    \n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\n        var dir = DirectionHelper.ToPoint(direction);\n        for(var len = 0; len < radius; len++){\n            result.push(pos);\n            pos = Point.add(pos, dir);\n        }\n    }\n\n    return result;\n}","import { LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport { OffsetRenderable } from \"../../common/rendering/OffsetRenderable\";\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\nimport Assets from \"../Assets\";\nimport Entity from \"../Entity\";\nimport PlayerWeapon from \"./PlayerWeapon\";\nimport * as C from '../Constants';\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Rect from \"../../common/position/Rectangle\";\nimport { HexToPixel } from \"../Hex\";\n\nexport default class Player extends Entity {\n\n    public primary: PlayerWeapon;\n    public secondary: PlayerWeapon;\n    private renderable: Sprite;\n\n    constructor(assets: Assets, pos: Point) {\n        super(pos);\n\n        this.primary = new PlayerWeapon('primary', assets, new Point(8, 1));\n        this.secondary = new PlayerWeapon('secondary', assets, new Point(10, 0));\n\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n\n        const target = HexToPixel(this.position);\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\n\n        this.renderable.draw(ctx, rect, 0);\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\n    }\n}","import { LinkedInterpolation } from \"../common/interpolation/Interpolated\";\nimport Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport GameState from \"./GameState\";\n\nexport default abstract class Entity {\n    isFlying: boolean;\n    maxHp: number;\n    hp: number;\n    position: Point;\n\n    constructor(position: Point) {\n        this.position = position;\n    }\n    \n    TakeDamage(dmg: number) {\n\n    }\n\n    tick(state: GameState) {\n\n    }\n\n    abstract draw(ctx: CanvasRenderingContext2D): void;\n}","import Point from \"../common/position/Point\";\n\nexport default class HexArray<T> {\n    private data: T[][];\n    private _size: number;\n\n    constructor(size: number, defaultValue: T) {\n        this._size = size;\n        this.data = [];\n        let midRowLength = size*2 - 1;\n        for(let dy = -size+1; dy <= size-1; dy++){\n            let row: T[] = [];\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\n                row.push(defaultValue);\n            }\n            this.data.push(row);\n        }\n    }\n\n    public size() {\n        return this._size;\n    }\n\n    public get(x: number, y: number): T;\n    public get(pt: Point): T;\n    public get(pt: [number, number]): T;\n    public get(xp: number|Point|[number, number], yp?: number): T {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        let [dx, row] = this.toArrayCoords(x, y);\n        return this.data[row][dx];\n    }\n\n    public set(value: T, x: number, y: number): void;\n    public set(value: T, pt: Point): void;\n    public set(value: T, pt: [number, number]): void;\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        const [dx, row] = this.toArrayCoords(x, y);\n        this.data[row][dx] = value;\n    }\n\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\n        if(typeof xp === \"number\"){\n            return [xp as number, y];\n        }\n        else if ((xp as Point).x !== undefined) {\n            return [(xp as Point).x, (xp as Point).y];\n        }\n        else {\n            return xp as [number, number];\n        }\n    }\n\n    public getRowLength(y: number): number {\n        return this._size * 2 - 1 - Math.abs(y);\n    }\n\n    public isInBounds(x: number, y: number): boolean {\n        if(y <= -this._size || y >= this._size) {\n            return false;\n        }\n        let [xMin, xMax] = this.getXRange(y);\n        return x >= xMin && x < xMax;\n    }\n\n    public getXRange(y: number): [number, number] {\n        const minX = this.getMinX(y);\n        const len = this.getRowLength(y);\n        return [minX, minX + len];\n    }\n\n    public getMinX(y: number): number {\n        const row = this._size - 1 + y;\n        return -Math.min(row, this._size - 1);\n    }\n\n    public iterate(func: (x: number, y: number, value: T) => void) {\n        for(let y = -this._size+1; y < this._size; y++) {\n            let [xMin, xMax] = this.getXRange(y);\n            for(let x = xMin; x < xMax; x++) {\n                func(x, y, this.get(x, y));\n            }\n        }\n    }\n\n    private toArrayCoords(x: number, y: number): [number, number] {\n        const row = this._size - 1 + y;\n        const firstX = -Math.min(row, this._size - 1);\n        const dx = x - firstX;\n\n        return [dx, row];\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Player from \"./entities/Player\";\nimport HexArray from \"./HexArray\";\nimport HexCell from \"./HexCell\";\nimport IMapGen from \"./mapGen/IMapGen\";\nimport * as C from \"./Constants\";\nimport Entity from \"./Entity\";\nimport { HexToPixel } from \"./Hex\";\nimport Rect from \"../common/position/Rectangle\";\n\nexport default class GameState {\n\n    public player: Player;\n    public enemies: Entity[] = [];\n\n    public tiles: HexArray<HexCell>;\n    public entities: HexArray<Entity>;\n    \n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\n        this.entities = new HexArray<Entity>(size, null);\n        this.changeFloor(floorNum, generator);\n\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\n        this.entities.set(this.player, C.PLAYER_START_POSITION.x, C.PLAYER_START_POSITION.y);\n    }\n\n    moveEntity(entity: Entity, to: Point) {\n        this.entities.set(null, entity.position);\n        this.entities.set(entity, to);\n        entity.position = to;\n    }\n\n    changeFloor(floorNum: number, generator: IMapGen) {\n        this.entities = new HexArray<Entity>(this.entities.size(), null);\n        generator.generateMap(this.assets, floorNum, this);\n        this.tiles.iterate((x, y, tile) =>{\n            tile.AfterWorldLoad(this, new Point(x, y));\n        });\n    }\n\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\n        this.tiles.iterate((x, y, cell) => {\n            cell.draw(ctx, this, new Point(x, y));\n        });\n\n        this.entities.iterate((x, y, entity) => {\n            if(entity !== null && entity !== undefined) {\n                if(excludeEntities === undefined || !excludeEntities.includes(entity)) {\n                    entity.draw(ctx);\n                }\n            }\n        });\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\n\nexport default class EnemyTurnPhase implements IGamePhase {\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        return new PlayerTurnGamePhase();\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport { HexToPixel, PixelToHex } from \"../Hex\";\nimport HexCell from \"../HexCell\";\nimport EnemyTurnPhase from \"./EnemyTurnPhase\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\n\nexport default class PlayerMoveAnimPhase implements IGamePhase {\n\n    private time: number = 0;\n    private duration: number;\n    constructor(private playerPos: Point, private playerDest: Point) {\n        \n    }\n\n    init(state: GameState): void {\n        if(state.enemies.length === 0) {\n            this.duration = 2;\n        }\n        else {\n            this.duration = 10;\n        }\n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.time++;\n        if(this.time === this.duration) { \n            state.entities.set(null, this.playerPos);\n            state.entities.set(state.player, this.playerDest);\n            state.player.position = this.playerDest;\n            if(state.enemies.length === 0) {\n                return new PlayerTurnGamePhase();\n            }\n            else {\n                return new EnemyTurnPhase();\n            }\n        }\n        return this;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        const lerp = this.time / this.duration;\n        state.draw(ctx, [state.player]);\n\n        state.player.position = Point.interpolate(this.playerPos, this.playerDest, lerp);\n        state.player.draw(ctx);\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\n\nconst dirKeys = [\n    { key: 'a', dir: Direction.Left },\n    { key: '4', dir: Direction.Left },\n    \n    { key: 'q', dir: Direction.UpLeft },\n    { key: '7', dir: Direction.UpLeft },\n\n    { key: 'w', dir: Direction.UpRight },\n    { key: '9', dir: Direction.UpRight },\n\n    { key: 'd', dir: Direction.Right },\n    { key: '6', dir: Direction.Right },\n\n    { key: 'x', dir: Direction.DownRight },\n    { key: '3', dir: Direction.DownRight },\n\n    { key: 'z', dir: Direction.DownLeft },\n    { key: '1', dir: Direction.DownLeft },\n]\n\nexport default class PlayerTurnGamePhase implements IGamePhase {\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        const dir = this.tryGetDirection(keys);\n        if(dir !== undefined) {\n            const destination = Point.add(state.player.position, DirectionHelper.ToPoint(dir));\n\n            if(!state.tiles.isInBounds(destination.x, destination.y))\n                return this;\n            if(!state.tiles.get(destination).isPathable)\n                return this;\n            if(state.entities.get(destination) !== null)\n                return this;\n\n            return new PlayerMoveAnimPhase(state.player.position, destination);\n        }\n        return this;\n    }\n\n    tryGetDirection(keys: KeyboardManager): Direction | undefined {\n        for(let i = 0; i < dirKeys.length; i++) {\n            if(keys.isKeyPressed(dirKeys[i].key)) {\n                return dirKeys[i].dir;\n            }\n        }\n        return undefined;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n    }\n\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 120;\n\nexport default class EntryAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n\n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new PlayerTurnGamePhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n        state.player.draw(ctx);\n    }\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 120;\n\nexport default class GameStartAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n    \n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new EntryAnimationPhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.player.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport * as C from \"./Constants\";\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\n\nexport default abstract class HexCell {\n    isPathable: boolean;\n    typeId: number;\n\n    constructor(typeId: number, pathable: boolean){\n        this.typeId = typeId;\n        this.isPathable = pathable;\n    }\n\n    abstract OnEntityStep(entity: Entity): void;\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\n}\n\nexport abstract class SimpleCell extends HexCell{\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean){\n        super(typeId, isPathable);\n\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        \n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}\n\nexport class Floor extends SimpleCell {\n    constructor(assets: Assets, customSprite?: Point) {\n        super(0, assets, customSprite ?? new Point(0,0), true);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}\n\n// TypeID 1 : Lava\n\nexport class DownStairs extends SimpleCell {\n    constructor(assets: Assets) {\n        super(2, assets, new Point(5, 0), true);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}","import Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\n\nexport class StackRenderable implements IRenderable {\n\n    public finishMode: 'any'|'all';\n\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\n        this.finishMode = renderableFinishMode ?? 'any';\n    }\n\n    tick(): boolean {\n        let allFinished = true;\n        let anyFinished = false;\n        for(let i = 0; i < this.renderables.length; i++) {\n            const f = this.renderables[i].tick();\n            allFinished = allFinished && f;\n            anyFinished = anyFinished || f;\n        }\n        return this.finishMode === 'any' ? anyFinished : allFinished;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        for(let i = 0; i < this.renderables.length; i++) {\n            this.renderables[i].draw(ctx, position, rotation);\n        }\n    }\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\nimport Point from \"../position/Point\";\nimport Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport class DeltaRenderable implements IRenderable {\n    constructor(private source: IRenderable, public delta: Rectangle) {\n    }\n\n    tick(): boolean {\n        return this.source.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport * as C from \"./Constants\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\nimport HexCell from \"./HexCell\";\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\n\ninterface ITilePart {\n    directions: Direction[];\n    tileCoords: Point;\n    tileSlice: Rect;\n}\n\nconst tileParts: ITilePart[] = [\n    {\n        // Top of Tile\n        directions: [Direction.UpLeft, Direction.UpRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0, 1, 0.5),\n    },\n    {\n        // Bottom of Tile\n        directions: [Direction.DownLeft, Direction.DownRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\n    }, \n    {\n        // TopLeft of Tile\n        directions: [Direction.Left, Direction.UpLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\n    },\n    {\n        // TopRight of Tile\n        directions: [Direction.Right, Direction.UpRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\n    },\n    {\n        // BottomLeft of Tile\n        directions: [Direction.Left, Direction.DownLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\n    },\n    {\n        // BottomRight of Tile\n        directions: [Direction.Right, Direction.DownRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\n    }\n]\n\nexport default abstract class MultiPartCell extends HexCell{\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n    private assets: Assets;\n\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\n        super(typeId, isPathable);\n\n        this.assets = assets;\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        const adjacencyMap = AllDirections.map(d => {\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\n            }\n            else {\n                return true;\n            }\n        });\n\n        const images = tileParts.map(part => {\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\n            const sourceBounds = new Rect(\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\n                (part.tileSlice.w) * C.TILE_WIDTH,\n                (part.tileSlice.h) * C.TILE_HEIGHT\n            );\n            return new DeltaRenderable(\n                new Sprite(this.assets.tiles.image, sourceBounds),\n                part.tileSlice\n            );\n        });\n\n        this.renderable = new StackRenderable(\n            images,\n            'all'\n        );\n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}","import Point from \"../common/position/Point\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport GameState from \"./GameState\";\nimport HexCell from \"./HexCell\";\nimport MultiPartCell from \"./MultiPartCell\";\n\nexport default class Lava extends MultiPartCell {\n\n    constructor(assets: Assets) {\n        super(1, assets, new Point(0, 4), false);\n    }\n\n    OnEntityStep(entity: Entity): void {\n        if(!entity.isFlying)\n            entity.TakeDamage(999);\n    }\n}","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport { GetRing } from \"../Hex\";\nimport Lava from \"../LavaCell\";\nimport Point from \"../../common/position/Point\";\n\nconst playerMoveTileArts = [\n    new Point(6,2),\n    new Point(7,2),\n    new Point(9,2),\n    new Point(7,3),\n    new Point(6,3),\n    new Point(8,2),\n];\n\nexport default class FloorZeroGen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n\n        const ring = GetRing(2);\n        for(var i = 0; i < ring.length; i++) {\n            state.tiles.set(new Lava(assets), ring[i]);\n        }\n\n        const ring2 = GetRing(3);\n        for(var i = 0; i < ring2.length; i += 3) {\n            state.tiles.set(new Lava(assets), ring2[i]);\n        }\n\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\n        for(let i = 0; i < playerRing.length; i++) {\n            state.tiles.set(\n                new Floor(assets, playerMoveTileArts[i]),\n                playerRing[i]\n            )\n        }\n\n\n        state.tiles.set(new DownStairs(assets), 2, -4);\n    }\n}","import AssetLoader from '../common/assets/AssetLoader';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Point from '../common/position/Point';\nimport { TILES_HIGH } from '../rpgt/Constants';\nimport * as C from \"./Constants\";\nimport Assets from './Assets';\nimport GameState from './GameState';\nimport StandardMapGen from './mapGen/StandardMapGen';\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\nimport IGamePhase from './phases/IGamePhase';\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\nimport FloorZeroGen from './mapGen/FloorZeroGen';\n\nexport default function Run(): (()=>void) {\n    let ctx: CanvasRenderingContext2D;\n    \n    let keys: KeyboardManager;\n    let scaleHelper: NearestNeighborScalingHelper;\n    \n    const assetLoader = new AssetLoader();\n    const assets = new Assets(assetLoader);\n\n    let state: GameState;\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\n\n    keys = new KeyboardManager(document.body);\n    assetLoader.onAllFinished(assetLoadDone);\n    \n    function assetLoadDone() {\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n        ctx = canvas.getContext('2d');\n        scaleHelper = new NearestNeighborScalingHelper(\n            canvas, \n            ctx, \n            C.MAP_PIXEL_SIZE, \n            C.MAP_PIXEL_SIZE, \n            true, \n            () => { return; }\n        );\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\n        NearestNeighborScaling(ctx);\n        tick();\n    }\n    \n    function tick() {\n\n        const nextPhase = currentPhase.tick(state, keys);\n\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n\n        currentPhase.draw(ctx, state);\n\n        if(nextPhase !== currentPhase) {\n            currentPhase = nextPhase;\n            nextPhase.init(state);\n        }\n\n        keys.update();\n        requestAnimationFrame(() => tick());\n    }\n\n    return (() => scaleHelper.Detatch());\n}\n","import * as React from 'react';\nimport Run from '../../../projects/hoplite/index';\n\nexport default function HopliteComponent() {\n    React.useEffect(()=>Run());\n    return <div className='rpgt rpgt_body full_body center'>\n        <canvas id=\"mainCanvas\"></canvas>\n    </div>;\n}\n"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","static","angle","distance","Math","cos","sin","lengthSq","dot","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","rotate","theta","fromAngle","Rect","w","h","shift","xp","shiftBy","edge","corner","r","TILE_WIDTH","TILE_HEIGHT","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","tick","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","PlayerWeapon","type","assets","artTile","sprite","image","iconImage","AllDirections","DirectionHelper","amount","HexToPixel","point","GetRing","radius","result","pos","dir","Player","position","TakeDamage","dmg","state","super","primary","secondary","renderable","target","rect","HexArray","size","defaultValue","_size","data","midRowLength","dy","row","dx","abs","get","yp","extractInputCoords","toArrayCoords","set","value","getRowLength","isInBounds","xMin","xMax","getXRange","minX","getMinX","iterate","func","GameState","floorNum","generator","enemies","entities","changeFloor","player","moveEntity","entity","to","generateMap","tile","AfterWorldLoad","excludeEntities","cell","includes","EnemyTurnPhase","init","PlayerTurnGamePhase","PlayerMoveAnimPhase","playerPos","playerDest","time","duration","lerp","dirKeys","tryGetDirection","isPathable","i","EntryAnimationPhase","animationTime","fillStyle","globalAlpha","fillRect","GameStartAnimationPhase","HexCell","typeId","pathable","SimpleCell","spriteSheetPosition","bg_renderable","world","pt","Floor","customSprite","OnEntityStep","DownStairs","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","DeltaRenderable","delta","Rectangle","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","map","d","hexPt","images","part","index","reduceRight","acc","Lava","isFlying","playerMoveTileArts","FloorZeroGen","floor","ring","ring2","playerRing","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","nextPhase","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","id"],"sourceRoot":""}