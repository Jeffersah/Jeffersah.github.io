{"version":3,"file":"hoplite.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_features.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_enemies.png","webpack://trading-game/./src/projects/hoplite/assets/hp.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_impacts.png","webpack://trading-game/./src/projects/hoplite/assets/lava_layers.png","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/HpRenderer.ts","webpack://trading-game/./src/projects/common/rendering/SpriteAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ProjectileAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/tiles/HexCell.ts","webpack://trading-game/./src/projects/hoplite/tiles/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/animation/DelayAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/TileAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/tiles/Lava.ts","webpack://trading-game/./src/projects/hoplite/entities/Archer.ts","webpack://trading-game/./src/projects/hoplite/entities/Mage.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/RadialAreaAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/entities/Giant.ts","webpack://trading-game/./src/projects/common/rendering/OffsetRenderable.ts","webpack://trading-game/./src/projects/hoplite/entities/StoneEye.ts","webpack://trading-game/./src/projects/hoplite/features/IFeature.ts","webpack://trading-game/./src/projects/hoplite/features/LifeGem.ts","webpack://trading-game/./src/projects/hoplite/tiles/Floor.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/features/Portal.ts","webpack://trading-game/./src/projects/common/MathHelpers.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/DjikstraPath.ts","webpack://trading-game/./src/projects/hoplite/mapGen/MapGenCommon.ts","webpack://trading-game/./src/projects/hoplite/tiles/Trap.ts","webpack://trading-game/./src/projects/hoplite/features/Shrine.ts","webpack://trading-game/./src/projects/hoplite/entities/Spider.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AttackResolutionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PhaseBuilder.ts","webpack://trading-game/./src/projects/hoplite/phases/AfterMovePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/features/Stairs.ts","webpack://trading-game/./src/projects/hoplite/entities/StoneDisc.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/SpawnEnemyAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/entities/BlueBurstDisc.ts","webpack://trading-game/./src/projects/hoplite/entities/BlueMage.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/assets/IAssetSheet.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/common/input/MouseWatcher.ts","webpack://trading-game/./src/projects/common/input/MouseManager.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\r\nimport { InterpolationFunction } from \"./InterpolationFunction\";\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n\r\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\r\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}\r\n\r\nexport class LinkedInterpolation<T> {\r\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\r\n\r\n    }\r\n\r\n    sample(): T {\r\n        return this.timer.sample(this.interp);\r\n    }\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(typeof(interpolator) !== 'function') {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const TILE_SIZE = new Point(TILE_WIDTH, TILE_HEIGHT);\r\nexport const HALF_TILE_SIZE = new Point(TILE_WIDTH / 2, TILE_HEIGHT / 2);\r\n\r\nexport const MAP_SIZE = 7;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\r\n\r\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"d4f5110b87c0d1ad71ce32f04ca66ca6.png\";","export default __webpack_public_path__ + \"b1ad2b17beecab6f53f7b70fab951c0e.png\";","export default __webpack_public_path__ + \"b5124a83d98bc334e6e3de5f7e27e05f.png\";","export default __webpack_public_path__ + \"92efb3d656356bbd02c1f86bf78275d7.png\";","export default __webpack_public_path__ + \"b78374db2fae35ea358c6a9e2b27ccd6.png\";","export default __webpack_public_path__ + \"6c72c5024765beedd162e66308ac2e23.png\";","export default __webpack_public_path__ + \"03a3f451813fb76552aa69688d48cdef.png\";","import Point from \"../common/position/Point\";\r\nimport { HexLength } from \"./Hex\";\r\n\r\nexport enum Direction {\r\n    Right = 0,\r\n    DownRight = 1,\r\n    DownLeft = 2,\r\n    Left = 3,\r\n    UpLeft = 4,\r\n    UpRight = 5\r\n}\r\n\r\nexport const AllDirections: Direction[] = [\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n    Direction.UpRight\r\n];\r\n\r\nexport class DirectionHelper {\r\n\r\n    public static ToAngle(direction: Direction): number {\r\n        return ((Math.PI * direction) / 3) - (Math.PI / 2);\r\n    }\r\n\r\n    public static ToPoint(direction: Direction): Point {\r\n        switch (direction) {\r\n            case Direction.Right: return new Point(1, 0);\r\n            case Direction.DownRight: return new Point(0, 1);\r\n            case Direction.DownLeft: return new Point(-1, 1);\r\n            case Direction.Left: return new Point(-1, 0);\r\n            case Direction.UpLeft: return new Point(0, -1);\r\n            case Direction.UpRight: return new Point(1, -1);\r\n        }\r\n    }\r\n\r\n    public static FromPoint(pt: Point): Direction {\r\n        if(pt.x > 0 && pt.y === 0) return Direction.Right;\r\n        if(pt.x < 0 && pt.y === 0) return Direction.Left;\r\n        if(pt.x === 0 && pt.y > 0) return Direction.DownRight;\r\n        if(pt.x === 0 && pt.y < 0) return Direction.UpLeft;\r\n        if(pt.x > 0 && pt.x === -pt.y) return Direction.UpRight;\r\n        if(pt.x < 0 && pt.x === -pt.y) return Direction.DownLeft;\r\n        return undefined;\r\n    }\r\n\r\n    public static TryGetDirectionAndDistance(ray: Point): { direction: Direction, distance: number } | undefined {\r\n        if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n            return { direction: this.FromPoint(new Point(Math.sign(ray.x), Math.sign(ray.y))), distance: HexLength(ray)};\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public static Turn(direction: Direction, amount: number): Direction {\r\n        const result = (direction + amount)%6;\r\n        return (result + 6) % 6;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\r\nimport { Direction, DirectionHelper } from \"./Direction\";\r\n\r\nexport function TurnRight(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(-pt.y, pt.x + pt.y);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function TurnLeft(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(pt.x + pt.y, -pt.x);\r\n    }\r\n    return pt;\r\n}\r\n\r\n// px = 16 * t.y + t.x * 32 + c.x\r\n// py = 24 * t.y + c.y\r\nexport function HexToPixel(point: Point) {\r\n    return Point.add(\r\n        Point.multiply(PIX_PER_CELL_Y, point.y), \r\n        point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\r\n}\r\n\r\n// (px - c.x - 16 ty) / 32 = t.x\r\n// (py - c.y) / 24 = t.y\r\nexport function PixelToHex(point: Point) {\r\n    const tile_y = Math.floor((point.y - MAP_CENTER_POSITION.y) / PIX_PER_CELL_Y.y);\r\n    const tile_x = Math.floor((point.x - MAP_CENTER_POSITION.x - PIX_PER_CELL_Y.x * tile_y) / PIX_PER_CELL_X);\r\n    return new Point(tile_x, tile_y);\r\n}\r\n\r\nexport function HexLength(point: Point): number {\r\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\r\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\r\n    }\r\n    else {\r\n        return Math.abs(point.x) + Math.abs(point.y);\r\n    }\r\n}\r\n\r\nexport function IsStraightLine(ray: Point): boolean {\r\n    if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) return true;\r\n    return false;\r\n}\r\n\r\nexport function GetRing(radius: number) {\r\n    if(radius === 0) return [new Point(0,0)];\r\n\r\n    const result: Point[] = [];\r\n    let pos = new Point(0, -radius);\r\n    \r\n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\r\n        var dir = DirectionHelper.ToPoint(direction);\r\n        for(var len = 0; len < radius; len++){\r\n            result.push(pos);\r\n            pos = Point.add(pos, dir);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"./Hex\";\r\n\r\nconst originDelta = new Point(8, 26);\r\n\r\nconst deltaX = 3;\r\nconst deltaY = -2;\r\n\r\nconst maxTilesPerRow = 5;\r\n\r\nexport default class HpRenderer {\r\n    private emptyHpImage: Sprite;\r\n    private redHpImage: Sprite;\r\n    private yellowHpImage: Sprite;\r\n    private blueHpImage: Sprite;\r\n    constructor(image: ImageLoader) {\r\n        this.emptyHpImage = new Sprite(image.image, new Rect(0, 0, 4, 5));\r\n        this.redHpImage = new Sprite(image.image, new Rect(3, 0, 4, 5));\r\n        this.yellowHpImage = new Sprite(image.image, new Rect(6, 0, 4, 5));\r\n        this.blueHpImage = new Sprite(image.image, new Rect(9, 0, 4, 5));\r\n    }\r\n\r\n    public draw(ctx:CanvasRenderingContext2D, pos: Point, hp: number, maxHp: number) {\r\n        const rows = Math.ceil(maxHp / maxTilesPerRow);\r\n        let lastRowLength = maxHp % maxTilesPerRow;\r\n        if(lastRowLength === 0) { lastRowLength = maxTilesPerRow; }\r\n\r\n        const fullImage = hp <= maxHp / 4 ? this.redHpImage : hp <= maxHp / 2 ? this.yellowHpImage : this.blueHpImage;\r\n        const emptyImage = this.emptyHpImage;\r\n\r\n        let originPoint = Point.add(HexToPixel(pos), originDelta);\r\n\r\n        for(let row = 0; row < rows - 1; row++) {\r\n            const dy = (rows - row - 1) * deltaY;\r\n            for(let col = 0; col < maxTilesPerRow; col++) {\r\n                let image = hp <= 0 ? emptyImage : fullImage;\r\n                hp--;\r\n                image.draw(ctx, new Rect(originPoint.x + col * deltaX, originPoint.y + dy, 4, 5), 0);\r\n            }\r\n        }\r\n\r\n        // last row\r\n        const lastRowDx = (maxTilesPerRow - lastRowLength) * deltaX / 2;\r\n        for(let col = 0; col < lastRowLength; col++){\r\n            let image = hp <= 0 ? emptyImage : fullImage;\r\n            hp--;\r\n            image.draw(ctx, new Rect(originPoint.x + col * deltaX + lastRowDx, originPoint.y , 4, 5), 0);\r\n        }\r\n    }\r\n}","import Rect from \"../position/Rectangle\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\nimport Sprite from \"./Sprite\";\r\n\r\nexport class SpriteAnimation implements IRenderableSource {\r\n    constructor(\r\n        public source: CanvasImageSource,\r\n        public firstFrame: Rect, \r\n        public origin: Point,\r\n        public frameAdvance: Point,\r\n        public numFrames: number,\r\n        public duration: number,\r\n        public loop: boolean) {\r\n\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.firstFrame.w, this.firstFrame.y);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return new SpriteAnimationInstance(this, this.loop);\r\n    }\r\n\r\n    getSprite(frameNumber: number): Sprite {\r\n        const frame = new Rect(\r\n            this.firstFrame.x + (frameNumber * this.frameAdvance.x),\r\n            this.firstFrame.y + (frameNumber * this.frameAdvance.y),\r\n            this.firstFrame.w,\r\n            this.firstFrame.h\r\n        );\r\n        return new Sprite(this.source, frame, this.origin);\r\n    }\r\n}\r\n\r\nexport class SpriteAnimationInstance implements ISimpleRenderable, IRenderable {\r\n\r\n    private duration: number;\r\n    private currentTick: number;\r\n\r\n    constructor(public source: SpriteAnimation, public loop: boolean, private overrideDuration?: number) {\r\n        this.duration = overrideDuration ?? source.duration;\r\n        this.currentTick = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTick++;\r\n        if(this.currentTick === this.duration) {\r\n            if(this.loop) this.currentTick = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        const frameNumber = (this.currentTick * this.source.numFrames) / this.duration;\r\n        return this.source.getSprite(Math.floor(frameNumber));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\r\n        this.getSprite().draw(ctx, position, rotation);\r\n    }\r\n}\r\n\r\n\r\nexport class DelaySpriteAnimationInstance implements ISimpleRenderable, IRenderable {\r\n\r\n    private duration: number;\r\n    private currentTick: number;\r\n\r\n    constructor(public source: SpriteAnimationInstance, delayDuration: number) {\r\n        this.duration = delayDuration;\r\n        this.currentTick = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.currentTick >= this.duration){\r\n            return this.source.tick();\r\n        }\r\n        else{\r\n            this.currentTick++;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        return this.source.getSprite();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\r\n        this.getSprite().draw(ctx, position, rotation);\r\n    }\r\n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Entity from \"../Entity\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class EntityMoveAnimation implements IAnimation {\r\n    private timer: InterpolationTimer;\r\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\r\n        this.timer = new InterpolationTimer(duration);\r\n    }\r\n\r\n    tick(): boolean{ \r\n        if(this.timer.tick()) {\r\n            this.entity.position = this.target;\r\n            return true;\r\n        }\r\n        this.entity.position = this.timer.sample(this.motion);\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        // The gamestate drawing will draw this entity. No need to draw it twice.\r\n        // this.entity.draw(ctx);\r\n    }\r\n}","import Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class RenderableAnimation implements IAnimation {\r\n    private rotation: number;\r\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\r\n        this.rotation = rotation ?? 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.fixedDuraiton !== undefined) {\r\n            this.fixedDuraiton--;\r\n            if(this.fixedDuraiton === -1) return true;\r\n            this.renderable.tick();\r\n            return false;\r\n        }\r\n        return this.renderable.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.renderable.draw(ctx, this.bounds, this.rotation);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class SequentialAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.steps.length === 0) return true;\r\n        \r\n        while(this.steps[0].tick()){\r\n            this.steps.shift();\r\n            if(this.steps.length === 0) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.steps[0].draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IAnimation from \"./IAnimation\";\r\nimport RenderableAnimation from \"./RenderableAnimation\";\r\nimport SequentialAnimation from \"./SequentialAnimation\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class ProjectileAnimation implements IAnimation {\r\n\r\n    private angle: number;\r\n    private time: number;\r\n    constructor(private renderable: IRenderable, private size: Point, private fromPixel: Point, private toPixel: Point, private duration: number) {\r\n        this.angle = Math.atan2(toPixel.y - fromPixel.y, toPixel.x - fromPixel.x);\r\n        this.time = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.time++;\r\n        return this.time >= this.duration;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const position = Point.interpolate(this.fromPixel, this.toPixel, this.time / this.duration);\r\n        const destination = new Rect(position.x, position.y, this.size.x, this.size.y);\r\n        this.renderable.draw(ctx, destination, this.angle);\r\n    }\r\n}\r\n\r\nexport function CreateProjectileAnimation(projectile: Sprite, fromHex: Point, toHex: Point, duration: number, onImpact: IRenderableSource): IAnimation {\r\n    const destPt = HexToPixel(toHex);\r\n    const projAnimation = new ProjectileAnimation(projectile, projectile.getPixelSize(), Point.add(HexToPixel(fromHex), C.HALF_TILE_SIZE), Point.add(destPt, C.HALF_TILE_SIZE), duration);\r\n    if(onImpact !== null) {\r\n        const impactAnimation = new RenderableAnimation(onImpact.getRenderable(), new Rect(destPt.x, destPt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        return new SequentialAnimation([projAnimation, impactAnimation]);\r\n    }\r\n    return projAnimation;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport Entity from \"../Entity\";\r\nimport * as C from \"../Constants\";\r\nimport { HexLength, HexToPixel } from \"../Hex\";\r\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport { CreateProjectileAnimation } from \"../animation/ProjectileAnimation\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\n\r\nconst BUMP_ANIMATION_TIME = 10;\r\nconst PROJECTILE_TIME = 6;\r\n\r\nexport default class AttackInfo implements IAttackInfo {\r\n    public startPoint: Point;\r\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: Sprite, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        this.startPoint = attacker.position;\r\n    }\r\n\r\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\r\n    }\r\n\r\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\r\n    }\r\n\r\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: Sprite, impactAnimation?: IRenderableSource) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, impactAnimation ?? null, projectile);\r\n    }\r\n    \r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return [{damage: this.damage, positions: this.affectedTiles, ignorePlayer: this.ignorePlayer, ignoreEnemies: this.ignoreEnemies}];\r\n    }\r\n\r\n    toAnimations():IAnimation[] {\r\n        let animations:IAnimation[] = [];\r\n        if(this.bumpAnimation) {\r\n            animations.push(new EntityMoveAnimation(\r\n                this.attacker, \r\n                Interpolated.linear<Point>(Point.interpolate, \r\n                    this.attacker.position, \r\n                    Point.interpolate(this.attacker.position, this.target, 1/2), \r\n                    this.attacker.position), \r\n                this.attacker.position, \r\n                BUMP_ANIMATION_TIME * HexLength(Point.subtract(this.startPoint, this.target))));\r\n        }\r\n        if(this.projectile) {\r\n            const time = PROJECTILE_TIME * HexLength(Point.subtract(this.startPoint, this.target));\r\n            return [CreateProjectileAnimation(this.projectile, this.startPoint, this.target, time, this.impactAnimation)];\r\n        }\r\n        if(this.impactAnimation) {\r\n            const pixTarget = HexToPixel(this.target);\r\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\r\n        }\r\n        return animations;\r\n    }\r\n\r\n    applyExtraEffects(state: GameState): void {\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport * as C from './Constants';\r\nimport Player from \"./entities/Player\";\r\n\r\nexport default abstract class Entity {\r\n    isFlying: boolean;\r\n    maxHp: number;\r\n    hp: number;\r\n    position: Point;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n\r\n    static IsPlayer(entity: Entity): entity is Player {\r\n        return (entity as Player).primary !== undefined;\r\n    }\r\n}\r\n\r\nexport abstract class SimpleEnemy extends Entity {\r\n    abstract getRenderable() : IRenderable;\r\n    override draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n        this.getRenderable().draw(ctx, rect, 0);\r\n    } \r\n}","import Point from \"../../common/position/Point\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { SimpleEnemy } from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class Enemy extends SimpleEnemy {\r\n\r\n    goldValue: number;\r\n    lastAttacks: IAttackInfo[];\r\n\r\n    abstract getAttacks(state: GameState): IAttackInfo[];\r\n    abstract getMove(state: GameState, attack: IAttackInfo[], disallow: Point[]): Point;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Zombie extends Enemy {\r\n    static sprite: IRenderable;\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Zombie.sprite = assets.getAsset('zombie').getRenderable();\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n        \r\n        this.goldValue = 1;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len === 1) {\r\n            return [AttackInfo.basicAttack(this, state.player, 1)];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Zombie.sprite;\r\n    }\r\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\r\nimport Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport class DeltaRenderable implements IRenderable {\r\n    constructor(private source: IRenderable, public delta: Rectangle) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\r\n    }\r\n}","import Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport class StackRenderable implements IRenderable {\r\n\r\n    public finishMode: 'any'|'all';\r\n\r\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\r\n        this.finishMode = renderableFinishMode ?? 'any';\r\n    }\r\n\r\n    tick(): boolean {\r\n        let allFinished = true;\r\n        let anyFinished = false;\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            const f = this.renderables[i].tick();\r\n            allFinished = allFinished && f;\r\n            anyFinished = anyFinished || f;\r\n        }\r\n        return this.finishMode === 'any' ? anyFinished : allFinished;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            this.renderables[i].draw(ctx, position, rotation);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport * as C from \"../Constants\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    AfterPlayerTurn(state: GameState, x: number, y: number): IAttackInfo[] { return []; }\r\n    AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] { return []; }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\r\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n\r\n    protected renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n\r\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.bg_renderable = \r\n            new DeltaRenderable(\r\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\r\n                new Rect(0, .75, 1, 1)\r\n            );\r\n\r\n        if(includeDefaultRenderable === true) {\r\n            this.bg_renderable = new StackRenderable(\r\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\r\n            );\r\n        }\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport * as C from \"../Constants\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport HexCell from \"./HexCell\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"../Direction\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\n\r\ninterface ITilePart {\r\n    directions: Direction[];\r\n    tileCoords: Point;\r\n    tileSlice: Rect;\r\n}\r\n\r\nconst tileParts: ITilePart[] = [\r\n    {\r\n        // Top of Tile\r\n        directions: [Direction.UpLeft, Direction.UpRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0, 1, 0.5),\r\n    },\r\n    {\r\n        // Bottom of Tile\r\n        directions: [Direction.DownLeft, Direction.DownRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\r\n    }, \r\n    {\r\n        // TopLeft of Tile\r\n        directions: [Direction.Left, Direction.UpLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // TopRight of Tile\r\n        directions: [Direction.Right, Direction.UpRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomLeft of Tile\r\n        directions: [Direction.Left, Direction.DownLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomRight of Tile\r\n        directions: [Direction.Right, Direction.DownRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\r\n    }\r\n]\r\n\r\nexport function StitchTileParts(source: CanvasImageSource, tx: number, ty: number, tw: number, th: number, isEdge: (dir: Direction) => boolean){\r\n    const adjacencyMap = AllDirections.map(isEdge);\r\n\r\n    const images = tileParts.map(part => {\r\n        const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\r\n        const sourceBounds = new Rect(\r\n            (part.tileCoords.x + index + part.tileSlice.x + tx) * tw,\r\n            (part.tileCoords.y + part.tileSlice.y + ty) * th,\r\n            (part.tileSlice.w) * tw,\r\n            (part.tileSlice.h) * th\r\n        );\r\n        return new DeltaRenderable(\r\n            new Sprite(source, sourceBounds),\r\n            part.tileSlice\r\n        );\r\n    });\r\n\r\n    return new StackRenderable(\r\n        images,\r\n        'all'\r\n    );\r\n}\r\n\r\nexport default abstract class MultiPartCell extends HexCell {\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.assets = assets;\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        this.renderable = StitchTileParts(this.assets.tiles.image, this.spriteSheetPosition.x, this.spriteSheetPosition.y, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class DelayAnimation implements IAnimation {\r\n\r\n    constructor(private inner: IAnimation, private delay: number) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.delay === 0) return this.inner.tick();\r\n        else {\r\n            this.delay --;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        if(this.delay === 0) {\r\n            return this.inner.draw(ctx);\r\n        }\r\n    }\r\n\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class ParallelAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        for(let i = this.steps.length - 1; i >= 0; i--) {\r\n            if(this.steps[i].tick()) {\r\n                this.steps.splice(i, 1);\r\n            }\r\n        }\r\n        return this.steps.length === 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(const step of this.steps) {\r\n            step.draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class TileAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private infos: IAttackDamageInfo[], private delayPerDist: number, private animationSource: IRenderableSource) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return this.infos;\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        const innerAnimations: IAnimation[] = [];\r\n        const allPts = this.infos.reduce((acc, info) => acc.concat(info.positions), []);\r\n\r\n        return [\r\n            new ParallelAnimation(\r\n                allPts.map(pt => {\r\n                    const dist = HexLength(Point.subtract(pt, this.point));\r\n                    const delay = this.delayPerDist * dist;\r\n                    const pix = HexToPixel(pt);\r\n                    return new DelayAnimation(\r\n                        new RenderableAnimation(\r\n                            this.animationSource.getRenderable(),\r\n                            new Rect(pix.x, pix.y, C.TILE_WIDTH, C.TILE_HEIGHT)), \r\n                        delay);\r\n                })\r\n            )\r\n        ];\r\n    }\r\n    \r\n    applyExtraEffects(state: GameState): void {\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport Assets from \"../Assets\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport HexCell from \"./HexCell\";\r\nimport MultiPartCell, { StitchTileParts } from \"./MultiPartCell\";\r\nimport * as C from \"../Constants\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\n\r\nexport default class Lava extends HexCell {\r\n    public static TypeID = 1;\r\n\r\n    private lavaStatic: IRenderable;\r\n    private lavaOverlay: IRenderable;\r\n\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(assets: Assets) {\r\n        super(Lava.TypeID, false);\r\n        this.assets = assets;\r\n        \r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] {\r\n        const steppingEnemy = state.enemies.find(e => e.position.x == x && e.position.y == y);\r\n        if(steppingEnemy !== undefined && !steppingEnemy.isFlying){\r\n            return [\r\n                new TileAttackInfo(new Point(x, y), [{ damage: 999, positions: [new Point(x,y)] }], 0, this.assets.getImpactAnimation(2))\r\n            ]\r\n        }\r\n        return [];\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        this.lavaStatic = StitchTileParts(this.assets.lavaLayers.image, 0, 0, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        this.lavaOverlay = StitchTileParts(this.assets.lavaLayers.image, 0, 2, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.lavaStatic.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n\r\n        let overlayWaver = Math.round(Math.sin(world.renderTickNumber / 15 + pt.x/2) * 1.5);\r\n        this.lavaOverlay.draw(ctx, new Rect(target.x, target.y + overlayWaver, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Archer extends Enemy {\r\n    static sprite: IRenderable;\r\n    static fearsprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Archer.sprite = assets.getAsset('archer') as Sprite;\r\n        Archer.fearsprite = assets.getAsset('archer_afraid') as Sprite;\r\n        Archer.projectileSprite = assets.getAsset('projectile_arrow') as Sprite;\r\n        Archer.impactAnimation = assets.getAsset('impact_point');\r\n    }\r\n\r\n\r\n    isAfraid: boolean;\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n        this.isAfraid = false;\r\n        \r\n        this.goldValue = 3;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n\r\n        if(this.isAfraid) return []; // Don't attack after being afraid.\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len > 1 && len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Archer.projectileSprite, Archer.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            this.isAfraid = false;\r\n            return this.position;\r\n        }\r\n\r\n        let deltaPlayer = Point.subtract(state.player.position, this.position);\r\n        // IF the player is one hex away, the archer will become \"Afraid\" and run directly away.\r\n        // If they can't move away, they won't move. This makes them easier to catch.\r\n        // You can also scare them into lava, which is unhealthy.\r\n        if(HexLength(deltaPlayer) === 1) {\r\n            this.isAfraid = true;\r\n            \r\n            let targetPosition = Point.subtract(this.position, deltaPlayer);\r\n            const tile = state.tiles.isInBounds(targetPosition.x, targetPosition.y) ? state.tiles.get(targetPosition) : undefined;\r\n            if(tile === undefined || targetPosition.equals(state.player.position)) { \r\n                return this.position; \r\n            }\r\n            if(!tile.isPathable && tile.typeId !== Lava.TypeID) {\r\n                 // If the tile isn't pathable don't move\r\n                 // We DO allow archers to run into lava if they're afraid.\r\n                return this.position;\r\n            }\r\n            if(disallowed.some(p => p.equals(targetPosition))) {\r\n                return this.position;\r\n            }\r\n\r\n            return targetPosition;\r\n        } else {\r\n            this.isAfraid = false;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        possibleMoves.push(this.position);\r\n\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        let hasAttackOpportunity = false;\r\n\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const dirAndDist = DirectionHelper.TryGetDirectionAndDistance(ray);\r\n            const couldAttack = dirAndDist !== undefined && dirAndDist.distance <= MAX_RANGE;\r\n\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            else if(couldAttack && !hasAttackOpportunity) {\r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n                hasAttackOpportunity = true;\r\n            }\r\n            else if(len < minMoveDist && (!hasAttackOpportunity || couldAttack)) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist && (!hasAttackOpportunity || couldAttack)) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.isAfraid) {\r\n            return Archer.fearsprite;\r\n        }\r\n        return Archer.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 3;\r\n\r\nexport default class Mage extends Enemy {\r\n    static sprite: IRenderable;\r\n    static cooldownsprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Mage.sprite = assets.getAsset('mage') as Sprite;\r\n\r\n        Mage.cooldownsprite = assets.getAsset('mage_cooldown') as Sprite;\r\n\r\n        Mage.projectileSprite = assets.getAsset('projectile_fire') as Sprite;\r\n\r\n        Mage.impactAnimation = assets.getAsset('impact_fire');\r\n    }\r\n\r\n    attackOnCooldown: boolean;\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n\r\n        this.goldValue = 5;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.attackOnCooldown){\r\n            return [];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                this.attackOnCooldown = true;\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Mage.projectileSprite, Mage.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        if(this.attackOnCooldown) {\r\n            // Don't move if you're on cooldown\r\n            this.attackOnCooldown = false;\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            // // Mages COULD be smarter by trying to avoid ending up directly next to the player, but doing so makes them a little bit too strong.\r\n            // if(len === 1) {\r\n            //     continue;\r\n            // }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.attackOnCooldown) return Mage.cooldownsprite;\r\n        return Mage.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class RadialAreaAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private rings: {radius: number, damage: number}[], private delayPerRadius: number, private animationSource: IRenderableSource, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return this.rings.map(ring => {\r\n            return {\r\n                damage: ring.damage,\r\n                positions: GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y)),\r\n                ignoreEnemies: this.ignoreEnemies,\r\n                ignorePlayer: this.ignorePlayer\r\n            };\r\n        });\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        const innerAnimations: IAnimation[] = [];\r\n        for(const ring of this.rings) {\r\n            const points = GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y))\r\n            innerAnimations.push(\r\n                new DelayAnimation(new ParallelAnimation(\r\n                    points.map(point => new RenderableAnimation(this.animationSource.getRenderable(), new Rect(HexToPixel(point).x, HexToPixel(point).y, C.TILE_WIDTH, C.TILE_HEIGHT))),\r\n                ), ring.radius * this.delayPerRadius)\r\n            );\r\n        }\r\n\r\n        return [new ParallelAnimation(innerAnimations)];\r\n    }\r\n    \r\n    applyExtraEffects(state: GameState): void {\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport RadialAreaAttackInfo from \"../attackInfos/RadialAreaAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Giant extends Enemy {\r\n    static renderable: IRenderable;\r\n    static bigAttackPrepImage: IRenderable;\r\n    static radialSmashAnimation: IRenderableSource;\r\n\r\n    static turnSequence: ('move'|'skip'|'smashPrep'|'smash')[] = [\r\n        'move', 'move', 'skip', 'move', 'smashPrep', 'smash'\r\n    ];\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Giant.renderable = new DeltaRenderable(assets.getAsset('giant') as Sprite, new Rect(0, -1, 1, 2));\r\n\r\n        Giant.bigAttackPrepImage = new DeltaRenderable(assets.getAsset('giant_prep') as Sprite, new Rect(0, -1, 1, 2));\r\n\r\n        this.radialSmashAnimation = assets.getAsset('impact_dirt');\r\n    }\r\n\r\n    turnSequenceIndex: number;\r\n    lastTurn: ('move'|'skip'|'smashPrep'|'smash');\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 12;\r\n        this.isFlying = false;\r\n        this.turnSequenceIndex = Math.floor(Math.random() * Giant.turnSequence.length);\r\n        this.lastTurn = Giant.turnSequence[this.turnSequenceIndex === 0 ? Giant.turnSequence.length - 1 : this.turnSequenceIndex - 1];\r\n\r\n        this.goldValue = 15;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        switch(turn) {\r\n            case 'move':\r\n                const playerLocation = state.player.position;\r\n                const len = HexLength(Point.subtract(playerLocation, this.position));\r\n                if(len === 1) {\r\n                    return [AttackInfo.basicAttack(this, state.player, 3)];\r\n                }\r\n                return [];\r\n            case 'skip':\r\n            case 'smashPrep':\r\n                return [];\r\n            case 'smash':\r\n                return [new RadialAreaAttackInfo(this.position, [{radius: 1, damage: 3}, {radius: 2, damage: 1}], 8, Giant.radialSmashAnimation, true)];\r\n            default: return [];\r\n        }\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        this.turnSequenceIndex = (this.turnSequenceIndex + 1) % Giant.turnSequence.length;\r\n        this.lastTurn = turn;\r\n\r\n        switch(turn) {\r\n            case 'move':\r\n                if(attack.length > 0) return this.position;\r\n                return this.internalGetMove(state, disallowed);\r\n            case 'smash':\r\n                // The giant is allowed to move immediately after the smash attack.\r\n                return this.internalGetMove(state, disallowed);\r\n            default:\r\n                return this.position;\r\n        }\r\n\r\n    }\r\n\r\n    private internalGetMove(state: GameState, disallowed: Point[]): Point {\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return this.lastTurn === 'smashPrep' ? Giant.bigAttackPrepImage : Giant.renderable;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport default class OffsetRenderable implements IRenderable {\r\n\r\n    constructor(private source: IRenderable, public offset: Point, public rotation?: number) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, position.shift(this.offset.x, this.offset.y), rotation + (this?.rotation ?? 0));\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport OffsetRenderable from '../../common/rendering/OffsetRenderable';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class StoneEye extends Enemy {\r\n    static sprites: IRenderable[];\r\n    static readySprite: IRenderable;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        StoneEye.sprites = [\r\n            assets.getAsset('stone_eye_0').getRenderable(),\r\n            assets.getAsset('stone_eye_1').getRenderable(),\r\n            assets.getAsset('stone_eye_2').getRenderable()\r\n        ]\r\n        StoneEye.readySprite = assets.getAsset('stone_eye_ready').getRenderable()\r\n\r\n        StoneEye.impactAnimation = assets.getAsset('impact_fire');\r\n    }\r\n\r\n    prepFire: Direction|undefined;\r\n    randart: number;\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 3;\r\n        this.isFlying = true;\r\n        this.prepFire = undefined;\r\n\r\n        this.goldValue = 5;\r\n        this.randart = 0;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.prepFire !== undefined) {\r\n            const points: Point[] = [];\r\n            const delta = DirectionHelper.ToPoint(this.prepFire);\r\n            let pt = Point.add(this.position, delta);\r\n            for(let i = 0; i < MAX_RANGE && state.tiles.isInBounds(pt.x, pt.y); i++) {\r\n                points.push(pt);\r\n                pt = Point.add(pt, delta);\r\n            }\r\n            this.prepFire = undefined;\r\n            return [new TileAttackInfo(this.position, [{damage: 1, positions: points}], 4, StoneEye.impactAnimation)];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            this.prepFire = DirectionHelper.FromPoint(ray);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n\r\n        this.randart = Math.floor(Math.random() * StoneEye.sprites.length);\r\n\r\n        if(attack.length > 0 || (this.prepFire !== undefined)) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], true)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        // Don't retreat\r\n        if(minMoveDist > HexLength(Point.subtract(state.player.position, this.position))) {\r\n            return this.position;\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.prepFire !== undefined) {\r\n            return new OffsetRenderable(StoneEye.readySprite, new Point(C.TILE_WIDTH/2, C.TILE_HEIGHT/2), DirectionHelper.ToAngle(this.prepFire));\r\n        }\r\n\r\n        // The origin of the eye sprite is the center (to support rotation), so we need to offset it\r\n        return new OffsetRenderable(StoneEye.sprites[this.randart], new Point(C.TILE_WIDTH/2, C.TILE_HEIGHT/2));\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IGamePhase from \"../phases/IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\n\r\nexport default interface IFeature {\r\n    name: string;\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState)=>IGamePhase): undefined | ((gs: GameState)=>IGamePhase);\r\n    afterEnemyTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState)=>IGamePhase): undefined | ((gs: GameState)=>IGamePhase);\r\n\r\n    draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport class SimpleFeature implements IFeature {\r\n\r\n    constructor(protected sprite: IRenderable, public name: string) {\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        return undefined;\r\n    }\r\n\r\n    afterEnemyTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        return undefined;\r\n    }\r\n    \r\n    draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        const tgt = HexToPixel(pt);\r\n        this.sprite.draw(ctx, new Rect(tgt.x, tgt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../assets\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"../phases/IGamePhase\";\r\nimport IFeature, { SimpleFeature } from \"./IFeature\";\r\nimport * as C from '../Constants';\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport { DelaySpriteAnimationInstance, SpriteAnimationInstance } from \"../../common/rendering/SpriteAnimation\";\r\n\r\nexport default class LifeGem extends SimpleFeature {\r\n    static sprite: Sprite;\r\n    static brokenSprite: Sprite;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        LifeGem.sprite = assets.getAsset('life_gem') as Sprite;\r\n        LifeGem.brokenSprite = assets.getAsset('life_gem_broken') as Sprite;\r\n    }\r\n\r\n    isBroken: boolean;\r\n\r\n    constructor() { \r\n        super(LifeGem.sprite, 'LifeGem');\r\n        this.isBroken = false;\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(x === state.player.position.x && y === state.player.position.y && !this.isBroken) {\r\n            this.isBroken = true;\r\n            state.brokenGems[state.currentFloor] = true;\r\n            state.player.hp += 1;\r\n            state.player.maxHp += 1;\r\n            this.sprite = LifeGem.brokenSprite;\r\n        }\r\n        return nextPhase;\r\n    }\r\n}\r\n\r\nexport class RunicLifeGem extends SimpleFeature {\r\n    static sprite: Sprite;\r\n    static brokenSprite: Sprite;\r\n    static flashAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        RunicLifeGem.sprite = assets.getAsset('life_gem_runes') as Sprite;\r\n        RunicLifeGem.brokenSprite = assets.getAsset('life_gem_broken_runes') as Sprite;\r\n        RunicLifeGem.flashAnimation = assets.getAsset('life_gem_flash_animation');\r\n    }\r\n\r\n    hasFlashed: boolean;\r\n\r\n    constructor(public isBroken: boolean, public index: number) { \r\n        super(isBroken ? RunicLifeGem.brokenSprite : RunicLifeGem.sprite, 'RunicLifeGem');\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(!this.hasFlashed && state.enemies.length === 0 && !this.isBroken){\r\n            this.sprite = new DelaySpriteAnimationInstance(RunicLifeGem.flashAnimation.getRenderable() as SpriteAnimationInstance, this.index * 12);\r\n            this.hasFlashed = true;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        if(this.sprite.tick()){\r\n            this.sprite = this.isBroken ? RunicLifeGem.brokenSprite : RunicLifeGem.sprite;\r\n        }\r\n        super.draw(ctx, world, pt);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport { SimpleCell } from \"./HexCell\";\r\n\r\nexport default class Floor extends SimpleCell {\r\n    public static TypeID = 0;\r\n\r\n    constructor(assets: Assets, customSprite?: Point) {\r\n        super(Floor.TypeID, assets, customSprite ?? new Point(0, 0), true, customSprite !== undefined);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n","import Point from \"../common/position/Point\";\r\n\r\nexport default class HexArray<T> {\r\n    private data: T[][];\r\n    private _size: number;\r\n\r\n    constructor(size: number, defaultValue: T) {\r\n        this._size = size;\r\n        this.data = [];\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: T[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                row.push(defaultValue);\r\n            }\r\n            this.data.push(row);\r\n        }\r\n    }\r\n\r\n    public size() {\r\n        return this._size;\r\n    }\r\n\r\n    public get(x: number, y: number): T;\r\n    public get(pt: Point): T;\r\n    public get(pt: [number, number]): T;\r\n    public get(xp: number|Point|[number, number], yp?: number): T {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        let [dx, row] = this.toArrayCoords(x, y);\r\n        return this.data[row][dx];\r\n    }\r\n\r\n    public set(value: T, x: number, y: number): void;\r\n    public set(value: T, pt: Point): void;\r\n    public set(value: T, pt: [number, number]): void;\r\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        const [dx, row] = this.toArrayCoords(x, y);\r\n        this.data[row][dx] = value;\r\n    }\r\n\r\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\r\n        if(typeof xp === \"number\"){\r\n            return [xp as number, y];\r\n        }\r\n        else if ((xp as Point).x !== undefined) {\r\n            return [(xp as Point).x, (xp as Point).y];\r\n        }\r\n        else {\r\n            return xp as [number, number];\r\n        }\r\n    }\r\n\r\n    public getRowLength(y: number): number {\r\n        return this._size * 2 - 1 - Math.abs(y);\r\n    }\r\n\r\n    public isInBounds(x: number, y: number): boolean {\r\n        if(y <= -this._size || y >= this._size) {\r\n            return false;\r\n        }\r\n        let [xMin, xMax] = this.getXRange(y);\r\n        return x >= xMin && x < xMax;\r\n    }\r\n\r\n    public getXRange(y: number): [number, number] {\r\n        const minX = this.getMinX(y);\r\n        const len = this.getRowLength(y);\r\n        return [minX, minX + len];\r\n    }\r\n\r\n    public getMinX(y: number): number {\r\n        const row = this._size - 1 + y;\r\n        return -Math.min(row, this._size - 1);\r\n    }\r\n\r\n    public iterate(func: (x: number, y: number, value: T) => void) {\r\n        for(let y = -this._size+1; y < this._size; y++) {\r\n            let [xMin, xMax] = this.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                func(x, y, this.get(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    private toArrayCoords(x: number, y: number): [number, number] {\r\n        const row = this._size - 1 + y;\r\n        const firstX = -Math.min(row, this._size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../assets\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"../phases/IGamePhase\";\r\nimport IFeature, { SimpleFeature } from \"./IFeature\";\r\nimport * as C from '../Constants';\r\nimport FloorTransitionPhase from \"../phases/FloorTransitionPhase\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\n\r\nexport default class Portal implements IFeature {\r\n    static closedSprite: Sprite;\r\n    static openSprites: Sprite[];\r\n    static openAnimation: IRenderable;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Portal.closedSprite = assets.getAsset('portal_closed') as Sprite;\r\n        Portal.openSprites = [];\r\n        let sprite: IRenderableSource;\r\n        for(let i = 0; (sprite = assets.getAsset('portal_open_' + i, true)) !== undefined; i++) {\r\n            this.openSprites.push(sprite as Sprite);\r\n        }\r\n\r\n        Portal.openAnimation = assets.getAsset('portal_open_anim').getRenderable();\r\n    }\r\n    \r\n    isOpen: boolean;\r\n    name: string;\r\n\r\n    constructor() { \r\n        this.isOpen = false;\r\n        this.name = 'Portal';\r\n    }\r\n\r\n    afterEnemyTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        return undefined;\r\n    }\r\n    \r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(state.enemies.length === 0 && !this.isOpen) {\r\n            this.isOpen = true;\r\n        }\r\n\r\n        if(x === state.player.position.x && y === state.player.position.y && this.isOpen) {\r\n            // TODO: GAME OVER\r\n            return () => new FloorTransitionPhase();\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    \r\n    draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        const tgt = HexToPixel(pt);\r\n        const dest = new Rect(tgt.x, tgt.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n        if(this.isOpen){\r\n            Portal.openAnimation.tick();\r\n            Portal.openAnimation.draw(ctx, dest, 0);\r\n        }\r\n        else{\r\n            Portal.closedSprite.draw(ctx, dest, 0);\r\n        }\r\n    }\r\n}","export default class MathHelpers {\r\n    static wrap(value: number, modulo: number) {\r\n        value = value % modulo;\r\n        if(value < 0) value += modulo;\r\n        return value;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IFeature from \"../features/IFeature\";\r\nimport Stairs from \"../features/Stairs\";\r\nimport BlueMage from \"../entities/BlueMage\";\r\n\r\nconst playerMoveTileArts = [\r\n    new Point(6,2),\r\n    new Point(7,2),\r\n    new Point(9,2),\r\n    new Point(7,3),\r\n    new Point(6,3),\r\n    new Point(8,2),\r\n];\r\n\r\nexport default class FloorZeroGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.features = new HexArray<IFeature>(C.MAP_SIZE, undefined);\r\n        \r\n        const ring = GetRing(2);\r\n        for(var i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Lava(assets), ring[i]);\r\n        }\r\n\r\n        const ring2 = GetRing(3);\r\n        for(var i = 0; i < ring2.length; i += 3) {\r\n            state.tiles.set(new Lava(assets), ring2[i]);\r\n        }\r\n\r\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\r\n        for(let i = 0; i < playerRing.length; i++) {\r\n            state.tiles.set(\r\n                new Floor(assets, playerMoveTileArts[i]),\r\n                playerRing[i]\r\n            )\r\n        }\r\n        \r\n        state.features.set(new Stairs(), 2, -4);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\n\r\ninterface IPathfinderNode {\r\n    position: Point;\r\n    parent: IPathfinderNode | undefined;\r\n    cost: number;\r\n}\r\n\r\nfunction toPath(node: IPathfinderNode): Point[] {\r\n    if(node.parent === null) return [node.position];\r\n    const parentPath = toPath(node.parent);\r\n    parentPath.push(node.position);\r\n    return parentPath;\r\n}\r\n\r\n// TODO: This is a quick and dirty Djikstra implementation with a ton of room for optimization.\r\n//       Currently, bot the closed and open sets are unsorted arrays, which means each dequeue takes O(n) time and each neighbor check takes O(n) time.\r\nexport default function DjikstraPath(start: Point, isEnd: (pt: Point) => boolean, getNeighbors: (from: Point) => { to: Point, cost: number }[]): Point[] {\r\n    const closedSet: IPathfinderNode[] = [];\r\n    const openSet: IPathfinderNode[] = [{ position: start, parent: null, cost: 0 }];\r\n\r\n    while (openSet.length > 0) {\r\n        const minIndex = openSet.reduce((min, cur, i) => cur.cost < openSet[min].cost ? i : min, 0);\r\n        const current = openSet.splice(minIndex, 1)[0];\r\n        closedSet.push(current);\r\n\r\n        if(isEnd(current.position)) {\r\n            return toPath(current);\r\n        }\r\n\r\n        for(const neighbor of getNeighbors(current.position)) {\r\n            const neighborNode = { position: neighbor.to, parent: current, cost: current.cost + neighbor.cost };\r\n            if(closedSet.find(c => c.position.equals(neighborNode.position))) continue;\r\n            const open = openSet.findIndex(c => c.position.equals(neighborNode.position));\r\n            if(open === -1) {\r\n                openSet.push(neighborNode);\r\n            }\r\n            else if(openSet[open].cost > neighborNode.cost) {\r\n                openSet[open] = neighborNode;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null; // No path!\r\n}","import DjikstraPath from \"../DjikstraPath\";\r\nimport GameState from \"../GameState\";\r\nimport * as C from \"../Constants\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport Assets from \"../Assets\";\r\nimport HexCell from \"../tiles/HexCell\";\r\n\r\nexport function AssurePathTo(state: GameState, assets: Assets, predicate:(pt: Point, tile: HexCell)=>boolean, checkEnd: (isValidEnd: Point) => boolean, pathLengthNoise?: number) {\r\n    function getNeighbors(point: Point):{to: Point, cost: number}[] {\r\n        const neighbors = [];\r\n        for(const dir of AllDirections) {\r\n            const destPt = Point.add(point, DirectionHelper.ToPoint(dir));\r\n            if(state.tiles.isInBounds(destPt.x, destPt.y) && predicate(destPt, state.tiles.get(destPt))) {\r\n                neighbors.push({to: destPt, cost: state.tiles.get(destPt).isPathable ? 1 - (Math.random() * (pathLengthNoise??0)) : 99 });\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    const pathToEnd = DjikstraPath(C.PLAYER_START_POSITION, checkEnd, getNeighbors);\r\n    for(const pt of pathToEnd) {\r\n        if(!state.tiles.get(pt).isPathable) {\r\n            state.tiles.set(new Floor(assets), pt);\r\n        }\r\n    }\r\n}\r\n\r\nexport function AssurePathToEnd(state: GameState, assets: Assets, pathLengthNoise?: number) {\r\n    return AssurePathTo(state, assets, pt => state.features.get(pt)?.name !== 'LifeGem', (pt) => state.features.get(pt)?.name === 'Stairs', pathLengthNoise);\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport { SimpleCell } from \"./HexCell\";\r\nimport * as C from '../Constants';\r\nimport GameState from \"../GameState\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\n\r\nexport type TrapDamage = 1|3|5;\r\nconst trapSprites: { [key in TrapDamage]: Point } = {\r\n    1: new Point(0, 6),\r\n    3: new Point(0, 7),\r\n    5: new Point(0, 8)\r\n}\r\nconst trapCooldown: { [key in TrapDamage]: number } = {\r\n    1: 0,\r\n    3: 1,\r\n    5: 2\r\n}\r\n\r\nexport default class Trap extends SimpleCell {\r\n    public static TypeID = 5;\r\n\r\n    public damage: TrapDamage;\r\n    public state: 'wait'|'prep'|'fire' = 'wait';\r\n    private cooldown = 0;\r\n    private assets: Assets;\r\n\r\n    constructor(assets: Assets, damage: TrapDamage) {\r\n        super(Trap.TypeID, assets, trapSprites[damage], true, false);\r\n        this.assets = assets;\r\n        this.damage = damage;\r\n        this.state = 'wait';\r\n        this.cooldown = trapCooldown[damage];\r\n    }\r\n\r\n    override OnEntityStep(entity: Entity): void {\r\n        if(this.state === 'wait') {\r\n            const spritePos = trapSprites[this.damage];\r\n            super.renderable = new Sprite(this.assets.tiles.image, new Rect((spritePos.x+1) * C.TILE_WIDTH, spritePos.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n\r\n    override AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] {\r\n        if(this.state === 'wait'){\r\n            const entityHere = state.entityAt(new Point(x, y));\r\n            if(entityHere !== undefined) {\r\n                this.state = 'prep';\r\n            }\r\n        }\r\n        \r\n        if(this.state === 'prep' && this.cooldown === 0) {\r\n            this.state = 'fire';\r\n            const spritePos = trapSprites[this.damage];\r\n            super.renderable = new Sprite(this.assets.tiles.image, new Rect((spritePos.x+2) * C.TILE_WIDTH, spritePos.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n            const entityHere = state.entityAt(new Point(x, y));\r\n            if(entityHere !== undefined) {\r\n                return [\r\n                    new TileAttackInfo(new Point(x, y), [{ damage: this.damage, positions: [new Point(x,y)] }], 0, this.assets.getImpactAnimation(1))\r\n                ]\r\n            }\r\n        }\r\n        else if(this.state === 'prep') { this.cooldown --; }\r\n        return [];\r\n    }\r\n}\r\n","import Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../assets\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"../phases/IGamePhase\";\r\nimport { SimpleFeature } from \"./IFeature\";\r\n\r\nexport default class Shrine extends SimpleFeature {\r\n    static sprite: Sprite;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Shrine.sprite = assets.getAsset('shrine') as Sprite;\r\n    }\r\n\r\n    isUsed: boolean;\r\n\r\n    constructor() { \r\n        super(Shrine.sprite, 'Shrine');\r\n        this.isUsed = false;\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(x === state.player.position.x && y === state.player.position.y && !this.isUsed) {\r\n            this.isUsed = true;\r\n            state.player.hp = state.player.maxHp;\r\n        }\r\n        return nextPhase;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Spider extends Enemy {\r\n    static sprite: IRenderable;\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Spider.sprite = assets.getAsset('spider').getRenderable();\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n        \r\n        this.goldValue = 3;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len === 1) {\r\n            return [AttackInfo.basicAttack(this, state.player, 1)];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        const possibleMoves = GetRing(2).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Spider.sprite;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Zombie from \"../entities/Zombie\";\r\nimport Archer from \"../entities/Archer\";\r\nimport Mage from \"../entities/Mage\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport { AssurePathTo, AssurePathToEnd } from \"./MapGenCommon\";\r\nimport StoneEye from \"../entities/StoneEye\";\r\nimport Trap, { TrapDamage } from \"../tiles/Trap\";\r\nimport IFeature from \"../features/IFeature\";\r\nimport Stairs from \"../features/Stairs\";\r\nimport LifeGem from \"../features/LifeGem\";\r\nimport Shrine from \"../features/Shrine\";\r\nimport Spider from \"../entities/Spider\";\r\n\r\nexport default class StandardMapGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.features = new HexArray<IFeature>(C.MAP_SIZE, undefined);\r\n        \r\n        state.enemies = [];\r\n\r\n        let leftLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let leftLavaX = state.tiles.getMinX(leftLavaY);\r\n\r\n        this.genLava(assets, state, new Point(leftLavaX, leftLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        let rightLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let rightLavaX = state.tiles.getXRange(rightLavaY)[1]-1;\r\n\r\n        this.genLava(assets, state, new Point(rightLavaX, rightLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\r\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\r\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\r\n        state.features.set(new Stairs(), downStairX, downStairY);\r\n\r\n        const gemPositions = state.getCells((_, tile, feat) => tile.typeId === Floor.TypeID && feat === undefined);\r\n        const gemPos = gemPositions[Math.floor(Math.random() * gemPositions.length)];\r\n        state.features.set(new LifeGem(), gemPos.x, gemPos.y);\r\n\r\n        if(floor % 3 === 0 || floor === 11) {\r\n            const shrinePositions = state.getCells((_, tile, feat) => tile.typeId === Floor.TypeID && feat === undefined);\r\n            const shrinePosition = shrinePositions[Math.floor(Math.random() * gemPositions.length)];\r\n            state.features.set(new Shrine(), shrinePosition.x, shrinePosition.y);\r\n        }\r\n\r\n        // Replaces lava with floor to ensure there's a path from the start to the end.\r\n        AssurePathToEnd(state, assets, 1);\r\n\r\n        let validEnemySpawns: Point[] = [];\r\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\r\n            const [xMin, xMax] = state.tiles.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\r\n                    validEnemySpawns.push(new Point(x, y));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(12, floor); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const entity = (Math.random() < 0.85) ? new Zombie(pos) : new Spider(pos);\r\n            state.enemies.push(entity);\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(6, (floor - 3) / 3); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const archer = new Archer(pos);\r\n            state.enemies.push(archer);\r\n        }\r\n        \r\n        for(let i = 0; i < Math.min(3, (floor - 5) / 3); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const enemy = (Math.random() < 0.2) ? new StoneEye(pos) : new Mage(pos);\r\n            state.enemies.push(enemy);\r\n        }\r\n        \r\n        // Don't spawn enemies where they can't get to you: Forge a path. (unless they're flying)\r\n        for(const enemy of state.enemies) {\r\n            if(enemy.isFlying) continue;\r\n            AssurePathTo(state, assets, _ => true, (pt)=>pt.equals(enemy.position), 0.3);\r\n        }\r\n\r\n        let floorPositions: Point[] = [];\r\n        state.tiles.iterate((x, y, c) => {\r\n            if(c.typeId === Floor.TypeID && state.features.get(x, y) === undefined) {\r\n                floorPositions.push(new Point(x, y));\r\n            }\r\n        });\r\n\r\n        for(let i = 0; i < 3 + Math.min(3, (floor - 4) / 4); i++) {\r\n            let replaceFloor = floorPositions.splice(Math.floor(Math.random() * floorPositions.length), 1)[0];\r\n            state.tiles.set(new Trap(assets, [1,3,5][Math.floor(Math.random() * 3)] as TrapDamage), replaceFloor.x, replaceFloor.y);\r\n        }\r\n\r\n    }\r\n\r\n    genLava(assets: Assets, state: GameState, pt: Point, len: number) {\r\n        state.tiles.set(new Lava(assets), pt);\r\n        if(len <= 1) return;\r\n\r\n        const validRiverDirections = AllDirections.filter(dir => {\r\n            // Check if this is a valid continuation for the lava river\r\n            const dest = Point.add(pt, DirectionHelper.ToPoint(dir));\r\n            if(!state.tiles.isInBounds(dest.x, dest.y) || state.tiles.get(dest).typeId !== Floor.TypeID || dest.equals(C.PLAYER_START_POSITION)) \r\n                return false;\r\n            return true;\r\n        });\r\n\r\n        if(validRiverDirections.length === 0) return;\r\n        const dir = validRiverDirections[Math.floor(Math.random() * validRiverDirections.length)];\r\n        this.genLava(assets, state, Point.add(pt, DirectionHelper.ToPoint(dir)), len - 1);\r\n    }\r\n}","import Assets from \"../Assets\";\r\nimport GameState from \"../GameState\";\r\nimport Floor12Gen from \"./Floor12Gen\";\r\nimport FloorZeroGen from \"./FloorZeroGen\";\r\nimport StandardMapGen from \"./StandardMapGen\";\r\n\r\nexport default interface IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void;\r\n}\r\n\r\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\r\n    {range: [0,1], gen: new FloorZeroGen()},\r\n    {range: [1,12], gen: new StandardMapGen()},\r\n    {range: [12,13], gen: new Floor12Gen()},\r\n    {range: [13,-1], gen: new StandardMapGen()}\r\n]","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Giant from \"../entities/Giant\";\r\nimport Archer from \"../entities/Archer\";\r\nimport StoneEye from \"../entities/StoneEye\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport IFeature from \"../features/IFeature\";\r\nimport Stairs, { LockedStairs } from \"../features/Stairs\";\r\nimport { RunicLifeGem } from \"../features/LifeGem\";\r\nimport Portal from \"../features/Portal\";\r\nimport MathHelpers from \"../../common/MathHelpers\";\r\n\r\nexport default class Floor12Gen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.features = new HexArray<IFeature>(C.MAP_SIZE, undefined);\r\n        state.features.set(new LockedStairs(), 0, 0);\r\n\r\n        const ring = GetRing(4);\r\n        for (let i = 0; i < ring.length/2-1; i++) {\r\n            const floor = i + 1;\r\n\r\n            const ringIndex = MathHelpers.wrap((i-4) * 2, ring.length);\r\n\r\n            state.features.set(new RunicLifeGem(state.brokenGems[floor] === undefined ? false : state.brokenGems[floor], floor), ring[ringIndex].x, ring[ringIndex].y);\r\n        }\r\n\r\n        state.features.set(new Portal(), -2, 4);\r\n\r\n        state.tiles.set(new Lava(assets), new Point(5, -1));\r\n        state.tiles.set(new Lava(assets), new Point(5, 0));\r\n        state.tiles.set(new Lava(assets), new Point(4, 1));\r\n        state.tiles.set(new Lava(assets), new Point(-4, -1));\r\n        state.tiles.set(new Lava(assets), new Point(-5, 0));\r\n        state.tiles.set(new Lava(assets), new Point(-5, 1));\r\n\r\n        state.enemies.push(new Giant(new Point(0, 0)));\r\n        state.enemies.push(new StoneEye(new Point(0, -2)));\r\n        state.enemies.push(new StoneEye(new Point(2, -2)));\r\n        state.enemies.push(new StoneEye(new Point(2, 0)));\r\n        state.enemies.push(new StoneEye(new Point(-2, 0)));\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class AnimationPhase implements IGamePhase {\r\n\r\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\r\n    }\r\n\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        for(let i = this.animations.length - 1; i >= 0; i--) {\r\n            if(this.animations[i].tick()) {\r\n                this.animations.splice(i, 1);\r\n            }\r\n        }\r\n        if(this.animations.length === 0) {\r\n            return this.onFinish(state);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        for(const animation of this.animations) { \r\n            animation.draw(ctx);\r\n        }\r\n    }\r\n}","import AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function AttackResolutionPhase(state: GameState, attacks: IAttackInfo[], nextPhase: (state: GameState) => IGamePhase) : IGamePhase {\r\n    for(const attack of attacks) {\r\n        const damageGroups = attack.getAffectedTiles(state);\r\n        for(const damageGroup of damageGroups) {\r\n            for(const pt of damageGroup.positions) {\r\n                const entity = state.entityAt(pt);\r\n                if(entity === undefined || (Entity.IsPlayer(entity) && damageGroup.ignorePlayer) || (!Entity.IsPlayer(entity) && damageGroup.ignoreEnemies)) continue;\r\n                entity.hp -= damageGroup.damage;\r\n            }\r\n        }\r\n    }\r\n    for(const attack of attacks) {\r\n        attack.applyExtraEffects(state);\r\n    }\r\n\r\n    let goldValues = state.enemies.filter(e => e.hp <= 0).map(e => e.goldValue);\r\n    if(goldValues.length > 0) {\r\n        state.gold += goldValues.reduce((a, b) => a + b, 0) * goldValues.length;\r\n    }\r\n\r\n    state.enemies = state.enemies.filter(e => e.hp > 0);\r\n    if(state.player.hp <= 0) {\r\n        // TODO: GAME OVER\r\n    }\r\n    return nextPhase(state);\r\n}","import IAnimation from \"../animation/IAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class PhaseBuilder {\r\n    public static New() {\r\n        return new PhaseBuilder();\r\n    }\r\n\r\n    private chain: ((gs: GameState, next:(gs: GameState)=>IGamePhase) => IGamePhase)[];\r\n\r\n    constructor(){\r\n        this.chain = [];\r\n    }\r\n\r\n    public thenAnimate(animations: IAnimation[]): PhaseBuilder {\r\n        this.chain.push((_, next) => \r\n            new AnimationPhase(animations, next)\r\n        );\r\n        return this;\r\n    }\r\n\r\n    public thenResolve(attacks: IAttackInfo[]): PhaseBuilder {\r\n        this.chain.push((gs, next) =>\r\n            AttackResolutionPhase(gs, attacks, next)\r\n        );\r\n        return this;\r\n    }\r\n\r\n    public thenAnimateAndResolve(attacks: IAttackInfo[]) {\r\n        this.chain.push((gs, next) => {\r\n            const animations = attacks.map(atk => new SequentialAnimation(atk.toAnimations(gs)));\r\n            return new AnimationPhase(animations, () => AttackResolutionPhase(gs, attacks, next));\r\n        })\r\n        return this;\r\n    }\r\n\r\n    public then(next: ((gs: GameState, next:(gs: GameState)=>IGamePhase) => IGamePhase)) {\r\n        this.chain.push(next);\r\n        return this;\r\n    }\r\n\r\n    public finally(lastStep: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        return this.chain.reduceRight((nextfn:((gs:GameState)=>IGamePhase), current) => (gs => current(gs, nextfn)), lastStep);\r\n    }\r\n}","import SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PhaseBuilder from \"./PhaseBuilder\";\r\n\r\nexport default function AfterMovePhase(state: GameState, isPlayerTurn: boolean, next: (state: GameState) => IGamePhase): IGamePhase {\r\n    let allAttacks: IAttackInfo[] = []\r\n    if(isPlayerTurn) {\r\n        state.tiles.iterate((x, y, c) => {\r\n            const attacks = c.AfterPlayerTurn(state, x, y);\r\n            if(attacks !== undefined && attacks.length > 0) {\r\n                allAttacks.push(...attacks);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        state.tiles.iterate((x, y, c) => {\r\n            const attacks = c.AfterEnemyTurn(state, x, y);\r\n            if(attacks !== undefined && attacks.length > 0) {\r\n                allAttacks.push(...attacks);\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    var phaseBuilder = PhaseBuilder.New();\r\n    if(allAttacks.length > 0) {\r\n        phaseBuilder = phaseBuilder.thenAnimateAndResolve(allAttacks);\r\n    }\r\n\r\n    return phaseBuilder.finally(gs => AfterMovePhase_Features(gs, isPlayerTurn, next))(state);\r\n}\r\n\r\n\r\nfunction AfterMovePhase_Features(state: GameState, isPlayerTurn: boolean, next: (state: GameState) => IGamePhase): IGamePhase {\r\n    if(isPlayerTurn) {\r\n        state.features.iterate((x, y, c) => {\r\n            const newNext = c?.afterPlayerTurn(state, x, y, next);\r\n            if(newNext !== undefined) next = newNext;\r\n        });\r\n    }\r\n    else {\r\n        state.features.iterate((x, y, c) => {\r\n            const newNext = c?.afterEnemyTurn(state, x, y, next);\r\n            if(newNext !== undefined) next = newNext;\r\n        });\r\n    }\r\n\r\n    return next(state);\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel, PixelToHex } from \"../Hex\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\r\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport AfterMovePhase from \"./AfterMovePhase\";\r\n\r\n\r\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point, forceMotion: Point):IGamePhase {\r\n    const onFinish = (gs: GameState) => {\r\n        if(!forceMotion.equals(from)) {\r\n            gs.tiles.get(forceMotion).OnEntityStep(gs.player);\r\n        }\r\n\r\n        if(gs.enemies.length === 0) {\r\n            return AfterMovePhase(gs, true, (gs) => AfterMovePhase(gs, false, () => new PlayerTurnGamePhase()));\r\n        }\r\n        \r\n        else return AfterMovePhase(gs, true, (gs) => EnemyAttackPhase(gs));\r\n    }\r\n\r\n    const postMoveAttacks: (gs:GameState)=>IGamePhase = (gs: GameState) => {\r\n        const attacks = [\r\n            ...state.player.primary.getAfterMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getAfterMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return onFinish(gs);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, onFinish));\r\n    };\r\n\r\n    const playerMove = (state: GameState) => {\r\n        if(!state.isValidMove(forceMotion, false)) {\r\n            return postMoveAttacks(state);\r\n        }\r\n        return new AnimationPhase(\r\n            [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, forceMotion), forceMotion, state.enemies.length === 0 ? 2 : 10)],\r\n            postMoveAttacks\r\n        );\r\n    };\r\n\r\n    if(state.enemies.length === 0) {\r\n        return playerMove(state);\r\n    }\r\n    if(state.enemies.length > 0) {\r\n        const attacks = [\r\n            ...state.player.primary.getBeforeMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getBeforeMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return playerMove(state);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, playerMove));\r\n    }\r\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyMovePhase from \"./EnemyMovePhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PhaseBuilder from \"./PhaseBuilder\";\r\n\r\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\r\n    const enemyAttacks: IAttackInfo[][] = []\r\n    for(let i = 0; i < state.enemies.length; i++) {\r\n        state.enemies[i].lastAttacks = state.enemies[i].getAttacks(state);\r\n        enemyAttacks.push(state.enemies[i].lastAttacks);\r\n    }\r\n\r\n    var phaseBuilder = PhaseBuilder.New();\r\n\r\n    if(enemyAttacks.some(e => e.length > 0)) {\r\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations(state)))));\r\n        phaseBuilder = phaseBuilder\r\n            .thenAnimate(animations)\r\n            .thenResolve(enemyAttacks.reduce((acc, c) => acc.concat(c), []));\r\n    }\r\n\r\n    return phaseBuilder.finally(gs => EnemyMovePhase(gs))(state);\r\n}","import { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport AfterMovePhase from \"./AfterMovePhase\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PhaseBuilder from \"./PhaseBuilder\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\nconst duration = 20;\r\n\r\nexport default function EnemyMovePhase(state: GameState): IGamePhase {\r\n    const disallowed: Point[] = state.enemies.map(e => e.position);\r\n    const animations: IAnimation[] = [];\r\n    const stepped: boolean[] = [];\r\n    for(let i = 0; i < state.enemies.length; i++) { \r\n        const destination = state.enemies[i].getMove(state, state.enemies[i].lastAttacks, disallowed);\r\n        if(!destination.equals(state.enemies[i].position)) {\r\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\r\n            const rm = disallowed.findIndex(p => p.equals(state.enemies[i].position));\r\n            disallowed.splice(rm, 1, destination);\r\n            stepped.push(true);\r\n        }\r\n        else {\r\n            stepped.push(false);\r\n        }\r\n    }\r\n\r\n    return PhaseBuilder.New()\r\n        .thenAnimate(animations)\r\n        .finally(gs => AfterEnemyMovePhase(gs, stepped))\r\n        (state);\r\n}\r\n\r\nfunction AfterEnemyMovePhase(state: GameState, didMove: boolean[]): IGamePhase {\r\n    // Resolve who stepped where\r\n    for(let i = 0; i < didMove.length; i++){\r\n        if(didMove[i]){\r\n            const enemy = state.enemies[i];\r\n            const cell = state.tiles.get(enemy.position);\r\n            cell.OnEntityStep(enemy);\r\n        }\r\n    }\r\n\r\n    return AfterMovePhase(state, false, () => new PlayerTurnGamePhase());\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport MouseManager from \"../../common/input/MouseManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { HexLength, HexToPixel, PixelToHex } from \"../Hex\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\nimport * as C from '../Constants';\r\nimport HopliteProgram from \"..\";\r\n\r\ntype Move = Direction | 6 | undefined;\r\n\r\nconst dirKeys = [\r\n    { key: 'a', dir: Direction.Left },\r\n    { key: '4', dir: Direction.Left },\r\n    \r\n    { key: 'q', dir: Direction.UpLeft },\r\n    { key: '7', dir: Direction.UpLeft },\r\n\r\n    { key: 'w', dir: Direction.UpRight },\r\n    { key: '9', dir: Direction.UpRight },\r\n\r\n    { key: 'd', dir: Direction.Right },\r\n    { key: '6', dir: Direction.Right },\r\n\r\n    { key: 'x', dir: Direction.DownRight },\r\n    { key: '3', dir: Direction.DownRight },\r\n\r\n    { key: 'z', dir: Direction.DownLeft },\r\n    { key: '1', dir: Direction.DownLeft },\r\n\r\n    { key: 's', dir: 6 },\r\n    { key: '5', dir: 6 },\r\n]\r\n\r\nexport default class PlayerTurnGamePhase implements IGamePhase {\r\n\r\n    static cellHighlightSprite: Sprite;\r\n    static onAssetsLoaded(assets: Assets): void {\r\n        this.cellHighlightSprite = assets.getAsset('select_blue') as Sprite;\r\n    }\r\n\r\n    mouseTile: Point;\r\n\r\n    init(state: GameState): void {\r\n        this.mouseTile = undefined;\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager, mouse: MouseManager): IGamePhase {\r\n        const dir = this.tryGetDirection(state, keys, mouse);\r\n        if(dir !== undefined) {\r\n            const destination = dir === 6 ? state.player.position : Point.add(state.player.position, DirectionHelper.ToPoint(dir));\r\n            const additionalMoves = [...state.player.primary.enableAdditionalMoves(state, state.player), ...state.player.secondary.enableAdditionalMoves(state, state.player)];\r\n\r\n            if(!state.isValidMoveIgnorePlayer(destination, false)) {\r\n                const specialMove = additionalMoves.find(move => move.dest.equals(destination));\r\n                if(specialMove !== undefined){\r\n                    return PlayerMoveAnimPhase(state, state.player.position, destination, specialMove.forceMove);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            return PlayerMoveAnimPhase(state, state.player.position, destination, destination);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tryGetDirection(state:GameState, keys: KeyboardManager, mouse: MouseManager): Move {\r\n        for(let i = 0; i < dirKeys.length; i++) {\r\n            if(keys.isKeyPressed(dirKeys[i].key)) {\r\n                return dirKeys[i].dir;\r\n            }\r\n        }\r\n\r\n        const mouseClick = mouse.tryGetClick(0);\r\n        if(mouseClick !== undefined) {\r\n            this.mouseTile = PixelToHex(HopliteProgram.scaleHelper.ScreenToPixel(mouseClick.position));\r\n\r\n            if(HexLength(Point.subtract(this.mouseTile, state.player.position)) <= 1) {\r\n                if(this.mouseTile.equals(state.player.position)) return 6;\r\n                else return DirectionHelper.FromPoint(Point.subtract(this.mouseTile, state.player.position));\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n\r\n        if(this.mouseTile !== undefined) {\r\n            const tgt = HexToPixel(this.mouseTile);\r\n            PlayerTurnGamePhase.cellHighlightSprite.draw(ctx, new Rect(tgt.x, tgt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        }\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 60;\r\n\r\nexport default class EntryAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        state.player.draw(ctx);\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport { MapGenerators } from \"../mapGen/IMapGen\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst FADE_OUT_ANIM_TIME = 30;\r\nconst PLAYER_MOVE_TIME = 30;\r\n\r\nexport default class FloorTransitionPhase implements IGamePhase {\r\n\r\n    time = 0;\r\n\r\n    init(state: GameState): void {\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= FADE_OUT_ANIM_TIME) {\r\n            return new FloorTransitionPlayerMovePhase();\r\n        } else {\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.globalAlpha = 1;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}\r\n\r\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\r\n\r\n    time = 0;\r\n    playerStartPoint: Point;\r\n\r\n    init(state: GameState): void {\r\n        const floor = state.currentFloor + 1;\r\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\r\n        this.playerStartPoint = state.player.position;\r\n        state.changeFloor(floor, generator);\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= PLAYER_MOVE_TIME) {\r\n            state.player.position = C.PLAYER_START_POSITION.clone();\r\n            return new EntryAnimationPhase();\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        const lerp = this.time / PLAYER_MOVE_TIME;\r\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\r\n        state.player.position = tgt;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}","import Point from \"../../common/position/Point\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../assets\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"../phases/IGamePhase\";\r\nimport IFeature, { SimpleFeature } from \"./IFeature\";\r\nimport * as C from '../Constants';\r\nimport FloorTransitionPhase from \"../phases/FloorTransitionPhase\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\n\r\nexport default class Stairs extends SimpleFeature {\r\n    static sprite: Sprite;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Stairs.sprite = assets.getAsset('down_stairs') as Sprite;\r\n    }\r\n\r\n    constructor() { \r\n        super(Stairs.sprite, 'Stairs');\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(x === state.player.position.x && y === state.player.position.y) {\r\n            return () => new FloorTransitionPhase();\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class LockedStairs extends SimpleFeature {\r\n    static sprite: Sprite;\r\n    static unlockAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        LockedStairs.sprite = assets.getAsset('down_stairs_locked') as Sprite;\r\n        LockedStairs.unlockAnimation = assets.getAsset('down_stairs_unlock_animation');\r\n    }\r\n\r\n    hasPlayedAnimation: boolean;\r\n    isPlayingAnimation: boolean;\r\n\r\n    constructor() { \r\n        super(LockedStairs.sprite, 'LockedStairs');\r\n        this.hasPlayedAnimation = this.isPlayingAnimation = false;\r\n    }\r\n\r\n    afterPlayerTurn(state: GameState, x: number, y: number, nextPhase: (gs: GameState) => IGamePhase): (gs: GameState) => IGamePhase {\r\n        if(state.enemies.length === 0 && Object.keys(state.brokenGems).length === 0 && !this.isPlayingAnimation) {\r\n            this.isPlayingAnimation = true;\r\n            this.sprite = LockedStairs.unlockAnimation.getRenderable();\r\n        }\r\n        else if(this.hasPlayedAnimation && x === state.player.position.x && y === state.player.position.y){\r\n            return () => new FloorTransitionPhase();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        if(this.sprite.tick()) {\r\n            this.hasPlayedAnimation = true;\r\n            this.sprite = Stairs.sprite;\r\n        }\r\n        super.draw(ctx, world, pt);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport OffsetRenderable from '../../common/rendering/OffsetRenderable';\r\nimport Assets from \"../Assets\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class StoneDisc extends Enemy {\r\n    static sprite: IRenderable;\r\n    static readySprite: IRenderable;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        StoneDisc.sprite = assets.getAsset('stone_disc').getRenderable();\r\n        StoneDisc.readySprite = assets.getAsset('stone_disc_ready').getRenderable();\r\n        StoneDisc.impactAnimation = assets.getAsset('impact_fire');\r\n    }\r\n\r\n    isReadyToFire: boolean;\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 5;\r\n        this.isFlying = true;\r\n        this.isReadyToFire = false;\r\n\r\n        this.goldValue = 8;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.isReadyToFire) {\r\n            const points: Point[] = [];\r\n            for(const dir of AllDirections){\r\n                const delta = DirectionHelper.ToPoint(dir);\r\n                let pt = Point.add(this.position, delta);\r\n                for(let i = 0; i < MAX_RANGE && state.tiles.isInBounds(pt.x, pt.y); i++) {\r\n                    points.push(pt);\r\n                    pt = Point.add(pt, delta);\r\n                }\r\n            }\r\n            this.isReadyToFire = false;\r\n            return [new TileAttackInfo(this.position, [{damage: 1, positions: points}], 4, StoneDisc.impactAnimation)];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = DirectionHelper.FromPoint(Point.subtract(playerLocation, this.position));\r\n            if(ray !== undefined) this.isReadyToFire = true;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0 || this.isReadyToFire) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], true)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        // Don't retreat\r\n        if(minMoveDist > HexLength(Point.subtract(state.player.position, this.position))) {\r\n            return this.position;\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.isReadyToFire) {\r\n            return StoneDisc.readySprite;\r\n        }\r\n        return StoneDisc.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\nimport Enemy from \"../entities/Enemy\";\r\n\r\nexport default class SpawnEnemyAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private enemy: Enemy, private animationSource?: IRenderableSource) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return [];\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        if(this.animationSource !== undefined) {\r\n            const tgt = HexToPixel(this.point);\r\n            return [\r\n                new RenderableAnimation(\r\n                    this.animationSource.getRenderable(),\r\n                    new Rect(tgt.x, tgt.y, C.TILE_WIDTH, C.TILE_HEIGHT)\r\n                )\r\n            ];\r\n        }\r\n\r\n        return [];\r\n    }\r\n    \r\n    applyExtraEffects(state: GameState): void {\r\n        if(state.entityAt(this.point) === undefined) {\r\n            this.enemy.position = this.point;\r\n            state.enemies.push(this.enemy);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport OffsetRenderable from '../../common/rendering/OffsetRenderable';\r\nimport Assets from \"../Assets\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport RadialAreaAttackInfo from \"../attackInfos/RadialAreaAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class BlueBurstDisc extends Enemy {\r\n    static sprite: IRenderable;\r\n    static explodingSprite: IRenderable;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        BlueBurstDisc.sprite = assets.getAsset('blue_sphere').getRenderable();\r\n        BlueBurstDisc.explodingSprite = assets.getAsset('blue_sphere_exploding').getRenderable();\r\n        BlueBurstDisc.impactAnimation = assets.getAsset('impact_blue_magic');\r\n    }\r\n\r\n    isExploding: boolean;\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 2;\r\n        this.isFlying = true;\r\n        this.isExploding = false;\r\n\r\n        this.goldValue = 0;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.isExploding) {\r\n            this.hp = 0\r\n            return [new RadialAreaAttackInfo(this.position, [{radius: 1, damage: 2}], 8, BlueBurstDisc.impactAnimation, true)];\r\n        }\r\n\r\n        this.isExploding = true;\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        return this.position;\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.isExploding) {\r\n            return BlueBurstDisc.explodingSprite;\r\n        }\r\n        return BlueBurstDisc.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport SpawnEnemyAttackInfo from \"../attackInfos/SpawnEnemyAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport BlueBurstDisc from \"./BlueBurstDisc\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class BlueMage extends Enemy {\r\n    static sprite: IRenderable;\r\n    static cooldownsprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static spawnAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        BlueMage.sprite = assets.getAsset('blue_mage') as Sprite;\r\n        BlueMage.cooldownsprite = assets.getAsset('blue_mage_cooldown') as Sprite;\r\n        BlueMage.spawnAnimation = assets.getAsset('impact_blue_magic_backwards') as Sprite;\r\n    }\r\n\r\n    attackOnCooldown: boolean;\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 3;\r\n        this.isFlying = false;\r\n\r\n        this.goldValue = 5;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.attackOnCooldown){\r\n            return [];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ring = GetRing(1);\r\n\r\n            ring = ring.map(pt => Point.add(playerLocation, pt)).filter(pt => state.isValidMove(pt, true));\r\n\r\n            const tgt = ring[Math.floor(Math.random() * ring.length)];\r\n            this.attackOnCooldown = true;\r\n            return [\r\n                new SpawnEnemyAttackInfo(tgt, new BlueBurstDisc(tgt), BlueMage.spawnAnimation)\r\n            ];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        if(this.attackOnCooldown) {\r\n            // Don't move if you're on cooldown\r\n            this.attackOnCooldown = false;\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue;\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.attackOnCooldown) return BlueMage.cooldownsprite;\r\n        return BlueMage.sprite;\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\nimport features_url from './assets/hoplite_features.png';\r\nimport floor_digits_url from './assets/floor_and_digits.png';\r\nimport enemies_url from './assets/hoplite_enemies.png';\r\nimport hp_image_url from './assets/hp.png';\r\nimport impact_url from './assets/hoplite_impacts.png';\r\nimport lavaLayers_url from './assets/lava_layers.png';\r\nimport ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Point from \"../common/position/Point\";\r\nimport HpRenderer from \"./HpRenderer\";\r\nimport { SpriteAnimation } from \"../common/rendering/SpriteAnimation\";\r\nimport Zombie from \"./entities/Zombie\";\r\nimport Archer from \"./entities/Archer\";\r\nimport Mage from \"./entities/Mage\";\r\nimport Giant from \"./entities/Giant\";\r\nimport StoneEye from \"./entities/StoneEye\";\r\nimport LifeGem, { RunicLifeGem } from \"./features/LifeGem\";\r\nimport Stairs, { LockedStairs } from \"./features/Stairs\";\r\nimport Shrine from \"./features/Shrine\";\r\nimport { IAssetSheet, IsAnimationAsset } from \"./assets/IAssetSheet\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\r\nimport * as C from './Constants';\r\nimport Spider from \"./entities/Spider\";\r\nimport PlayerTurnGamePhase from \"./phases/PlayerTurnGamePhase\";\r\nimport Portal from \"./features/Portal\";\r\nimport StoneDisc from \"./entities/StoneDisc\";\r\nimport BlueMage from \"./entities/BlueMage\";\r\nimport BlueBurstDisc from \"./entities/BlueBurstDisc\";\r\n\r\n\r\n\r\nexport default class Assets {\r\n\r\n    tiles: SpriteSheet;\r\n    enemies: SpriteSheet;\r\n    features: SpriteSheet;\r\n    lavaLayers: SpriteSheet;\r\n    floor_and_digits: ImageLoader;\r\n    hpImage: ImageLoader;\r\n    hpRenderer: HpRenderer;\r\n    impacts: ImageLoader;\r\n    assetSheet: IAssetSheet;\r\n\r\n    assetFilesByName: {[key: string]: CanvasImageSource} = {};\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n        this.enemies = new SpriteSheet(32, 32, enemies_url, loader.registerAssetLoadCallback());\r\n        this.features = new SpriteSheet(32, 32, features_url, loader.registerAssetLoadCallback());\r\n        this.floor_and_digits = new ImageLoader(floor_digits_url, loader.registerAssetLoadCallback());\r\n        this.hpImage = new ImageLoader(hp_image_url, loader.registerAssetLoadCallback());\r\n        this.impacts = new ImageLoader(impact_url, loader.registerAssetLoadCallback());\r\n        this.lavaLayers = new SpriteSheet(32, 32, lavaLayers_url, loader.registerAssetLoadCallback());\r\n\r\n        const jsonCallback = loader.registerAssetLoadCallback();\r\n        import(\r\n            /* webpackChunkName: \"hoplite-asset-definitions\" */\r\n            './assets/AssetSheet.json'\r\n        ).then(value => {\r\n            console.log(value.default);\r\n            this.assetSheet = value.default as any as IAssetSheet;\r\n            jsonCallback();\r\n        });\r\n    }\r\n\r\n    getImpactAnimation(row: number) {\r\n        return new SpriteAnimation(this.impacts.image, new Rect(0, row * 32, 32, 32), new Point(0, 0), new Point(32, 0), 8, 16, false);\r\n    }\r\n\r\n    onLoadFinished(){\r\n        this.hpRenderer = new HpRenderer(this.hpImage);\r\n        this.assetFilesByName = {\r\n            'hoplite_tiles': this.tiles.image,\r\n            'hoplite_impacts': this.impacts.image,\r\n            'floor_and_digits': this.floor_and_digits.image,\r\n            'hp': this.hpImage.image,\r\n            'lava_layers': this.lavaLayers.image,\r\n            'features': this.features.image,\r\n            'enemies': this.enemies.image\r\n        }\r\n        \r\n        PlayerTurnGamePhase.onAssetsLoaded(this);\r\n\r\n        Zombie.onAssetsLoaded(this);\r\n        Archer.onAssetsLoaded(this);\r\n        Mage.onAssetsLoaded(this);\r\n        Giant.onAssetsLoaded(this);\r\n        StoneEye.onAssetsLoaded(this);\r\n        Spider.onAssetsLoaded(this);\r\n        StoneDisc.onAssetsLoaded(this);\r\n        BlueMage.onAssetsLoaded(this);\r\n        BlueBurstDisc.onAssetsLoaded(this);\r\n\r\n        LifeGem.onAssetsLoaded(this);\r\n        Stairs.onAssetsLoaded(this);\r\n        Shrine.onAssetsLoaded(this);\r\n        RunicLifeGem.onAssetsLoaded(this);\r\n        LockedStairs.onAssetsLoaded(this);\r\n        Portal.onAssetsLoaded(this);\r\n    }\r\n\r\n    getAsset(name: string, suppressErrors?: boolean): IRenderableSource {\r\n        const definition = this.assetSheet[name];\r\n        if(definition === undefined) {\r\n            if(!suppressErrors)\r\n                console.error('Asset not found: ' + name);\r\n            return undefined;\r\n        }\r\n        else {\r\n            var file = this.assetFilesByName[definition.file];\r\n            if(file === undefined){ \r\n                if(!suppressErrors)\r\n                    console.error('Asset ' + name + ' references missing file: ' + definition.file);\r\n                return undefined;\r\n            }\r\n            const units = definition.units ?? 'tiles';\r\n            const scaleFactor = units === 'tiles' ? C.TILE_WIDTH : 1;\r\n\r\n            const x = definition.pos[0];\r\n            const y = definition.pos[1];\r\n            const w = definition.size === undefined ? 1 : definition.size[0];\r\n            const h = definition.size === undefined ? 1 : definition.size[1];\r\n            const origin_x = definition.origin === undefined ? 0 : definition.origin[0];\r\n            const origin_y = definition.origin === undefined ? 0 : definition.origin[1];\r\n\r\n            if(IsAnimationAsset(definition)) {\r\n                const advx = definition.advance === undefined ? 1: definition.advance[0];\r\n                const advy = definition.advance === undefined ? 0: definition.advance[1];\r\n                return new SpriteAnimation(\r\n                    file,\r\n                    new Rect(x * scaleFactor, y * scaleFactor, w * scaleFactor, h * scaleFactor),\r\n                    new Point(origin_x, origin_y),\r\n                    new Point(advx * w * scaleFactor, advy * h * scaleFactor),\r\n                    definition.numFrames,\r\n                    definition.duration,\r\n                    definition.loop === undefined ? false : definition.loop\r\n                );\r\n            }\r\n            else {\r\n                const units = definition.units ?? 'tiles';\r\n                const scaleFactor = units === 'tiles' ? C.TILE_WIDTH : 1;\r\n\r\n                const x = definition.pos[0];\r\n                const y = definition.pos[1];\r\n                const w = definition.size === undefined ? 1 : definition.size[0];\r\n                const h = definition.size === undefined ? 1 : definition.size[1];\r\n\r\n                return new Sprite(file, new Rect(x * scaleFactor, y * scaleFactor, w * scaleFactor, h * scaleFactor), new Point(origin_x, origin_y));\r\n            }\r\n        }\r\n    }\r\n\r\n    getDigitSprite(digit: number, digitRow ?: number):Sprite {\r\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, (digitRow ?? 0) * 13, 7, 13));\r\n    }\r\n\r\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number, digitRow ?: number) {\r\n        const digits = value.toString().split('').map(s => parseInt(s));\r\n        for(var i = 0; i < digits.length; i++) {\r\n            this.getDigitSprite(digits[i], digitRow).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\r\n        }\r\n    }\r\n}","export interface IAssetSheet {\r\n    [key: string]: ISpriteAsset | IAnimationAsset;\r\n}\r\n\r\nexport interface ISpriteAsset {\r\n    file: string,\r\n    \r\n    origin?: [number, number],\r\n\r\n    units?: 'tiles' | 'pixels',\r\n    pos: [number, number],\r\n    size?: [number, number]\r\n}\r\n\r\nexport interface IAnimationAsset {\r\n    file: string,\r\n    pos: [number, number],\r\n    numFrames: number,\r\n    duration: number,\r\n    units?: 'tiles' | 'pixels',\r\n    size?: [number, number],\r\n    advance?: [number, number],\r\n    origin?: [number, number],\r\n    loop?: boolean\r\n}\r\n\r\nexport function IsAnimationAsset(asset: ISpriteAsset | IAnimationAsset): asset is IAnimationAsset {\r\n    return (asset as any).numFrames !== undefined;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\r\nimport PlayerWeapon from \"./PlayerWeapon\";\r\n\r\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\r\n\r\nexport default class SimpleWeapon extends PlayerWeapon{\r\n    private attacks: ISimpleAttack[];\r\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, private beforeMove: boolean, ...simpleAttacks: ISimpleAttack[]) {\r\n        super(type, assets, artTile);\r\n        this.attacks = simpleAttacks;\r\n    }\r\n\r\n    private getAttacks(state:GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        const attacks: AttackInfo[] = [];\r\n        const moveDelta = Point.subtract(moveTo, moveFrom);\r\n        for(const attack of this.attacks) {\r\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\r\n            const rot = SimpleWeapon.getRotation(moveDelta, attack.onMove);\r\n            if(rot === undefined) continue;\r\n            for(const pattern of attack.pattern) {\r\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\r\n                const attackInfo = attack.attack(state, player, target);\r\n                if(attackInfo !== undefined) attacks.push(attackInfo);\r\n            }\r\n        }\r\n        return attacks;\r\n    }\r\n\r\n    override enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[] {\r\n        return [];\r\n    }\r\n\r\n    getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return this.getAttacks(state, player, moveFrom, moveTo);\r\n        return [];\r\n    }\r\n    \r\n    getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return [];\r\n        return this.getAttacks(state, player, moveFrom, moveTo);\r\n    }\r\n\r\n    static getRotation(delta: Point, target: Point) {\r\n        for(let i = 0; i < 6; i++) {\r\n            if(delta.equals(target)) return i;\r\n            delta = TurnRight(delta);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport * as C from '../Constants';\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class PlayerWeapon {\r\n    public name: string;\r\n    public description: string;\r\n    public iconImage: IRenderable;\r\n    public sprite: IRenderable;\r\n\r\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\r\n        if(this.type === 'primary') {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n        else {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n    abstract enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[];\r\n    abstract getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n    abstract getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n}\r\n","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Sword extends SimpleWeapon {\r\n\r\n    impactAnimation: IRenderableSource;\r\n\r\n    constructor(assets: Assets) {\r\n        super('primary', assets, new Point(8, 1), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n\r\n        this.impactAnimation = assets.getImpactAnimation(0);\r\n\r\n        this.name = 'Sword';\r\n        this.description = 'A versatile weapon which strikes all adjacent enemies (except those directly behind you) when you move.'\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.animationAttack(player, e, 1, this.impactAnimation, false);\r\n    }\r\n}","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Dagger extends SimpleWeapon {\r\n    constructor(assets: Assets) {\r\n        super('secondary', assets, new Point(10, 0), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(1, -1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n\r\n        this.name = 'Dagger';\r\n        this.description = 'A secondary weapon which attacks enemies forward-left and forward-right of you when you move.'\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.basicAttack(player, e, 1);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\r\nimport * as C from '../Constants';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport Sword from \"../weapons/Sword\";\r\nimport Dagger from \"../weapons/Dagger\";\r\nimport HpRenderer from \"../HpRenderer\";\r\n\r\nexport default class Player extends Entity {\r\n\r\n    public primary: PlayerWeapon;\r\n    public secondary: PlayerWeapon;\r\n    private renderable: Sprite;\r\n    private hpRenderer: HpRenderer;\r\n\r\n    constructor(assets: Assets, pos: Point) {\r\n        super(pos);\r\n\r\n        this.hpRenderer = assets.hpRenderer;\r\n\r\n        this.maxHp = this.hp = 3;\r\n\r\n        this.primary = new Sword(assets);\r\n        this.secondary = new Dagger(assets);\r\n\r\n        this.renderable = assets.getAsset('player') as Sprite;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n\r\n        this.renderable.draw(ctx, rect, 0);\r\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\r\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\r\n\r\n        this.hpRenderer.draw(ctx, this.position, this.hp, this.maxHp);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Player from \"./entities/Player\";\r\nimport HexArray from \"./HexArray\";\r\nimport HexCell from \"./tiles/HexCell\";\r\nimport IMapGen from \"./mapGen/IMapGen\";\r\nimport * as C from \"./Constants\";\r\nimport Entity from \"./Entity\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Enemy from \"./entities/Enemy\";\r\nimport IFeature from \"./features/IFeature\";\r\nimport Cell from \"../rpgt/world/Cell\";\r\n\r\nexport default class GameState {\r\n\r\n    public player: Player;\r\n    public enemies: Enemy[] = [];\r\n\r\n    public tiles: HexArray<HexCell>;\r\n    public features: HexArray<IFeature | undefined>;\r\n    public currentFloor: number;\r\n    public regionId: number;\r\n\r\n    public gold: number;\r\n\r\n    public renderTickNumber: number;\r\n\r\n    public brokenGems: {[floor: number]: boolean} = {};\r\n    \r\n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\r\n        this.changeFloor(floorNum, generator);\r\n        this.regionId = 0;\r\n\r\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\r\n        this.gold = 0;\r\n\r\n        this.renderTickNumber = 0;\r\n    }\r\n\r\n    entityAt(to: Point) {\r\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMove(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        if(to.equals(this.player.position)) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMoveIgnorePlayer(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMoveIgnoreEnemies(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        return !to.equals(this.player.position);\r\n    }\r\n\r\n    changeFloor(floorNum: number, generator: IMapGen) {\r\n        this.enemies = [];\r\n        generator.generateMap(this.assets, floorNum, this);\r\n        this.currentFloor = floorNum;\r\n        this.tiles.iterate((x, y, tile) =>{\r\n            tile.AfterWorldLoad(this, new Point(x, y));\r\n        });\r\n    }\r\n\r\n    getCells(predicate: (point: Point, tile: HexCell, feature: IFeature) => boolean) {\r\n        let results: Point[] = [];\r\n        this.tiles.iterate((x, y, cell) => {\r\n            const pt = new Point(x,y);\r\n            const feature = this.features.get(pt);\r\n            if(predicate(pt, cell, feature)) {\r\n                results.push(pt);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 13*this.regionId, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(42, 0), this.currentFloor);\r\n\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 13*3, 41, 13)).draw(ctx, new Rect(0, 14, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(42, 14), this.gold, 3);\r\n\r\n        this.tiles.iterate((x, y, cell) => {\r\n            cell.draw(ctx, this, new Point(x, y));\r\n        });\r\n        \r\n        this.features.iterate((x, y, feat) => {\r\n            feat?.draw(ctx, this, new Point(x, y));\r\n        });\r\n\r\n        [this.player, ...this.enemies].forEach(entity => {\r\n            if(excludeEntities && excludeEntities.includes(entity)) {\r\n                return;\r\n            }\r\n            entity.draw(ctx);\r\n            if(entity.hp != entity.maxHp){\r\n                this.assets.hpRenderer.draw(ctx, entity.position, entity.hp, entity.maxHp);\r\n            }\r\n        });\r\n\r\n        this.renderTickNumber ++;\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class GameStartAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new EntryAnimationPhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.player.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}","import Point from '../position/Point';\r\n\r\nexport interface IMouseState {\r\n    button: number;\r\n    eventType: 'down' | 'up' | 'click' | 'drag' | 'drag_end';\r\n}\r\n\r\nexport interface IMouseClick extends IMouseState{\r\n    position: Point;\r\n    eventType: 'down' | 'up' | 'click';\r\n}\r\n\r\nexport interface IMouseDrag extends IMouseState{\r\n    startPosition: Point;\r\n    endPosition: Point;\r\n    eventType: 'drag' | 'drag_end';\r\n}\r\n\r\nexport default class MouseWatcher {\r\n\r\n    public position: Point;\r\n    public clickEvents: {[key: number]: {at: Point, isDrag: boolean}} = {};\r\n\r\n    private outputEvents: IMouseState[] = [];\r\n\r\n    constructor(public attachedElement: HTMLElement, private dragThreshold: number = 5) {\r\n\r\n        attachedElement.addEventListener('mouseenter', ev => this.onMouseEnter(ev));\r\n        attachedElement.addEventListener('mousemove', ev => this.onMouseMove(ev));\r\n        attachedElement.addEventListener('mouseleave', ev => this.onMouseLeave(ev));\r\n        \r\n        attachedElement.addEventListener('mousedown', ev => this.onMouseDown(ev));\r\n        attachedElement.addEventListener('mouseup', ev => this.onMouseUp(ev));\r\n    }\r\n\r\n    \r\n    private onMouseEnter(ev: MouseEvent) {\r\n        this.position = new Point(ev.offsetX, ev.offsetY);\r\n    }\r\n    \r\n    private onMouseLeave(ev: MouseEvent) {\r\n        this.position = undefined;\r\n    }\r\n\r\n    private onMouseMove(ev: MouseEvent) {\r\n        this.position = new Point(ev.offsetX, ev.offsetY);\r\n        for(const key in this.clickEvents) {\r\n            const keyevent = this.clickEvents[key];\r\n            if(keyevent.isDrag || Point.subtract(this.position, keyevent.at).lengthSq() >= this.dragThreshold * this.dragThreshold) {\r\n                this.clickEvents[key].isDrag = true;\r\n                \r\n                this.outputEvents.push(<IMouseDrag>{ button: ev.button, startPosition: keyevent.at, endPosition: this.position, eventType: 'drag' });\r\n            }\r\n        }\r\n    }\r\n    \r\n    private onMouseDown(ev: MouseEvent) {\r\n        const position = new Point(ev.offsetX, ev.offsetY);\r\n        this.clickEvents[ev.button] = { at: position, isDrag: false };\r\n        this.outputEvents.push(<IMouseClick>{ button: ev.button, position, eventType: 'down' });\r\n    }\r\n    \r\n    private onMouseUp(ev: MouseEvent) {\r\n        this.position = new Point(ev.offsetX, ev.offsetY);\r\n        const event = this.clickEvents[ev.button];\r\n        if(event) {\r\n            this.outputEvents.push(<IMouseClick>{ button: ev.button, position: event.at, eventType: 'up' });\r\n            if(event.isDrag) {\r\n                this.outputEvents.push(<IMouseDrag>{ button: ev.button, startPosition: event.at, endPosition: this.position, eventType: 'drag_end' });\r\n            }\r\n            else {\r\n                this.outputEvents.push(<IMouseClick>{ button: ev.button, position: event.at, eventType: 'click' });\r\n            }\r\n        }\r\n        delete this.clickEvents[ev.button];\r\n    }\r\n\r\n    public update() {\r\n        const store = this.outputEvents;\r\n        this.outputEvents = [];\r\n        return store;\r\n    }\r\n}","import MouseWatcher, { IMouseClick, IMouseDrag, IMouseState } from './MouseWatcher';\r\nimport Point from '../position/Point';\r\n\r\nexport default class MouseManager {\r\n\r\n    watcher: MouseWatcher;\r\n    public updates: IMouseState[];\r\n\r\n    constructor(element: HTMLElement) {\r\n        this.watcher = new MouseWatcher(element);\r\n        this.updates = [];\r\n    }\r\n\r\n    public update(): void {\r\n        this.updates = this.watcher.update();\r\n    }\r\n\r\n\r\n    public position() : undefined | Point {\r\n        return this.watcher.position;\r\n    }\r\n\r\n    public isButtonDown(button: number) {\r\n        return this.watcher.clickEvents[button] !== undefined;\r\n    }\r\n\r\n    public isButtonUp(button: number) {\r\n        return !this.isButtonDown(button);\r\n    }\r\n\r\n    /** Returns true iff the provided button was pressed this frame */\r\n    public isButtonPressed(button: number) {\r\n        return this.updates.some(update => update.button === button && update.eventType === 'down');\r\n    }\r\n    \r\n    /** Returns true iff the provided button was released this frame */\r\n    public isButtonReleased(button: number) {\r\n        return this.updates.some(update => update.button === button && update.eventType === 'up');\r\n    }\r\n    \r\n    /** Returns true iff the provided button was released this frame and was not dragged */\r\n    public isButtonClicked(button: number) {\r\n        return this.updates.some(update => update.button === button && update.eventType === 'click');\r\n    }\r\n    \r\n    /** Returns true iff the provided button was released this frame and was dragged */\r\n    public isButtonDragEnd(button: number) {\r\n        return this.updates.some(update => update.button === button && update.eventType === 'drag_end');\r\n    }\r\n\r\n    public tryGetDrag(button: number) {\r\n        const drags = this.updates.filter(update => update.button === button && (update.eventType === 'drag' || update.eventType === 'drag_end'));\r\n        if(drags.length === 0) { return undefined; }\r\n        return drags[0] as IMouseDrag;\r\n    }\r\n\r\n    public tryGetClick(button: number) {\r\n        const clicks = this.updates.filter(update => update.button === button && update.eventType === 'click');\r\n        if(clicks.length === 0) { return undefined; }\r\n        return clicks[0] as IMouseClick;\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport GameState from './GameState';\r\nimport StandardMapGen from './mapGen/StandardMapGen';\r\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\r\nimport IGamePhase from './phases/IGamePhase';\r\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\r\nimport FloorZeroGen from './mapGen/FloorZeroGen';\r\nimport Zombie from './entities/Zombie';\r\nimport Floor12Gen from './mapGen/Floor12Gen';\r\nimport MouseManager from '../common/input/MouseManager';\r\n\r\nlet scaleHelper: NearestNeighborScalingHelper;\r\n\r\nexport default class HopliteProgram {\r\n    static keys: KeyboardManager;\r\n    static mouse: MouseManager;\r\n    static scaleHelper: NearestNeighborScalingHelper;\r\n\r\n    public static run(): (()=>void) {\r\n        let ctx: CanvasRenderingContext2D;\r\n        \r\n        const assetLoader = new AssetLoader();\r\n        const assets = new Assets(assetLoader);\r\n\r\n        let state: GameState;\r\n        let currentPhase: IGamePhase = new GameStartAnimationPhase();\r\n\r\n        HopliteProgram.keys = new KeyboardManager(document.body);\r\n        assetLoader.onAllFinished(assetLoadDone);\r\n        \r\n        function assetLoadDone() {\r\n            assets.onLoadFinished();\r\n            \r\n            const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n            ctx = canvas.getContext('2d');\r\n            HopliteProgram.mouse = new MouseManager(canvas);\r\n            HopliteProgram.scaleHelper = new NearestNeighborScalingHelper(\r\n                canvas, \r\n                ctx, \r\n                C.MAP_PIXEL_SIZE, \r\n                C.MAP_PIXEL_SIZE, \r\n                true, \r\n                () => { return; }\r\n            );\r\n\r\n            state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\r\n            NearestNeighborScaling(ctx);\r\n            tick();\r\n        }\r\n        \r\n        function tick() {\r\n            HopliteProgram.scaleHelper.TryRescale();\r\n            NearestNeighborScaling(ctx);\r\n            HopliteProgram.mouse.update();\r\n\r\n            const nextPhase = currentPhase.tick(state, HopliteProgram.keys, HopliteProgram.mouse);\r\n\r\n            ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.fillStyle = '#000000';\r\n            ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n            currentPhase.draw(ctx, state);\r\n\r\n            if(nextPhase !== currentPhase) {\r\n                currentPhase = nextPhase;\r\n                nextPhase.init(state);\r\n            }\r\n\r\n            HopliteProgram.keys.update();\r\n            requestAnimationFrame(() => tick());\r\n        }\r\n\r\n        return (() => HopliteProgram.scaleHelper.Detatch());\r\n    }\r\n}","import * as React from 'react';\r\nimport HopliteProgram from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>HopliteProgram.run());\r\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","static","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","TILE_WIDTH","TILE_HEIGHT","PIX_PER_CELL_Y","HALF_TILE_SIZE","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Direction","AllDirections","Right","DownRight","DownLeft","Left","UpLeft","UpRight","direction","PI","pt","x","y","ray","FromPoint","sign","distance","HexLength","amount","TurnRight","amt","TurnLeft","point","abs","GetRing","radius","result","pos","dir","len","originDelta","HpRenderer","image","emptyHpImage","redHpImage","yellowHpImage","blueHpImage","draw","ctx","hp","maxHp","rows","ceil","lastRowLength","fullImage","emptyImage","originPoint","row","dy","col","lastRowDx","SpriteAnimation","source","firstFrame","origin","frameAdvance","numFrames","duration","loop","getPixelSize","w","getRenderable","SpriteAnimationInstance","getSprite","frameNumber","frame","overrideDuration","currentTick","position","rotation","DelaySpriteAnimationInstance","delayDuration","EntityMoveAnimation","entity","motion","target","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","SequentialAnimation","steps","shift","ProjectileAnimation","size","fromPixel","toPixel","angle","atan2","destination","CreateProjectileAnimation","projectile","fromHex","toHex","onImpact","destPt","projAnimation","impactAnimation","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","ignoreEnemies","ignorePlayer","startPoint","getAffectedTiles","state","positions","toAnimations","animations","pixTarget","applyExtraEffects","Entity","primary","SimpleEnemy","rect","Enemy","Zombie","super","isFlying","goldValue","assets","sprite","getAsset","getAttacks","playerLocation","player","basicAttack","getMove","attack","disallowed","possibleMoves","map","rp","minMoves","minMoveDist","some","equals","isValidMoveIgnoreEnemies","random","DeltaRenderable","delta","Rectangle","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","typeId","pathable","isPathable","AfterPlayerTurn","AfterEnemyTurn","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","tiles","AfterWorldLoad","world","tileParts","directions","tileCoords","tileSlice","StitchTileParts","tx","ty","tw","th","isEdge","adjacencyMap","images","part","index","reduceRight","acc","sourceBounds","DelayAnimation","inner","delay","ParallelAnimation","step","TileAttackInfo","infos","delayPerDist","animationSource","allPts","reduce","info","concat","dist","pix","Lava","TypeID","steppingEnemy","enemies","find","e","getImpactAnimation","OnEntityStep","lavaStatic","lavaLayers","d","hexPt","isInBounds","get","lavaOverlay","overlayWaver","round","sin","renderTickNumber","Archer","isAfraid","fearsprite","projectileSprite","nextPt","entityAt","projectileAttack","deltaPlayer","targetPosition","tile","hasAttackOpportunity","dirAndDist","couldAttack","Mage","cooldownsprite","attackOnCooldown","RadialAreaAttackInfo","rings","delayPerRadius","ring","filter","innerAnimations","points","Giant","turnSequenceIndex","turnSequence","lastTurn","bigAttackPrepImage","radialSmashAnimation","turn","internalGetMove","OffsetRenderable","offset","StoneEye","prepFire","randart","sprites","readySprite","SimpleFeature","name","afterPlayerTurn","nextPhase","afterEnemyTurn","tgt","LifeGem","isBroken","brokenSprite","brokenGems","currentFloor","RunicLifeGem","flashAnimation","hasFlashed","Floor","customSprite","HexArray","defaultValue","_size","data","midRowLength","dx","xp","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","iterate","func","Portal","isOpen","closedSprite","openSprites","openAnimation","FloorTransitionPhase","dest","MathHelpers","modulo","playerMoveTileArts","FloorZeroGen","generateMap","features","ring2","playerRing","Stairs","toPath","node","parent","parentPath","AssurePathTo","predicate","checkEnd","pathLengthNoise","pathToEnd","isEnd","getNeighbors","closedSet","openSet","cost","minIndex","cur","current","neighbor","neighborNode","to","c","open","findIndex","DjikstraPath","neighbors","trapSprites","trapCooldown","Trap","cooldown","spritePos","Shrine","isUsed","Spider","StandardMapGen","leftLavaY","leftLavaX","genLava","rightLavaY","rightLavaX","downStairY","downStairX","gemPositions","getCells","_","feat","gemPos","shrinePosition","AssurePathToEnd","validEnemySpawns","spawnId","archer","enemy","floorPositions","replaceFloor","validRiverDirections","MapGenerators","gen","LockedStairs","ringIndex","wrap","AnimationPhase","onFinish","init","AttackResolutionPhase","attacks","damageGroups","damageGroup","IsPlayer","goldValues","gold","PhaseBuilder","chain","thenAnimate","next","thenResolve","gs","thenAnimateAndResolve","atk","then","finally","lastStep","nextfn","AfterMovePhase","isPlayerTurn","allAttacks","phaseBuilder","New","newNext","AfterMovePhase_Features","PlayerMoveAnimPhase","from","forceMotion","PlayerTurnGamePhase","enemyAttacks","lastAttacks","attackSet","stepped","rm","didMove","AfterEnemyMovePhase","EnemyMovePhase","EnemyAttackPhase","postMoveAttacks","getAfterMoveAttacks","secondary","playerMove","isValidMove","getBeforeMoveAttacks","dirKeys","cellHighlightSprite","mouseTile","mouse","tryGetDirection","additionalMoves","enableAdditionalMoves","isValidMoveIgnorePlayer","specialMove","move","forceMove","mouseClick","tryGetClick","tile_y","tile_x","PixelToHex","HopliteProgram","scaleHelper","ScreenToPixel","EntryAnimationPhase","animationTime","fillStyle","globalAlpha","fillRect","FloorTransitionPlayerMovePhase","generator","playerStartPoint","changeFloor","lerp","hasPlayedAnimation","isPlayingAnimation","unlockAnimation","Object","StoneDisc","isReadyToFire","SpawnEnemyAttackInfo","BlueBurstDisc","isExploding","explodingSprite","BlueMage","spawnAnimation","Assets","loader","assetFilesByName","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","hpImage","impacts","jsonCallback","default","assetSheet","onLoadFinished","hpRenderer","onAssetsLoaded","suppressErrors","definition","file","error","scaleFactor","units","origin_x","origin_y","advx","advance","advy","getDigitSprite","digit","digitRow","drawNumber","digits","split","parseInt","SimpleWeapon","type","artTile","iconImage","beforeMove","simpleAttacks","moveFrom","moveTo","moveDelta","onMove","rot","getRotation","pattern","attackInfo","Sword","getAttack","description","animationAttack","Dagger","Player","GameState","floorNum","regionId","flying","results","cell","feature","excludeEntities","forEach","includes","GameStartAnimationPhase","MouseWatcher","dragThreshold","clickEvents","outputEvents","ev","onMouseEnter","onMouseMove","onMouseLeave","onMouseDown","onMouseUp","offsetX","offsetY","keyevent","isDrag","at","lengthSq","button","startPosition","endPosition","eventType","event","store","MouseManager","updates","isButtonDown","isButtonUp","isButtonPressed","isButtonReleased","isButtonClicked","isButtonDragEnd","tryGetDrag","drags","clicks","assetLoader","AssetLoader","currentPhase","TryRescale","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}