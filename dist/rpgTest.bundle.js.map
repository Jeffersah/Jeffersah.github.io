{"version":3,"file":"rpgTest.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common-assets/arrows.png","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/rpgt/Constants.ts","webpack://trading-game/./src/projects/common-assets/rpg1.png","webpack://trading-game/./src/projects/common-assets/wizard16.png","webpack://trading-game/./src/projects/common/Iterate.ts","webpack://trading-game/./src/projects/rpgt/world/World.ts","webpack://trading-game/./src/projects/rpgt/SheetGraphic.ts","webpack://trading-game/./src/projects/rpgt/world/Cell.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/common/assets/FileResource.ts","webpack://trading-game/./src/projects/rpgt/index.ts"],"sourcesContent":["export default __webpack_public_path__ + \"bbb298f00b41bbd627d27aa0529a20ba.png\";","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export const TILES_WIDE = 28;\r\nexport const TILES_HIGH = 28;\r\nexport const TILE_SIZE = 16;","export default __webpack_public_path__ + \"42ace1eb95edbc899165c10bb9cc20ab.png\";","export default __webpack_public_path__ + \"e5352b303b79e08de36a8c4248cdbb28.png\";","\r\nexport interface ILoopControl {\r\n    break(): void;\r\n}\r\n\r\nexport function IterateRange(start: number, end: number, handle: (value: number, control: ILoopControl) => void): void {\r\n    let breakIteration = false;\r\n    const loopControl = {\r\n        break: () => {\r\n            breakIteration = true;\r\n        }\r\n    };\r\n\r\n    if (end === start) {\r\n        handle(start, loopControl);\r\n        return;\r\n    }\r\n\r\n    const direction = end > start ? 1 : -1;\r\n    const finalValue = end + direction;\r\n\r\n    for (let i = start; i !== finalValue && !breakIteration; i += direction) {\r\n        handle(i, loopControl);\r\n    }\r\n}","import Cell from './Cell';\r\nimport Rect from '../../common/position/Rectangle';\r\nimport Point from '../../common/position/Point';\r\nimport { Direction } from '../../common/position/Direction';\r\nimport { IterateRange } from '../../common/Iterate';\r\nimport * as Const from '../Constants';\r\nimport { createContext } from 'react';\r\nimport { ResizeCanvas } from '../../common/CanvasHelpers';\r\n\r\nexport default class World {\r\n    cells: Cell[][];\r\n\r\n    public prerender: HTMLCanvasElement;\r\n\r\n    constructor(public width: number, public height: number, generateCell: () => Cell) {\r\n        this.cells = [];\r\n        for (let x = 0; x < width; x++) {\r\n            const col = [];\r\n            for (let y = 0; y < height; y++) {\r\n                col.push(generateCell());\r\n            }\r\n            this.cells.push(col);\r\n        }\r\n\r\n        this.prerender = document.getElementById('world_prerender') as HTMLCanvasElement;\r\n    }\r\n\r\n    updatePrerender() {\r\n        ResizeCanvas(this.prerender, Const.TILE_SIZE * this.width, Const.TILE_SIZE * this.height);\r\n        const pctx = this.prerender.getContext('2d');\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.cells[x][y].paint(pctx, x * Const.TILE_SIZE, y * Const.TILE_SIZE);\r\n            }\r\n        }\r\n    }\r\n\r\n    tryMoveEntity(pos: Rect, vel: Point, onChecked?: (x: number, y: number) => void): void {\r\n        const xDirection = vel.x >= 0 ? Direction.Right : Direction.Left;\r\n        const yDirection = vel.y >= 0 ? Direction.Down : Direction.Up;\r\n        if (vel.x !== 0) {\r\n            const startXTile = Math.floor(pos.edge(xDirection) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.edge(xDirection) + vel.x) / Const.TILE_SIZE);\r\n            const startYTile = Math.floor(pos.edge(Direction.Up) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.edge(Direction.Down) - 1) / Const.TILE_SIZE);\r\n\r\n            let xColision: number | undefined;\r\n            IterateRange(startXTile, endXTile, (x, ctrl) => {\r\n                for (let y = startYTile; y <= endYTile; y++) {\r\n                    if (x < 0 || x >= this.width) {\r\n                        xColision = x;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        xColision = x;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (xColision === undefined) {\r\n                pos.x += vel.x;\r\n            } else {\r\n                if (vel.x >= 0) pos.x = xColision * Const.TILE_SIZE - pos.w;\r\n                else pos.x = (xColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n        if (vel.y !== 0) {\r\n            const startYTile = Math.floor(pos.edge(yDirection) / Const.TILE_SIZE);\r\n            const endYTile = Math.floor((pos.edge(yDirection) + vel.y) / Const.TILE_SIZE);\r\n            const startXTile = Math.floor(pos.edge(Direction.Left) / Const.TILE_SIZE);\r\n            const endXTile = Math.floor((pos.edge(Direction.Right) - 1) / Const.TILE_SIZE);\r\n\r\n            let yColision: number | undefined;\r\n            IterateRange(startYTile, endYTile, (y, ctrl) => {\r\n                for (let x = startXTile; x <= endXTile; x++) {\r\n                    if (y < 0 || y >= this.height) {\r\n                        yColision = y;\r\n                        ctrl.break();\r\n                        return;\r\n                    }\r\n                    if (onChecked) onChecked(x, y);\r\n                    if (!this.cells[x][y].pathable) {\r\n                        ctrl.break();\r\n                        yColision = y;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (yColision === undefined) {\r\n                pos.y += vel.y;\r\n            } else {\r\n                if (vel.y >= 0) pos.y = yColision * Const.TILE_SIZE - pos.h;\r\n                else pos.y = (yColision + 1) * Const.TILE_SIZE;\r\n            }\r\n        }\r\n    }\r\n}","import { IGraphic } from './IGraphic';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\n\r\nexport default class SheetGraphic implements IGraphic {\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(public sheet: SpriteSheet, private tileX: number, private tileY: number) {\r\n        this.width = sheet.spriteWidth;\r\n        this.height = sheet.spriteHeight;\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number, tw: number, th: number): void {\r\n        this.sheet.render(ctx, tx, ty, tw, th, this.tileX, this.tileY);\r\n    }\r\n\r\n}","import { IGraphic } from '../IGraphic';\r\nimport * as Const from '../Constants';\r\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\r\nimport SheetGraphic from '../SheetGraphic';\r\n\r\nconst GRASS_TILES: [number, number][] =\r\n[\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [10, 0],\r\n    [7, 1],\r\n    [7, 1],\r\n    [10, 1],\r\n    [10, 2],\r\n    [9, 2]\r\n];\r\n\r\nexport default class Cell {\r\n    constructor(public pathable: boolean, public graphic: IGraphic) {\r\n\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number) {\r\n        this.graphic.paint(ctx, tx, ty, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    }\r\n\r\n    static GrassFloor(sheet: SpriteSheet): Cell {\r\n        const grassCoords = GRASS_TILES[Math.floor(Math.random() * GRASS_TILES.length)];\r\n        return new Cell(true, new SheetGraphic(sheet, grassCoords[0], grassCoords[1]));\r\n    }\r\n\r\n    static RockWall(sheet: SpriteSheet): Cell {\r\n        return new Cell(false, new SheetGraphic(sheet, 7, 24));\r\n    }\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    shift(x: number, y: number): Rect;\r\n    shift(p: Point): Rect;\r\n    shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    shiftBy(x: number, y: number): void;\r\n    shiftBy(p: Point): void;\r\n    shiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Axios from 'axios-observable';\r\n\r\nexport class FileResource<T> {\r\n    public body: T;\r\n    constructor(fileUrl: string, private onload: () => void) {\r\n        Axios.get(fileUrl).subscribe(data => {\r\n            this.body = data.data as T;\r\n            this.onload();\r\n        });\r\n    }\r\n}","import * as Const from './Constants';\r\nimport AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport arrowsUrl from '../common-assets/arrows.png';\r\nimport tilesUrl from '../common-assets/rpg1.png';\r\nimport wizardUrl from '../common-assets/wizard16.png';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport World from './world/World';\r\nimport Cell from './world/Cell';\r\nimport Rect from '../common/position/Rectangle';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { FileResource } from '../common/assets/FileResource';\r\n\r\nconst CAMERA_SLOWDOWN_FACTOR = 3;\r\n\r\nlet assets: {\r\n    tiles: SpriteSheet,\r\n    wizard: SpriteSheet,\r\n    arrows: SpriteSheet,\r\n    tilesets: FileResource<any>\r\n};\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\n\r\nlet world: World;\r\n\r\nlet keys: KeyboardManager;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    assets = {\r\n        tiles: new SpriteSheet(16, 16, tilesUrl, assetLoader.registerAssetLoadCallback()),\r\n        wizard: new SpriteSheet(16, 16, wizardUrl, assetLoader.registerAssetLoadCallback()),\r\n        arrows: new SpriteSheet(16, 16, arrowsUrl, assetLoader.registerAssetLoadCallback()),\r\n        tilesets: new FileResource('../dist/assets/rpgtest/tilesets.json', assetLoader.registerAssetLoadCallback()),\r\n    };\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    world = new World(Const.TILES_WIDE * 2, Const.TILES_HIGH * 2, () => {\r\n        if (Math.random() <= 0.15) {\r\n            return Cell.RockWall(assets.tiles);\r\n        }\r\n        else {\r\n            return Cell.GrassFloor(assets.tiles);\r\n        }\r\n    });\r\n    world.updatePrerender();\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    ctx = canvas.getContext('2d');\r\n    const scaleHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.TILE_SIZE * Const.TILES_WIDE, Const.TILE_SIZE * Const.TILES_HIGH, true, () => { return; });\r\n    tick();\r\n}\r\n\r\nconst camPos = new Point(0, 0);\r\nconst playerPos = new Rect(0, 0, 14, 14);\r\nlet toggle = false;\r\nfunction tick() {\r\n    ctx.clearRect(0, 0, Const.TILES_WIDE * Const.TILE_SIZE, Const.TILES_HIGH * Const.TILE_SIZE);\r\n    NearestNeighborScaling(ctx);\r\n    ctx.save();\r\n    let cx = 0;\r\n    let cy = 0;\r\n    if (world.width > Const.TILES_WIDE) {\r\n        cx = Math.max(0, Math.min((world.width - Const.TILES_WIDE) * Const.TILE_SIZE, playerPos.x - (Const.TILE_SIZE * Const.TILES_WIDE / 2)));\r\n    }\r\n    if (world.height > Const.TILES_HIGH) {\r\n        cy = Math.max(0, Math.min((world.height - Const.TILES_HIGH) * Const.TILE_SIZE, playerPos.y - (Const.TILE_SIZE * Const.TILES_HIGH / 2)));\r\n    }\r\n\r\n    camPos.multWith(CAMERA_SLOWDOWN_FACTOR, CAMERA_SLOWDOWN_FACTOR)\r\n          .addWith(cx, cy)\r\n          .divideWith(CAMERA_SLOWDOWN_FACTOR + 1, CAMERA_SLOWDOWN_FACTOR + 1);\r\n\r\n    ctx.translate(-camPos.x, -camPos.y);\r\n    ctx.drawImage(world.prerender, 0, 0);\r\n    keys.update();\r\n\r\n    ctx.fillStyle = 'blue';\r\n    ctx.fillRect(playerPos.x, playerPos.y, playerPos.w, playerPos.h);\r\n    const vel = new Point(0, 0);\r\n    if (keys.isKeyDown('a')) {\r\n        vel.x = -3;\r\n    }\r\n    if (keys.isKeyDown('d')) {\r\n        vel.x = 3;\r\n    }\r\n    if (keys.isKeyDown('w')) {\r\n        vel.y = -3;\r\n    }\r\n    if (keys.isKeyDown('s')) {\r\n        vel.y = 3;\r\n    }\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.globalAlpha = 0.6;\r\n    world.tryMoveEntity(playerPos, vel, (tx, ty) => {\r\n        ctx.fillRect(tx * Const.TILE_SIZE, ty * Const.TILE_SIZE, Const.TILE_SIZE, Const.TILE_SIZE);\r\n    });\r\n    ctx.globalAlpha = 1;\r\n\r\n    toggle = !toggle;\r\n    if (toggle) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 10, 10);\r\n    }\r\n    ctx.restore();\r\n    requestAnimationFrame(() => tick());\r\n}"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","Math","cos","sin","lengthSq","dot","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","rotate","theta","fromAngle","TILE_SIZE","IterateRange","start","end","handle","breakIteration","loopControl","break","finalValue","i","World","width","height","generateCell","cells","col","prerender","document","getElementById","updatePrerender","pctx","getContext","paint","tryMoveEntity","pos","vel","onChecked","xDirection","yDirection","startXTile","floor","edge","endXTile","startYTile","endYTile","xColision","ctrl","pathable","w","yColision","h","SheetGraphic","sheet","tileX","tileY","spriteWidth","spriteHeight","ctx","tx","ty","tw","th","render","GRASS_TILES","Cell","graphic","grassCoords","random","Rect","shift","xp","shiftBy","corner","r","FileResource","fileUrl","onload","subscribe","data","body","assets","world","Run","assetLoader","AssetLoader","tiles","SpriteSheet","registerAssetLoadCallback","wizard","arrows","tilesets","onAllFinished","assetLoadDone","RockWall","GrassFloor","canvas","NearestNeighborScalingHelper","tick","camPos","playerPos","toggle","clearRect","save","cx","cy","CAMERA_SLOWDOWN_FACTOR","translate","drawImage","fillStyle","fillRect","globalAlpha","restore","requestAnimationFrame"],"sourceRoot":""}