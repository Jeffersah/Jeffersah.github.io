{"version":3,"file":"Sampler.worker.worker.js","mappings":"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","sources":["webpack://trading-game/./src/projects/glsl-geomfrac/geom/Complex3d.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/BurningShip.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/index.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/Mandelbrot.ts","webpack://trading-game/./src/projects/glsl-geomfrac/Fractals/Tricorn.ts","webpack://trading-game/./src/projects/glsl-geomfrac/workers/Sampler.worker.ts"],"sourcesContent":["// The geometric equivalent of a 3d \"Complex number\"\r\n// Really it's a scalar and a bivector, since that's \"primitive\" that fractals operate on\r\n// Even though there's 4 components, it's still 3d.\r\n\r\n// Basis is [0] = scalar, [1] = XY, [2] = YZ, [3] = ZX\r\n// Translates to GLSL as X = Scalar, Y = XY, Z = YZ, W = ZX\r\ntype Complex3d = [number, number, number, number];\r\nexport default Complex3d;\r\n\r\nexport function add(a: Complex3d, b: Complex3d): Complex3d { return a.map((x, i) => x + b[i]) as Complex3d; }\r\nexport function negate(a: Complex3d): Complex3d { return a.map(x => -x) as Complex3d; }\r\nexport function subtract(a: Complex3d, b: Complex3d): Complex3d { return a.map((x, i) => x - b[i]) as Complex3d; }\r\n\r\n// Geometric product of two \"complex numbers\"\r\nexport function multiply(a: Complex3d, b:Complex3d):Complex3d {\r\n    return [\r\n        a[0] * b[0] - a[1] * b[1] - a[2] * b[2] - a[3] * b[3],\r\n        a[0] * b[1] + a[1] * b[0] - a[2] * b[3] + a[3] * b[2],\r\n        a[0] * b[2] + a[1] * b[3] + a[2] * b[0] - a[3] * b[1],\r\n        a[0] * b[3] - a[1] * b[2] + a[2] * b[1] + a[3] * b[0]\r\n    ];\r\n}\r\n\r\nexport function conjugate(a: Complex3d):Complex3d { return [a[0], -a[1], -a[2], -a[3]] as Complex3d; }\r\n\r\nexport function dot(a: Complex3d, b: Complex3d): number { return a.map((x, i) => x * b[i]).reduce((a, b) => a + b); }","import { Complex } from \"../../common\";\r\nimport Complex3d, { add, multiply } from \"../geom/Complex3d\";\r\nimport { IFractal } from \"./IFractal\";\r\n\r\nclass BurningShip implements IFractal\r\n{\r\n    Name: string = 'Burning Ship';\r\n    ShaderCode: string = `\r\n        vec4 zabs = abs(z);\r\n        return c_mult(zabs, zabs) + c;\r\n    `;\r\n\r\n    MaxAmplitude: number = 16;\r\n\r\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\r\n    {\r\n        let zabs = z.map(Math.abs) as Complex3d;\r\n        return add(multiply(zabs, zabs), c);\r\n    }\r\n}\r\n\r\nconst burningShip = new BurningShip();\r\nexport default burningShip;","import burningShip from \"./BurningShip\";\r\nimport { IFractal } from \"./IFractal\";\r\nimport mandelbrot from \"./Mandelbrot\";\r\nimport tricorn from \"./Tricorn\";\r\n\r\nconst ALL_FRACTALS: IFractal[] = [\r\n    mandelbrot,\r\n    burningShip,\r\n    tricorn\r\n];\r\n\r\nexport default ALL_FRACTALS;","import Complex3d, { add, multiply } from \"../geom/Complex3d\";\r\nimport { IFractal } from \"./IFractal\";\r\n\r\nclass Mandelbrot implements IFractal\r\n{\r\n    Name: string = 'Mandelbrot';\r\n    ShaderCode: string = `return c_mult(z, z) + c;`;\r\n\r\n    MaxAmplitude: number = 2;\r\n\r\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\r\n    {\r\n        return add(multiply(z, z), c);\r\n    }\r\n}\r\n\r\nconst mandelbrot = new Mandelbrot();\r\nexport default mandelbrot;","import Complex3d, { add, conjugate, multiply } from \"../geom/Complex3d\";\r\nimport { IFractal } from \"./IFractal\";\r\n\r\nclass Tricorn implements IFractal\r\n{\r\n    Name: string = 'Tricorn';\r\n    ShaderCode: string = `vec4 j = c_conj(z); return c_mult(j, j) + c;`;\r\n\r\n    MaxAmplitude: number = 2;\r\n\r\n    Iterate(z: Complex3d, c: Complex3d): Complex3d\r\n    {\r\n        let j = conjugate(z);\r\n        return add(multiply(j, j), c);\r\n    }\r\n}\r\n\r\nconst tricorn = new Tricorn();\r\nexport default tricorn;","import ALL_FRACTALS from \"../Fractals\";\r\nimport { IFractal } from \"../Fractals/IFractal\";\r\nimport Complex3d, { dot } from \"../geom/Complex3d\";\r\nimport { ISamplerRequest, ISamplerResponse } from \"./SamplerReq\";\r\n\r\nconst ctx: Worker = self as any;\r\n\r\nctx.addEventListener('message', e => {\r\n    const req = e.data as ISamplerRequest;\r\n    console.log('Beginning sampler req for ' + req.fractalName);\r\n    const fractal = ALL_FRACTALS.find(f => f.Name === req.fractalName);\r\n    let result = [];\r\n\r\n    let size = req.from.map((v, i) => req.to[i] - v);\r\n\r\n    for (let dx = 0; dx < req.resolution; dx++) {\r\n        for (let dy = 0; dy < req.resolution; dy++) {\r\n            for (let dz = 0; dz < req.resolution; dz++) {\r\n                const x = req.from[0] + dx * size[0] / req.resolution;\r\n                const y = req.from[1] + dy * size[1] / req.resolution;\r\n                const z = req.from[2] + dz * size[2] / req.resolution;\r\n                const sample = Sample(fractal, x, y, z, 100);\r\n                if(sample < req.sampleFloor ?? 0) continue;\r\n                result.push(...[x, y, z, Sample(fractal, x, y, z, 100)]);\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log('Done sampler req');\r\n    const response: ISamplerResponse = {\r\n        data: new Float32Array(result),\r\n        resolution: req.resolution\r\n    };\r\n    ctx.postMessage(response);\r\n});\r\n\r\nfunction Sample(fractal: IFractal, xc: number, yc: number, zc: number, maxDepth: number) {\r\n    let z: Complex3d = [0, 0, 0, 0];\r\n    let c: Complex3d = [xc, -yc, zc, 0];\r\n    for(let iter = 0; iter <= maxDepth; iter++){\r\n        if(dot(z, z) > fractal.MaxAmplitude)\r\n            return (iter-1) / maxDepth;\r\n        z = fractal.Iterate(z, c);\r\n    }\r\n    return 1;\r\n}"],"names":["add","a","b","map","x","i","multiply","dot","reduce","Name","ShaderCode","MaxAmplitude","Iterate","z","c","zabs","Math","abs","j","ctx","self","Sample","fractal","xc","yc","zc","maxDepth","iter","addEventListener","e","req","data","console","log","fractalName","f","result","size","from","v","to","dx","resolution","dy","dz","y","sampleFloor","push","response","Float32Array","postMessage"],"sourceRoot":""}