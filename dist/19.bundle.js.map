{"version":3,"sources":["webpack:///./src/projects/diplo/Map.ts","webpack:///./src/views/projects/diplo/DiploComponent.tsx","webpack:///./src/projects/common/position/Point.ts"],"names":["areNeighbors","p1","p2","pol1","polygons","pol2","arePolysTouching","pt2","i","length","line","j","otherLine","Point","subtract","LengthSq","key","json","this","neighbors","owner","supply","type","name","abbr","svgData","data","svgPath","split","svgMode","svgRelative","polygon","component","toUpperCase","push","lastPt","pt","parsed","parseFloat","y","x","isNaN","console","log","add","maxX","minX","maxY","minY","poly","midpoint","mapJson","provinces","Object","keys","province","key2","other","connect","indexOf","map","DiploComponent","selProvince","setSelection","undefined","className","viewBox","fill","stroke","d","onClick","fontSize","style","pointerEvents","fromPt","n","x1","y1","x2","y2","angle","distance","Math","cos","sin","Dot","sqrt","len","Length","Multiply","atan2","nx","ny","splitArgs","splitArgsOrSingle","src","a","b","sy","p","min","max","pts","t","Bezier","slice","theta","fromAngle"],"mappings":"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","file":"19.bundle.js","sourcesContent":["import { findMax, flatMap } from \"../../LinqLike\";\r\nimport Point from \"../common/position/Point\";\r\nimport IMapDataJson, { IProvinceJson } from \"./assets/IMapDataJson\";\r\nimport { FactionType, ProvinceType } from \"./Enums\";\r\n\r\nexport default class Map {\r\n    provinces: { [key: string]: Province };\r\n\r\n    constructor(mapJson: IMapDataJson) {\r\n        this.provinces = {};\r\n\r\n        for(let key of Object.keys(mapJson)) {\r\n            let json = mapJson[key];\r\n            this.provinces[key] = new Province(key, json);\r\n        }\r\n\r\n        for(let key of Object.keys(this.provinces)){\r\n            let province = this.provinces[key];\r\n            if(province.type === 'impassable') continue;\r\n            for(let key2 of Object.keys(this.provinces)){\r\n                let other = this.provinces[key2];\r\n                if(other == province || other.type === 'impassable') continue;\r\n                if((mapJson[province.name].connect?.indexOf(other.name)??-1) !== -1 || areNeighbors(province, other)) {\r\n                    province.neighbors.push(other);\r\n                    other.neighbors.push(province);\r\n                    if(other.type === 'sea' && province.type === 'land') province.type = 'coast';\r\n                    if(other.type === 'land' && province.type === 'sea') other.type = 'coast';\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction areNeighbors(p1: Province, p2: Province): boolean {\r\n    for(const pol1 of p1.polygons) {\r\n        for(const pol2 of p2.polygons) {\r\n            if(arePolysTouching(pol1, pol2)) return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst ADJ_THRESH = 4;\r\nfunction arePolysTouching(p1: Point[], pt2: Point[]): boolean {\r\n    for(let i = 0; i < p1.length; i++) {\r\n        let line = [p1[i], p1[(i+1)%p1.length]];\r\n        for(let j = 0; j < pt2.length; j++) {\r\n            let otherLine = [pt2[j], pt2[(j+1)%pt2.length]];\r\n            if(Point.subtract(otherLine[0], line[0]).LengthSq() < ADJ_THRESH\r\n                && Point.subtract(otherLine[1], line[1]).LengthSq() < ADJ_THRESH)\r\n                return true;\r\n                \r\n            if(Point.subtract(otherLine[1], line[0]).LengthSq() < ADJ_THRESH\r\n                && Point.subtract(otherLine[0], line[1]).LengthSq() < ADJ_THRESH)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport class Province {\r\n    name: string;\r\n    abbr: string;\r\n    type: ProvinceType;\r\n    supply: boolean;\r\n    owner?: FactionType;\r\n    polygons: Point[][];\r\n    svgData: string;\r\n    neighbors: Province[];\r\n    midpoint: Point;\r\n\r\n    constructor(key: string, json: IProvinceJson) {\r\n        this.neighbors = [];\r\n        this.polygons = [];\r\n        this.owner = json.owner;\r\n        this.supply = json.supply ?? false;\r\n        this.type = json.type;\r\n        this.name = key;\r\n        this.abbr = json.abbr;\r\n        this.svgData = json.data;\r\n\r\n        let svgPath = json.data.split(' ');\r\n        let svgMode: 'm' | 'v' | 'h' = 'm';\r\n        let svgRelative: boolean = false;\r\n        let polygon: Point[] = [];\r\n        for(let component of svgPath) {\r\n            switch(component) {\r\n                case 'm':\r\n                case 'l':\r\n                case 'M':\r\n                case 'L':\r\n                    svgMode = 'm';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'v':\r\n                case 'V':\r\n                    svgMode = 'v';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'h':\r\n                case 'H':\r\n                    svgMode = 'h';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'z':\r\n                case 'Z':\r\n                    this.polygons.push(polygon);\r\n                    polygon = [];\r\n                    break;\r\n                default:\r\n                    var lastPt = polygon.length === 0 \r\n                        ? this.polygons.length === 0 ? new Point(0,0) : this.polygons[this.polygons.length - 1][this.polygons[this.polygons.length - 1].length - 1]\r\n                        : polygon[polygon.length - 1];\r\n\r\n                    var pt = component.split(',');\r\n\r\n                    var parsed = svgMode === 'm' \r\n                        ? new Point(parseFloat(pt[0]), parseFloat(pt[1]))\r\n                        : svgMode === 'h'\r\n                        ? new Point(parseFloat(pt[0]), svgRelative ? 0 : lastPt.y)\r\n                        : new Point(svgRelative ? 0 : lastPt.x, parseFloat(pt[0]));\r\n\r\n                    if(isNaN(parsed.x) || isNaN(parsed.y))\r\n                    {\r\n                        console.log(key + ' parse FAILED: ' + component);\r\n                    }\r\n\r\n                    polygon.push(\r\n                        svgRelative ? Point.add(lastPt, parsed) : parsed\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n        if(polygon.length !== 0) this.polygons.push(polygon);\r\n        \r\n        let maxX = 0;\r\n        let minX = 1024;\r\n        let maxY = 0; \r\n        let minY = 1024;\r\n        for(const poly of this.polygons) {\r\n            for(const pt of poly) {\r\n                if(pt.x < minX) minX = pt.x;\r\n                if(pt.y < minY) minY = pt.y;\r\n                if(pt.x > maxX) maxX = pt.x;\r\n                if(pt.y > maxY) maxY = pt.y;\r\n            }\r\n        }\r\n        this.midpoint = new Point((minX + maxX) / 2, (minY + maxY) / 2);\r\n    }\r\n}","import * as React from 'react';\r\nimport Map from '../../../projects/diplo/Map';\r\nimport mapJson from '../../../projects/diplo/assets/map.json';\r\nimport IMapDataJson from '../../../projects/diplo/assets/IMapDataJson';\r\n\r\nconst map = new Map(mapJson as IMapDataJson);\r\n\r\nexport default function DiploComponent() {\r\n    const [selProvince, setSelection] = React.useState<string|undefined>(undefined);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <svg viewBox='0 0 1024 1024' fill='#888'>\r\n            {Object.keys(map.provinces).map(key => \r\n            {\r\n                let province = map.provinces[key];\r\n                return <g key={key}>\r\n                    <path \r\n                        fill={\r\n                            key === selProvince ? '#ffff00' :\r\n                            province.type == 'impassable' ? '#888' :\r\n                            province.type == 'coast' ? '#00aa00' :\r\n                            province.type == 'land' ? '#00ff00' : '#0000ff'} \r\n                        stroke='black'\r\n                        d={province.svgData}\r\n                        onClick={()=>setSelection(key)}\r\n                    />\r\n                    <text fontSize='10' fill='black' x={province.midpoint.x} y={province.midpoint.y} style={{ pointerEvents: 'none' }}>{province.abbr}</text>\r\n                </g>;\r\n            })}\r\n            <g>\r\n                {Object.keys(map.provinces).map(key => {\r\n                    let province = map.provinces[key];\r\n                    let fromPt = province.midpoint;\r\n                    return <g key={key}>\r\n                        {province.neighbors.map(n => \r\n                            <line key={province.abbr + '-' + n.abbr} x1={fromPt.x} y1={fromPt.y} x2={n.midpoint.x} y2={n.midpoint.y} stroke='red' />)}\r\n                    </g>\r\n                })}\r\n            </g>\r\n        </svg>\r\n    </div>;\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}"],"sourceRoot":""}