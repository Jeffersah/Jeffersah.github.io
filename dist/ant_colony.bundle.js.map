{"version":3,"file":"ant_colony.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/ant-colony/AntPath.ts","webpack://trading-game/./src/projects/ant-colony/ColonyState.ts","webpack://trading-game/./src/projects/ant-colony/index.ts","webpack://trading-game/./src/views/projects/ant-colony/AntColonyComponent.tsx"],"sourcesContent":["import { ColonyState } from \"./ColonyState\";\r\n\r\nexport class AntPath {\r\n    constructor(public path: number[], public cost: number) {\r\n\r\n    }\r\n\r\n    static runPath(state: ColonyState, signalPower: number, distPower: number, start: number) {\r\n        const hitmap = [];\r\n        const path = [start];\r\n        let pathCost = 0;\r\n        let index = start;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            hitmap.push(i === start);\r\n        }\r\n\r\n        for(let i = 0; i < state.points.length - 1; i++) {\r\n            let next = this.runStep(state, signalPower, distPower, hitmap, index);\r\n            pathCost += state.distance(index, next);\r\n            path.push(next);\r\n            index = next;\r\n            hitmap[next] = true;\r\n        }\r\n\r\n        return new AntPath(path, pathCost);\r\n    }\r\n\r\n    static runStep(state: ColonyState, signalPower: number, distPower: number, hitmap: boolean[], index: number) {\r\n        let pathWeights = [];\r\n        let weightSum = 0;\r\n        for(let i = 0; i < state.points.length; i++) {\r\n            if(index === i || hitmap[i]) pathWeights[i] = 0;\r\n            else {\r\n                let weight = Math.pow(1/state.distance(index, i), distPower) * Math.pow(state.weight(index, i), signalPower);\r\n                pathWeights.push( weight );\r\n                weightSum += weight;\r\n            }\r\n        }\r\n        let randomChoice = Math.random() * weightSum;\r\n        for(let i = 0; i < pathWeights.length; i++) {\r\n            if(hitmap[i]) continue;\r\n            randomChoice -= pathWeights[i];\r\n            if(randomChoice <= 0) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport class ColonyState {\r\n    public points: Point[];\r\n    public signals: number[][];\r\n    public distances: number[][];\r\n    public maxDist: number;\r\n\r\n    constructor(pts: Point[])\r\n    {\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    private initSignals () {\r\n        this.signals = [];\r\n        this.distances = [];\r\n\r\n        this.maxDist = 0;\r\n        for(let from = 0; from < this.points.length; from++){\r\n            let row = [];\r\n            let distRow = [];\r\n            for(let to = from + 1; to < this.points.length; to++){\r\n                row.push(1);\r\n                let dist = Point.subtract(this.points[from], this.points[to]).length();\r\n                distRow.push(dist);\r\n                if(dist > this.maxDist) this.maxDist = dist;\r\n            }\r\n            this.signals.push(row);\r\n            this.distances.push(distRow);\r\n        }\r\n    }\r\n\r\n    setPoints(pts: Point[]){\r\n        this.points = pts;\r\n        this.initSignals();\r\n    }\r\n\r\n    clearWeights() {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    multWeights(mult: number) {\r\n        for(let i = 0; i < this.signals.length; i++) {\r\n            for(let j = 0; j < this.signals[i].length; j++) {\r\n                this.signals[i][j] *= mult;\r\n            }\r\n        }\r\n    }\r\n\r\n    addWeights(path: number[], weight: number) {\r\n        for(let i = 0; i < path.length; i++) {\r\n            let j = (i + 1) % path.length;\r\n            this.weight(path[i], path[j], Math.max(0, Math.min(1, this.weight(path[i], path[j]) + weight)));\r\n        }\r\n    }\r\n\r\n    weight(from: number, to: number): number;\r\n    weight(from: number, to: number, value: number): void;\r\n    weight(from: number, to: number, value?: number): number | void {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        if(value === undefined) {\r\n            return this.signals[i1][i2];\r\n        }\r\n        else {\r\n            if(isNaN(value)) throw \"WHAT\";\r\n            this.signals[i1][i2] = value;\r\n        }\r\n    }\r\n\r\n    distance(from: number, to: number): number {\r\n        const i1 = Math.min(from, to);\r\n        const i2 = Math.max(from, to) - i1 - 1;\r\n        return this.distances[i1][i2];\r\n    }\r\n\r\n    point(index: number): Point;\r\n    point(index: number, point: Point) : void;\r\n    point(index: number, point ?: Point) : void | Point {\r\n        if(point === undefined) return this.points[index];\r\n        this.points[index] = point;\r\n    }\r\n}","import { findMax, findMin, max, min } from \"../../LinqLike\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport { AntPath } from \"./AntPath\";\r\nimport { ColonyState } from \"./ColonyState\";\r\nimport { IRenderSettings } from \"./IRenderSettings\";\r\nlet currentPaintLoop = -1;\r\n\r\n\r\nexport default function Run(settings: IRenderSettings, cvs: HTMLCanvasElement) {\r\n    stopPaintLoop();\r\n    ResizeCanvas(cvs, 800, 600);\r\n    const ctx = cvs.getContext('2d');\r\n\r\n    let state = init(cvs, ctx, settings.numPts);\r\n    paintLoop(cvs, ctx, settings, state);\r\n}\r\n\r\nexport function Cleanup() {\r\n    stopPaintLoop();\r\n}\r\n\r\nfunction stopPaintLoop() {\r\n    totalMinPath = null;\r\n    if(currentPaintLoop !== -1)\r\n        clearTimeout(currentPaintLoop);\r\n}\r\n\r\nlet totalMinPath: AntPath | null = null;\r\nfunction paintLoop(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, settings: IRenderSettings, state: ColonyState) {\r\n    const minPath = tick(settings, state);\r\n    if(totalMinPath === null || minPath.cost < totalMinPath.cost)\r\n        totalMinPath = minPath;\r\n    draw(canvas, ctx, state, minPath.path, totalMinPath.path);\r\n    // TS thinks setTimeout returns a NodeJS.Timeout (?)\r\n    currentPaintLoop = <number><any>setTimeout(() => paintLoop(canvas, ctx, settings, state), settings.delayPerFrame);\r\n}\r\n\r\nfunction tick(settings: IRenderSettings, state: ColonyState): AntPath {\r\n    let ants = [];\r\n    for(let i = 0; i < settings.numAnts; i++) {\r\n        ants.push(AntPath.runPath(state, settings.signalPower, settings.distancePower, 0));\r\n    }\r\n\r\n    state.multWeights(settings.signalDecay);\r\n\r\n    let maxSignalGain = 1 / settings.numAnts;\r\n    let shortestPath = findMin(ants, ant => ant.cost);\r\n    let longestPath = max(ants, ant => ant.cost);\r\n    for(const ant of ants) {\r\n        let antWeight: number;\r\n        if(shortestPath.cost === longestPath)\r\n            antWeight = 1;\r\n        else \r\n            antWeight = 1 - ((ant.cost - shortestPath.cost) / (longestPath - shortestPath.cost));\r\n        state.addWeights(ant.path, antWeight * maxSignalGain);\r\n    }\r\n\r\n    return shortestPath;\r\n}\r\n\r\nfunction init(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, numPts: number): ColonyState {\r\n    const points = [];\r\n    for(let i = 0; i < numPts; i++) {\r\n        points.push(new Point(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height)));\r\n    }\r\n    drawPoints(canvas, ctx, points);\r\n    let state = new ColonyState(points);\r\n    return state;\r\n}\r\n\r\nfunction drawPoints(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, points: Point[]) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    ctx.fillStyle = '#aaa';\r\n    ctx.beginPath();\r\n    for(let i = 0; i < points.length; i++) {\r\n        const point = points[i];\r\n        ctx.moveTo(point.x, point.y);\r\n        ctx.ellipse(point.x, point.y, 3, 3, 0, 0, Math.PI * 2);\r\n    }\r\n    ctx.fill();\r\n}\r\n\r\nfunction draw(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, state: ColonyState, currentBestPath?: number[], globalBestPath?: number[]) {\r\n    drawPoints(canvas, ctx, state.points);\r\n    ctx.strokeStyle = '#aaa';\r\n    for(let i = 0; i < state.points.length; i++) {\r\n        for(let j = 0; j < state.points.length; j++) {\r\n            if(i === j) continue;\r\n            ctx.beginPath();\r\n            ctx.lineWidth = state.weight(i, j) * 5;\r\n            ctx.moveTo(state.point(i).x, state.point(i).y);\r\n            ctx.lineTo(state.point(j).x, state.point(j).y);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'green';\r\n    if(currentBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(currentBestPath[0]).x, state.point(currentBestPath[0]).y);\r\n        for(let i = 1; i < currentBestPath.length; i++) {\r\n            ctx.lineTo(state.point(currentBestPath[i]).x, state.point(currentBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'red';\r\n    if(globalBestPath !== undefined) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(state.point(globalBestPath[0]).x, state.point(globalBestPath[0]).y);\r\n        for(let i = 1; i < globalBestPath.length; i++) {\r\n            ctx.lineTo(state.point(globalBestPath[i]).x, state.point(globalBestPath[i]).y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport Run, { Cleanup } from '../../../projects/ant-colony/index';\r\nimport { IRenderSettings } from '../../../projects/ant-colony/IRenderSettings';\r\n\r\nexport default function AntColonyComponent() {\r\n    let ref = React.useRef<HTMLCanvasElement>();\r\n\r\n    let [state, setState] = React.useState<IRenderSettings>({\r\n        numPts: 100,\r\n        signalDecay: 0.7,\r\n        signalPower: 1.2,\r\n        distancePower: 4,\r\n        delayPerFrame: 6,\r\n        numAnts: 30,\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        Run(state, ref.current);\r\n        return Cleanup;\r\n    }, [state, ref]);\r\n\r\n    return <div className='flex row'>\r\n        <canvas id='canvas' ref={ref} />\r\n        <div className='flex col'>\r\n            <AntColonyValueSliderComponent label='Number of Points: ' value={state.numPts} onChange={v => setState({...state, numPts: v})} min={3} max={200} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Number of Ants: ' value={state.numAnts} onChange={v => setState({...state, numAnts: v})} min={1} max={100} step={1} type='number' />\r\n            <AntColonyValueSliderComponent label='Signal Decay: ' value={state.signalDecay} onChange={v => setState({...state, signalDecay: v})} min={0} max={1} step={0.1} type='float' />\r\n            <AntColonyValueSliderComponent label='Signal Power: ' value={state.signalPower} onChange={v => setState({...state, signalPower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Distance Power: ' value={state.distancePower} onChange={v => setState({...state, distancePower: v})} min={1} max={8} step={0.5} type='float' />\r\n            <AntColonyValueSliderComponent label='Delay per Frame: ' value={state.delayPerFrame} onChange={v => setState({...state, delayPerFrame: v})} min={6} max={600} step={30} type='number' />\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction AntColonyValueSliderComponent(props: {label: string, value: number, onChange: (value: number) => void, min: number, max: number, step: number, type: 'float' | 'number'}) {\r\n    return <div>\r\n        <label>{props.label}</label>\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type='range' min={props.min} max={props.max} step={props.step} />\r\n        <input value={props.value} onChange={ev => props.onChange(ev.target.valueAsNumber)} type={props.type} min={props.min} max={props.max} />\r\n    </div>;\r\n}"],"names":["AntPath","constructor","path","cost","static","state","signalPower","distPower","start","hitmap","pathCost","index","i","points","length","push","next","this","runStep","distance","pathWeights","weightSum","weight","Math","pow","randomChoice","random","ColonyState","pts","initSignals","signals","distances","maxDist","from","row","distRow","to","dist","Point","setPoints","clearWeights","j","multWeights","mult","addWeights","max","min","value","i1","i2","undefined","isNaN","point","currentPaintLoop","Run","settings","cvs","stopPaintLoop","ctx","getContext","canvas","numPts","floor","width","height","drawPoints","init","paintLoop","Cleanup","totalMinPath","clearTimeout","minPath","ants","numAnts","runPath","distancePower","signalDecay","maxSignalGain","shortestPath","ant","longestPath","antWeight","tick","currentBestPath","globalBestPath","strokeStyle","beginPath","lineWidth","moveTo","x","y","lineTo","stroke","draw","setTimeout","delayPerFrame","fillStyle","fillRect","clientWidth","clientHeight","ellipse","PI","fill","AntColonyComponent","ref","setState","current","className","id","AntColonyValueSliderComponent","label","onChange","v","step","type","props","ev","target","valueAsNumber"],"sourceRoot":""}