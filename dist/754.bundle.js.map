{"version":3,"file":"754.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/3d/GlslHelpers.ts","webpack://trading-game/./src/projects/common/3d/Matrix4.ts","webpack://trading-game/./src/projects/common/3d/Point3.ts","webpack://trading-game/./src/projects/common/3d/Quaternion.ts","webpack://trading-game/./src/projects/common/3d/Vector.ts","webpack://trading-game/./src/utils/rand.ts","webpack://trading-game/./src/projects/common/3d/Camera.ts","webpack://trading-game/./src/projects/glsl-cubes/GlslCubesRunner.ts","webpack://trading-game/./src/projects/glsl-cubes/ShaderCode.ts","webpack://trading-game/./src/views/projects/glsl-cubes/GlslCubesComponent.tsx"],"sourcesContent":["export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error(source);\r\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n\r\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n\r\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            positionNumComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n}\r\n\r\n\r\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n    const normalize = false;  // don't normalize\r\n    const stride = 0;         // how many bytes to get from one set of values to the next\r\n                              // 0 = use type and numComponents above\r\n    const offset = 0;         // how many bytes inside the buffer to start from\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n          gl.getAttribLocation(shader, 'aVertexPosition'),\r\n          positionNumComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n    gl.enableVertexAttribArray(\r\n      gl.getAttribLocation(shader, 'aVertexPosition'));\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(shader);\r\n  for(let i = 0; i < drawCounts; i++) {\r\n    bindUniforms(gl, i);\r\n    let {bufferOffset, bufferCount} = getGeom(i);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n  }\r\n}\r\n\r\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n}\r\n\r\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\r\n     // Create a buffer for the square's positions.\r\n     const positionBuffer = gl.createBuffer();\r\n\r\n     // Select the positionBuffer as the one to apply buffer\r\n     // operations to from here out.\r\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n     const l = left ?? -1.0;\r\n     const r = right ?? 1.0;\r\n     const t = top ?? -1.0;\r\n     const b = bottom ?? 1.0;\r\n \r\n     // Now create an array of positions for the square.\r\n     const positions = [\r\n         b, r,\r\n         t, r,\r\n         b, l,\r\n         t, l,\r\n     ];\r\n \r\n     // Now pass the list of positions into WebGL to build the\r\n     // shape. We do this by creating a Float32Array from the\r\n     // JavaScript array, then use it to fill the current buffer.\r\n     gl.bufferData(gl.ARRAY_BUFFER,\r\n                   new Float32Array(positions),\r\n                   gl.STATIC_DRAW);\r\n \r\n     return positionBuffer;\r\n}\r\n\r\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(components),\r\n                gl.STATIC_DRAW);\r\n\r\n  return positionBuffer;\r\n}\r\n\r\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\r\nvarying vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;","import Point3 from \"./Point3\";\r\n\r\nconst identity = [\r\n    [1, 0, 0, 0],\r\n    [0, 1, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 1]\r\n];\r\n\r\nexport default class Matrix4 {\r\n    components: [\r\n        [number, number, number, number],\r\n        [number, number, number, number],\r\n        [number, number, number, number],\r\n        [number, number, number, number]\r\n    ];\r\n\r\n    constructor(identity: boolean = true) {\r\n        if(identity) {\r\n            this.components = [\r\n                [1, 0, 0, 0],\r\n                [0, 1, 0, 0],\r\n                [0, 0, 1, 0],\r\n                [0, 0, 0, 1]\r\n            ];\r\n        } else {\r\n            this.components = [\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 0],\r\n                [0, 0, 0, 1]\r\n            ];\r\n        }\r\n    }\r\n\r\n    public transform(p: Point3) : Point3 {\r\n        let x = this.multRow(this.components[0], p);\r\n        let y = this.multRow(this.components[1], p);\r\n        let z = this.multRow(this.components[2], p);\r\n        let w = this.multRow(this.components[3], p);\r\n        return new Point3(x/w, y/w, z/w);\r\n    }\r\n\r\n    public mult(other: Matrix4): Matrix4 {\r\n        const output = new Matrix4();\r\n        for(let row = 0; row < 4; row++) {\r\n            for(let col = 0; col < 4; col ++) {\r\n                output.components[row][col] = 0;\r\n                for(let i = 0; i < 4; i++) {\r\n                    output.components[row][col] +=\r\n                        this.components[row][i] *\r\n                        other.components[i][col];\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private multRow(row: [number, number, number, number], p: Point3) {\r\n        return row[0] * p.x + row[1] * p.y + row[2] * p.z + row[3];\r\n    }\r\n    \r\n    public colMajor(): number[] {\r\n        let output = new Array(16);\r\n        let i = 0;\r\n        for(let row = 0; row < 4; row++) {\r\n            for(let col = 0; col < 4; col++) {\r\n                output[i++] = this.components[row][col];\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    public rowMajor(): number[] {\r\n        let output = new Array(16);\r\n        let i = 0;\r\n        for(let col = 0; col < 4; col++) {\r\n            for(let row = 0; row < 4; row++) {\r\n                output[i++] = this.components[row][col];\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    public static translate(pt: Point3) {\r\n        let output = new Matrix4();\r\n        output.components[0][3] = pt.x;\r\n        output.components[1][3] = pt.y;\r\n        output.components[2][3] = pt.z;\r\n        return output;\r\n    }\r\n}","export default class Point3 {\r\n\r\n    static zero(): Point3  {\r\n        return new Point3(0,0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number, public z: number) {\r\n\r\n    }\r\n    public lengthSq(): number {\r\n        return this.dot(this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point3 {\r\n        return new Point3(this.x, this.y, this.z);\r\n    }\r\n\r\n    public dot(other: Point3): number {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    public normalize(): Point3 {\r\n        let len = this.length();\r\n        return this.div(len);\r\n    }\r\n\r\n    public mult(p: Point3): Point3\r\n    public mult(x: number, y: number, z: number): Point3\r\n    public mult(s: number): Point3\r\n    public mult(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\r\n        return new Point3(x * this.x, y * this.y, z * this.z);\r\n    }\r\n\r\n    \r\n    public div(p: Point3): Point3\r\n    public div(x: number, y: number, z: number): Point3\r\n    public div(s: number): Point3\r\n    public div(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\r\n        return new Point3(this.x / x, this.y / y, this.z / z);\r\n    }\r\n\r\n    public add(p: Point3): Point3\r\n    public add(x: number, y: number, z: number): Point3\r\n    public add(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz);\r\n        return new Point3(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    public sub(p: Point3): Point3\r\n    public sub(x: number, y: number, z: number): Point3\r\n    public sub(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\r\n        let {x, y, z} = splitArgs(pxs, iy, iz);\r\n        return new Point3(this.x - x, this.y - y, this.z - z);\r\n    }\r\n}\r\n\r\nfunction splitArgs(pxs: Point3 | number, y?: number, z?: number, allowSingle: boolean = false): {x: number, y: number, z: number} {\r\n    if(y === undefined) {\r\n        if(!allowSingle || (pxs as Point3).x !== undefined) {\r\n            return (pxs as Point3);\r\n        } else {\r\n            return { x: pxs as number, y: pxs as number, z: pxs as number };\r\n        }\r\n    }\r\n    else {\r\n        return { x: pxs as number, y, z };\r\n    }\r\n}","import Vector from './Vector';\r\nimport { vec2 } from 'gl-matrix';\r\nimport Matrix4 from './Matrix4';\r\n\r\nexport default class Quaternion {\r\n    constructor(public real: number, public i: number, public j: number, public k: number) {\r\n    }\r\n\r\n    public inverse(): Quaternion {\r\n        const denom = Quaternion.Dot(this, this);\r\n        return new Quaternion(this.real / denom, -this.i / denom, -this.j / denom, -this.k / denom);\r\n    }\r\n\r\n    public static Dot(a: Quaternion, b: Quaternion): number {\r\n        return a.real * b.real + a.i * b.i + a.j * b.j + a.k * b.k;\r\n    }\r\n\r\n    public static axisRotation(axis: Vector, radians: number): Quaternion {\r\n        const cos = Math.cos(radians / 2);\r\n        const sin = Math.sin(radians / 2);\r\n        const len = axis.length();\r\n\r\n        return new Quaternion(cos, sin * axis.x / len, sin * axis.y / len, sin * axis.z / len);\r\n    }\r\n\r\n    public static multiply(a: Quaternion, b: Quaternion) {\r\n        return new Quaternion (\r\n            a.real * b.real - a.i * b.i - a.j * b.j - a.k * b.k,\r\n            a.real * b.i + a.i * b.real + a.j * b.k - a.k * b.j,\r\n            a.real * b.j - a.i * b.k + a.j * b.real + a.k * b.i,\r\n            a.real * b.k + a.i * b.j - a.j * b.i + a.k * b.real\r\n        );\r\n    }\r\n\r\n    public applyTransform(point: Quaternion): Quaternion;\r\n    public applyTransform(vec3: Vector): Vector;\r\n    public applyTransform(point: Quaternion|Vector): Quaternion|Vector {\r\n        if ((point as any).real !== undefined) {\r\n            return Quaternion.multiply(this, Quaternion.multiply(point as Quaternion, this.inverse()));\r\n        }\r\n        else {\r\n            const inputQ = new Quaternion(0, (point as Vector).x, (point as Vector).y, (point as Vector).z);\r\n            const qOut = Quaternion.multiply(this, Quaternion.multiply(inputQ, this.inverse()));\r\n            return new Vector(qOut.i, qOut.j, qOut.k);\r\n        }\r\n    }\r\n\r\n    // Stolen from https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\r\n    public toMatrix():Matrix4 {\r\n        const mtx = new Matrix4();\r\n        mtx.components[0][0] = 1 - 2 * this.j * this.j - 2 * this.k * this.k;\r\n        mtx.components[0][1] = 2 * this.i * this.j - 2 * this.k * this.real;\r\n        mtx.components[0][2] = 2 * this.i * this.k + 2 * this.j * this.real;\r\n        \r\n        mtx.components[1][0] = 2 * this.i * this.j + 2 * this.k * this.real;\r\n        mtx.components[1][1] = 1 - 2 * this.i * this.i - 2 * this.k * this.k;\r\n        mtx.components[1][2] = 2 * this.j * this.k - 2 * this.i * this.real;\r\n        \r\n        mtx.components[2][0] = 2 * this.i * this.k - 2 * this.j * this.real;\r\n        mtx.components[2][1] = 2 * this.j * this.k + 2 * this.i * this.real;\r\n        mtx.components[2][2] = 1 - 2 * this.i * this.i - 2 * this.j * this.j;\r\n\r\n        return mtx;\r\n    }\r\n}","\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export default class Rand {\r\n    static Int(): number;\r\n    static Int(maxExclusive: number): number;\r\n    static Int(minInclusive: number, maxExclusive: number): number;\r\n    static Int(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return Math.floor(r * Number.MAX_SAFE_INTEGER);\r\n        } else if(max === undefined) {\r\n            return Math.floor(r * min);\r\n        } else {\r\n            return min + Math.floor(r * (max - min));\r\n        }\r\n    }\r\n    static Float(): number;\r\n    static Float(maxExclusive: number): number;\r\n    static Float(minInclusive: number, maxExclusive: number): number;\r\n    static Float(min?: number, max?: number): number {\r\n        const r = Math.random();\r\n        if(min === undefined && max === undefined) {\r\n            return r;\r\n        } else if(max === undefined) {\r\n            return r * min;\r\n        } else {\r\n            return min + (r * (max - min));\r\n        }\r\n    }\r\n\r\n}","import Matrix4 from \"./Matrix4\";\r\nimport Point3 from \"./Point3\";\r\nimport Quaternion from \"./Quaternion\";\r\n\r\nexport default class Camera {\r\n    position: Point3;\r\n    facing: Quaternion;\r\n\r\n    constructor(position?: Point3, facing?: Quaternion) {\r\n        this.position = position ?? Point3.zero();\r\n        this.facing = facing ?? new Quaternion(1, 0, 0, 0);\r\n    }\r\n\r\n    getViewMatrix(): Matrix4 { \r\n        let offsetMtx = Matrix4.translate(this.position.mult(-1));\r\n        let rotMtx = this.facing.toMatrix();\r\n        return rotMtx.mult(offsetMtx);\r\n    }\r\n}","import Rand from \"../../utils/rand\";\r\nimport { Complex, Range, Range2d } from \"../common\";\r\nimport Camera from \"../common/3d/Camera\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport Point3 from \"../common/3d/Point3\";\r\nimport Quaternion from \"../common/3d/Quaternion\";\r\nimport Vector from \"../common/3d/Vector\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport { FRAGMENT_SHADER, VERTEX_SHADER } from \"./ShaderCode\";\r\n\r\n(window as any).Q = Quaternion;\r\n\r\nconst tris = [\r\n    -.8, -.8, 1,\r\n    .8, -.8, 1,\r\n    -.8, .8, 1,\r\n    \r\n    -.7, .7, 0,\r\n    -.7, -.7, 0,\r\n    .7, .7, 1,\r\n]\r\n\r\nconst unit_cube_tristrip = [\r\n    -1, 1, 1,     // Front-top-left\r\n    1, 1, 1,      // Front-top-right\r\n    -1, -1, 1,    // Front-bottom-left\r\n    1, -1, 1,     // Front-bottom-right\r\n    1, -1, -1,    // Back-bottom-right\r\n    1, 1, 1,      // Front-top-right\r\n    1, 1, -1,     // Back-top-right\r\n    -1, 1, 1,     // Front-top-left\r\n    -1, 1, -1,    // Back-top-left\r\n    -1, -1, 1,    // Front-bottom-left\r\n    -1, -1, -1,   // Back-bottom-left\r\n    1, -1, -1,    // Back-bottom-right\r\n    -1, 1, -1,    // Back-top-left\r\n    1, 1, -1      // Back-top-right\r\n];\r\n\r\nconst unit_cube_tristrip_2 = [\r\n    -1, 1, -1,     // Front-top-left\r\n    1, 1, -1,      // Front-top-right\r\n    -1, -1, -1,    // Front-bottom-left\r\n    1, -1, -1,     // Front-bottom-right\r\n    1, -1, 1,    // Back-bottom-right\r\n    1, 1, -1,      // Front-top-right\r\n    1, 1, 1,     // Back-top-right\r\n    -1, 1, -1,     // Front-top-left\r\n    -1, 1, 1,    // Back-top-left\r\n    -1, -1, -1,    // Front-bottom-left\r\n    -1, -1, 1,   // Back-bottom-left\r\n    1, -1, 1,    // Back-bottom-right\r\n    -1, 1, 1,    // Back-top-left\r\n    1, 1, 1      // Back-top-right\r\n];\r\n\r\nconst unit_cube_out_tristrip = [\r\n    -1, -1, -1,\r\n    -1, 1, -1,\r\n    1, -1, -1,\r\n    1, 1, -1,\r\n    1, 1, 1,\r\n    -1, 1, -1,\r\n    -1, 1, 1,\r\n    -1, -1, 1,\r\n    1, 1, 1,\r\n    1, -1, 1,\r\n    1, -1, -1,\r\n    -1, -1, 1,\r\n    -1, -1, -1,\r\n    -1, 1, -1,\r\n];\r\n\r\nexport default class GlslCubesRunner {\r\n\r\n    ctx: WebGLRenderingContext;\r\n    program: WebGLProgram;\r\n    posBuffer: WebGLBuffer;\r\n    bufferCount: number;\r\n    camera: Camera;\r\n\r\n    renderPoints: { pt: Point3, sc: number } [];\r\n\r\n\r\n    constructor(private canvas: HTMLCanvasElement) {\r\n        ResizeCanvas(canvas, 1024, 800);\r\n        this.ctx = canvas.getContext('webgl');\r\n        this.program = GLSL.initShaderProgram(this.ctx, VERTEX_SHADER, FRAGMENT_SHADER);\r\n        this.ctx.enable(this.ctx.CULL_FACE);\r\n\r\n        const pbuffer = unit_cube_tristrip;\r\n\r\n        this.posBuffer = GLSL.initGLBuffer(this.ctx, pbuffer);\r\n        this.bufferCount = pbuffer.length;\r\n\r\n        this.camera = new Camera(new Point3(0, 0, -3));\r\n\r\n        this.renderPoints = [];\r\n        for(let i = 0; i < 1000; i++)\r\n        {\r\n            this.renderPoints.push(\r\n                {\r\n                    pt: new Point3(Rand.Float(-2, 2), Rand.Float(-2, 2), Rand.Float(-4, 4)),\r\n                    sc: Rand.Float(0.01, 0.3)\r\n                });\r\n        }\r\n\r\n        this.tickloop(0);\r\n    }\r\n\r\n    tickloop(tickNumber: number) {\r\n        this.tick(tickNumber);\r\n        const percent = (tickNumber / (60 * 15)) % 1;\r\n        this.camera.position.x = 2 * Math.sin(percent * Math.PI * 2);\r\n        this.camera.position.z = -2 * Math.cos(percent * Math.PI * 2);\r\n        this.camera.facing = Quaternion.axisRotation(new Vector(0, 1, 0), percent * Math.PI * 2);\r\n        requestAnimationFrame(()=>this.tickloop(tickNumber+1));\r\n    }\r\n\r\n    tick(tickNumber: number) {\r\n\r\n\r\n        let cameraRowMajor = this.camera.getViewMatrix().rowMajor();\r\n        const maxTickNumber = 60*5;\r\n\r\n        GLSL.shaderDrawMultiple(this.ctx, this.program, this.posBuffer, 3, 'tristrip', this.renderPoints.length, (i) => ({ bufferOffset: 0, bufferCount: this.bufferCount / 3}), (gl, i) => {\r\n            let pt = this.renderPoints[i];\r\n            const realScale = Math.pow(Math.abs(Math.sin(Math.PI * 2 * (((tickNumber + i)/maxTickNumber) % 1))), 3);\r\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'move'), false, [\r\n                pt.sc*realScale, 0, 0, 0,\r\n                0, pt.sc*realScale, 0, 0,\r\n                0, 0, pt.sc*realScale, 0,\r\n                -pt.pt.x, - pt.pt.y, -pt.pt.z, 1\r\n            ]);\r\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'project'), false, cameraRowMajor);\r\n        });\r\n    }\r\n\r\n    cleanup() {\r\n    }\r\n}","export const VERTEX_SHADER = `\r\nattribute vec4 aVertexPosition;\r\nuniform mat4 project;\r\nuniform mat4 move;\r\nvarying vec3 vPos;\r\nvarying vec3 ptPos;\r\n\r\nvoid main() {\r\n  vPos = aVertexPosition.xyz;\r\n  vec4 transformed = project * move * aVertexPosition;\r\n  ptPos = transformed.xyz;\r\n  gl_Position = vec4(transformed.xyz, transformed.z + 1.0);\r\n}`;\r\n\r\nexport const FRAGMENT_SHADER = `\r\nprecision mediump float;\r\nvarying vec3 vPos;\r\nvarying vec3 ptPos;\r\nvoid main() {\r\n    vec3 adjpos = (vPos.xyz + 1.0) / 2.0;\r\n\r\n    vec3 adjPt = (ptPos + 1.0)/2.0;\r\n\r\n    float mxX = max(adjPt.x, 1.0-adjPt.x);\r\n\r\n    float distAdj = 1.0 - (ptPos.z / 6.0);\r\n\r\n    gl_FragColor = vec4(adjPt.xy * distAdj, distAdj, 1.0);\r\n}\r\n`;","import * as React from 'react';\r\nimport GlslCubesRunner from '../../../projects/glsl-cubes/GlslCubesRunner';\r\n\r\nexport default function GlslCubesComponent() {\r\n    const canvas = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        const renderer = new GlslCubesRunner(canvas.current);\r\n        return () => renderer.cleanup();\r\n    }, [canvas]);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas' ref={canvas}></canvas>\r\n    </div>;\r\n}"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","i","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","t","b","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","Matrix4","constructor","identity","this","transform","p","x","multRow","y","z","w","mult","other","output","row","col","colMajor","Array","rowMajor","pt","Point3","lengthSq","dot","length","Math","sqrt","clone","len","div","pxs","iy","iz","splitArgs","add","sub","allowSingle","undefined","Quaternion","real","j","k","inverse","denom","Dot","a","axis","radians","cos","sin","applyTransform","point","multiply","inputQ","qOut","toMatrix","mtx","Vector","negate","sx","sy","sz","isVector","getxyz","dx","dy","dz","subtract","Rand","min","max","random","floor","Number","MAX_SAFE_INTEGER","Camera","position","facing","getViewMatrix","offsetMtx","window","Q","unit_cube_tristrip","GlslCubesRunner","canvas","ctx","getContext","program","CULL_FACE","pbuffer","posBuffer","camera","renderPoints","push","sc","tickloop","tickNumber","tick","percent","PI","requestAnimationFrame","cameraRowMajor","realScale","pow","abs","uniformMatrix4fv","getUniformLocation","cleanup","GlslCubesComponent","renderer","current","className","id","ref"],"sourceRoot":""}