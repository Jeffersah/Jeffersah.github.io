{"version":3,"file":"754.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/3d/GlslHelpers.ts","webpack://trading-game/./src/projects/common/3d/Matrix4.ts","webpack://trading-game/./src/projects/common/3d/Point3.ts","webpack://trading-game/./src/projects/common/3d/Quaternion.ts","webpack://trading-game/./src/projects/common/3d/Vector.ts","webpack://trading-game/./src/utils/Rand.ts","webpack://trading-game/./src/projects/common/3d/Camera.ts","webpack://trading-game/./src/projects/glsl-cubes/GlslCubesRunner.ts","webpack://trading-game/./src/projects/glsl-cubes/ShaderCode.ts","webpack://trading-game/./src/views/projects/glsl-cubes/GlslCubesComponent.tsx"],"sourcesContent":["export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\n    const shader = gl.createShader(type);\n    // Send the source to the shader object\n    gl.shaderSource(shader, source);\n    // Compile the shader program\n    gl.compileShader(shader);\n    // See if it compiled successfully\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(source);\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return undefined;\n    }\n\n    return shader;\n}\n\n\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n      return undefined;\n    }\n\n    return shaderProgram;\n  }\n\n\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n      const normalize = false;  // don't normalize\n      const stride = 0;         // how many bytes to get from one set of values to the next\n                                // 0 = use type and numComponents above\n      const offset = 0;         // how many bytes inside the buffer to start from\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n      gl.vertexAttribPointer(\n            gl.getAttribLocation(shader, 'aVertexPosition'),\n            positionNumComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n      gl.enableVertexAttribArray(\n        gl.getAttribLocation(shader, 'aVertexPosition'));\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(shader);\n    bindUniforms(gl);\n    gl.drawArrays(\n      renderMode === 'triangle' ? gl.TRIANGLES :\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\n}\n\n\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n  gl.clearDepth(1.0);                 // Clear everything\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n  // Clear the canvas before we start drawing on it.\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Tell WebGL how to pull out the positions from the position\n  // buffer into the vertexPosition attribute.\n  {\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n    const normalize = false;  // don't normalize\n    const stride = 0;         // how many bytes to get from one set of values to the next\n                              // 0 = use type and numComponents above\n    const offset = 0;         // how many bytes inside the buffer to start from\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(\n          gl.getAttribLocation(shader, 'aVertexPosition'),\n          positionNumComponents,\n          type,\n          normalize,\n          stride,\n          offset);\n    gl.enableVertexAttribArray(\n      gl.getAttribLocation(shader, 'aVertexPosition'));\n  }\n\n  // Tell WebGL to use our program when drawing\n\n  gl.useProgram(shader);\n  for(let i = 0; i < drawCounts; i++) {\n    bindUniforms(gl, i);\n    let {bufferOffset, bufferCount} = getGeom(i);\n    gl.drawArrays(\n      renderMode === 'triangle' ? gl.TRIANGLES :\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\n  }\n}\n\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const numComponents = 2;  // pull out 2 values per iteration\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n      const normalize = false;  // don't normalize\n      const stride = 0;         // how many bytes to get from one set of values to the next\n                                // 0 = use type and numComponents above\n      const offset = 0;         // how many bytes inside the buffer to start from\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n      gl.vertexAttribPointer(\n            gl.getAttribLocation(shader, 'aVertexPosition'),\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n      gl.enableVertexAttribArray(\n        gl.getAttribLocation(shader, 'aVertexPosition'));\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(shader);\n    bindUniforms(gl);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\n\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\n     // Create a buffer for the square's positions.\n     const positionBuffer = gl.createBuffer();\n\n     // Select the positionBuffer as the one to apply buffer\n     // operations to from here out.\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n     const l = left ?? -1.0;\n     const r = right ?? 1.0;\n     const t = top ?? -1.0;\n     const b = bottom ?? 1.0;\n \n     // Now create an array of positions for the square.\n     const positions = [\n         b, r,\n         t, r,\n         b, l,\n         t, l,\n     ];\n \n     // Now pass the list of positions into WebGL to build the\n     // shape. We do this by creating a Float32Array from the\n     // JavaScript array, then use it to fill the current buffer.\n     gl.bufferData(gl.ARRAY_BUFFER,\n                   new Float32Array(positions),\n                   gl.STATIC_DRAW);\n \n     return positionBuffer;\n}\n\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\n  const positionBuffer = gl.createBuffer();\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  gl.bufferData(gl.ARRAY_BUFFER,\n                new Float32Array(components),\n                gl.STATIC_DRAW);\n\n  return positionBuffer;\n}\n\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\nvarying vec3 vPos;\nvoid main() {\n  vPos = vec3(aVertexPosition.xy, 0.0);\n  gl_Position = aVertexPosition;\n}`;\n\nexport const defaultWebGl2VertexShader = `#version 300 es\nin vec4 aVertexPosition;\nout vec3 vPos;\nvoid main() {\n  vPos = vec3(aVertexPosition.xy, 0.0);\n  gl_Position = aVertexPosition;\n}`;","import Point3 from \"./Point3\";\n\nconst identity = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1]\n];\n\nexport default class Matrix4 {\n    components: [\n        [number, number, number, number],\n        [number, number, number, number],\n        [number, number, number, number],\n        [number, number, number, number]\n    ];\n\n    constructor(identity: boolean = true) {\n        if(identity) {\n            this.components = [\n                [1, 0, 0, 0],\n                [0, 1, 0, 0],\n                [0, 0, 1, 0],\n                [0, 0, 0, 1]\n            ];\n        } else {\n            this.components = [\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 1]\n            ];\n        }\n    }\n\n    public transform(p: Point3) : Point3 {\n        let x = this.multRow(this.components[0], p);\n        let y = this.multRow(this.components[1], p);\n        let z = this.multRow(this.components[2], p);\n        let w = this.multRow(this.components[3], p);\n        return new Point3(x/w, y/w, z/w);\n    }\n\n    public mult(other: Matrix4): Matrix4 {\n        const output = new Matrix4();\n        for(let row = 0; row < 4; row++) {\n            for(let col = 0; col < 4; col ++) {\n                output.components[row][col] = 0;\n                for(let i = 0; i < 4; i++) {\n                    output.components[row][col] +=\n                        this.components[row][i] *\n                        other.components[i][col];\n                }\n            }\n        }\n\n        return output;\n    }\n\n    private multRow(row: [number, number, number, number], p: Point3) {\n        return row[0] * p.x + row[1] * p.y + row[2] * p.z + row[3];\n    }\n    \n    public colMajor(): number[] {\n        let output = new Array(16);\n        let i = 0;\n        for(let row = 0; row < 4; row++) {\n            for(let col = 0; col < 4; col++) {\n                output[i++] = this.components[row][col];\n            }\n        }\n        return output;\n    }\n    \n    public rowMajor(): number[] {\n        let output = new Array(16);\n        let i = 0;\n        for(let col = 0; col < 4; col++) {\n            for(let row = 0; row < 4; row++) {\n                output[i++] = this.components[row][col];\n            }\n        }\n        return output;\n    }\n\n    public static translate(pt: Point3) {\n        let output = new Matrix4();\n        output.components[0][3] = pt.x;\n        output.components[1][3] = pt.y;\n        output.components[2][3] = pt.z;\n        return output;\n    }\n}","export default class Point3 {\n\n    static zero(): Point3  {\n        return new Point3(0,0,0);\n    }\n\n    constructor(public x: number, public y: number, public z: number) {\n\n    }\n    public lengthSq(): number {\n        return this.dot(this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point3 {\n        return new Point3(this.x, this.y, this.z);\n    }\n\n    public dot(other: Point3): number {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    }\n\n    public normalize(): Point3 {\n        let len = this.length();\n        return this.div(len);\n    }\n\n    public mult(p: Point3): Point3\n    public mult(x: number, y: number, z: number): Point3\n    public mult(s: number): Point3\n    public mult(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\n        return new Point3(x * this.x, y * this.y, z * this.z);\n    }\n\n    \n    public div(p: Point3): Point3\n    public div(x: number, y: number, z: number): Point3\n    public div(s: number): Point3\n    public div(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\n        return new Point3(this.x / x, this.y / y, this.z / z);\n    }\n\n    public add(p: Point3): Point3\n    public add(x: number, y: number, z: number): Point3\n    public add(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz);\n        return new Point3(this.x + x, this.y + y, this.z + z);\n    }\n\n    public sub(p: Point3): Point3\n    public sub(x: number, y: number, z: number): Point3\n    public sub(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz);\n        return new Point3(this.x - x, this.y - y, this.z - z);\n    }\n}\n\nfunction splitArgs(pxs: Point3 | number, y?: number, z?: number, allowSingle: boolean = false): {x: number, y: number, z: number} {\n    if(y === undefined) {\n        if(!allowSingle || (pxs as Point3).x !== undefined) {\n            return (pxs as Point3);\n        } else {\n            return { x: pxs as number, y: pxs as number, z: pxs as number };\n        }\n    }\n    else {\n        return { x: pxs as number, y, z };\n    }\n}","import Vector from './Vector';\nimport { vec2 } from 'gl-matrix';\nimport Matrix4 from './Matrix4';\n\nexport default class Quaternion {\n    constructor(public real: number, public i: number, public j: number, public k: number) {\n    }\n\n    public inverse(): Quaternion {\n        const denom = Quaternion.Dot(this, this);\n        return new Quaternion(this.real / denom, -this.i / denom, -this.j / denom, -this.k / denom);\n    }\n\n    public static Dot(a: Quaternion, b: Quaternion): number {\n        return a.real * b.real + a.i * b.i + a.j * b.j + a.k * b.k;\n    }\n\n    public static axisRotation(axis: Vector, radians: number): Quaternion {\n        const cos = Math.cos(radians / 2);\n        const sin = Math.sin(radians / 2);\n        const len = axis.length();\n\n        return new Quaternion(cos, sin * axis.x / len, sin * axis.y / len, sin * axis.z / len);\n    }\n\n    public static multiply(a: Quaternion, b: Quaternion) {\n        return new Quaternion (\n            a.real * b.real - a.i * b.i - a.j * b.j - a.k * b.k,\n            a.real * b.i + a.i * b.real + a.j * b.k - a.k * b.j,\n            a.real * b.j - a.i * b.k + a.j * b.real + a.k * b.i,\n            a.real * b.k + a.i * b.j - a.j * b.i + a.k * b.real\n        );\n    }\n\n    public applyTransform(point: Quaternion): Quaternion;\n    public applyTransform(vec3: Vector): Vector;\n    public applyTransform(point: Quaternion|Vector): Quaternion|Vector {\n        if ((point as any).real !== undefined) {\n            return Quaternion.multiply(this, Quaternion.multiply(point as Quaternion, this.inverse()));\n        }\n        else {\n            const inputQ = new Quaternion(0, (point as Vector).x, (point as Vector).y, (point as Vector).z);\n            const qOut = Quaternion.multiply(this, Quaternion.multiply(inputQ, this.inverse()));\n            return new Vector(qOut.i, qOut.j, qOut.k);\n        }\n    }\n\n    // Stolen from https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n    public toMatrix():Matrix4 {\n        const mtx = new Matrix4();\n        mtx.components[0][0] = 1 - 2 * this.j * this.j - 2 * this.k * this.k;\n        mtx.components[0][1] = 2 * this.i * this.j - 2 * this.k * this.real;\n        mtx.components[0][2] = 2 * this.i * this.k + 2 * this.j * this.real;\n        \n        mtx.components[1][0] = 2 * this.i * this.j + 2 * this.k * this.real;\n        mtx.components[1][1] = 1 - 2 * this.i * this.i - 2 * this.k * this.k;\n        mtx.components[1][2] = 2 * this.j * this.k - 2 * this.i * this.real;\n        \n        mtx.components[2][0] = 2 * this.i * this.k - 2 * this.j * this.real;\n        mtx.components[2][1] = 2 * this.j * this.k + 2 * this.i * this.real;\n        mtx.components[2][2] = 1 - 2 * this.i * this.i - 2 * this.j * this.j;\n\n        return mtx;\n    }\n}","\nexport default class Vector {\n    constructor(public x: number, public y: number, public z: number) {\n    }\n\n    dot(other: Vector) {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    }\n\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    normalize() {\n        return this.multiply(1 / this.lengthSq());\n    }\n    negate() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    multiply(scale: number): Vector;\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\n    multiply(scale: Vector): Vector;\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\n        if(!isVector(sx))\n        {\n            sy = sy ?? <number>sx;\n            sz = sz ?? <number>sx;\n        }\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\n        return new Vector(this.x * x, this.y * y, this.z * z);\n    }\n\n    add(dx: number, dy: number, dz: number): Vector;\n    add(v: Vector): Vector;\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x + x, this.y + y, this.z + z);\n    }\n\n    subtract(dx: number, dy: number, dz: number): Vector;\n    subtract(v: Vector): Vector;\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x - x, this.y - y, this.z - z);\n    }\n\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\n        if(isVector(x)) {\n            return [x.x, x.y, x.z];\n        }\n        else {\n            return [x, y, z];\n        }\n    }\n}\n\nfunction isVector(x: number | Vector) : x is Vector {\n    return (<any>x).x !== undefined;\n}","export default class Rand {\n    static Int(): number;\n    static Int(maxExclusive: number): number;\n    static Int(minInclusive: number, maxExclusive: number): number;\n    static Int(min?: number, max?: number): number {\n        const r = Math.random();\n        if(min === undefined && max === undefined) {\n            return Math.floor(r * Number.MAX_SAFE_INTEGER);\n        } else if(max === undefined) {\n            return Math.floor(r * min);\n        } else {\n            return min + Math.floor(r * (max - min));\n        }\n    }\n    static Float(): number;\n    static Float(maxExclusive: number): number;\n    static Float(minInclusive: number, maxExclusive: number): number;\n    static Float(min?: number, max?: number): number {\n        const r = Math.random();\n        if(min === undefined && max === undefined) {\n            return r;\n        } else if(max === undefined) {\n            return r * min;\n        } else {\n            return min + (r * (max - min));\n        }\n    }\n\n}","import Matrix4 from \"./Matrix4\";\nimport Point3 from \"./Point3\";\nimport Quaternion from \"./Quaternion\";\n\nexport default class Camera {\n    position: Point3;\n    facing: Quaternion;\n\n    constructor(position?: Point3, facing?: Quaternion) {\n        this.position = position ?? Point3.zero();\n        this.facing = facing ?? new Quaternion(1, 0, 0, 0);\n    }\n\n    getViewMatrix(): Matrix4 { \n        let offsetMtx = Matrix4.translate(this.position.mult(-1));\n        let rotMtx = this.facing.toMatrix();\n        return rotMtx.mult(offsetMtx);\n    }\n}","import Rand from \"../../utils/Rand\";\nimport { Complex, Range, Range2d } from \"../common\";\nimport Camera from \"../common/3d/Camera\";\nimport * as GLSL from \"../common/3d/GlslHelpers\";\nimport Point3 from \"../common/3d/Point3\";\nimport Quaternion from \"../common/3d/Quaternion\";\nimport Vector from \"../common/3d/Vector\";\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\nimport { FRAGMENT_SHADER, VERTEX_SHADER } from \"./ShaderCode\";\n\n(window as any).Q = Quaternion;\n\nconst tris = [\n    -.8, -.8, 1,\n    .8, -.8, 1,\n    -.8, .8, 1,\n    \n    -.7, .7, 0,\n    -.7, -.7, 0,\n    .7, .7, 1,\n]\n\nconst unit_cube_tristrip = [\n    -1, 1, 1,     // Front-top-left\n    1, 1, 1,      // Front-top-right\n    -1, -1, 1,    // Front-bottom-left\n    1, -1, 1,     // Front-bottom-right\n    1, -1, -1,    // Back-bottom-right\n    1, 1, 1,      // Front-top-right\n    1, 1, -1,     // Back-top-right\n    -1, 1, 1,     // Front-top-left\n    -1, 1, -1,    // Back-top-left\n    -1, -1, 1,    // Front-bottom-left\n    -1, -1, -1,   // Back-bottom-left\n    1, -1, -1,    // Back-bottom-right\n    -1, 1, -1,    // Back-top-left\n    1, 1, -1      // Back-top-right\n];\n\nconst unit_cube_tristrip_2 = [\n    -1, 1, -1,     // Front-top-left\n    1, 1, -1,      // Front-top-right\n    -1, -1, -1,    // Front-bottom-left\n    1, -1, -1,     // Front-bottom-right\n    1, -1, 1,    // Back-bottom-right\n    1, 1, -1,      // Front-top-right\n    1, 1, 1,     // Back-top-right\n    -1, 1, -1,     // Front-top-left\n    -1, 1, 1,    // Back-top-left\n    -1, -1, -1,    // Front-bottom-left\n    -1, -1, 1,   // Back-bottom-left\n    1, -1, 1,    // Back-bottom-right\n    -1, 1, 1,    // Back-top-left\n    1, 1, 1      // Back-top-right\n];\n\nconst unit_cube_out_tristrip = [\n    -1, -1, -1,\n    -1, 1, -1,\n    1, -1, -1,\n    1, 1, -1,\n    1, 1, 1,\n    -1, 1, -1,\n    -1, 1, 1,\n    -1, -1, 1,\n    1, 1, 1,\n    1, -1, 1,\n    1, -1, -1,\n    -1, -1, 1,\n    -1, -1, -1,\n    -1, 1, -1,\n];\n\nexport default class GlslCubesRunner {\n\n    ctx: WebGLRenderingContext;\n    program: WebGLProgram;\n    posBuffer: WebGLBuffer;\n    bufferCount: number;\n    camera: Camera;\n\n    renderPoints: { pt: Point3, sc: number } [];\n\n\n    constructor(private canvas: HTMLCanvasElement) {\n        ResizeCanvas(canvas, 1024, 800);\n        this.ctx = canvas.getContext('webgl');\n        this.program = GLSL.initShaderProgram(this.ctx, VERTEX_SHADER, FRAGMENT_SHADER);\n        this.ctx.enable(this.ctx.CULL_FACE);\n\n        const pbuffer = unit_cube_tristrip;\n\n        this.posBuffer = GLSL.initGLBuffer(this.ctx, pbuffer);\n        this.bufferCount = pbuffer.length;\n\n        this.camera = new Camera(new Point3(0, 0, -3));\n\n        this.renderPoints = [];\n        for(let i = 0; i < 1000; i++)\n        {\n            this.renderPoints.push(\n                {\n                    pt: new Point3(Rand.Float(-2, 2), Rand.Float(-2, 2), Rand.Float(-4, 4)),\n                    sc: Rand.Float(0.01, 0.3)\n                });\n        }\n\n        this.tickloop(0);\n    }\n\n    tickloop(tickNumber: number) {\n        this.tick(tickNumber);\n        const percent = (tickNumber / (60 * 15)) % 1;\n        this.camera.position.x = 2 * Math.sin(percent * Math.PI * 2);\n        this.camera.position.z = -2 * Math.cos(percent * Math.PI * 2);\n        this.camera.facing = Quaternion.axisRotation(new Vector(0, 1, 0), percent * Math.PI * 2);\n        requestAnimationFrame(()=>this.tickloop(tickNumber+1));\n    }\n\n    tick(tickNumber: number) {\n\n\n        let cameraRowMajor = this.camera.getViewMatrix().rowMajor();\n        const maxTickNumber = 60*5;\n\n        GLSL.shaderDrawMultiple(this.ctx, this.program, this.posBuffer, 3, 'tristrip', this.renderPoints.length, (i) => ({ bufferOffset: 0, bufferCount: this.bufferCount / 3}), (gl, i) => {\n            let pt = this.renderPoints[i];\n            const realScale = Math.pow(Math.abs(Math.sin(Math.PI * 2 * (((tickNumber + i)/maxTickNumber) % 1))), 3);\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'move'), false, [\n                pt.sc*realScale, 0, 0, 0,\n                0, pt.sc*realScale, 0, 0,\n                0, 0, pt.sc*realScale, 0,\n                -pt.pt.x, - pt.pt.y, -pt.pt.z, 1\n            ]);\n            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, 'project'), false, cameraRowMajor);\n        });\n    }\n\n    cleanup() {\n    }\n}","export const VERTEX_SHADER = `\nattribute vec4 aVertexPosition;\nuniform mat4 project;\nuniform mat4 move;\nvarying vec3 vPos;\nvarying vec3 ptPos;\n\nvoid main() {\n  vPos = aVertexPosition.xyz;\n  vec4 transformed = project * move * aVertexPosition;\n  ptPos = transformed.xyz;\n  gl_Position = vec4(transformed.xyz, transformed.z + 1.0);\n}`;\n\nexport const FRAGMENT_SHADER = `\nprecision mediump float;\nvarying vec3 vPos;\nvarying vec3 ptPos;\nvoid main() {\n    vec3 adjpos = (vPos.xyz + 1.0) / 2.0;\n\n    vec3 adjPt = (ptPos + 1.0)/2.0;\n\n    float mxX = max(adjPt.x, 1.0-adjPt.x);\n\n    float distAdj = 1.0 - (ptPos.z / 6.0);\n\n    gl_FragColor = vec4(adjPt.xy * distAdj, distAdj, 1.0);\n}\n`;","import * as React from 'react';\nimport GlslCubesRunner from '../../../projects/glsl-cubes/GlslCubesRunner';\n\nexport default function GlslCubesComponent() {\n    const canvas = React.useRef<HTMLCanvasElement>();\n\n    React.useEffect(() => {\n        const renderer = new GlslCubesRunner(canvas.current);\n        return () => renderer.cleanup();\n    }, [canvas]);\n\n    return <div className='conway conway_body full_body'>\n        <canvas id='canvas' ref={canvas}></canvas>\n    </div>;\n}"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","i","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","t","b","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","defaultWebGl2VertexShader","Matrix4","constructor","identity","this","transform","p","x","multRow","y","z","w","mult","other","output","row","col","colMajor","Array","rowMajor","static","pt","Point3","lengthSq","dot","length","Math","sqrt","clone","len","div","pxs","iy","iz","splitArgs","add","sub","allowSingle","undefined","Quaternion","real","j","k","inverse","denom","Dot","a","axis","radians","cos","sin","applyTransform","point","multiply","inputQ","qOut","toMatrix","mtx","Vector","negate","sx","sy","sz","isVector","getxyz","dx","dy","dz","subtract","Rand","min","max","random","floor","Number","MAX_SAFE_INTEGER","Camera","position","facing","getViewMatrix","offsetMtx","window","Q","unit_cube_tristrip","GlslCubesRunner","canvas","ctx","getContext","program","CULL_FACE","pbuffer","posBuffer","camera","renderPoints","push","sc","tickloop","tickNumber","tick","percent","PI","requestAnimationFrame","cameraRowMajor","realScale","pow","abs","uniformMatrix4fv","getUniformLocation","cleanup","GlslCubesComponent","renderer","current","className","id","ref"],"sourceRoot":""}