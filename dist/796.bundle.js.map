{"version":3,"file":"796.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/hoplite/assets/hp.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_impacts.png","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/HpRenderer.ts","webpack://trading-game/./src/projects/common/rendering/SpriteAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ProjectileAnimation.ts","webpack://trading-game/./src/projects/hoplite/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/hoplite/entities/Archer.ts","webpack://trading-game/./src/projects/hoplite/entities/Mage.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AttackResolutionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/LavaCell.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/DjikstraPath.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/MapGenCommon.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\n    private rgb?: { r: number, g: number, b: number };\n    private hsv?: { h: number, s: number, v: number };\n\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\n            this.hsv = vals as any;\n            this.rgb = undefined;\n        }\n        else  {\n            this.rgb = vals as any;\n            this.hsv = undefined;\n        }\n    }\n\n    /**\n     * Generate an RGB color\n     * @param r Red component [0, 1]\n     * @param g Green component [0, 1]\n     * @param b Blue component [0, 1]\n     */\n    public static rgb(r: number, g: number, b: number): Color {\n        return new Color({ r, g, b });\n    }\n\n    /**\n     * Generate an HSV color\n     * @param r Hue component [0, 1]\n     * @param g Saturation component [0, 1]\n     * @param b Value component [0, 1]\n     */\n    public static hsv(h: number, s: number, v: number): Color {\n        return new Color({ h, s, v });\n    }\n\n    public r(): number;\n    public r(v: number): void;\n    public r(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.r = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.r;\n        }\n    }\n\n    public g(): number;\n    public g(v: number): void;\n    public g(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.g = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.g;\n        }\n    }\n\n    public b(): number;\n    public b(v: number): void;\n    public b(v?: number): number|void {\n        this.reqRgb();\n        if (v !== undefined) {\n            this.rgb.b = v;\n            this.hsv = undefined;\n        } else {\n            return this.rgb.b;\n        }\n    }\n\n    public h(): number;\n    public h(v: number): void;\n    public h(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.h = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.h;\n        }\n    }\n\n    public s(): number;\n    public s(v: number): void;\n    public s(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.s = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.s;\n        }\n    }\n\n    public v(): number;\n    public v(v: number): void;\n    public v(v?: number): number|void {\n        this.reqHsv();\n        if (v !== undefined) {\n            this.hsv.v = v;\n            this.hsv = undefined;\n        } else {\n            return this.hsv.v;\n        }\n    }\n\n    private componentToRgb(n: number) {\n        const k = (n + this.hsv.h * 6) % 6;\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\n    }\n\n\n    private reqRgb() {\n        if (this.rgb === undefined) {\n            this.calcRgb();\n        }\n    }\n    private calcRgb() {\n        this.rgb = {\n            r: this.componentToRgb(5),\n            g: this.componentToRgb(3),\n            b: this.componentToRgb(1),\n        };\n    }\n\n    private reqHsv() {\n        if (this.hsv === undefined) {\n            this.calcHsv();\n        }\n    }\n    private calcHsv() {\n        const {r, g, b} = this.rgb;\n        const mx = Math.max(r, g, b);\n        const mn = Math.min(r, g, b);\n        let h = mx === mn ? 0\n            : mx === r ? (g - b) / (mx - mn)\n            : mx === g ? 2 + (b - r) / (mx - mn)\n            : 4 + (r - g) / (mx - mn);\n        h /= 6;\n        while (h < 0) {\n            h++;\n        }\n        this.hsv = {\n            h,\n            s: mx === mn ? 0 : (mx - mn) / mx,\n            v: mx\n        };\n    }\n\n    public toString(): string {\n        this.reqRgb();\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\n    }\n\n    private toByte(component: number) {\n        return Math.floor(component * 255);\n    }\n}","import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","import { TimingFunction } from \"./TimingFunction\";\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\nimport { InterpolationFunction } from \"./InterpolationFunction\";\n\nexport class Interpolated<T> {\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\n\n    }\n\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\n    }\n}\n\nexport class InterpolationTimer {\n    public elapsedTime: number;\n    constructor(public totalTime: number) {\n        this.elapsedTime = 0;\n    }\n    tick(): boolean {\n        this.elapsedTime ++;\n        return this.elapsedTime >= this.totalTime;\n    }\n    sample<T>(animation: Interpolated<T>) {\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\n    }\n}\n\nexport class LinkedInterpolation<T> {\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\n\n    }\n\n    sample(): T {\n        return this.timer.sample(this.interp);\n    }\n}","import { Color } from \"../Color\";\n\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\n\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\n\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        numberInterpolator(a.r(), b.r(), p),\n        numberInterpolator(a.g(), b.g(), p),\n        numberInterpolator(a.b(), b.b(), p));\n\n        \nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.rgb(\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\n\n        \nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \n    Color.hsv(\n        numberInterpolator(a.h(), b.h(), p),\n        numberInterpolator(a.s(), b.s(), p),\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\n\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\n    if(typeof(interpolator) !== 'function') {\n        args.splice(0, 0, <T><any>interpolator);\n        interpolator = undefined;\n    }\n\n    let numFrames = args.length - 1;\n    let percPer = 1 / numFrames;\n    let keyframes = new Keyframes<T>(args[0], interpolator);\n    for(let i = 1; i < args.length; i++) {\n        keyframes.addKeyFrame(percPer * i, args[i]);\n    }\n    return keyframes;\n}\n\nexport class Keyframes<T> \n{\n    private interpolator: InterpolationFunction<T>;\n    private keys: {time: number, value: T}[];\n\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\n    {\n        if(interpolator === undefined) {\n            if(typeof(start) === \"number\") {\n                this.interpolator = <any>numberInterpolator;\n            } else if((<Color><unknown>start).r !== undefined) {\n                // Assume this is color\n                this.interpolator = <any>fastColorInterpolator;\n            }\n            else {\n                throw 'No default interpolator found';\n            }\n        } else {\n            this.interpolator = interpolator;\n        }\n        this.keys = [{time: 0, value: start}];\n    }\n\n    public addKeyFrame(time: number, value: T) {\n        for(let i = 0; i < this.keys.length; i++)\n        {\n            if(time < this.keys[i].time) {\n                this.keys.splice(i, 0, {time, value});\n                return;\n            }\n        }\n        this.keys.push({time, value});\n    }\n\n    public sample(p: number): T {\n        if(this.keys.length === 1) return this.keys[0].value;\n\n        var keyIndex = 0;\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\n            keyIndex ++;\n        }\n\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\n\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\n    }\n}","import Point from './Point';\n\nexport enum Direction {\n    Up = 0,\n    UpRight,\n    Right,\n    DownRight,\n    Down,\n    DownLeft,\n    Left,\n    UpLeft,\n}\n\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\n\nexport const directionValues: Point[] = [\n    new Point(0, -1),\n    new Point(1, -1),\n    new Point(1, 0),\n    new Point(1, 1),\n    new Point(0, 1),\n    new Point(-1, 1),\n    new Point(-1, 0),\n    new Point(-1, -1),\n];\n\nexport const allDirections: Direction[] = [\n    Direction.Up,\n    Direction.UpRight,\n    Direction.Right,\n    Direction.DownRight,\n    Direction.Down,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n];\nexport const cardinalDirections: ECardinalDirection[] = [\n    Direction.Up,\n    Direction.Right,\n    Direction.Down,\n    Direction.Left\n];\nexport const diagonalDirections: EDiagonalDirection[] = [\n    Direction.UpRight,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.UpLeft,\n];\n\nexport function ToPoint(direction: Direction): Point {\n    return directionValues[direction];\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public lengthSq(): number {\n        return Point.dot(this, this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public negateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public dotWith(other: Point): number {\n        return Point.dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.length();\n        return Point.multiply(this, 1 / len);\n    }\n\n    public direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public addWith(x: number, y: number): this;\n    public addWith(other: Point): this;\n    public addWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public multWith(s: number): this;\n    public multWith(x: number, y: number): this;\n    public multWith(other: Point): this;\n    public multWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public subtractWith(x: number, y: number): this;\n    public subtractWith(other: Point): this;\n    public subtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public divideWith(x: number, y: number): this;\n    public divideWith(other: Point): this;\n    public divideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static multiply(a: Point, s: number, sy?: number): Point;\n    static multiply(a: Point, b: Point): Point;\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        if(p === 0) return a;\n        if(p === 1) return b;\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\n        return Point.add(\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import Point from './Point';\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\n\nexport default class Rect {\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\n\n    shift(x: number, y: number): Rect;\n    shift(p: Point): Rect;\n    shift(xp: number | Point, y?: number): Rect {\n        if (y === undefined) {\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\n        }\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\n    }\n\n    shiftBy(x: number, y: number): void;\n    shiftBy(p: Point): void;\n    shiftBy(xp: number | Point, y?: number): void {\n        if (y === undefined) {\n            this.x += (xp as Point).x;\n            this.y += (xp as Point).y;\n        } else {\n            this.x += (xp as number);\n            this.y += y;\n        }\n    }\n\n    edge(direction: ECardinalDirection): number {\n        switch (direction) {\n            case Direction.Up: return this.y;\n            case Direction.Down: return this.y + this.h;\n            case Direction.Left: return this.x;\n            case Direction.Right: return this.x + this.w;\n        }\n    }\n\n    corner(direction: EDiagonalDirection): Point {\n        switch (direction) {\n            case Direction.UpRight: return new Point(this.x, this.y);\n            case Direction.DownRight: return new Point(this.x, this.y);\n            case Direction.DownLeft: return new Point(this.x, this.y);\n            case Direction.UpLeft: return new Point(this.x, this.y);\n        }\n    }\n\n    equals(r: Rect) {\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\n    }\n}","import Point from \"../common/position/Point\";\n\nexport const TILE_WIDTH = 32;\nexport const TILE_HEIGHT = 32;\nexport const PIX_PER_CELL_X = 32;\nexport const PIX_PER_CELL_Y = new Point(16, 24);\n\nexport const TILE_SIZE = new Point(TILE_WIDTH, TILE_HEIGHT);\nexport const HALF_TILE_SIZE = new Point(TILE_WIDTH / 2, TILE_HEIGHT / 2);\n\nexport const MAP_SIZE = 6;\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\n\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\n\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"b0ea823950ffc584e5ccf50e1f0867d5.png\";","export default __webpack_public_path__ + \"73e309f8aae54c28b86a4cd95da4091d.png\";","export default __webpack_public_path__ + \"b78374db2fae35ea358c6a9e2b27ccd6.png\";","export default __webpack_public_path__ + \"cc64f971adb138e3839b5b0641e7ea9e.png\";","import Rect from \"../position/Rectangle\";\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\nimport Point from \"../position/Point\";\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\n\n    public origin: Point;\n\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\n        this.origin = origin ?? new Point(0,0);\n    }\n\n    getSprite(): Sprite {\n        return this;\n    }\n\n    getPixelSize(): Point {\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\n    }\n\n    getRenderable(): IRenderable {\n        return this;\n    }\n\n    public width() {\n        return this.sourceBounds.w;\n    }\n    public height() {\n        return this.sourceBounds.h;\n    }\n\n    tick(): boolean {\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\n        const oldTransform = ctx.getTransform();\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\n        ctx.drawImage(this.source, \n            this.sourceBounds.x, \n            this.sourceBounds.y, \n            this.sourceBounds.w, \n            this.sourceBounds.h, \n            0, \n            0, \n            destination.w, \n            destination.h);\n        ctx.setTransform(oldTransform);\n    }\n}","import Point from \"../common/position/Point\";\n\nexport enum Direction {\n    Right = 0,\n    DownRight = 1,\n    DownLeft = 2,\n    Left = 3,\n    UpLeft = 4,\n    UpRight = 5\n}\n\nexport const AllDirections: Direction[] = [\n    Direction.Right,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n    Direction.UpRight\n];\n\nexport class DirectionHelper {\n    public static ToPoint(direction: Direction): Point {\n        switch (direction) {\n            case Direction.Right: return new Point(1, 0);\n            case Direction.DownRight: return new Point(0, 1);\n            case Direction.DownLeft: return new Point(-1, 1);\n            case Direction.Left: return new Point(-1, 0);\n            case Direction.UpLeft: return new Point(0, -1);\n            case Direction.UpRight: return new Point(1, -1);\n        }\n    }\n\n    public static Turn(direction: Direction, amount: number): Direction {\n        const result = (direction + amount)%6;\n        return (result + 6) % 6;\n    }\n}","import Point from \"../common/position/Point\";\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\nimport { Direction, DirectionHelper } from \"./Direction\";\n\nexport function TurnRight(pt: Point, amt?: number) {\n    for(let i = 0; i < (amt ?? 1); i++){\n        pt = new Point(-pt.y, pt.x + pt.y);\n    }\n    return pt;\n}\n\nexport function TurnLeft(pt: Point, amt?: number) {\n    for(let i = 0; i < (amt ?? 1); i++){\n        pt = new Point(pt.x + pt.y, -pt.x);\n    }\n    return pt;\n}\n\nexport function HexToPixel(point: Point) {\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\n}\n\nexport function PixelToHex(point: Point) {\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\n    return new Point(tilesX, tilesY);\n}\n\nexport function HexLength(point: Point): number {\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\n    }\n    else {\n        return Math.abs(point.x) + Math.abs(point.y);\n    }\n}\n\nexport function GetRing(radius: number) {\n    if(radius === 0) return [new Point(0,0)];\n\n    const result: Point[] = [];\n    let pos = new Point(0, -radius);\n    \n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\n        var dir = DirectionHelper.ToPoint(direction);\n        for(var len = 0; len < radius; len++){\n            result.push(pos);\n            pos = Point.add(pos, dir);\n        }\n    }\n\n    return result;\n}","import ImageLoader from \"../common/assets/ImageLoader\";\nimport Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport { HexToPixel } from \"./Hex\";\n\nconst originDelta = new Point(8, 26);\n\nconst deltaX = 3;\nconst deltaY = -2;\n\nconst maxTilesPerRow = 5;\n\nexport default class HpRenderer {\n    private emptyHpImage: Sprite;\n    private redHpImage: Sprite;\n    private yellowHpImage: Sprite;\n    private blueHpImage: Sprite;\n    constructor(image: ImageLoader) {\n        this.emptyHpImage = new Sprite(image.image, new Rect(0, 0, 4, 5));\n        this.redHpImage = new Sprite(image.image, new Rect(3, 0, 4, 5));\n        this.yellowHpImage = new Sprite(image.image, new Rect(6, 0, 4, 5));\n        this.blueHpImage = new Sprite(image.image, new Rect(9, 0, 4, 5));\n    }\n\n    public draw(ctx:CanvasRenderingContext2D, pos: Point, hp: number, maxHp: number) {\n        const rows = Math.ceil(maxHp / maxTilesPerRow);\n        let lastRowLength = maxHp % maxTilesPerRow;\n        if(lastRowLength === 0) { lastRowLength = maxTilesPerRow; }\n\n        const fullImage = hp <= maxHp / 4 ? this.redHpImage : hp <= maxHp / 2 ? this.yellowHpImage : this.blueHpImage;\n        const emptyImage = this.emptyHpImage;\n\n        let originPoint = Point.add(HexToPixel(pos), originDelta);\n\n        for(let row = 0; row < rows - 1; row++) {\n            const dy = (rows - row - 1) * deltaY;\n            for(let col = 0; col < maxTilesPerRow; col++) {\n                let image = hp <= 0 ? emptyImage : fullImage;\n                hp--;\n                image.draw(ctx, new Rect(originPoint.x + col * deltaX, originPoint.y + dy, 4, 5), 0);\n            }\n        }\n\n        // last row\n        const lastRowDx = (maxTilesPerRow - lastRowLength) * deltaX / 2;\n        for(let col = 0; col < lastRowLength; col++){\n            let image = hp <= 0 ? emptyImage : fullImage;\n            hp--;\n            image.draw(ctx, new Rect(originPoint.x + col * deltaX + lastRowDx, originPoint.y , 4, 5), 0);\n        }\n    }\n}","import Rect from \"../position/Rectangle\";\nimport Point from \"../position/Point\";\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\nimport Sprite from \"./Sprite\";\n\nexport class SpriteAnimation implements IRenderableSource {\n    constructor(\n        public source: CanvasImageSource,\n        public firstFrame: Rect, \n        public origin: Point,\n        public frameAdvance: Point,\n        public numFrames: number,\n        public duration: number,\n        public loop: boolean) {\n\n    }\n\n    getPixelSize(): Point {\n        return new Point(this.firstFrame.w, this.firstFrame.y);\n    }\n\n    getRenderable(): IRenderable {\n        return new SpriteAnimationInstance(this, this.loop);\n    }\n\n    getSprite(frameNumber: number): Sprite {\n        const frame = new Rect(\n            this.firstFrame.x + (frameNumber * this.frameAdvance.x),\n            this.firstFrame.y + (frameNumber * this.frameAdvance.y),\n            this.firstFrame.w,\n            this.firstFrame.h\n        );\n        return new Sprite(this.source, frame, this.origin);\n    }\n}\n\nexport class SpriteAnimationInstance implements ISimpleRenderable, IRenderable {\n\n    private duration: number;\n    private currentTick: number;\n\n    constructor(public source: SpriteAnimation, public loop: boolean, private overrideDuration?: number) {\n        this.duration = overrideDuration ?? source.duration;\n        this.currentTick = 0;\n    }\n\n    tick(): boolean {\n        this.currentTick++;\n        if(this.currentTick === this.duration) {\n            if(this.loop) this.currentTick = 0;\n            return true;\n        }\n        return false;\n    }\n\n    getSprite(): Sprite {\n        const frameNumber = (this.currentTick * this.source.numFrames) / this.duration;\n        return this.source.getSprite(Math.floor(frameNumber));\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\n        this.getSprite().draw(ctx, position, rotation);\n    }\n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport Entity from \"../Entity\";\nimport IAnimation from \"./IAnimation\";\n\nexport default class EntityMoveAnimation implements IAnimation {\n    private timer: InterpolationTimer;\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\n        this.timer = new InterpolationTimer(duration);\n    }\n\n    tick(): boolean{ \n        if(this.timer.tick()) {\n            this.entity.position = this.target;\n            return true;\n        }\n        this.entity.position = this.timer.sample(this.motion);\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        // The gamestate drawing will draw this entity. No need to draw it twice.\n        // this.entity.draw(ctx);\n    }\n}","import Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport IAnimation from \"./IAnimation\";\n\nexport default class RenderableAnimation implements IAnimation {\n    private rotation: number;\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\n        this.rotation = rotation ?? 0;\n    }\n\n    tick(): boolean {\n        if(this.fixedDuraiton !== undefined) {\n            this.fixedDuraiton--;\n            if(this.fixedDuraiton === -1) return true;\n            this.renderable.tick();\n            return false;\n        }\n        return this.renderable.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        this.renderable.draw(ctx, this.bounds, this.rotation);\n    }\n}","import IAnimation from \"./IAnimation\";\n\nexport default class SequentialAnimation implements IAnimation {\n    constructor(private steps: IAnimation[]) {\n\n    }\n\n    tick(): boolean {\n        if(this.steps.length === 0) return true;\n        \n        while(this.steps[0].tick()){\n            this.steps.shift();\n            if(this.steps.length === 0) return true;\n        }\n        return false;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        this.steps[0].draw(ctx);\n    }\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport { HexToPixel } from \"../Hex\";\nimport IAnimation from \"./IAnimation\";\nimport RenderableAnimation from \"./RenderableAnimation\";\nimport SequentialAnimation from \"./SequentialAnimation\";\nimport * as C from '../Constants';\n\nexport default class ProjectileAnimation implements IAnimation {\n\n    private angle: number;\n    private time: number;\n    constructor(private renderable: IRenderable, private size: Point, private fromPixel: Point, private toPixel: Point, private duration: number) {\n        this.angle = Math.atan2(toPixel.y - fromPixel.y, toPixel.x - fromPixel.x);\n        this.time = 0;\n    }\n\n    tick(): boolean {\n        this.time++;\n        return this.time >= this.duration;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        const position = Point.interpolate(this.fromPixel, this.toPixel, this.time / this.duration);\n        const destination = new Rect(position.x, position.y, this.size.x, this.size.y);\n        this.renderable.draw(ctx, destination, this.angle);\n    }\n}\n\nexport function CreateProjectileAnimation(projectile: Sprite, fromHex: Point, toHex: Point, duration: number, onImpact: IRenderableSource): IAnimation {\n    const destPt = HexToPixel(toHex);\n    const projAnimation = new ProjectileAnimation(projectile, projectile.getPixelSize(), Point.add(HexToPixel(fromHex), C.HALF_TILE_SIZE), Point.add(destPt, C.HALF_TILE_SIZE), duration);\n    if(onImpact !== null) {\n        const impactAnimation = new RenderableAnimation(onImpact.getRenderable(), new Rect(destPt.x, destPt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        return new SequentialAnimation([projAnimation, impactAnimation]);\n    }\n    return projAnimation;\n}","import Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\nimport EntityMoveAnimation from \"./animation/EntityMoveAnimation\";\nimport IAnimation from \"./animation/IAnimation\";\nimport RenderableAnimation from \"./animation/RenderableAnimation\";\nimport Entity from \"./Entity\";\nimport * as C from \"./Constants\";\nimport { HexLength, HexToPixel } from \"./Hex\";\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../common/interpolation/Interpolated\";\nimport { CreateProjectileAnimation } from \"./animation/ProjectileAnimation\";\nimport Sprite from \"../common/rendering/Sprite\";\n\nconst BUMP_ANIMATION_TIME = 10;\nconst PROJECTILE_TIME = 10;\n\nexport default class AttackInfo {\n    public startPoint: Point;\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: Sprite) {\n        this.startPoint = attacker.position;\n    }\n\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\n    }\n\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\n    }\n\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: Sprite, impactAnimation?: IRenderableSource) {\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, impactAnimation ?? null, projectile);\n    }\n\n    toAnimations():IAnimation[] {\n        let animations:IAnimation[] = [];\n        if(this.bumpAnimation) {\n            animations.push(new EntityMoveAnimation(\n                this.attacker, \n                Interpolated.linear<Point>(Point.interpolate, \n                    this.attacker.position, \n                    Point.interpolate(this.attacker.position, this.target, 1/2), \n                    this.attacker.position), \n                this.attacker.position, \n                BUMP_ANIMATION_TIME));\n        }\n        if(this.projectile) {\n            const time = PROJECTILE_TIME * HexLength(Point.subtract(this.startPoint, this.target));\n            return [CreateProjectileAnimation(this.projectile, this.startPoint, this.target, time, this.impactAnimation)];\n        }\n        if(this.impactAnimation) {\n            const pixTarget = HexToPixel(this.target);\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\n        }\n        return animations;\n    }\n}","import Point from \"../common/position/Point\";\nimport Rect from \"../common/position/Rectangle\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport { HexToPixel } from \"./Hex\";\nimport * as C from './Constants';\nimport Player from \"./entities/Player\";\n\nexport default abstract class Entity {\n    isFlying: boolean;\n    maxHp: number;\n    hp: number;\n    position: Point;\n\n    constructor(position: Point) {\n        this.position = position;\n    }\n\n    abstract draw(ctx: CanvasRenderingContext2D): void;\n\n    static IsPlayer(entity: Entity): entity is Player {\n        return (entity as Player).primary !== undefined;\n    }\n}\n\nexport abstract class SimpleEnemy extends Entity {\n    abstract getRenderable() : IRenderable;\n    override draw(ctx: CanvasRenderingContext2D): void {\n        const target = HexToPixel(this.position);\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\n        this.getRenderable().draw(ctx, rect, 0);\n    } \n}","import Point from \"../../common/position/Point\";\nimport AttackInfo from \"../AttackInfo\";\nimport { SimpleEnemy } from \"../Entity\";\nimport GameState from \"../GameState\";\n\nexport default abstract class Enemy extends SimpleEnemy {\n\n    lastAttacks: AttackInfo[];\n\n    abstract getAttacks(state: GameState): AttackInfo[];\n    abstract getMove(state: GameState, attack: AttackInfo[], disallow: Point[]): Point;\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from \"../Constants\";\nimport GameState from \"../GameState\";\nimport { GetRing, HexLength } from \"../Hex\";\nimport Enemy from \"./Enemy\";\n\nexport default class Zombie extends Enemy {\n    static sprite: IRenderable;\n    static onAssetsLoaded(assets:Assets) {\n        Zombie.sprite = new Sprite(\n            assets.tiles.image,\n            new Rect(0, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\n        )\n    }\n\n    constructor(position: Point) {\n        super(position);\n        this.hp = this.maxHp = 1;\n        this.isFlying = false;\n    }\n\n    getAttacks(state: GameState): AttackInfo[] {\n        const playerLocation = state.player.position;\n        const len = HexLength(Point.subtract(playerLocation, this.position));\n        if(len === 1) {\n            return [AttackInfo.basicAttack(this, state.player, 1)];\n        }\n        return [];\n    }\n\n    getMove(state: GameState, attack: AttackInfo[], disallowed: Point[]): Point {\n        if(attack.length > 0) {\n            // Don't move if you've attacked.\n            return this.position;\n        }\n\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\n        let minMoves: Point[] = [];\n        let minMoveDist = 99;\n        for(let i = 0; i < possibleMoves.length; i++) {\n            if(!state.isValidMove(possibleMoves[i], false)) \n                continue;\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\n                continue;\n\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\n            const len = HexLength(ray);\n            if(len < minMoveDist) { \n                minMoveDist = len;\n                minMoves = [possibleMoves[i]];\n            }\n            else if(len === minMoveDist) {\n                minMoves.push(possibleMoves[i]);\n            }\n        }\n\n        if(minMoves.length === 0) return this.position;\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\n    }\n\n    override getRenderable(): IRenderable {\n        return Zombie.sprite;\n    }\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from \"../Constants\";\nimport GameState from \"../GameState\";\nimport { GetRing, HexLength } from \"../Hex\";\nimport Enemy from \"./Enemy\";\n\nconst MAX_RANGE = 5;\n\nexport default class Archer extends Enemy {\n    static sprite: IRenderable;\n    static projectileSprite: Sprite;\n    static impactAnimation: IRenderableSource;\n\n    static onAssetsLoaded(assets:Assets) {\n        Archer.sprite = new Sprite(\n            assets.tiles.image,\n            new Rect(C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\n        );\n\n        Archer.projectileSprite = new Sprite(\n            assets.tiles.image,\n            new Rect(178, 96, 14, 4),\n            new Point(7, 2),\n        );\n\n        Archer.impactAnimation = assets.getImpactAnimation(1);\n    }\n\n    constructor(position: Point) {\n        super(position);\n        this.hp = this.maxHp = 1;\n        this.isFlying = false;\n    }\n\n    getAttacks(state: GameState): AttackInfo[] {\n        const playerLocation = state.player.position;\n        const len = HexLength(Point.subtract(playerLocation, this.position));\n        if(len > 1 && len <= MAX_RANGE) {\n            let ray = Point.subtract(playerLocation, this.position);\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\n                let nextPt = Point.add(delta, this.position);\n                while(!nextPt.equals(playerLocation)) {\n                    if(state.entityAt(nextPt) !== undefined) {\n                        return []; // Can't shoot through entities\n                    }\n                    nextPt = Point.add(delta, nextPt);\n                }\n                return [AttackInfo.projectileAttack(this, state.player, 1, Archer.projectileSprite, Archer.impactAnimation)];\n            }\n        }\n        return [];\n    }\n\n    getMove(state: GameState, attack: AttackInfo[], disallowed: Point[]): Point {\n        if(attack.length > 0) {\n            // Don't move if you've attacked.\n            return this.position;\n        }\n\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\n        let minMoves: Point[] = [];\n        let minMoveDist = 99;\n        for(let i = 0; i < possibleMoves.length; i++) {\n            if(!state.isValidMove(possibleMoves[i], false)) \n                continue;\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\n                continue;\n\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\n            const len = HexLength(ray);\n            if(len === 1) {\n                continue; // Dont move within 1 of the player if you can avoid it.\n            }\n            if(len < minMoveDist) { \n                minMoveDist = len;\n                minMoves = [possibleMoves[i]];\n            }\n            else if(len === minMoveDist) {\n                minMoves.push(possibleMoves[i]);\n            }\n        }\n\n        if(minMoves.length === 0) return this.position;\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\n    }\n\n    override getRenderable(): IRenderable {\n        return Archer.sprite;\n    }\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from \"../Constants\";\nimport GameState from \"../GameState\";\nimport { GetRing, HexLength } from \"../Hex\";\nimport Enemy from \"./Enemy\";\n\nconst MAX_RANGE = 5;\n\nexport default class Mage extends Enemy {\n    static sprite: IRenderable;\n    static projectileSprite: Sprite;\n    static impactAnimation: IRenderableSource;\n\n    static onAssetsLoaded(assets:Assets) {\n        Mage.sprite = new Sprite(\n            assets.tiles.image,\n            new Rect(2 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\n        );\n\n        Mage.projectileSprite = new Sprite(\n            assets.tiles.image,\n            new Rect(178, 100, 14, 4),\n            new Point(7, 2),\n        );\n\n        Mage.impactAnimation = assets.getImpactAnimation(2);\n    }\n\n    constructor(position: Point) {\n        super(position);\n        this.hp = this.maxHp = 1;\n        this.isFlying = false;\n    }\n\n    getAttacks(state: GameState): AttackInfo[] {\n        const playerLocation = state.player.position;\n        const len = HexLength(Point.subtract(playerLocation, this.position));\n        if(len <= MAX_RANGE) {\n            let ray = Point.subtract(playerLocation, this.position);\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\n                let nextPt = Point.add(delta, this.position);\n                while(!nextPt.equals(playerLocation)) {\n                    if(state.entityAt(nextPt) !== undefined) {\n                        return []; // Can't shoot through entities\n                    }\n                    nextPt = Point.add(delta, nextPt);\n                }\n                return [AttackInfo.projectileAttack(this, state.player, 1, Mage.projectileSprite, Mage.impactAnimation)];\n            }\n        }\n        return [];\n    }\n\n    getMove(state: GameState, attack: AttackInfo[], disallowed: Point[]): Point {\n        if(attack.length > 0) {\n            // Don't move if you've attacked.\n            return this.position;\n        }\n\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\n        let minMoves: Point[] = [];\n        let minMoveDist = 99;\n        for(let i = 0; i < possibleMoves.length; i++) {\n            if(!state.isValidMove(possibleMoves[i], false)) \n                continue;\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\n                continue;\n\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\n            const len = HexLength(ray);\n            // // Mages COULD be smarter by trying to avoid ending up directly next to the player, but doing so makes them a little bit too strong.\n            // if(len === 1) {\n            //     continue;\n            // }\n            if(len < minMoveDist) { \n                minMoveDist = len;\n                minMoves = [possibleMoves[i]];\n            }\n            else if(len === minMoveDist) {\n                minMoves.push(possibleMoves[i]);\n            }\n        }\n\n        if(minMoves.length === 0) return this.position;\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\n    }\n\n    override getRenderable(): IRenderable {\n        return Mage.sprite;\n    }\n}","import AssetLoader from \"../common/assets/AssetLoader\";\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\nimport floor_digits_url from './assets/floor_and_digits.png';\nimport hp_image_url from './assets/hp.png';\nimport impact_url from './assets/hoplite_impacts.png';\nimport ImageLoader from \"../common/assets/ImageLoader\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport Point from \"../common/position/Point\";\nimport HpRenderer from \"./HpRenderer\";\nimport { SpriteAnimation } from \"../common/rendering/SpriteAnimation\";\nimport Zombie from \"./entities/Zombie\";\nimport Archer from \"./entities/Archer\";\nimport Mage from \"./entities/Mage\";\n\nexport default class Assets {\n    tiles: SpriteSheet;\n    floor_and_digits: ImageLoader;\n    hpImage: ImageLoader;\n    hpRenderer: HpRenderer;\n    impacts: ImageLoader;\n\n    constructor(loader: AssetLoader) {\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\n        this.floor_and_digits = new ImageLoader(floor_digits_url, loader.registerAssetLoadCallback());\n        this.hpImage = new ImageLoader(hp_image_url, loader.registerAssetLoadCallback());\n        this.impacts = new ImageLoader(impact_url, loader.registerAssetLoadCallback());\n    }\n\n    getImpactAnimation(row: number) {\n        return new SpriteAnimation(this.impacts.image, new Rect(0, row * 32, 32, 32), new Point(0, 0), new Point(32, 0), 8, 16, false);\n    }\n\n    onLoadFinished(){\n        this.hpRenderer = new HpRenderer(this.hpImage);\n        Zombie.onAssetsLoaded(this);\n        Archer.onAssetsLoaded(this);\n        Mage.onAssetsLoaded(this);\n    }\n\n    getDigitSprite(digit: number):Sprite {\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, 0, 7, 13));\n    }\n\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number) {\n        const digits = value.toString().split('').map(s => parseInt(s));\n        for(var i = 0; i < digits.length; i++) {\n            this.getDigitSprite(digits[i]).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\n        }\n    }\n}","import Point from \"../../common/position/Point\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport GameState from \"../GameState\";\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\nimport PlayerWeapon from \"./PlayerWeapon\";\n\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\n\nexport default class SimpleWeapon extends PlayerWeapon{\n    private attacks: ISimpleAttack[];\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, private beforeMove: boolean, ...attacks: ISimpleAttack[]) {\n        super(type, assets, artTile);\n        this.attacks = attacks;\n    }\n\n    private getAttacks(state:GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\n        const attacks: AttackInfo[] = [];\n        const moveDelta = Point.subtract(moveTo, moveFrom);\n        for(const attack of this.attacks) {\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\n            const rot = SimpleWeapon.getRotation(moveDelta, attack.onMove);\n            if(rot === undefined) continue;\n            for(const pattern of attack.pattern) {\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\n                const attackInfo = attack.attack(state, player, target);\n                if(attackInfo !== undefined) attacks.push(attackInfo);\n            }\n        }\n        return attacks;\n    }\n\n    override enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[] {\n        return [];\n    }\n\n    getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\n        if(this.beforeMove) return this.getAttacks(state, player, moveFrom, moveTo);\n        return [];\n    }\n    \n    getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\n        if(this.beforeMove) return [];\n        return this.getAttacks(state, player, moveFrom, moveTo);\n    }\n\n    static getRotation(delta: Point, target: Point) {\n        for(let i = 0; i < 6; i++) {\n            if(delta.equals(target)) return i;\n            delta = TurnRight(delta);\n        }\n        return undefined;\n    }\n\n}","import Point from \"../../common/position/Point\";\nimport Rect from \"../../common/position/Rectangle\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport * as C from '../Constants';\nimport Player from \"../entities/Player\";\nimport GameState from \"../GameState\";\n\nexport default abstract class PlayerWeapon {\n\n    public iconImage: IRenderable;\n    public sprite: IRenderable;\n\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\n        if(this.type === 'primary') {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n        else {\n\n            this.sprite = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n\n            this.iconImage = new Sprite(\n                assets.tiles.image, \n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\n        }\n    }\n    abstract enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[];\n    abstract getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\n    abstract getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\n}\n","import { timeStamp } from \"console\";\nimport Point from \"../../common/position/Point\";\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport SimpleWeapon from \"./SimpleWeapon\";\n\nexport default class Sword extends SimpleWeapon {\n\n    impactAnimation: IRenderableSource;\n\n    constructor(assets: Assets) {\n        super('primary', assets, new Point(8, 1), true,\n        {\n            onMove: new Point(1, 0),\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\n            attack: (s,p,t) => this.getAttack(s,p,t)\n        });\n\n        this.impactAnimation = assets.getImpactAnimation(0);\n    }\n\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\n        const e = state.entityAt(target);\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\n        return AttackInfo.animationAttack(player, e, 2, this.impactAnimation, false);\n    }\n}","import { timeStamp } from \"console\";\nimport Point from \"../../common/position/Point\";\nimport Assets from \"../Assets\";\nimport AttackInfo from \"../AttackInfo\";\nimport Player from \"../entities/Player\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport SimpleWeapon from \"./SimpleWeapon\";\n\nexport default class Dagger extends SimpleWeapon {\n    constructor(assets: Assets) {\n        super('secondary', assets, new Point(10, 0), true,\n        {\n            onMove: new Point(1, 0),\n            pattern: [new Point(1, -1), new Point(0, 1)],\n            attack: (s,p,t) => this.getAttack(s,p,t)\n        });\n    }\n\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\n        const e = state.entityAt(target);\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\n        return AttackInfo.basicAttack(player, e, 1);\n    }\n}","import { LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport IRenderable from \"../../common/rendering/IRenderable\";\nimport { OffsetRenderable } from \"../../common/rendering/OffsetRenderable\";\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\nimport Assets from \"../Assets\";\nimport Entity from \"../Entity\";\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\nimport * as C from '../Constants';\nimport Sprite from \"../../common/rendering/Sprite\";\nimport Rect from \"../../common/position/Rectangle\";\nimport { HexToPixel } from \"../Hex\";\nimport Sword from \"../weapons/Sword\";\nimport Dagger from \"../weapons/Dagger\";\nimport HpRenderer from \"../HpRenderer\";\nimport Spear from \"../weapons/Spear\";\nimport Hammer from \"../weapons/Hammer\";\n\nexport default class Player extends Entity {\n\n    public primary: PlayerWeapon;\n    public secondary: PlayerWeapon;\n    private renderable: Sprite;\n    private hpRenderer: HpRenderer;\n\n    constructor(assets: Assets, pos: Point) {\n        super(pos);\n\n        this.hpRenderer = assets.hpRenderer;\n\n        this.maxHp = this.hp = 3;\n\n        this.primary = new Sword(assets);\n        this.secondary = new Dagger(assets);\n\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        const target = HexToPixel(this.position);\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\n\n        this.renderable.draw(ctx, rect, 0);\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\n\n        this.hpRenderer.draw(ctx, this.position, this.hp, this.maxHp);\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Player from \"./entities/Player\";\nimport HexArray from \"./HexArray\";\nimport HexCell from \"./HexCell\";\nimport IMapGen from \"./mapGen/IMapGen\";\nimport * as C from \"./Constants\";\nimport Entity from \"./Entity\";\nimport { HexToPixel } from \"./Hex\";\nimport Rect from \"../common/position/Rectangle\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Enemy from \"./entities/Enemy\";\n\nexport default class GameState {\n\n    public player: Player;\n    public enemies: Enemy[] = [];\n\n    public tiles: HexArray<HexCell>;\n    public currentFloor: number;\n    \n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\n        this.changeFloor(floorNum, generator);\n\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\n    }\n\n    entityAt(to: Point) {\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\n    }\n\n    isValidMove(to: Point, flying: boolean) {\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \n            (this.tiles.get(to).isPathable || flying);\n        if(!isValidTile) return false;\n        if(to.equals(this.player.position)) return false;\n        return !this.enemies.some(e => e.position.equals(to));\n    }\n\n    changeFloor(floorNum: number, generator: IMapGen) {\n        this.enemies = [];\n        generator.generateMap(this.assets, floorNum, this);\n        this.currentFloor = floorNum;\n        this.tiles.iterate((x, y, tile) =>{\n            tile.AfterWorldLoad(this, new Point(x, y));\n        });\n    }\n\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 0, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\n        this.assets.drawNumber(ctx, new Point(41, 0), this.currentFloor);\n\n        this.tiles.iterate((x, y, cell) => {\n            cell.draw(ctx, this, new Point(x, y));\n        });\n\n        [this.player, ...this.enemies].forEach(entity => {\n            if(excludeEntities && excludeEntities.includes(entity)) {\n                return;\n            }\n            entity.draw(ctx);\n            if(entity.hp != entity.maxHp){\n                this.assets.hpRenderer.draw(ctx, entity.position, entity.hp, entity.maxHp);\n            }\n        });\n    }\n}","import IAnimation from \"./IAnimation\";\n\nexport default class ParallelAnimation implements IAnimation {\n    constructor(private steps: IAnimation[]) {\n\n    }\n\n    tick(): boolean {\n        for(let i = this.steps.length - 1; i >= 0; i--) {\n            if(this.steps[i].tick()) {\n                this.steps.splice(i, 1);\n            }\n        }\n        return this.steps.length === 0;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        for(const step of this.steps) {\n            step.draw(ctx);\n        }\n    }\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\nimport Point from \"../position/Point\";\nimport Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\nimport IRenderableSource from \"./IRenderableSource\";\n\nexport class DeltaRenderable implements IRenderable {\n    constructor(private source: IRenderable, public delta: Rectangle) {\n    }\n\n    tick(): boolean {\n        return this.source.tick();\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\n    }\n}","import Rectangle from \"../position/Rectangle\";\nimport IRenderable from \"./IRenderable\";\n\nexport class StackRenderable implements IRenderable {\n\n    public finishMode: 'any'|'all';\n\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\n        this.finishMode = renderableFinishMode ?? 'any';\n    }\n\n    tick(): boolean {\n        let allFinished = true;\n        let anyFinished = false;\n        for(let i = 0; i < this.renderables.length; i++) {\n            const f = this.renderables[i].tick();\n            allFinished = allFinished && f;\n            anyFinished = anyFinished || f;\n        }\n        return this.finishMode === 'any' ? anyFinished : allFinished;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\n        for(let i = 0; i < this.renderables.length; i++) {\n            this.renderables[i].draw(ctx, position, rotation);\n        }\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport * as C from \"./Constants\";\nimport IRenderableSource from \"../common/rendering/IRenderableSource\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\n\nexport default abstract class HexCell {\n    isPathable: boolean;\n    typeId: number;\n\n    constructor(typeId: number, pathable: boolean){\n        this.typeId = typeId;\n        this.isPathable = pathable;\n    }\n\n    abstract OnEntityStep(entity: Entity): void;\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\n}\n\nexport abstract class SimpleCell extends HexCell{\n\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\n        super(typeId, isPathable);\n\n        this.bg_renderable = \n            new DeltaRenderable(\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\n                new Rect(0, .75, 1, 1)\n            );\n\n        if(includeDefaultRenderable === true) {\n            this.bg_renderable = new StackRenderable(\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\n            );\n        }\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        \n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}\n\nexport class Floor extends SimpleCell {\n    public static TypeID = 0;\n\n    constructor(assets: Assets, customSprite?: Point) {\n        super(Floor.TypeID, assets, customSprite ?? new Point(0,0), true, customSprite !== undefined);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}\n\n// TypeID 1 : Lava\n\nexport class DownStairs extends SimpleCell {\n    public static TypeID = 2;\n    constructor(assets: Assets) {\n        super(DownStairs.TypeID, assets, new Point(5, 0), true, true);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport IAnimation from \"../animation/IAnimation\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\n\nexport default class AnimationPhase implements IGamePhase {\n\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\n    }\n\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        for(let i = this.animations.length - 1; i >= 0; i--) {\n            if(this.animations[i].tick()) {\n                this.animations.splice(i, 1);\n            }\n        }\n        if(this.animations.length === 0) {\n            return this.onFinish(state);\n        }\n        return this;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        for(const animation of this.animations) { \n            animation.draw(ctx);\n        }\n    }\n\n}","import AttackInfo from \"../AttackInfo\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\n\nexport default function AttackResolutionPhase(state: GameState, attacks: AttackInfo[], nextPhase: (state: GameState) => IGamePhase) : IGamePhase {\n    for(const attack of attacks) {\n        for(const pt of attack.affectedTiles) {\n            const entity = state.entityAt(pt);\n            entity.hp -= attack.damage;\n        }\n    }\n\n    state.enemies = state.enemies.filter(e => e.hp > 0);\n    if(state.player.hp <= 0) {\n        // TODO: GAME OVER\n    }\n    return nextPhase(state);\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\nimport IAnimation from \"../animation/IAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport Entity from \"../Entity\";\nimport GameState from \"../GameState\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\nconst duration = 20;\n\nexport default function EnemyMovePhase(state: GameState): IGamePhase {\n    const disallowed: Point[] = [];\n    const animations: IAnimation[] = [];\n    for(let i = 0; i < state.enemies.length; i++) { \n        const destination = state.enemies[i].getMove(state, state.enemies[i].lastAttacks, disallowed);\n        if(!destination.equals(state.enemies[i].position)) {\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\n            disallowed.push(destination);\n        }\n    }\n\n    return new AnimationPhase(animations, () => new PlayerTurnGamePhase());\n}","import Point from \"../common/position/Point\";\n\nexport default class HexArray<T> {\n    private data: T[][];\n    private _size: number;\n\n    constructor(size: number, defaultValue: T) {\n        this._size = size;\n        this.data = [];\n        let midRowLength = size*2 - 1;\n        for(let dy = -size+1; dy <= size-1; dy++){\n            let row: T[] = [];\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\n                row.push(defaultValue);\n            }\n            this.data.push(row);\n        }\n    }\n\n    public size() {\n        return this._size;\n    }\n\n    public get(x: number, y: number): T;\n    public get(pt: Point): T;\n    public get(pt: [number, number]): T;\n    public get(xp: number|Point|[number, number], yp?: number): T {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        let [dx, row] = this.toArrayCoords(x, y);\n        return this.data[row][dx];\n    }\n\n    public set(value: T, x: number, y: number): void;\n    public set(value: T, pt: Point): void;\n    public set(value: T, pt: [number, number]): void;\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\n        const [x, y] = this.extractInputCoords(xp, yp);\n        const [dx, row] = this.toArrayCoords(x, y);\n        this.data[row][dx] = value;\n    }\n\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\n        if(typeof xp === \"number\"){\n            return [xp as number, y];\n        }\n        else if ((xp as Point).x !== undefined) {\n            return [(xp as Point).x, (xp as Point).y];\n        }\n        else {\n            return xp as [number, number];\n        }\n    }\n\n    public getRowLength(y: number): number {\n        return this._size * 2 - 1 - Math.abs(y);\n    }\n\n    public isInBounds(x: number, y: number): boolean {\n        if(y <= -this._size || y >= this._size) {\n            return false;\n        }\n        let [xMin, xMax] = this.getXRange(y);\n        return x >= xMin && x < xMax;\n    }\n\n    public getXRange(y: number): [number, number] {\n        const minX = this.getMinX(y);\n        const len = this.getRowLength(y);\n        return [minX, minX + len];\n    }\n\n    public getMinX(y: number): number {\n        const row = this._size - 1 + y;\n        return -Math.min(row, this._size - 1);\n    }\n\n    public iterate(func: (x: number, y: number, value: T) => void) {\n        for(let y = -this._size+1; y < this._size; y++) {\n            let [xMin, xMax] = this.getXRange(y);\n            for(let x = xMin; x < xMax; x++) {\n                func(x, y, this.get(x, y));\n            }\n        }\n    }\n\n    private toArrayCoords(x: number, y: number): [number, number] {\n        const row = this._size - 1 + y;\n        const firstX = -Math.min(row, this._size - 1);\n        const dx = x - firstX;\n\n        return [dx, row];\n    }\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport * as C from \"./Constants\";\nimport IRenderable from \"../common/rendering/IRenderable\";\nimport Sprite from \"../common/rendering/Sprite\";\nimport Rect from \"../common/position/Rectangle\";\nimport GameState from \"./GameState\";\nimport { HexToPixel } from \"./Hex\";\nimport HexCell from \"./HexCell\";\nimport { AllDirections, Direction, DirectionHelper } from \"./Direction\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport { DeltaRenderable } from \"../common/rendering/DeltaRenderable\";\n\ninterface ITilePart {\n    directions: Direction[];\n    tileCoords: Point;\n    tileSlice: Rect;\n}\n\nconst tileParts: ITilePart[] = [\n    {\n        // Top of Tile\n        directions: [Direction.UpLeft, Direction.UpRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0, 1, 0.5),\n    },\n    {\n        // Bottom of Tile\n        directions: [Direction.DownLeft, Direction.DownRight],\n        tileCoords: new Point(0, 0),\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\n    }, \n    {\n        // TopLeft of Tile\n        directions: [Direction.Left, Direction.UpLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\n    },\n    {\n        // TopRight of Tile\n        directions: [Direction.Right, Direction.UpRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\n    },\n    {\n        // BottomLeft of Tile\n        directions: [Direction.Left, Direction.DownLeft],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\n    },\n    {\n        // BottomRight of Tile\n        directions: [Direction.Right, Direction.DownRight],\n        tileCoords: new Point(0, 1),\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\n    }\n]\n\nexport default abstract class MultiPartCell extends HexCell{\n    private renderable: IRenderable;\n    private bg_renderable: IRenderable;\n    private assets: Assets;\n\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\n        super(typeId, isPathable);\n\n        this.assets = assets;\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\n    }\n\n    override AfterWorldLoad(world: GameState, pt: Point): void {\n        const adjacencyMap = AllDirections.map(d => {\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\n            }\n            else {\n                return true;\n            }\n        });\n\n        const images = tileParts.map(part => {\n            const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\n            const sourceBounds = new Rect(\n                (part.tileCoords.x + index + part.tileSlice.x + this.spriteSheetPosition.x) * C.TILE_WIDTH,\n                (part.tileCoords.y + part.tileSlice.y + this.spriteSheetPosition.y) * C.TILE_HEIGHT,\n                (part.tileSlice.w) * C.TILE_WIDTH,\n                (part.tileSlice.h) * C.TILE_HEIGHT\n            );\n            return new DeltaRenderable(\n                new Sprite(this.assets.tiles.image, sourceBounds),\n                part.tileSlice\n            );\n        });\n\n        this.renderable = new StackRenderable(\n            images,\n            'all'\n        );\n    }\n\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\n        let target = HexToPixel(pt);\n\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\n    }\n}","import Point from \"../common/position/Point\";\nimport { StackRenderable } from \"../common/rendering/StackRenderable\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport GameState from \"./GameState\";\nimport HexCell from \"./HexCell\";\nimport MultiPartCell from \"./MultiPartCell\";\n\nexport default class Lava extends MultiPartCell {\n    public static TypeID = 1;\n\n    constructor(assets: Assets) {\n        super(Lava.TypeID, assets, new Point(0, 4), false);\n    }\n\n    OnEntityStep(entity: Entity): void {\n        if(!entity.isFlying)\n            entity.hp -= 100;\n    }\n}","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport { GetRing } from \"../Hex\";\nimport Lava from \"../LavaCell\";\nimport Point from \"../../common/position/Point\";\n\nconst playerMoveTileArts = [\n    new Point(6,2),\n    new Point(7,2),\n    new Point(9,2),\n    new Point(7,3),\n    new Point(6,3),\n    new Point(8,2),\n];\n\nexport default class FloorZeroGen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n\n        const ring = GetRing(2);\n        for(var i = 0; i < ring.length; i++) {\n            state.tiles.set(new Lava(assets), ring[i]);\n        }\n\n        const ring2 = GetRing(3);\n        for(var i = 0; i < ring2.length; i += 3) {\n            state.tiles.set(new Lava(assets), ring2[i]);\n        }\n\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\n        for(let i = 0; i < playerRing.length; i++) {\n            state.tiles.set(\n                new Floor(assets, playerMoveTileArts[i]),\n                playerRing[i]\n            )\n        }\n\n\n        state.tiles.set(new DownStairs(assets), 2, -4);\n    }\n}","import Point from \"../common/position/Point\";\n\n\ninterface IPathfinderNode {\n    position: Point;\n    parent: IPathfinderNode | undefined;\n    cost: number;\n}\n\nfunction toPath(node: IPathfinderNode): Point[] {\n    if(node.parent === null) return [node.position];\n    const parentPath = toPath(node.parent);\n    parentPath.push(node.position);\n    return parentPath;\n}\n\n// TODO: This is a quick and dirty Djikstra implementation with a ton of room for optimization.\n//       Currently, bot the closed and open sets are unsorted arrays, which means each dequeue takes O(n) time and each neighbor check takes O(n) time.\nexport default function DjikstraPath(start: Point, isEnd: (pt: Point) => boolean, getNeighbors: (from: Point) => { to: Point, cost: number }[]): Point[] {\n    const closedSet: IPathfinderNode[] = [];\n    const openSet: IPathfinderNode[] = [{ position: start, parent: null, cost: 0 }];\n\n    while (openSet.length > 0) {\n        const minIndex = openSet.reduce((min, cur, i) => cur.cost < openSet[min].cost ? i : min, 0);\n        const current = openSet.splice(minIndex, 1)[0];\n        closedSet.push(current);\n\n        if(isEnd(current.position)) {\n            return toPath(current);\n        }\n\n        for(const neighbor of getNeighbors(current.position)) {\n            const neighborNode = { position: neighbor.to, parent: current, cost: current.cost + neighbor.cost };\n            if(closedSet.find(c => c.position.equals(neighborNode.position))) continue;\n            const open = openSet.findIndex(c => c.position.equals(neighborNode.position));\n            if(open === -1) {\n                openSet.push(neighborNode);\n            }\n            else if(openSet[open].cost > neighborNode.cost) {\n                openSet[open] = neighborNode;\n            }\n        }\n    }\n\n    return null; // No path!\n}","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport Point from \"../../common/position/Point\";\nimport Zombie from \"../entities/Zombie\";\nimport Archer from \"../entities/Archer\";\nimport Mage from \"../entities/Mage\";\nimport Lava from \"../LavaCell\";\nimport { AllDirections, DirectionHelper } from \"../Direction\";\nimport { AssurePathToEnd } from \"./MapGenCommon\";\n\nexport default class StandardMapGen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n        state.enemies = [];\n\n        let leftLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\n        let leftLavaX = state.tiles.getMinX(leftLavaY);\n\n        this.genLava(assets, state, new Point(leftLavaX, leftLavaY), Math.floor(Math.random() * 20) + 8);\n\n        let rightLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\n        let rightLavaX = state.tiles.getXRange(rightLavaY)[1]-1;\n\n        this.genLava(assets, state, new Point(rightLavaX, rightLavaY), Math.floor(Math.random() * 20) + 8);\n\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\n        state.tiles.set(new DownStairs(assets), downStairX, downStairY);\n\n        // Replaces lava with floor to ensure there's a path from the start to the end.\n        AssurePathToEnd(state, assets);\n\n        let validEnemySpawns: Point[] = [];\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\n            const [xMin, xMax] = state.tiles.getXRange(y);\n            for(let x = xMin; x < xMax; x++) {\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\n                    validEnemySpawns.push(new Point(x, y));\n                }\n            }\n        }\n\n        for(let i = 0; i < Math.min(12, floor); i++) {\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\n            const zombie = new Zombie(pos);\n            state.enemies.push(zombie);\n        }\n\n        for(let i = 0; i < Math.min(6, (floor - 2) / 2); i++) {\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\n            const archer = new Archer(pos);\n            state.enemies.push(archer);\n        }\n        \n        for(let i = 0; i < Math.min(3, (floor - 3) / 3); i++) {\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\n            const mage = new Mage(pos);\n            state.enemies.push(mage);\n        }\n    }\n\n    genLava(assets: Assets, state: GameState, pt: Point, len: number) {\n        state.tiles.set(new Lava(assets), pt);\n        if(len <= 1) return;\n\n        const validRiverDirections = AllDirections.filter(dir => {\n            // Check if this is a valid continuation for the lava river\n            const dest = Point.add(pt, DirectionHelper.ToPoint(dir));\n            if(!state.tiles.isInBounds(dest.x, dest.y) || state.tiles.get(dest).typeId !== Floor.TypeID || dest.equals(C.PLAYER_START_POSITION)) \n                return false;\n            return true;\n        });\n\n        if(validRiverDirections.length === 0) return;\n        const dir = validRiverDirections[Math.floor(Math.random() * validRiverDirections.length)];\n        this.genLava(assets, state, Point.add(pt, DirectionHelper.ToPoint(dir)), len - 1);\n    }\n}","import DjikstraPath from \"../DjikstraPath\";\nimport GameState from \"../GameState\";\nimport * as C from \"../Constants\";\nimport { DownStairs, Floor } from \"../HexCell\";\nimport Point from \"../../common/position/Point\";\nimport { AllDirections, DirectionHelper } from \"../Direction\";\nimport Assets from \"../Assets\";\n\nexport function AssurePathTo(state: GameState, assets: Assets, checkEnd: (isValidEnd: Point) => boolean) {\n    function getNeighbors(point: Point):{to: Point, cost: number}[] {\n        const neighbors = [];\n        for(const dir of AllDirections) {\n            const destPt = Point.add(point, DirectionHelper.ToPoint(dir));\n            if(state.tiles.isInBounds(destPt.x, destPt.y)) {\n                neighbors.push({to: destPt, cost: state.tiles.get(destPt).isPathable ? 1 : 99 });\n            }\n        }\n        return neighbors;\n    }\n\n    const pathToEnd = DjikstraPath(C.PLAYER_START_POSITION, checkEnd, getNeighbors);\n    for(const pt of pathToEnd) {\n        if(!state.tiles.get(pt).isPathable) {\n            state.tiles.set(new Floor(assets), pt);\n        }\n    }\n}\n\nexport function AssurePathToEnd(state: GameState, assets: Assets) {\n    return AssurePathTo(state, assets, (pt) => state.tiles.get(pt).typeId === DownStairs.TypeID);\n}","import Assets from \"../Assets\";\nimport GameState from \"../GameState\";\nimport Floor12Gen from \"./Floor12Gen\";\nimport FloorZeroGen from \"./FloorZeroGen\";\nimport StandardMapGen from \"./StandardMapGen\";\n\nexport default interface IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void;\n}\n\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\n    {range: [0,1], gen: new FloorZeroGen()},\n    {range: [1,12], gen: new StandardMapGen()},\n    {range: [12,13], gen: new Floor12Gen()},\n    {range: [13,-1], gen: new StandardMapGen()}\n]","import GameState from \"../GameState\";\nimport IMapGen from \"./IMapGen\";\nimport * as C from \"../Constants\";\nimport HexCell, { DownStairs, Floor } from \"../HexCell\";\nimport HexArray from \"../HexArray\";\nimport Assets from \"../Assets\";\nimport { GetRing } from \"../Hex\";\nimport Point from \"../../common/position/Point\";\n\nexport default class Floor12Gen implements IMapGen {\n    generateMap(assets: Assets, floor: number, state: GameState): void {\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\n        state.tiles.set(new DownStairs(assets), 0, 0);\n        const ring = GetRing(2);\n        for (let i = 0; i < ring.length; i++) {\n            state.tiles.set(new Floor(assets, new Point(12, 0)), ring[i]);\n        }\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport { MapGenerators } from \"../mapGen/IMapGen\";\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\nimport Point from \"../../common/position/Point\";\n\nconst FADE_OUT_ANIM_TIME = 30;\nconst PLAYER_MOVE_TIME = 30;\n\nexport default class FloorTransitionPhase implements IGamePhase {\n\n    time = 0;\n\n    init(state: GameState): void {\n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.time++;\n        if (this.time >= FADE_OUT_ANIM_TIME) {\n            return new FloorTransitionPlayerMovePhase();\n        } else {\n            return this;\n        }\n\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        ctx.fillStyle = '#000000';\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n        ctx.globalAlpha = 1;\n        state.player.draw(ctx);\n    }\n\n}\n\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\n\n    time = 0;\n    playerStartPoint: Point;\n\n    init(state: GameState): void {\n        const floor = state.currentFloor + 1;\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\n        this.playerStartPoint = state.player.position;\n        state.changeFloor(floor, generator);\n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.time++;\n        if (this.time >= PLAYER_MOVE_TIME) {\n            state.player.position = C.PLAYER_START_POSITION.clone();\n            return new EntryAnimationPhase();\n        } else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        const lerp = this.time / PLAYER_MOVE_TIME;\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\n        state.player.position = tgt;\n        state.player.draw(ctx);\n    }\n\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\nimport Point from \"../../common/position/Point\";\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport { HexToPixel, PixelToHex } from \"../Hex\";\nimport HexCell, { DownStairs } from \"../HexCell\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\n\n\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point, forceMotion: Point):IGamePhase {\n    const onFinish = (gs: GameState) => {\n        if(gs.tiles.get(gs.player.position).typeId === DownStairs.TypeID) {\n            return new FloorTransitionPhase();\n        }\n        else if(gs.enemies.length === 0) {\n            return new PlayerTurnGamePhase();\n        }\n        else return EnemyAttackPhase(state);\n    }\n\n    const postMoveAttacks: (gs:GameState)=>IGamePhase = (gs: GameState) => {\n        const attacks = [\n            ...state.player.primary.getAfterMoveAttacks(state, state.player, from, to),\n            ...state.player.secondary.getAfterMoveAttacks(state, state.player, from, to)\n        ];\n        if(attacks.length === 0) return onFinish(gs);\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, onFinish));\n    };\n\n    const playerMove = (state: GameState) => {\n        if(!state.isValidMove(forceMotion, false)) {\n            return postMoveAttacks(state);\n        }\n        return new AnimationPhase(\n            [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, forceMotion), forceMotion, state.enemies.length === 0 ? 2 : 10)],\n            postMoveAttacks\n        );\n    };\n\n    if(state.enemies.length === 0) {\n        return playerMove(state);\n    }\n    if(state.enemies.length > 0) {\n        const attacks = [\n            ...state.player.primary.getBeforeMoveAttacks(state, state.player, from, to),\n            ...state.player.secondary.getBeforeMoveAttacks(state, state.player, from, to)\n        ];\n        if(attacks.length === 0) return playerMove(state);\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, playerMove));\n    }\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\nimport AttackInfo from \"../AttackInfo\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport AnimationPhase from \"./AnimationPhase\";\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\nimport EnemyMovePhase from \"./EnemyMovePhase\";\nimport IGamePhase from \"./IGamePhase\";\n\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\n    const enemyAttacks: AttackInfo[][] = []\n    for(let i = 0; i < state.enemies.length; i++) {\n        state.enemies[i].lastAttacks = state.enemies[i].getAttacks(state);\n        enemyAttacks.push(state.enemies[i].lastAttacks);\n    }\n    if(enemyAttacks.some(e => e.length > 0)) {\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations()))));\n        return new AnimationPhase(animations, ()=>\n            AttackResolutionPhase(state, enemyAttacks.reduce((acc, c) => acc.concat(c), []), state => EnemyMovePhase(state))\n        );\n    }\n    else{\n        return EnemyMovePhase(state);\n    }\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\nimport Point from \"../../common/position/Point\";\nimport { Direction, DirectionHelper } from \"../Direction\";\nimport GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\n\nconst dirKeys = [\n    { key: 'a', dir: Direction.Left },\n    { key: '4', dir: Direction.Left },\n    \n    { key: 'q', dir: Direction.UpLeft },\n    { key: '7', dir: Direction.UpLeft },\n\n    { key: 'w', dir: Direction.UpRight },\n    { key: '9', dir: Direction.UpRight },\n\n    { key: 'd', dir: Direction.Right },\n    { key: '6', dir: Direction.Right },\n\n    { key: 'x', dir: Direction.DownRight },\n    { key: '3', dir: Direction.DownRight },\n\n    { key: 'z', dir: Direction.DownLeft },\n    { key: '1', dir: Direction.DownLeft },\n]\n\nexport default class PlayerTurnGamePhase implements IGamePhase {\n    init(state: GameState): void {\n        \n    }\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        const dir = this.tryGetDirection(keys);\n        if(dir !== undefined) {\n            const destination = Point.add(state.player.position, DirectionHelper.ToPoint(dir));\n            const additionalMoves = [...state.player.primary.enableAdditionalMoves(state, state.player), ...state.player.secondary.enableAdditionalMoves(state, state.player)];\n\n            if(!state.isValidMove(destination, false)) {\n                const specialMove = additionalMoves.find(move => move.dest.equals(destination));\n                if(specialMove !== undefined){\n                    return PlayerMoveAnimPhase(state, state.player.position, destination, specialMove.forceMove);\n                }\n                return this;\n            }\n\n            return PlayerMoveAnimPhase(state, state.player.position, destination, destination);\n        }\n        return this;\n    }\n\n    tryGetDirection(keys: KeyboardManager): Direction | undefined {\n        for(let i = 0; i < dirKeys.length; i++) {\n            if(keys.isKeyPressed(dirKeys[i].key)) {\n                return dirKeys[i].dir;\n            }\n        }\n        return undefined;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n    }\n\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 60;\n\nexport default class EntryAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n\n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new PlayerTurnGamePhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n        state.player.draw(ctx);\n    }\n}","import GameState from \"../GameState\";\nimport IGamePhase from \"./IGamePhase\";\nimport * as C from '../Constants';\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\n\nconst ENTRY_ANIMATION_TIME = 120;\n\nexport default class GameStartAnimationPhase implements IGamePhase {\n    animationTime = 0;\n\n    constructor() {\n\n    }\n    \n    init(state:GameState){}\n\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\n        this.animationTime++;\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \n            return new EntryAnimationPhase();\n        }\n        else {\n            return this;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\n        state.player.draw(ctx);\n        ctx.fillStyle = '#000000';\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n            ctx.globalAlpha = 1;\n        }\n    }\n}","import AssetLoader from '../common/assets/AssetLoader';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Point from '../common/position/Point';\nimport { TILES_HIGH } from '../rpgt/Constants';\nimport * as C from \"./Constants\";\nimport Assets from './Assets';\nimport GameState from './GameState';\nimport StandardMapGen from './mapGen/StandardMapGen';\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\nimport IGamePhase from './phases/IGamePhase';\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\nimport FloorZeroGen from './mapGen/FloorZeroGen';\nimport Zombie from './entities/Zombie';\n\nexport default function Run(): (()=>void) {\n    let ctx: CanvasRenderingContext2D;\n    \n    let keys: KeyboardManager;\n    let scaleHelper: NearestNeighborScalingHelper;\n    \n    const assetLoader = new AssetLoader();\n    const assets = new Assets(assetLoader);\n\n    let state: GameState;\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\n\n    keys = new KeyboardManager(document.body);\n    assetLoader.onAllFinished(assetLoadDone);\n    \n    function assetLoadDone() {\n        assets.onLoadFinished();\n        \n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n        ctx = canvas.getContext('2d');\n        scaleHelper = new NearestNeighborScalingHelper(\n            canvas, \n            ctx, \n            C.MAP_PIXEL_SIZE, \n            C.MAP_PIXEL_SIZE, \n            true, \n            () => { return; }\n        );\n\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\n        NearestNeighborScaling(ctx);\n        tick();\n    }\n    \n    function tick() {\n        scaleHelper.TryRescale();\n        NearestNeighborScaling(ctx);\n\n        const nextPhase = currentPhase.tick(state, keys);\n\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n\n        currentPhase.draw(ctx, state);\n\n        if(nextPhase !== currentPhase) {\n            currentPhase = nextPhase;\n            nextPhase.init(state);\n        }\n\n        keys.update();\n        requestAnimationFrame(() => tick());\n    }\n\n    return (() => scaleHelper.Detatch());\n}\n","import * as React from 'react';\nimport Run from '../../../projects/hoplite/index';\n\nexport default function HopliteComponent() {\n    React.useEffect(()=>Run());\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\n        <canvas id=\"mainCanvas\"></canvas>\n    </div>;\n}\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","static","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","cos","sin","lengthSq","dot","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","sy","pts","add","Bezier","rotate","theta","fromAngle","Rect","w","shift","xp","shiftBy","edge","corner","TILE_WIDTH","TILE_HEIGHT","HALF_TILE_SIZE","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","Sprite","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","AllDirections","DirectionHelper","amount","TurnRight","pt","amt","TurnLeft","HexToPixel","point","HexLength","sign","abs","GetRing","radius","result","pos","dir","originDelta","HpRenderer","image","emptyHpImage","redHpImage","yellowHpImage","blueHpImage","hp","maxHp","rows","ceil","lastRowLength","fullImage","emptyImage","originPoint","row","dy","col","lastRowDx","SpriteAnimation","firstFrame","frameAdvance","numFrames","duration","loop","SpriteAnimationInstance","frameNumber","frame","overrideDuration","currentTick","position","EntityMoveAnimation","entity","motion","target","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","SequentialAnimation","steps","ProjectileAnimation","size","fromPixel","toPixel","CreateProjectileAnimation","projectile","fromHex","toHex","onImpact","destPt","projAnimation","impactAnimation","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","startPoint","toAnimations","animations","pixTarget","Entity","primary","SimpleEnemy","rect","Enemy","Zombie","super","isFlying","assets","sprite","tiles","getAttacks","state","playerLocation","player","basicAttack","getMove","attack","disallowed","possibleMoves","map","rp","minMoves","minMoveDist","isValidMove","some","random","Archer","projectileSprite","getImpactAnimation","ray","delta","nextPt","entityAt","projectileAttack","Mage","Assets","loader","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","hpImage","impacts","onLoadFinished","hpRenderer","onAssetsLoaded","getDigitSprite","digit","drawNumber","digits","split","parseInt","SimpleWeapon","type","artTile","iconImage","beforeMove","attacks","moveFrom","moveTo","moveDelta","onMove","rot","getRotation","pattern","attackInfo","enableAdditionalMoves","getBeforeMoveAttacks","getAfterMoveAttacks","Sword","getAttack","e","IsPlayer","animationAttack","Dagger","Player","secondary","GameState","floorNum","generator","enemies","changeFloor","to","find","flying","isInBounds","get","isPathable","generateMap","currentFloor","iterate","tile","AfterWorldLoad","excludeEntities","cell","forEach","includes","ParallelAnimation","step","DeltaRenderable","Rectangle","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","HexCell","typeId","pathable","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","world","Floor","customSprite","TypeID","OnEntityStep","DownStairs","AnimationPhase","onFinish","init","AttackResolutionPhase","nextPhase","filter","EnemyMovePhase","lastAttacks","PlayerTurnGamePhase","HexArray","defaultValue","_size","data","midRowLength","dx","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","func","tileParts","directions","tileCoords","tileSlice","MultiPartCell","adjacencyMap","d","hexPt","images","part","index","reduceRight","acc","Lava","playerMoveTileArts","FloorZeroGen","ring","ring2","playerRing","toPath","node","parent","parentPath","StandardMapGen","leftLavaY","leftLavaX","genLava","rightLavaY","rightLavaX","downStairY","downStairX","checkEnd","pathToEnd","isEnd","getNeighbors","closedSet","openSet","cost","minIndex","reduce","cur","current","neighbor","neighborNode","c","open","findIndex","DjikstraPath","neighbors","AssurePathTo","AssurePathToEnd","validEnemySpawns","spawnId","zombie","archer","mage","validRiverDirections","dest","MapGenerators","gen","FloorTransitionPhase","FloorTransitionPlayerMovePhase","fillStyle","globalAlpha","fillRect","playerStartPoint","EntryAnimationPhase","lerp","tgt","PlayerMoveAnimPhase","from","forceMotion","gs","enemyAttacks","attackSet","concat","EnemyAttackPhase","postMoveAttacks","playerMove","dirKeys","tryGetDirection","additionalMoves","specialMove","move","forceMove","animationTime","GameStartAnimationPhase","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","TryRescale","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}