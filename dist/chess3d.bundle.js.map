{"version":3,"sources":["webpack:///./src/projects/common/AspectRatioScalingHelper.ts","webpack:///./src/projects/chess3d/index.ts"],"names":["canvas","context","baseWidth","baseHeight","scaleByWindowSize","onResize","this","Rescale","window","addEventListener","parentElement","currentWidth","currentHeight","innerWidth","innerHeight","clientWidth","clientHeight","maxXScale","maxYScale","scaleFactor","Math","max","min","floor","setTransform","undefined","Run","document","getElementById","getContext"],"mappings":"oJAEe,MAAM,EAGjB,YAAmBA,EAAkCC,EAA0CC,EAA0BC,EAA4BC,EAAmCC,GAArK,KAAAL,SAAkC,KAAAC,UAA0C,KAAAC,YAA0B,KAAAC,aAA4B,KAAAC,oBAAmC,KAAAC,WACpLC,KAAKC,UACDD,KAAKF,kBACLI,OAAOC,iBAAiB,SAAU,IAAMH,KAAKC,WAG7CP,EAAOU,cAAcD,iBAAiB,SAAU,IAAMH,KAAKC,WAI5D,UACH,IAAII,EACAC,EACAN,KAAKF,mBACLO,EAAeH,OAAOK,WACtBD,EAAgBJ,OAAOM,cAGvBH,EAAeL,KAAKN,OAAOU,cAAcK,YACzCH,EAAgBN,KAAKN,OAAOU,cAAcM,cAE9C,MAAMC,EAAYN,EAAeL,KAAKJ,UAChCgB,EAAYN,EAAgBN,KAAKH,WAEvCG,KAAKa,YAAcC,KAAKC,IAAID,KAAKE,IAAIL,EAAWC,GAAY,GAC5D,YAAaZ,KAAKN,OAAQoB,KAAKG,MAAMjB,KAAKa,YAAcb,KAAKJ,WAAYkB,KAAKG,MAAMjB,KAAKH,WAAaG,KAAKa,cAE3Gb,KAAKL,QAAQuB,aAAalB,KAAKa,YAAa,EAAG,EAAGb,KAAKa,YAAa,EAAG,QAEjDM,IAAlBnB,KAAKD,UACLC,KAAKD,YC9BF,SAASqB,IACpB,MAAM1B,EAAS2B,SAASC,eAAe,UACxB,IAAI,EAAyB5B,EAAQA,EAAO6B,WAAW,MAAO,EAAG,GAAG,EAAO","file":"chess3d.bundle.js","sourcesContent":["import { ResizeCanvas } from './CanvasHelpers';\r\n\r\nexport default class AspectRatioScalingHelper {\r\n\r\n    public scaleFactor: number;\r\n    constructor(public canvas: HTMLCanvasElement, public context: CanvasRenderingContext2D, public baseWidth: number, public baseHeight: number, private scaleByWindowSize: boolean, public onResize: (() => void)|undefined) {\r\n        this.Rescale();\r\n        if (this.scaleByWindowSize) {\r\n            window.addEventListener('resize', () => this.Rescale());\r\n        }\r\n        else {\r\n            canvas.parentElement.addEventListener('resize', () => this.Rescale());\r\n        }\r\n    }\r\n\r\n    public Rescale() {\r\n        let currentWidth: number;\r\n        let currentHeight: number;\r\n        if (this.scaleByWindowSize) {\r\n            currentWidth = window.innerWidth;\r\n            currentHeight = window.innerHeight;\r\n        }\r\n        else {\r\n            currentWidth = this.canvas.parentElement.clientWidth;\r\n            currentHeight = this.canvas.parentElement.clientHeight;\r\n        }\r\n        const maxXScale = currentWidth / this.baseWidth;\r\n        const maxYScale = currentHeight / this.baseHeight;\r\n\r\n        this.scaleFactor = Math.max(Math.min(maxXScale, maxYScale), 1);\r\n        ResizeCanvas(this.canvas, Math.floor(this.scaleFactor * this.baseWidth), Math.floor(this.baseHeight * this.scaleFactor));\r\n\r\n        this.context.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, 0, 0);\r\n\r\n        if (this.onResize !== undefined) {\r\n            this.onResize();\r\n        }\r\n    }\r\n}","import AspectRatioScalingHelper from '../common/AspectRatioScalingHelper';\r\nimport { Complex } from '../common';\r\nimport { pathCubeOutside } from './renderHelpers';\r\nimport { Board } from './engine/board';\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const scaler = new AspectRatioScalingHelper(canvas, canvas.getContext('2d'), 1, 1, false, () => { });\r\n}"],"sourceRoot":""}