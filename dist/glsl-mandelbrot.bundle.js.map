{"version":3,"file":"glsl-mandelbrot.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/3d/GlslHelpers.ts","webpack://trading-game/./src/projects/glsl-mandelbrot/GlslFrameRenderer.ts","webpack://trading-game/./src/projects/glsl-mandelbrot/GlslJuliaFrameRenderer.ts","webpack://trading-game/./src/projects/glsl-mandelbrot/GlslMandelbrotRunner.ts","webpack://trading-game/./src/projects/glsl-mandelbrot/ShaderCode.ts","webpack://trading-game/./src/views/projects/glsl-mandelbrot/GlslMandelbrotComponent.tsx"],"sourcesContent":["export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error(source);\r\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n\r\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n\r\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            positionNumComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n}\r\n\r\n\r\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n    const normalize = false;  // don't normalize\r\n    const stride = 0;         // how many bytes to get from one set of values to the next\r\n                              // 0 = use type and numComponents above\r\n    const offset = 0;         // how many bytes inside the buffer to start from\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n          gl.getAttribLocation(shader, 'aVertexPosition'),\r\n          positionNumComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n    gl.enableVertexAttribArray(\r\n      gl.getAttribLocation(shader, 'aVertexPosition'));\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(shader);\r\n  for(let i = 0; i < drawCounts; i++) {\r\n    bindUniforms(gl, i);\r\n    let {bufferOffset, bufferCount} = getGeom(i);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n  }\r\n}\r\n\r\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n}\r\n\r\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\r\n     // Create a buffer for the square's positions.\r\n     const positionBuffer = gl.createBuffer();\r\n\r\n     // Select the positionBuffer as the one to apply buffer\r\n     // operations to from here out.\r\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n     const l = left ?? -1.0;\r\n     const r = right ?? 1.0;\r\n     const t = top ?? -1.0;\r\n     const b = bottom ?? 1.0;\r\n \r\n     // Now create an array of positions for the square.\r\n     const positions = [\r\n         b, r,\r\n         t, r,\r\n         b, l,\r\n         t, l,\r\n     ];\r\n \r\n     // Now pass the list of positions into WebGL to build the\r\n     // shape. We do this by creating a Float32Array from the\r\n     // JavaScript array, then use it to fill the current buffer.\r\n     gl.bufferData(gl.ARRAY_BUFFER,\r\n                   new Float32Array(positions),\r\n                   gl.STATIC_DRAW);\r\n \r\n     return positionBuffer;\r\n}\r\n\r\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(components),\r\n                gl.STATIC_DRAW);\r\n\r\n  return positionBuffer;\r\n}\r\n\r\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\r\nvarying vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;\r\n\r\nexport const defaultWebGl2VertexShader = `#version 300 es\r\nin vec4 aVertexPosition;\r\nout vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;","import { Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslFrameRenderer {\r\n    protected gl: WebGLRenderingContext;\r\n    protected program: WebGLProgram;\r\n    protected buffer: WebGLBuffer;\r\n\r\n    private cursor_anchor: Point | null;\r\n    private mm_down: boolean;\r\n\r\n    protected canvasRange: Range2d;\r\n    protected windowRange: Range2d;\r\n\r\n    private touch_anchors: { [key: number]: Point }\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private fragment_code: string, private onMiddleClick?: (pt: Point) => void) {\r\n        ResizeCanvas(canvas, 1200, 600);\r\n        this.cursor_anchor = null;\r\n        this.mm_down = false;\r\n        this.gl = canvas.getContext('webgl');\r\n        this.touch_anchors = {};\r\n        \r\n        this.canvasRange = new Range2d(new Range(0, 1200), new Range(0, 600));\r\n        this.windowRange = new Range2d(new Range(-1, 1), new Range(-1, (canvas.height / canvas.width)));\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        this.initProgram();\r\n    }\r\n\r\n    initProgram() {\r\n        this.program = GLSL.initShaderProgram(this.gl, GLSL.defaultVertexShader, this.fragment_code);\r\n        this.buffer = GLSL.fragmentShaderOnlyInitBuffer(this.gl);\r\n    }\r\n\r\n    run() {\r\n        this.renderFrame();\r\n\r\n        this.canvas.addEventListener('mousedown', e => {\r\n            if(e.button === 0) {\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n            }\r\n            else if(e.button === 1) {\r\n                this.mm_down = true;\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                if(this.onMiddleClick !== undefined) {\r\n                    this.onMiddleClick(new Point(perc.x, perc.y));\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mouseup', e => {\r\n            if(e.button === 0)\r\n                this.cursor_anchor = null;\r\n            else if(e.button === 1)\r\n                this.mm_down = false;\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            if(this.cursor_anchor != null) {\r\n                const dx = e.offsetX - this.cursor_anchor.x;\r\n                const dy = e.offsetY - this.cursor_anchor.y;\r\n                this.panCameraByScreenDelta(new Point(dx, dy));\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n                this.renderFrame();\r\n                e.preventDefault();\r\n            }\r\n            if(this.mm_down && this.onMiddleClick !== undefined){\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                this.onMiddleClick(new Point(perc.x, perc.y));\r\n            }\r\n        });\r\n        this.canvas.addEventListener('wheel', e => {\r\n            const scalePercentage = e.deltaY / SCROLL_DIV;\r\n            const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n            const perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n\r\n            this.windowRange.AspectScale(scalePerc, perc.x, 1-perc.y);\r\n            this.renderFrame();\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchstart', ev => { \r\n            if(ev.targetTouches.length >= 3 || ev.targetTouches.length === 0) return;\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                this.touch_anchors[touch.identifier] = touchOffset(touch);\r\n            }\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchmove', ev => {\r\n            if(ev.touches.length >= 3 || ev.touches.length === 0) return;\r\n            const moves: [Point, Point][] = [];\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                const pos = touchOffset(touch);\r\n                const oldPos = this.touch_anchors[touch.identifier];\r\n                if(oldPos === undefined) return;\r\n                moves.push([oldPos, pos]);\r\n                this.touch_anchors[touch.identifier] = pos;\r\n            }\r\n\r\n            if(moves.length === 1) {\r\n                // Just pan the camera\r\n                this.panCameraByScreenDelta(Point.subtract(moves[0][1], moves[0][0]));\r\n            }\r\n            else if(moves.length === 2) {\r\n                // Average the start + End positions to find the move amt\r\n                const dragStart = Point.multiply(Point.add(moves[0][0], moves[1][0]), 0.5, 0.5);\r\n                const dragEnd = Point.multiply(Point.add(moves[0][1], moves[1][1]), 0.5, 0.5);\r\n                const worldPos = this.panCameraByScreenDelta(dragEnd.subtractWith(dragStart));\r\n                const startDist = Point.subtract(moves[0][0], moves[1][0]).length();\r\n                const endDist = Point.subtract(moves[0][1], moves[1][1]).length();\r\n                const scaleAmt = startDist / endDist;\r\n                this.windowRange.AspectScale(scaleAmt, worldPos.x, 1-worldPos.y);\r\n            }\r\n\r\n            this.renderFrame();\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchend', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchcancel', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n    }\r\n\r\n    private panCameraByScreenDelta(delta: Point) {\r\n        const perc = this.canvasRange.GetPercentage(delta.x, delta.y);\r\n        this.windowRange.ShiftByPercentage(-perc.x, perc.y);\r\n        return perc;\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n        });\r\n    }\r\n\r\n    cleanup() {\r\n        \r\n    }\r\n}\r\n\r\nfunction touchOffset(touch: Touch): Point {\r\n    const tgt = (touch.target as HTMLElement).getBoundingClientRect();\r\n    return new Point(touch.pageX - tgt.left, touch.pageY - tgt.top);\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslJuliaFrameRenderer extends GlslFrameRenderer {\r\n    \r\n    private julia_point: Point;\r\n    private julia_escape: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, fragment_code: string) {\r\n        super(canvas, fragment_code);\r\n        this.setJuliaPoint(new Complex(0,0));\r\n    }\r\n\r\n    setJuliaPoint(pt: Complex)\r\n    {\r\n        this.julia_point = new Point(pt.real, pt.imaginary);\r\n        this.julia_escape = (Math.sqrt(4 * pt.abs() + 1) + 1) / 2;\r\n        this.renderFrame();\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'julia_coord'), [this.julia_point.x, this.julia_point.y]);\r\n            gl.uniform1fv(gl.getUniformLocation(this.program, 'julia_escape'), [this.julia_escape]);\r\n        });\r\n    }\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\nimport GlslJuliaFrameRenderer from \"./GlslJuliaFrameRenderer\";\r\nimport { JULIA_SHADER, MANDELBROT_SHADER } from \"./ShaderCode\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslMandelbrotWrapperComponent {\r\n    private mandelbrot: GlslFrameRenderer;\r\n    private julia: GlslJuliaFrameRenderer;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private juliaCanvas: HTMLCanvasElement) {\r\n        this.mandelbrot = new GlslFrameRenderer(canvas, MANDELBROT_SHADER, (jpt) => {\r\n            this.julia.setJuliaPoint(new Complex(jpt.x, jpt.y));\r\n        });\r\n        this.julia = new GlslJuliaFrameRenderer(juliaCanvas, JULIA_SHADER);\r\n\r\n        this.mandelbrot.run();\r\n        this.julia.run();\r\n    }\r\n\r\n    cleanup() {\r\n        this.mandelbrot.cleanup();\r\n        this.julia.cleanup();\r\n    }\r\n}","export const MANDELBROT_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\nconst float MAX_ABSSQ = 2.0;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_mandelbrot(vec2 v, vec2 c) {\r\n    return cplx_mult(v, v) + c;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_mandelbrot(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_mandelbrot(roll, coords);\r\n        if (cplx_abssq(roll) >= MAX_ABSSQ) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_mandelbrot(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;\r\n\r\nexport const JULIA_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 julia_coord;\r\nuniform float julia_escape;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_julia(vec2 v) {\r\n    return cplx_mult(v, v) + julia_coord;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_julia(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_julia(roll);\r\n        if (cplx_abssq(roll) >= julia_escape) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_julia(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;","import * as React from 'react';\r\nimport GlslMandelbrotRunner from '../../../projects/glsl-mandelbrot/GlslMandelbrotRunner';\r\n\r\nexport default function GlslMandelbrotComponent() {\r\n    const canvas = React.useRef<HTMLCanvasElement>();\r\n    const jcanvas = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        const renderer = new GlslMandelbrotRunner(canvas.current, jcanvas.current);\r\n        return () => renderer.cleanup();\r\n    }, [canvas]);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas' ref={canvas}></canvas>\r\n        <canvas id='jcanvas' ref={jcanvas}></canvas>\r\n    </div>;\r\n}"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","i","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","t","b","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","defaultWebGl2VertexShader","GlslFrameRenderer","constructor","canvas","fragment_code","onMiddleClick","this","cursor_anchor","mm_down","getContext","touch_anchors","canvasRange","windowRange","height","width","init","initProgram","program","buffer","run","renderFrame","addEventListener","e","button","Point","offsetX","offsetY","perc","GetPercentage","GetValue","x","y","undefined","preventDefault","dx","dy","panCameraByScreenDelta","scalePercentage","deltaY","scalePerc","Math","pow","AspectScale","ev","targetTouches","length","touch","item","identifier","touchOffset","touches","moves","pos","oldPos","push","dragStart","dragEnd","worldPos","subtractWith","scaleAmt","delta","ShiftByPercentage","uniform2fv","getUniformLocation","xRange","min","yRange","Length","cleanup","tgt","target","getBoundingClientRect","pageX","pageY","GlslJuliaFrameRenderer","super","setJuliaPoint","pt","julia_point","real","imaginary","julia_escape","sqrt","abs","uniform1fv","GlslMandelbrotWrapperComponent","juliaCanvas","mandelbrot","jpt","julia","GlslMandelbrotComponent","jcanvas","renderer","current","className","id","ref"],"sourceRoot":""}