{"version":3,"sources":["webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts","webpack:///./src/projects/gravitation/rock.ts","webpack:///./src/projects/gravitation/Constants.ts","webpack:///./src/projects/gravitation/main.ts","webpack:///./src/projects/common/3d/Vector.ts","webpack:///./src/projects/common/Color.ts"],"names":["ProgressiveRepaint","canvasWidth","canvasHeight","this","finished","scale","maxScale","fastLog2","Math","min","x","y","v","shift","paintColor","canvas","func","repainter","ctx","getContext","screenRange","offsetWidth","offsetHeight","windowRange","i","X","Y","s","Scale","worldCoords","ConvertTo","fillStyle","CalcColor","fillRect","Advance","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","multiplyWith","addWith","Julia","c","radius","sqrt","abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","dx","dy","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","r","Shift","max","Paint","mandelRender","juliaRender","Run","document","getElementById","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset","requestAnimationFrame","pos","vel","mass","color","Position","Velocity","Mass","Color","other","gravVector","subtract","minlength","lengthSq","LEN_SCALE","accel","normalize","multiply","add","project","save","depth","colorScale","rgb","g","b","toString","size","beginPath","arc","PI","fill","restore","rocks","randBetween","random","push","Vector","MAX_MASS","loop","length","j","applyGravitation","heaviest","reduce","m","forEach","rock","finishTick","sort","a","z","paint","projectPosition","tick","worldRange","sx","sy","sz","isVector","getxyz","dz","undefined","vals","h","hsv","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor"],"mappings":"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","file":"mandelbrot.bundle.js","sourcesContent":["export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}","import Vector from \"../common/3d/Vector\";\r\nimport { Color } from \"../common/Color\";\r\nimport * as C from './Constants';\r\n\r\nexport default class Rock {\r\n    Position: Vector;\r\n    Velocity: Vector;\r\n    Mass: number;\r\n    Color: Color;\r\n\r\n    constructor(pos: Vector, vel: Vector, mass: number, color: Color) {\r\n        this.Position = pos;\r\n        this.Velocity = vel;\r\n        this.Mass = mass;\r\n        this.Color = color;\r\n    }\r\n\r\n    applyGravitation(other: Rock) {\r\n        let gravVector = other.Position.subtract(this.Position);\r\n        const minlength = (this.Mass + other.Mass) * C.MASS_COLISION_SCALE;\r\n        const lengthSq = Math.max(gravVector.lengthSq() * C.LEN_SCALE_SQ, minlength * minlength);\r\n        let force = gravVector.normalize().multiply(other.Mass).multiply(C.G_CONST / lengthSq);\r\n        let accel = force.multiply(1/this.Mass);\r\n        this.Velocity = this.Velocity.add(accel);\r\n    }\r\n\r\n    finishTick() {\r\n        this.Position = this.Position.add(this.Velocity);\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, project: (v: Vector) => {x: number, y: number, depth: number}) {\r\n        ctx.save();\r\n        const { x, y, depth } = project(this.Position);\r\n        const colorScale = Math.max(Math.min(depth, 1), 0);\r\n        ctx.fillStyle = Color.rgb(this.Color.r() * colorScale, this.Color.g() * colorScale, this.Color.b() * colorScale).toString();\r\n        let size = C.SCALE_PER_MASS * this.Mass * depth;\r\n        size = Math.min(Math.max(size, 1), 100);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, size, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;\r\nexport const SCALE_PER_MASS = 2;\r\nexport const G_CONST = 60;\r\nexport const MASS_COLISION_SCALE = 3;\r\nexport const LEN_SCALE = 1;\r\nexport const LEN_SCALE_SQ = LEN_SCALE * LEN_SCALE;","import { VERSION } from '@microsoft/signalr';\r\nimport { Range } from '../common';\r\nimport Vector from '../common/3d/Vector';\r\nimport { ResizeCanvas } from '../common/CanvasHelpers';\r\nimport { Color } from '../common/Color';\r\nimport { unitRange } from '../common/Range';\r\nimport * as Const from './Constants';\r\nimport Rock from './rock';\r\n\r\nconst NUM_ROCKS = 50;\r\n\r\nconst MIN_POS = -100;\r\nconst MAX_POS = 100;\r\nconst MAX_V = 0.3;\r\nconst MIN_MASS = 1;\r\nconst MAX_MASS = 5;\r\n\r\nlet rocks: Rock[] = [];\r\n\r\nfunction randBetween(min: number, max: number){\r\n    return Math.random() * (max-min) + min;\r\n}\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n\r\n    ResizeCanvas(canvas, Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < NUM_ROCKS; i++){\r\n        rocks.push(new Rock(\r\n            new Vector(randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS)),\r\n            new Vector(randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V)),\r\n            randBetween(MIN_MASS, MAX_MASS),\r\n            Color.rgb(1, 1, 1)\r\n        ));\r\n    }\r\n\r\n    rocks.push(new Rock(new Vector( 0,0,0),\r\n    new Vector(0,0,0),\r\n    MAX_MASS * 5,\r\n    Color.rgb(1, 0, 0)));\r\n\r\n    loop(canvas.getContext('2d'));\r\n}\r\n\r\nfunction loop(ctx: CanvasRenderingContext2D) {\r\n    tick(ctx);\r\n    requestAnimationFrame(()=>loop(ctx));\r\n}\r\n\r\nfunction tick(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0,0,Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < rocks.length; i++) {\r\n        for(let j = 0; j < rocks.length; j++) {\r\n            if(i !== j) { \r\n                rocks[i].applyGravitation(rocks[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    let heaviest = rocks.reduce((m, c) => m.Mass >= c.Mass ? m : c);\r\n\r\n    rocks.forEach(rock => {\r\n        rock.Position = rock.Position.subtract(heaviest.Position);\r\n        rock.finishTick();\r\n    });\r\n    rocks.sort((a, b) => a.Position.z - b.Position.z);\r\n    rocks.forEach(rock => {\r\n        rock.paint(ctx, projectPosition);\r\n    });\r\n}\r\n\r\nconst windowRange: Range = new Range(0, Math.min(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT));\r\nconst worldRange: Range = new Range(MIN_POS, MAX_POS);\r\n\r\nfunction projectPosition(v: Vector): {x: number, y: number, depth: number} {\r\n    return {\r\n        x: worldRange.ConvertTo(v.x, windowRange),\r\n        y: worldRange.ConvertTo(v.y, windowRange),\r\n        depth: worldRange.ConvertTo(v.z, unitRange),\r\n    };\r\n}","\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}"],"sourceRoot":""}