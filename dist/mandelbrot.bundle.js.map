{"version":3,"sources":["webpack:///./src/projects/gravitation/rock.ts","webpack:///./src/projects/gravitation/Constants.ts","webpack:///./src/projects/gravitation/main.ts","webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/3d/Vector.ts","webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts"],"names":["pos","vel","mass","color","this","Position","Velocity","Mass","Color","other","gravVector","subtract","minlength","lengthSq","Math","max","LEN_SCALE","accel","normalize","multiply","add","ctx","project","save","x","y","depth","colorScale","min","fillStyle","rgb","r","g","b","toString","size","beginPath","arc","PI","fill","restore","rocks","randBetween","random","Run","canvas","document","getElementById","i","push","Vector","MAX_MASS","loop","fillRect","length","j","applyGravitation","heaviest","reduce","m","c","forEach","rock","finishTick","sort","a","z","paint","projectPosition","tick","requestAnimationFrame","getContext","windowRange","worldRange","v","ConvertTo","vals","h","s","hsv","undefined","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor","sqrt","sx","sy","sz","isVector","getxyz","dx","dy","dz","ProgressiveRepaint","canvasWidth","canvasHeight","finished","scale","maxScale","fastLog2","shift","paintColor","func","repainter","screenRange","offsetWidth","offsetHeight","X","Y","Scale","worldCoords","CalcColor","Advance","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","multiplyWith","addWith","Julia","radius","abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","Shift","Paint","mandelRender","juliaRender","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset"],"mappings":"qLAIe,MAAM,EAMjB,YAAYA,EAAaC,EAAaC,EAAcC,GAChDC,KAAKC,SAAWL,EAChBI,KAAKE,SAAWL,EAChBG,KAAKG,KAAOL,EACZE,KAAKI,MAAQL,EAGjB,iBAAiBM,GACb,IAAIC,EAAaD,EAAMJ,SAASM,SAASP,KAAKC,UAC9C,MAAMO,ECfqB,GDeRR,KAAKG,KAAOE,EAAMF,MAC/BM,EAAWC,KAAKC,ICdFC,EDcMN,EAAWG,WAA6BD,EAAYA,GAC9E,IACIK,EADQP,EAAWQ,YAAYC,SAASV,EAAMF,MAAMY,SClBzC,GDkB8DN,GAC3DM,SAAS,EAAEf,KAAKG,MAClCH,KAAKE,SAAWF,KAAKE,SAASc,IAAIH,GAGtC,aACIb,KAAKC,SAAWD,KAAKC,SAASe,IAAIhB,KAAKE,UAG3C,MAAMe,EAA+BC,GACjCD,EAAIE,OACJ,MAAM,EAAEC,EAAC,EAAEC,EAAC,MAAEC,GAAUJ,EAAQlB,KAAKC,UAC/BsB,EAAab,KAAKC,IAAID,KAAKc,IAAIF,EAAO,GAAI,GAChDL,EAAIQ,UAAYrB,EAAA,EAAMsB,IAAI1B,KAAKI,MAAMuB,IAAMJ,EAAYvB,KAAKI,MAAMwB,IAAML,EAAYvB,KAAKI,MAAMyB,IAAMN,GAAYO,WACjH,IAAIC,ECjCkB,EDiCQ/B,KAAKG,KAAOmB,EAC1CS,EAAOrB,KAAKc,IAAId,KAAKC,IAAIoB,EAAM,GAAI,KAEnCd,EAAIe,YACJf,EAAIgB,IAAIb,EAAGC,EAAGU,EAAM,EAAa,EAAVrB,KAAKwB,IAAQ,GACpCjB,EAAIkB,OACJlB,EAAImB,WExBZ,IAAIC,EAAgB,GAEpB,SAASC,EAAYd,EAAab,GAC9B,OAAOD,KAAK6B,UAAY5B,EAAIa,GAAOA,EAGxB,SAASgB,IACpB,MAAMC,EAASC,SAASC,eAAe,cAEvC,YAAaF,ED1BW,IACC,KC2BzB,IAAI,IAAIG,EAAI,EAAGA,EAnBD,GAmBgBA,IAC1BP,EAAMQ,KAAK,IAAI,EACX,IAAIC,EAAA,EAAOR,GAnBP,IACA,KAkBsCA,GAnBtC,IACA,KAkBqEA,GAnBrE,IACA,MAmBJ,IAAIQ,EAAA,EAAOR,GAlBT,OAkBoCA,GAlBpC,OAkB+DA,GAlB/D,QAmBFA,EAlBK,EACA,GAkBLlC,EAAA,EAAMsB,IAAI,EAAG,EAAG,KAIxBW,EAAMQ,KAAK,IAAI,EAAK,IAAIC,EAAA,EAAQ,EAAE,EAAE,GACpC,IAAIA,EAAA,EAAO,EAAE,EAAE,GACfC,GACA3C,EAAA,EAAMsB,IAAI,EAAG,EAAG,KAKpB,SAASsB,EAAK/B,IAKd,SAAcA,GACVA,EAAIQ,UAAY,QAChBR,EAAIgC,SAAS,EAAE,EDpDS,IACC,KCqDzB,IAAI,IAAIL,EAAI,EAAGA,EAAIP,EAAMa,OAAQN,IAC7B,IAAI,IAAIO,EAAI,EAAGA,EAAId,EAAMa,OAAQC,IAC1BP,IAAMO,GACLd,EAAMO,GAAGQ,iBAAiBf,EAAMc,IAK5C,IAAIE,EAAWhB,EAAMiB,OAAO,CAACC,EAAGC,IAAMD,EAAEpD,MAAQqD,EAAErD,KAAOoD,EAAIC,GAE7DnB,EAAMoB,QAAQC,IACVA,EAAKzD,SAAWyD,EAAKzD,SAASM,SAAS8C,EAASpD,UAChDyD,EAAKC,eAETtB,EAAMuB,KAAK,CAACC,EAAGhC,IAAMgC,EAAE5D,SAAS6D,EAAIjC,EAAE5B,SAAS6D,GAC/CzB,EAAMoB,QAAQC,IACVA,EAAKK,MAAM9C,EAAK+C,MAxBpBC,CAAKhD,GACLiD,sBAAsB,IAAIlB,EAAK/B,IAL/B+B,CAAKP,EAAO0B,WAAW,OAgC3B,MAAMC,EAAqB,IAAI,IAAM,EAAG1D,KAAKc,ID1EjB,IACC,MC0EvB6C,EAAoB,IAAI,KAhEd,IACA,KAiEhB,SAASL,EAAgBM,GACrB,MAAO,CACHlD,EAAGiD,EAAWE,UAAUD,EAAElD,EAAGgD,GAC7B/C,EAAGgD,EAAWE,UAAUD,EAAEjD,EAAG+C,GAC7B9C,MAAO+C,EAAWE,UAAUD,EAAER,EAAG,Q,gCCjFzC,kCAAO,MAAM1D,EAIT,YAAYoE,GACHA,EAAaC,GAAMD,EAAaE,GAAMF,EAAaF,GACpDtE,KAAK2E,IAAMH,EACXxE,KAAK0B,SAAMkD,IAGX5E,KAAK0B,IAAM8C,EACXxE,KAAK2E,SAAMC,GAUZ,WAAWjD,EAAWC,EAAWC,GACpC,OAAO,IAAIzB,EAAM,CAAEuB,IAAGC,IAAGC,MAStB,WAAW4C,EAAWC,EAAWJ,GACpC,OAAO,IAAIlE,EAAM,CAAEqE,IAAGC,IAAGJ,MAKtB,EAAEA,GAEL,GADAtE,KAAK6E,cACKD,IAANN,EAIA,OAAOtE,KAAK0B,IAAIC,EAHhB3B,KAAK0B,IAAIC,EAAI2C,EACbtE,KAAK2E,SAAMC,EAQZ,EAAEN,GAEL,GADAtE,KAAK6E,cACKD,IAANN,EAIA,OAAOtE,KAAK0B,IAAIE,EAHhB5B,KAAK0B,IAAIE,EAAI0C,EACbtE,KAAK2E,SAAMC,EAQZ,EAAEN,GAEL,GADAtE,KAAK6E,cACKD,IAANN,EAIA,OAAOtE,KAAK0B,IAAIG,EAHhB7B,KAAK0B,IAAIG,EAAIyC,EACbtE,KAAK2E,SAAMC,EAQZ,EAAEN,GAEL,GADAtE,KAAK8E,cACKF,IAANN,EAIA,OAAOtE,KAAK2E,IAAIF,EAHhBzE,KAAK2E,IAAIF,EAAIH,EACbtE,KAAK2E,SAAMC,EAQZ,EAAEN,GAEL,GADAtE,KAAK8E,cACKF,IAANN,EAIA,OAAOtE,KAAK2E,IAAID,EAHhB1E,KAAK2E,IAAID,EAAIJ,EACbtE,KAAK2E,SAAMC,EAQZ,EAAEN,GAEL,GADAtE,KAAK8E,cACKF,IAANN,EAIA,OAAOtE,KAAK2E,IAAIL,EAHhBtE,KAAK2E,IAAIL,EAAIA,EACbtE,KAAK2E,SAAMC,EAMX,eAAeG,GACnB,MAAMC,GAAKD,EAAiB,EAAb/E,KAAK2E,IAAIF,GAAS,EACjC,OAAOzE,KAAK2E,IAAIL,EAAItE,KAAK2E,IAAIL,EAAItE,KAAK2E,IAAID,EAAIhE,KAAKC,IAAID,KAAKc,IAAIwD,EAAG,EAAIA,EAAG,GAAI,GAI1E,cACaJ,IAAb5E,KAAK0B,KACL1B,KAAKiF,UAGL,UACJjF,KAAK0B,IAAM,CACPC,EAAG3B,KAAKkF,eAAe,GACvBtD,EAAG5B,KAAKkF,eAAe,GACvBrD,EAAG7B,KAAKkF,eAAe,IAIvB,cACaN,IAAb5E,KAAK2E,KACL3E,KAAKmF,UAGL,UACJ,MAAM,EAACxD,EAAC,EAAEC,EAAC,EAAEC,GAAK7B,KAAK0B,IACjB0D,EAAK1E,KAAKC,IAAIgB,EAAGC,EAAGC,GACpBwD,EAAK3E,KAAKc,IAAIG,EAAGC,EAAGC,GAC1B,IAAI4C,EAAIW,IAAOC,EAAK,EACdD,IAAOzD,GAAKC,EAAIC,IAAMuD,EAAKC,GAC3BD,IAAOxD,EAAI,GAAKC,EAAIF,IAAMyD,EAAKC,GAC/B,GAAK1D,EAAIC,IAAMwD,EAAKC,GAE1B,IADAZ,GAAK,EACEA,EAAI,GACPA,IAEJzE,KAAK2E,IAAM,CACPF,IACAC,EAAGU,IAAOC,EAAK,GAAKD,EAAKC,GAAMD,EAC/Bd,EAAGc,GAIJ,WAEH,OADApF,KAAK6E,SACE,OAAS7E,KAAKsF,OAAOtF,KAAK0B,IAAIC,GAAK,KAAO3B,KAAKsF,OAAOtF,KAAK0B,IAAIE,GAAK,KAAO5B,KAAKsF,OAAOtF,KAAK0B,IAAIG,GAAK,IAGxG,OAAO0D,GACX,OAAO7E,KAAK8E,MAAkB,IAAZD,M,gCC1J1B,kCAAe,MAAMzC,EACjB,YAAmB1B,EAAkBC,EAAkByC,GAApC,KAAA1C,IAAkB,KAAAC,IAAkB,KAAAyC,IAGvD,IAAIzD,GACA,OAAOL,KAAKoB,EAAIf,EAAMe,EAAIpB,KAAKqB,EAAIhB,EAAMgB,EAAIrB,KAAK8D,EAAIzD,EAAMyD,EAGhE,SACI,OAAOpD,KAAK+E,KAAKzF,KAAKS,YAG1B,WACI,OAAOT,KAAKoB,EAAIpB,KAAKoB,EAAIpB,KAAKqB,EAAIrB,KAAKqB,EAAIrB,KAAK8D,EAAI9D,KAAK8D,EAG7D,YACI,OAAO9D,KAAKe,SAAS,EAAIf,KAAKS,YAElC,SACI,OAAO,IAAIqC,GAAQ9C,KAAKoB,GAAIpB,KAAKqB,GAAIrB,KAAK8D,GAM9C,SAAS4B,EAAqBC,EAAcC,GACpCC,EAASH,KAETC,EAAKA,UAAcD,EACnBE,EAAKA,UAAcF,GAEvB,IAAKtE,EAAGC,EAAGyC,GAAKhB,EAAOgD,OAAOJ,EAAIC,EAAIC,GACtC,OAAO,IAAI9C,EAAO9C,KAAKoB,EAAIA,EAAGpB,KAAKqB,EAAIA,EAAGrB,KAAK8D,EAAIA,GAKvD,IAAIiC,EAAqBC,EAAcC,GACnC,IAAK7E,EAAGC,EAAGyC,GAAKhB,EAAOgD,OAAOC,EAAIC,EAAIC,GACtC,OAAO,IAAInD,EAAO9C,KAAKoB,EAAIA,EAAGpB,KAAKqB,EAAIA,EAAGrB,KAAK8D,EAAIA,GAKvD,SAASiC,EAAqBC,EAAcC,GACxC,IAAK7E,EAAGC,EAAGyC,GAAKhB,EAAOgD,OAAOC,EAAIC,EAAIC,GACtC,OAAO,IAAInD,EAAO9C,KAAKoB,EAAIA,EAAGpB,KAAKqB,EAAIA,EAAGrB,KAAK8D,EAAIA,GAG/C,cAAc1C,EAAoBC,EAAYyC,GAClD,OAAG+B,EAASzE,GACD,CAACA,EAAEA,EAAGA,EAAEC,EAAGD,EAAE0C,GAGb,CAAC1C,EAAGC,EAAGyC,IAK1B,SAAS+B,EAASzE,GACd,YAAsBwD,IAATxD,EAAGA,I,2FC/Db,MAAM8E,EAOT,YAAoBC,EAA6BC,GAA7B,KAAAD,cAA6B,KAAAC,eAC7CpG,KAAKqG,UAAW,EAChBrG,KAAKsG,MAAQtG,KAAKuG,SAAY,GAAKvG,KAAKwG,SAAS9F,KAAKc,IAAI2E,EAAaC,IACvEpG,KAAKoB,EAAIpB,KAAKqB,EAAI,EAGd,SAASiD,GACb,IAAImC,EAAQ,EACZ,KAAOnC,EAAI,GACPmC,IACAnC,IAAM,EAEV,OAAOmC,EAGX,IACI,OAAOzG,KAAKoB,EAAIpB,KAAKsG,MAEzB,IACI,OAAOtG,KAAKqB,EAAIrB,KAAKsG,MAEzB,QACI,OAAOtG,KAAKsG,MAIhB,UAEI,GADAtG,KAAKoB,IACDpB,KAAKoB,EAAIpB,KAAKsG,OAAStG,KAAKmG,cAC5BnG,KAAKoB,EAAI,EACTpB,KAAKqB,IACDrB,KAAKqB,EAAIrB,KAAKsG,OAAStG,KAAKoG,cAAc,CAE1C,GADApG,KAAKqB,EAAI,EACU,IAAfrB,KAAKsG,MAEL,OADAtG,KAAKqG,UAAW,GACT,EAGPrG,KAAKsG,OAAS,EAI1B,OAAO,EAGX,QACItG,KAAKqG,UAAW,EAChBrG,KAAKsG,MAAQtG,KAAKuG,SAClBvG,KAAKoB,EAAIpB,KAAKqB,EAAI,GClD1B,MAEMqF,EAAyB,IAAI,IAAW,EAAG,IAAK,EAAG,IAAK,EAAG,GAE1D,MAAM,EAMT,YAAoBjE,EAAkCkE,GAAlC,KAAAlE,SAAkC,KAAAkE,OAClD3G,KAAK4G,UAAY,IAAIV,EChBD,IACC,KDgBrBlG,KAAKiB,IAAMwB,EAAO0B,WAAW,MAC7BnE,KAAK6G,YAAc,IAAI,IAAQ,IAAI,IAAM,EAAGpE,EAAOqE,aAAc,IAAI,IAAM,EAAGrE,EAAOsE,eAGzF,MAAM3C,GACF,IAAK,IAAIxB,EAAI,EAAGA,EAhBD,OAgBwB5C,KAAK4G,UAAUP,SAAUzD,IAAK,CACjE,MAAMxB,EAAIpB,KAAK4G,UAAUI,IACnB3F,EAAIrB,KAAK4G,UAAUK,IACnBvC,EAAI1E,KAAK4G,UAAUM,QACnBC,EAAcnH,KAAK6G,YAAYtC,UAAU,CAACnD,IAAGC,KAAI+C,GACvDpE,KAAKiB,IAAIQ,UAAYzB,KAAKoH,UAAUD,GACpCnH,KAAKiB,IAAIgC,SAAS7B,EAAGC,EAAGqD,EAAGA,GAC3B1E,KAAK4G,UAAUS,WAIvB,UAAUC,GAEN,MAAMC,EAAW,IAAI,IAAQD,EAAOlG,EAAGkG,EAAOjG,GAC9C,IAAImG,EAAU,IAAI,IAAQF,EAAOlG,EAAGkG,EAAOjG,GACvCoG,EAAO,EAEX,KAAOA,EAlCG,KAkCiBD,EAAQE,QAAU1H,KAAK2G,KAAKgB,YACnDH,EAAUxH,KAAK2G,KAAKiB,QAAQJ,EAASD,GACrCE,IAGJ,GAAID,EAAQE,QAAU1H,KAAK2G,KAAKgB,WAC5B,MAAO,QAGX,MAAME,EAAOJ,EA3CH,IA4CV,OAAOf,EAAWoB,QAAQD,GAG9B,aACI7H,KAAK4G,UAAUmB,SElDhB,MAAMC,EACT,QAAQR,EAAkBD,GAGtB,OAFAC,EAAQS,aAAaT,GACrBA,EAAQU,QAAQX,GACTC,EAGX,WACI,OAAO,GCRR,MAAMW,EAGT,YAAoB3E,GAAA,KAAAA,IAChBxD,KAAKoI,QAAU1H,KAAK+E,KAAK,EAAIjC,EAAE6E,MAAQ,GAAK,GAAK,EAGrD,QAAQb,EAAkBD,GAGtB,OAFAC,EAAQS,aAAaT,GACrBA,EAAQU,QAAQlI,KAAKwD,GACdgE,EAGX,WACI,OAAOxH,KAAKoI,QCPb,MAAM,EAET,YAAoBE,EAA8BC,EAA6BC,EAA4BC,GAAvF,KAAAH,UAA8B,KAAAC,cAA6B,KAAAC,WAA4B,KAAAC,WACvGH,EAAQI,iBAAiB,YAAa1I,KAAK2I,gBAAgBC,KAAK5I,OAChEsI,EAAQI,iBAAiB,UAAW1I,KAAK6I,cAAcD,KAAK5I,OAC5DsI,EAAQI,iBAAiB,aAAc1I,KAAK8I,iBAAiBF,KAAK5I,OAClEsI,EAAQI,iBAAiB,YAAa1I,KAAK+I,gBAAgBH,KAAK5I,OAChEsI,EAAQI,iBAAiB,QAAS1I,KAAKgJ,aAAaJ,KAAK5I,OACzDA,KAAKiJ,aAAe,IAAI,IAAQ,IAAI,IAAM,EAAGX,EAAQxB,aAAc,IAAI,IAAM,EAAGwB,EAAQvB,eAG5F,QACI/G,KAAKuI,YAAc,IAAI,IAAQ,IAAI,KAAO,EAAG,GAAI,IAAI,KAAO,EAAG,IAC/DvI,KAAKwI,SAASU,aAMV,gBAAgBC,GACpB,GAAqB,IAAjBA,EAAMC,OACNpJ,KAAKqJ,MAAQF,EAAMG,QACnBtJ,KAAKuJ,MAAQJ,EAAMK,QACnBxJ,KAAKyJ,WAAY,EACjBN,EAAMO,sBAEL,GAAqB,IAAjBP,EAAMC,OAAc,CACzB,MAAMO,EAAS3J,KAAKiJ,aAAa1E,UAAU,CAAEnD,EAAG+H,EAAMG,QAASjI,EAAG8H,EAAMK,SAAWxJ,KAAKuI,aACxFvI,KAAKyI,SAASkB,EAAOvI,EAAGuI,EAAOtI,GAC/B8H,EAAMO,kBAGN,gBACJ1J,KAAKyJ,WAAY,EAEb,mBACJzJ,KAAKyJ,WAAY,EAEb,gBAAgBN,GACpB,GAAsB,IAAlBA,EAAMS,QAAe,CACrB,MAAMD,EAAS3J,KAAKiJ,aAAa1E,UAAU,CAAEnD,EAAG+H,EAAMG,QAASjI,EAAG8H,EAAMK,SAAWxJ,KAAKuI,aACxFvI,KAAKyI,SAASkB,EAAOvI,EAAGuI,EAAOtI,GAC/B8H,EAAMO,iBAEV,IAAK1J,KAAKyJ,UAAW,OACrB,MAAM1D,EAAKoD,EAAMG,QAAUtJ,KAAKqJ,MAC1BrD,EAAKmD,EAAMK,QAAUxJ,KAAKuJ,MAE1B1B,EAAO7H,KAAKiJ,aAAaY,cAAc9D,EAAIC,GACjDhG,KAAKuI,YAAYuB,mBAAmBjC,EAAKzG,GAAIyG,EAAKxG,GAClDrB,KAAK+J,eAGL/J,KAAKwI,SAASU,aAEdlJ,KAAKqJ,MAAQF,EAAMG,QACnBtJ,KAAKuJ,MAAQJ,EAAMK,QAGf,aAAaL,GACjB,MAAMa,EAAkBb,EAAMc,OAnEnB,EAoELC,EAAYxJ,KAAKyJ,IAnEZ,IAmE4BH,GACjCnC,EAAO7H,KAAKiJ,aAAaY,cAAcV,EAAMG,QAASH,EAAMK,SAElExJ,KAAKuI,YAAY6B,YAAYF,EAAWrC,EAAKzG,EAAGyG,EAAKxG,GACrDrB,KAAK+J,eAEL/J,KAAKwI,SAASU,aAEdC,EAAMO,iBAGF,gBACA1J,KAAKuI,YAAY8B,OAAOC,SA7Eb,GA6E0CtK,KAAKuI,YAAYgC,OAAOD,SA7ElE,KA8EXtK,KAAKuI,YAAY8B,OAAOG,QA9Eb,EA8EqC,IAChDxK,KAAKuI,YAAYgC,OAAOC,QA/Eb,EA+EqC,KAEpDxK,KAAKyK,kBAAkBzK,KAAKuI,YAAY8B,QACxCrK,KAAKyK,kBAAkBzK,KAAKuI,YAAYgC,QAGpC,kBAAkB5I,GAClBA,EAAEH,KArFK,GAqFaG,EAAE+I,OArFf,EAqFkC/I,EAAEH,KAC3CG,EAAEhB,IArFK,GAqFagB,EAAE+I,MArFf,EAqFkC/I,EAAEhB,KAG5C,OACHX,KAAKwI,SAASmC,MAAM3K,KAAKuI,cCzFjC,IAAIqC,EACAC,EAEW,SAASrI,IACpB,MAAMC,EAASC,SAASC,eAAe,cACjCmI,EAAYpI,SAASC,eAAe,aAE1CF,EAAOsI,aAAa,QAAS,OAC7BtI,EAAOsI,aAAa,SAAU,OAC9BtI,EAAOuI,MAAMC,MAAQ,QACrBxI,EAAOuI,MAAME,OAAS,QAEtBJ,EAAUC,aAAa,QAAS,OAChCD,EAAUC,aAAa,SAAU,OACjCD,EAAUE,MAAMC,MAAQ,QACxBH,EAAUE,MAAME,OAAS,QAEzBN,EAAe,IAAI,EAAiBnI,EAAQ,IAAI,IAAQ,IAAI,KAAO,EAAG,GAAI,IAAI,KAAO,EAAG,IAAK,IAAI,EAASA,EAAQ,IAAIuF,GAAemD,GACrIN,EAAc,IAAI,EAAiBC,EAAW,IAAI,IAAQ,IAAI,KAAO,EAAG,GAAI,IAAI,KAAO,EAAG,IAAK,IAAI,EAASA,EAAY,IAAI3C,EAAM,IAAI,IAAQ,EAAG,KAAM,CAAC/G,EAAGC,QAE3J+J,WAAWC,EAAM,GAGrB,SAASF,EAAiB/J,EAAWC,GACjCwJ,EAAYrC,SAAS7B,KAAO,IAAIwB,EAAM,IAAI,IAAQ/G,EAAGC,IACrDwJ,EAAYS,QAGhB,SAASD,IACLT,EAAaS,OACbR,EAAYQ,OACZnH,sBAAsBmH","file":"mandelbrot.bundle.js","sourcesContent":["import Vector from \"../common/3d/Vector\";\r\nimport { Color } from \"../common/Color\";\r\nimport * as C from './Constants';\r\n\r\nexport default class Rock {\r\n    Position: Vector;\r\n    Velocity: Vector;\r\n    Mass: number;\r\n    Color: Color;\r\n\r\n    constructor(pos: Vector, vel: Vector, mass: number, color: Color) {\r\n        this.Position = pos;\r\n        this.Velocity = vel;\r\n        this.Mass = mass;\r\n        this.Color = color;\r\n    }\r\n\r\n    applyGravitation(other: Rock) {\r\n        let gravVector = other.Position.subtract(this.Position);\r\n        const minlength = (this.Mass + other.Mass) * C.MASS_COLISION_SCALE;\r\n        const lengthSq = Math.max(gravVector.lengthSq() * C.LEN_SCALE_SQ, minlength * minlength);\r\n        let force = gravVector.normalize().multiply(other.Mass).multiply(C.G_CONST / lengthSq);\r\n        let accel = force.multiply(1/this.Mass);\r\n        this.Velocity = this.Velocity.add(accel);\r\n    }\r\n\r\n    finishTick() {\r\n        this.Position = this.Position.add(this.Velocity);\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, project: (v: Vector) => {x: number, y: number, depth: number}) {\r\n        ctx.save();\r\n        const { x, y, depth } = project(this.Position);\r\n        const colorScale = Math.max(Math.min(depth, 1), 0);\r\n        ctx.fillStyle = Color.rgb(this.Color.r() * colorScale, this.Color.g() * colorScale, this.Color.b() * colorScale).toString();\r\n        let size = C.SCALE_PER_MASS * this.Mass * depth;\r\n        size = Math.min(Math.max(size, 1), 100);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, size, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;\r\nexport const SCALE_PER_MASS = 2;\r\nexport const G_CONST = 60;\r\nexport const MASS_COLISION_SCALE = 3;\r\nexport const LEN_SCALE = 1;\r\nexport const LEN_SCALE_SQ = LEN_SCALE * LEN_SCALE;","import { VERSION } from '@microsoft/signalr';\r\nimport { Range } from '../common';\r\nimport Vector from '../common/3d/Vector';\r\nimport { ResizeCanvas } from '../common/CanvasHelpers';\r\nimport { Color } from '../common/Color';\r\nimport { unitRange } from '../common/Range';\r\nimport * as Const from './Constants';\r\nimport Rock from './rock';\r\n\r\nconst NUM_ROCKS = 50;\r\n\r\nconst MIN_POS = -100;\r\nconst MAX_POS = 100;\r\nconst MAX_V = 0.3;\r\nconst MIN_MASS = 1;\r\nconst MAX_MASS = 5;\r\n\r\nlet rocks: Rock[] = [];\r\n\r\nfunction randBetween(min: number, max: number){\r\n    return Math.random() * (max-min) + min;\r\n}\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n\r\n    ResizeCanvas(canvas, Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < NUM_ROCKS; i++){\r\n        rocks.push(new Rock(\r\n            new Vector(randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS)),\r\n            new Vector(randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V)),\r\n            randBetween(MIN_MASS, MAX_MASS),\r\n            Color.rgb(1, 1, 1)\r\n        ));\r\n    }\r\n\r\n    rocks.push(new Rock(new Vector( 0,0,0),\r\n    new Vector(0,0,0),\r\n    MAX_MASS * 5,\r\n    Color.rgb(1, 0, 0)));\r\n\r\n    loop(canvas.getContext('2d'));\r\n}\r\n\r\nfunction loop(ctx: CanvasRenderingContext2D) {\r\n    tick(ctx);\r\n    requestAnimationFrame(()=>loop(ctx));\r\n}\r\n\r\nfunction tick(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0,0,Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < rocks.length; i++) {\r\n        for(let j = 0; j < rocks.length; j++) {\r\n            if(i !== j) { \r\n                rocks[i].applyGravitation(rocks[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    let heaviest = rocks.reduce((m, c) => m.Mass >= c.Mass ? m : c);\r\n\r\n    rocks.forEach(rock => {\r\n        rock.Position = rock.Position.subtract(heaviest.Position);\r\n        rock.finishTick();\r\n    });\r\n    rocks.sort((a, b) => a.Position.z - b.Position.z);\r\n    rocks.forEach(rock => {\r\n        rock.paint(ctx, projectPosition);\r\n    });\r\n}\r\n\r\nconst windowRange: Range = new Range(0, Math.min(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT));\r\nconst worldRange: Range = new Range(MIN_POS, MAX_POS);\r\n\r\nfunction projectPosition(v: Vector): {x: number, y: number, depth: number} {\r\n    return {\r\n        x: worldRange.ConvertTo(v.x, windowRange),\r\n        y: worldRange.ConvertTo(v.y, windowRange),\r\n        depth: worldRange.ConvertTo(v.z, unitRange),\r\n    };\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { VERSION } from \"@microsoft/signalr\";\r\n\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}"],"sourceRoot":""}