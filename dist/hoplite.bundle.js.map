{"version":3,"file":"hoplite.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/Color.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/interpolation/Interpolated.ts","webpack://trading-game/./src/projects/common/interpolation/InterpolationFunction.ts","webpack://trading-game/./src/projects/common/interpolation/Keyframes.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/assets/floor_and_digits.png","webpack://trading-game/./src/projects/hoplite/assets/hp.png","webpack://trading-game/./src/projects/hoplite/assets/hoplite_impacts.png","webpack://trading-game/./src/projects/hoplite/assets/lava_layers.png","webpack://trading-game/./src/projects/common/rendering/Sprite.ts","webpack://trading-game/./src/projects/hoplite/Direction.ts","webpack://trading-game/./src/projects/hoplite/Hex.ts","webpack://trading-game/./src/projects/hoplite/HpRenderer.ts","webpack://trading-game/./src/projects/common/rendering/SpriteAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/EntityMoveAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/RenderableAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/SequentialAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ProjectileAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/AttackInfo.ts","webpack://trading-game/./src/projects/hoplite/Entity.ts","webpack://trading-game/./src/projects/hoplite/entities/Enemy.ts","webpack://trading-game/./src/projects/hoplite/entities/Zombie.ts","webpack://trading-game/./src/projects/common/rendering/DeltaRenderable.ts","webpack://trading-game/./src/projects/common/rendering/StackRenderable.ts","webpack://trading-game/./src/projects/hoplite/tiles/HexCell.ts","webpack://trading-game/./src/projects/hoplite/tiles/MultiPartCell.ts","webpack://trading-game/./src/projects/hoplite/animation/DelayAnimation.ts","webpack://trading-game/./src/projects/hoplite/animation/ParallelAnimation.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/TileAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/tiles/Lava.ts","webpack://trading-game/./src/projects/hoplite/entities/Archer.ts","webpack://trading-game/./src/projects/hoplite/entities/Mage.ts","webpack://trading-game/./src/projects/hoplite/attackInfos/RadialAreaAttackInfo.ts","webpack://trading-game/./src/projects/hoplite/entities/Giant.ts","webpack://trading-game/./src/projects/common/rendering/OffsetRenderable.ts","webpack://trading-game/./src/projects/hoplite/entities/StoneEye.ts","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/weapons/SimpleWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/PlayerWeapon.ts","webpack://trading-game/./src/projects/hoplite/weapons/Sword.ts","webpack://trading-game/./src/projects/hoplite/weapons/Dagger.ts","webpack://trading-game/./src/projects/hoplite/entities/Player.ts","webpack://trading-game/./src/projects/hoplite/GameState.ts","webpack://trading-game/./src/projects/hoplite/tiles/DownStairs.ts","webpack://trading-game/./src/projects/hoplite/phases/AnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AttackResolutionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/AfterMovePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyMovePhase.ts","webpack://trading-game/./src/projects/hoplite/tiles/Floor.ts","webpack://trading-game/./src/projects/hoplite/HexArray.ts","webpack://trading-game/./src/projects/hoplite/mapGen/FloorZeroGen.ts","webpack://trading-game/./src/projects/hoplite/DjikstraPath.ts","webpack://trading-game/./src/projects/hoplite/mapGen/MapGenCommon.ts","webpack://trading-game/./src/projects/hoplite/tiles/Trap.ts","webpack://trading-game/./src/projects/hoplite/mapGen/StandardMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/IMapGen.ts","webpack://trading-game/./src/projects/hoplite/mapGen/Floor12Gen.ts","webpack://trading-game/./src/projects/hoplite/phases/FloorTransitionPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerMoveAnimPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EnemyAttackPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/PlayerTurnGamePhase.ts","webpack://trading-game/./src/projects/hoplite/phases/EntryAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/phases/GameStartAnimationPhase.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { EvenlySpacedKeyframes, Keyframes } from './Keyframes';\r\nimport { InterpolationFunction } from \"./InterpolationFunction\";\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n\r\n    public static linear<T>(interpolator: InterpolationFunction<T>, ...args: T[]) {\r\n        return new Interpolated<T>(EvenlySpacedKeyframes<T>(interpolator, ...args), (t: number) => t);\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}\r\n\r\nexport class LinkedInterpolation<T> {\r\n    constructor(public timer: InterpolationTimer, public interp: Interpolated<T>) {\r\n\r\n    }\r\n\r\n    sample(): T {\r\n        return this.timer.sample(this.interp);\r\n    }\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(typeof(interpolator) !== 'function') {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        if(p === 0) return a;\r\n        if(p === 1) return b;\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from './Point';\r\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\r\n\r\nexport default class Rect {\r\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n    shift(x: number, y: number): Rect;\r\n    shift(p: Point): Rect;\r\n    shift(xp: number | Point, y?: number): Rect {\r\n        if (y === undefined) {\r\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\r\n        }\r\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\r\n    }\r\n\r\n    shiftBy(x: number, y: number): void;\r\n    shiftBy(p: Point): void;\r\n    shiftBy(xp: number | Point, y?: number): void {\r\n        if (y === undefined) {\r\n            this.x += (xp as Point).x;\r\n            this.y += (xp as Point).y;\r\n        } else {\r\n            this.x += (xp as number);\r\n            this.y += y;\r\n        }\r\n    }\r\n\r\n    edge(direction: ECardinalDirection): number {\r\n        switch (direction) {\r\n            case Direction.Up: return this.y;\r\n            case Direction.Down: return this.y + this.h;\r\n            case Direction.Left: return this.x;\r\n            case Direction.Right: return this.x + this.w;\r\n        }\r\n    }\r\n\r\n    corner(direction: EDiagonalDirection): Point {\r\n        switch (direction) {\r\n            case Direction.UpRight: return new Point(this.x, this.y);\r\n            case Direction.DownRight: return new Point(this.x, this.y);\r\n            case Direction.DownLeft: return new Point(this.x, this.y);\r\n            case Direction.UpLeft: return new Point(this.x, this.y);\r\n        }\r\n    }\r\n\r\n    equals(r: Rect) {\r\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport const TILE_WIDTH = 32;\r\nexport const TILE_HEIGHT = 32;\r\nexport const PIX_PER_CELL_X = 32;\r\nexport const PIX_PER_CELL_Y = new Point(16, 24);\r\n\r\nexport const TILE_SIZE = new Point(TILE_WIDTH, TILE_HEIGHT);\r\nexport const HALF_TILE_SIZE = new Point(TILE_WIDTH / 2, TILE_HEIGHT / 2);\r\n\r\nexport const MAP_SIZE = 7;\r\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\r\n\r\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);\r\n\r\nexport const PLAYER_START_POSITION = new Point(-2, 4);","export default __webpack_public_path__ + \"d4f5110b87c0d1ad71ce32f04ca66ca6.png\";","export default __webpack_public_path__ + \"b5124a83d98bc334e6e3de5f7e27e05f.png\";","export default __webpack_public_path__ + \"b78374db2fae35ea358c6a9e2b27ccd6.png\";","export default __webpack_public_path__ + \"32e154daf23aa2143678fc17a3bf88d3.png\";","export default __webpack_public_path__ + \"03a3f451813fb76552aa69688d48cdef.png\";","import Rect from \"../position/Rectangle\";\r\nimport { RotTransformCanvas } from \"../CanvasHelpers\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport default class Sprite implements IRenderable, ISimpleRenderable, IRenderableSource {\r\n\r\n    public origin: Point;\r\n\r\n    constructor(public source: CanvasImageSource, public sourceBounds: Rect, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        return this;\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.sourceBounds.w, this.sourceBounds.h);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return this;\r\n    }\r\n\r\n    public width() {\r\n        return this.sourceBounds.w;\r\n    }\r\n    public height() {\r\n        return this.sourceBounds.h;\r\n    }\r\n\r\n    tick(): boolean {\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, destination: Rect, rotation: number): void {\r\n        const oldTransform = ctx.getTransform();\r\n        RotTransformCanvas(ctx, destination.x, destination.y, this.origin.x, this.origin.y, rotation);\r\n        ctx.drawImage(this.source, \r\n            this.sourceBounds.x, \r\n            this.sourceBounds.y, \r\n            this.sourceBounds.w, \r\n            this.sourceBounds.h, \r\n            0, \r\n            0, \r\n            destination.w, \r\n            destination.h);\r\n        ctx.setTransform(oldTransform);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\nexport enum Direction {\r\n    Right = 0,\r\n    DownRight = 1,\r\n    DownLeft = 2,\r\n    Left = 3,\r\n    UpLeft = 4,\r\n    UpRight = 5\r\n}\r\n\r\nexport const AllDirections: Direction[] = [\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n    Direction.UpRight\r\n];\r\n\r\nexport class DirectionHelper {\r\n\r\n    public static ToAngle(direction: Direction): number {\r\n        return ((Math.PI * direction) / 3) - (Math.PI / 2);\r\n    }\r\n\r\n    public static ToPoint(direction: Direction): Point {\r\n        switch (direction) {\r\n            case Direction.Right: return new Point(1, 0);\r\n            case Direction.DownRight: return new Point(0, 1);\r\n            case Direction.DownLeft: return new Point(-1, 1);\r\n            case Direction.Left: return new Point(-1, 0);\r\n            case Direction.UpLeft: return new Point(0, -1);\r\n            case Direction.UpRight: return new Point(1, -1);\r\n        }\r\n    }\r\n\r\n    public static FromPoint(pt: Point): Direction {\r\n        if(pt.x > 0 && pt.y === 0) return Direction.Right;\r\n        if(pt.x < 0 && pt.y === 0) return Direction.Left;\r\n        if(pt.x === 0 && pt.y > 0) return Direction.DownRight;\r\n        if(pt.x === 0 && pt.y < 0) return Direction.UpLeft;\r\n        if(pt.x > 0 && pt.x === -pt.y) return Direction.UpRight;\r\n        if(pt.x < 0 && pt.x === -pt.y) return Direction.DownLeft;\r\n        return undefined;\r\n    }\r\n\r\n    public static Turn(direction: Direction, amount: number): Direction {\r\n        const result = (direction + amount)%6;\r\n        return (result + 6) % 6;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport { MAP_CENTER_POSITION, PIX_PER_CELL_X, PIX_PER_CELL_Y } from \"./Constants\";\r\nimport { Direction, DirectionHelper } from \"./Direction\";\r\n\r\nexport function TurnRight(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(-pt.y, pt.x + pt.y);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function TurnLeft(pt: Point, amt?: number) {\r\n    for(let i = 0; i < (amt ?? 1); i++){\r\n        pt = new Point(pt.x + pt.y, -pt.x);\r\n    }\r\n    return pt;\r\n}\r\n\r\nexport function HexToPixel(point: Point) {\r\n    return Point.add(Point.multiply(PIX_PER_CELL_Y, point.y), point.x * PIX_PER_CELL_X + MAP_CENTER_POSITION.x, MAP_CENTER_POSITION.y);\r\n}\r\n\r\nexport function PixelToHex(point: Point) {\r\n    let tilesY = point.y / PIX_PER_CELL_Y.y;\r\n    let tilesX = (point.x - (tilesY * PIX_PER_CELL_Y.x)) / PIX_PER_CELL_X;\r\n    return new Point(tilesX, tilesY);\r\n}\r\n\r\nexport function HexLength(point: Point): number {\r\n    if(Math.sign(point.x) === - Math.sign(point.y)) {\r\n        return Math.max(Math.abs(point.x), Math.abs(point.y));\r\n    }\r\n    else {\r\n        return Math.abs(point.x) + Math.abs(point.y);\r\n    }\r\n}\r\n\r\nexport function GetRing(radius: number) {\r\n    if(radius === 0) return [new Point(0,0)];\r\n\r\n    const result: Point[] = [];\r\n    let pos = new Point(0, -radius);\r\n    \r\n    for(var direction = Direction.Right; direction <= Direction.UpRight; direction++) {\r\n        var dir = DirectionHelper.ToPoint(direction);\r\n        for(var len = 0; len < radius; len++){\r\n            result.push(pos);\r\n            pos = Point.add(pos, dir);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"./Hex\";\r\n\r\nconst originDelta = new Point(8, 26);\r\n\r\nconst deltaX = 3;\r\nconst deltaY = -2;\r\n\r\nconst maxTilesPerRow = 5;\r\n\r\nexport default class HpRenderer {\r\n    private emptyHpImage: Sprite;\r\n    private redHpImage: Sprite;\r\n    private yellowHpImage: Sprite;\r\n    private blueHpImage: Sprite;\r\n    constructor(image: ImageLoader) {\r\n        this.emptyHpImage = new Sprite(image.image, new Rect(0, 0, 4, 5));\r\n        this.redHpImage = new Sprite(image.image, new Rect(3, 0, 4, 5));\r\n        this.yellowHpImage = new Sprite(image.image, new Rect(6, 0, 4, 5));\r\n        this.blueHpImage = new Sprite(image.image, new Rect(9, 0, 4, 5));\r\n    }\r\n\r\n    public draw(ctx:CanvasRenderingContext2D, pos: Point, hp: number, maxHp: number) {\r\n        const rows = Math.ceil(maxHp / maxTilesPerRow);\r\n        let lastRowLength = maxHp % maxTilesPerRow;\r\n        if(lastRowLength === 0) { lastRowLength = maxTilesPerRow; }\r\n\r\n        const fullImage = hp <= maxHp / 4 ? this.redHpImage : hp <= maxHp / 2 ? this.yellowHpImage : this.blueHpImage;\r\n        const emptyImage = this.emptyHpImage;\r\n\r\n        let originPoint = Point.add(HexToPixel(pos), originDelta);\r\n\r\n        for(let row = 0; row < rows - 1; row++) {\r\n            const dy = (rows - row - 1) * deltaY;\r\n            for(let col = 0; col < maxTilesPerRow; col++) {\r\n                let image = hp <= 0 ? emptyImage : fullImage;\r\n                hp--;\r\n                image.draw(ctx, new Rect(originPoint.x + col * deltaX, originPoint.y + dy, 4, 5), 0);\r\n            }\r\n        }\r\n\r\n        // last row\r\n        const lastRowDx = (maxTilesPerRow - lastRowLength) * deltaX / 2;\r\n        for(let col = 0; col < lastRowLength; col++){\r\n            let image = hp <= 0 ? emptyImage : fullImage;\r\n            hp--;\r\n            image.draw(ctx, new Rect(originPoint.x + col * deltaX + lastRowDx, originPoint.y , 4, 5), 0);\r\n        }\r\n    }\r\n}","import Rect from \"../position/Rectangle\";\r\nimport Point from \"../position/Point\";\r\nimport IRenderable, { ISimpleRenderable } from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\nimport Sprite from \"./Sprite\";\r\n\r\nexport class SpriteAnimation implements IRenderableSource {\r\n    constructor(\r\n        public source: CanvasImageSource,\r\n        public firstFrame: Rect, \r\n        public origin: Point,\r\n        public frameAdvance: Point,\r\n        public numFrames: number,\r\n        public duration: number,\r\n        public loop: boolean) {\r\n\r\n    }\r\n\r\n    getPixelSize(): Point {\r\n        return new Point(this.firstFrame.w, this.firstFrame.y);\r\n    }\r\n\r\n    getRenderable(): IRenderable {\r\n        return new SpriteAnimationInstance(this, this.loop);\r\n    }\r\n\r\n    getSprite(frameNumber: number): Sprite {\r\n        const frame = new Rect(\r\n            this.firstFrame.x + (frameNumber * this.frameAdvance.x),\r\n            this.firstFrame.y + (frameNumber * this.frameAdvance.y),\r\n            this.firstFrame.w,\r\n            this.firstFrame.h\r\n        );\r\n        return new Sprite(this.source, frame, this.origin);\r\n    }\r\n}\r\n\r\nexport class SpriteAnimationInstance implements ISimpleRenderable, IRenderable {\r\n\r\n    private duration: number;\r\n    private currentTick: number;\r\n\r\n    constructor(public source: SpriteAnimation, public loop: boolean, private overrideDuration?: number) {\r\n        this.duration = overrideDuration ?? source.duration;\r\n        this.currentTick = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTick++;\r\n        if(this.currentTick === this.duration) {\r\n            if(this.loop) this.currentTick = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getSprite(): Sprite {\r\n        const frameNumber = (this.currentTick * this.source.numFrames) / this.duration;\r\n        return this.source.getSprite(Math.floor(frameNumber));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rect, rotation: number): void {\r\n        this.getSprite().draw(ctx, position, rotation);\r\n    }\r\n}","import { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Entity from \"../Entity\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class EntityMoveAnimation implements IAnimation {\r\n    private timer: InterpolationTimer;\r\n    constructor(private entity: Entity, private motion: Interpolated<Point>, private target: Point, private duration: number) {\r\n        this.timer = new InterpolationTimer(duration);\r\n    }\r\n\r\n    tick(): boolean{ \r\n        if(this.timer.tick()) {\r\n            this.entity.position = this.target;\r\n            return true;\r\n        }\r\n        this.entity.position = this.timer.sample(this.motion);\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        // The gamestate drawing will draw this entity. No need to draw it twice.\r\n        // this.entity.draw(ctx);\r\n    }\r\n}","import Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IAnimation from \"./IAnimation\";\r\n\r\nexport default class RenderableAnimation implements IAnimation {\r\n    private rotation: number;\r\n    constructor(private renderable: IRenderable, private bounds: Rect, rotation?: number, private fixedDuraiton?: number) {\r\n        this.rotation = rotation ?? 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.fixedDuraiton !== undefined) {\r\n            this.fixedDuraiton--;\r\n            if(this.fixedDuraiton === -1) return true;\r\n            this.renderable.tick();\r\n            return false;\r\n        }\r\n        return this.renderable.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.renderable.draw(ctx, this.bounds, this.rotation);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class SequentialAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.steps.length === 0) return true;\r\n        \r\n        while(this.steps[0].tick()){\r\n            this.steps.shift();\r\n            if(this.steps.length === 0) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        this.steps[0].draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IAnimation from \"./IAnimation\";\r\nimport RenderableAnimation from \"./RenderableAnimation\";\r\nimport SequentialAnimation from \"./SequentialAnimation\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class ProjectileAnimation implements IAnimation {\r\n\r\n    private angle: number;\r\n    private time: number;\r\n    constructor(private renderable: IRenderable, private size: Point, private fromPixel: Point, private toPixel: Point, private duration: number) {\r\n        this.angle = Math.atan2(toPixel.y - fromPixel.y, toPixel.x - fromPixel.x);\r\n        this.time = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.time++;\r\n        return this.time >= this.duration;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const position = Point.interpolate(this.fromPixel, this.toPixel, this.time / this.duration);\r\n        const destination = new Rect(position.x, position.y, this.size.x, this.size.y);\r\n        this.renderable.draw(ctx, destination, this.angle);\r\n    }\r\n}\r\n\r\nexport function CreateProjectileAnimation(projectile: Sprite, fromHex: Point, toHex: Point, duration: number, onImpact: IRenderableSource): IAnimation {\r\n    const destPt = HexToPixel(toHex);\r\n    const projAnimation = new ProjectileAnimation(projectile, projectile.getPixelSize(), Point.add(HexToPixel(fromHex), C.HALF_TILE_SIZE), Point.add(destPt, C.HALF_TILE_SIZE), duration);\r\n    if(onImpact !== null) {\r\n        const impactAnimation = new RenderableAnimation(onImpact.getRenderable(), new Rect(destPt.x, destPt.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        return new SequentialAnimation([projAnimation, impactAnimation]);\r\n    }\r\n    return projAnimation;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport Entity from \"../Entity\";\r\nimport * as C from \"../Constants\";\r\nimport { HexLength, HexToPixel } from \"../Hex\";\r\nimport { Interpolated, InterpolationTimer, LinkedInterpolation } from \"../../common/interpolation/Interpolated\";\r\nimport { CreateProjectileAnimation } from \"../animation/ProjectileAnimation\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\n\r\nconst BUMP_ANIMATION_TIME = 10;\r\nconst PROJECTILE_TIME = 6;\r\n\r\nexport default class AttackInfo implements IAttackInfo {\r\n    public startPoint: Point;\r\n    constructor(public attacker: Entity, public target: Point, public affectedTiles: Point[], public damage: number, public bumpAnimation: boolean, public impactAnimation: IRenderableSource, public projectile: Sprite, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        this.startPoint = attacker.position;\r\n    }\r\n\r\n    static basicAttack(attacker: Entity, target: Entity, damage: number) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, true, null, null);\r\n    }\r\n\r\n    static animationAttack(attacker: Entity, target: Entity, damage: number, impactAnimation: IRenderableSource, bumpAnimation?: boolean) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, bumpAnimation??false, impactAnimation, null);\r\n    }\r\n\r\n    static projectileAttack(attacker:Entity, target: Entity, damage: number, projectile: Sprite, impactAnimation?: IRenderableSource) {\r\n        return new AttackInfo(attacker, target.position, [target.position], damage, false, impactAnimation ?? null, projectile);\r\n    }\r\n    \r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return [{damage: this.damage, positions: this.affectedTiles, ignorePlayer: this.ignorePlayer, ignoreEnemies: this.ignoreEnemies}];\r\n    }\r\n\r\n    toAnimations():IAnimation[] {\r\n        let animations:IAnimation[] = [];\r\n        if(this.bumpAnimation) {\r\n            animations.push(new EntityMoveAnimation(\r\n                this.attacker, \r\n                Interpolated.linear<Point>(Point.interpolate, \r\n                    this.attacker.position, \r\n                    Point.interpolate(this.attacker.position, this.target, 1/2), \r\n                    this.attacker.position), \r\n                this.attacker.position, \r\n                BUMP_ANIMATION_TIME * HexLength(Point.subtract(this.startPoint, this.target))));\r\n        }\r\n        if(this.projectile) {\r\n            const time = PROJECTILE_TIME * HexLength(Point.subtract(this.startPoint, this.target));\r\n            return [CreateProjectileAnimation(this.projectile, this.startPoint, this.target, time, this.impactAnimation)];\r\n        }\r\n        if(this.impactAnimation) {\r\n            const pixTarget = HexToPixel(this.target);\r\n            animations.push(new RenderableAnimation(this.impactAnimation.getRenderable(), new Rect(pixTarget.x, pixTarget.y, C.TILE_WIDTH, C.TILE_HEIGHT)));\r\n        }\r\n        return animations;\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport IRenderable from \"../common/rendering/IRenderable\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport * as C from './Constants';\r\nimport Player from \"./entities/Player\";\r\n\r\nexport default abstract class Entity {\r\n    isFlying: boolean;\r\n    maxHp: number;\r\n    hp: number;\r\n    position: Point;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n\r\n    static IsPlayer(entity: Entity): entity is Player {\r\n        return (entity as Player).primary !== undefined;\r\n    }\r\n}\r\n\r\nexport abstract class SimpleEnemy extends Entity {\r\n    abstract getRenderable() : IRenderable;\r\n    override draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n        this.getRenderable().draw(ctx, rect, 0);\r\n    } \r\n}","import Point from \"../../common/position/Point\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { SimpleEnemy } from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class Enemy extends SimpleEnemy {\r\n\r\n    goldValue: number;\r\n    lastAttacks: IAttackInfo[];\r\n\r\n    abstract getAttacks(state: GameState): IAttackInfo[];\r\n    abstract getMove(state: GameState, attack: IAttackInfo[], disallow: Point[]): Point;\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nexport default class Zombie extends Enemy {\r\n    static sprite: IRenderable;\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Zombie.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(0, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        )\r\n    }\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n        \r\n        this.goldValue = 1;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len === 1) {\r\n            return [AttackInfo.basicAttack(this, state.player, 1)];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return Zombie.sprite;\r\n    }\r\n}","import { Interpolated, InterpolationTimer } from \"../interpolation/Interpolated\";\r\nimport Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\nimport IRenderableSource from \"./IRenderableSource\";\r\n\r\nexport class DeltaRenderable implements IRenderable {\r\n    constructor(private source: IRenderable, public delta: Rectangle) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, new Rectangle(position.x + this.delta.x * position.w, position.y + this.delta.y * position.h, position.w * this.delta.w, position.h * this.delta.h), rotation);\r\n    }\r\n}","import Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport class StackRenderable implements IRenderable {\r\n\r\n    public finishMode: 'any'|'all';\r\n\r\n    constructor(public renderables: IRenderable[], renderableFinishMode?: 'any'|'all') {\r\n        this.finishMode = renderableFinishMode ?? 'any';\r\n    }\r\n\r\n    tick(): boolean {\r\n        let allFinished = true;\r\n        let anyFinished = false;\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            const f = this.renderables[i].tick();\r\n            allFinished = allFinished && f;\r\n            anyFinished = anyFinished || f;\r\n        }\r\n        return this.finishMode === 'any' ? anyFinished : allFinished;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        for(let i = 0; i < this.renderables.length; i++) {\r\n            this.renderables[i].draw(ctx, position, rotation);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport * as C from \"../Constants\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\n\r\nexport default abstract class HexCell {\r\n    isPathable: boolean;\r\n    typeId: number;\r\n\r\n    constructor(typeId: number, pathable: boolean){\r\n        this.typeId = typeId;\r\n        this.isPathable = pathable;\r\n    }\r\n\r\n    AfterPlayerTurn(state: GameState, x: number, y: number): IAttackInfo[] { return []; }\r\n    AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] { return []; }\r\n\r\n    abstract OnEntityStep(entity: Entity): void;\r\n    abstract AfterWorldLoad(world: GameState, pt: Point): void;\r\n    abstract draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void;\r\n}\r\n\r\nexport abstract class SimpleCell extends HexCell{\r\n\r\n    protected renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n\r\n    constructor(typeId: number, assets: Assets, spriteSheetPosition: Point, isPathable: boolean, includeDefaultRenderable?: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.bg_renderable = \r\n            new DeltaRenderable(\r\n                new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT)),\r\n                new Rect(0, .75, 1, 1)\r\n            );\r\n\r\n        if(includeDefaultRenderable === true) {\r\n            this.bg_renderable = new StackRenderable(\r\n                [this.bg_renderable, new Sprite(assets.tiles.image, new Rect(0, 0, C.TILE_WIDTH, C.TILE_HEIGHT))]\r\n            );\r\n        }\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(spriteSheetPosition.x * C.TILE_WIDTH, spriteSheetPosition.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        \r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport * as C from \"../Constants\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport HexCell from \"./HexCell\";\r\nimport { AllDirections, Direction, DirectionHelper } from \"../Direction\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\n\r\ninterface ITilePart {\r\n    directions: Direction[];\r\n    tileCoords: Point;\r\n    tileSlice: Rect;\r\n}\r\n\r\nconst tileParts: ITilePart[] = [\r\n    {\r\n        // Top of Tile\r\n        directions: [Direction.UpLeft, Direction.UpRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0, 1, 0.5),\r\n    },\r\n    {\r\n        // Bottom of Tile\r\n        directions: [Direction.DownLeft, Direction.DownRight],\r\n        tileCoords: new Point(0, 0),\r\n        tileSlice: new Rect(0, 0.5, 1, 0.5),\r\n    }, \r\n    {\r\n        // TopLeft of Tile\r\n        directions: [Direction.Left, Direction.UpLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // TopRight of Tile\r\n        directions: [Direction.Right, Direction.UpRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect( 0.5, 0, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomLeft of Tile\r\n        directions: [Direction.Left, Direction.DownLeft],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0, 0.5, 0.5, 0.5),\r\n    },\r\n    {\r\n        // BottomRight of Tile\r\n        directions: [Direction.Right, Direction.DownRight],\r\n        tileCoords: new Point(0, 1),\r\n        tileSlice: new Rect(0.5, 0.5, 0.5, 0.5),\r\n    }\r\n]\r\n\r\nexport function StitchTileParts(source: CanvasImageSource, tx: number, ty: number, tw: number, th: number, isEdge: (dir: Direction) => boolean){\r\n    const adjacencyMap = AllDirections.map(isEdge);\r\n\r\n    const images = tileParts.map(part => {\r\n        const index = part.directions.reduceRight((acc, dir) => (acc << 1) + (adjacencyMap[dir] ? 1 : 0), 0);\r\n        const sourceBounds = new Rect(\r\n            (part.tileCoords.x + index + part.tileSlice.x + tx) * tw,\r\n            (part.tileCoords.y + part.tileSlice.y + ty) * th,\r\n            (part.tileSlice.w) * tw,\r\n            (part.tileSlice.h) * th\r\n        );\r\n        return new DeltaRenderable(\r\n            new Sprite(source, sourceBounds),\r\n            part.tileSlice\r\n        );\r\n    });\r\n\r\n    return new StackRenderable(\r\n        images,\r\n        'all'\r\n    );\r\n}\r\n\r\nexport default abstract class MultiPartCell extends HexCell {\r\n    private renderable: IRenderable;\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(typeId: number, assets: Assets, private spriteSheetPosition: Point, isPathable: boolean){\r\n        super(typeId, isPathable);\r\n\r\n        this.assets = assets;\r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        this.renderable = StitchTileParts(this.assets.tiles.image, this.spriteSheetPosition.x, this.spriteSheetPosition.y, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.renderable.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class DelayAnimation implements IAnimation {\r\n\r\n    constructor(private inner: IAnimation, private delay: number) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        if(this.delay === 0) return this.inner.tick();\r\n        else {\r\n            this.delay --;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        if(this.delay === 0) {\r\n            return this.inner.draw(ctx);\r\n        }\r\n    }\r\n\r\n}","import IAnimation from \"./IAnimation\";\r\n\r\nexport default class ParallelAnimation implements IAnimation {\r\n    constructor(private steps: IAnimation[]) {\r\n\r\n    }\r\n\r\n    tick(): boolean {\r\n        for(let i = this.steps.length - 1; i >= 0; i--) {\r\n            if(this.steps[i].tick()) {\r\n                this.steps.splice(i, 1);\r\n            }\r\n        }\r\n        return this.steps.length === 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(const step of this.steps) {\r\n            step.draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class TileAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private infos: IAttackDamageInfo[], private delayPerDist: number, private animationSource: IRenderableSource) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return this.infos;\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        const innerAnimations: IAnimation[] = [];\r\n        const allPts = this.infos.reduce((acc, info) => acc.concat(info.positions), []);\r\n\r\n        return [\r\n            new ParallelAnimation(\r\n                allPts.map(pt => {\r\n                    const dist = HexLength(Point.subtract(pt, this.point));\r\n                    const delay = this.delayPerDist * dist;\r\n                    const pix = HexToPixel(pt);\r\n                    return new DelayAnimation(\r\n                        new RenderableAnimation(\r\n                            this.animationSource.getRenderable(),\r\n                            new Rect(pix.x, pix.y, C.TILE_WIDTH, C.TILE_HEIGHT)), \r\n                        delay);\r\n                })\r\n            )\r\n        ];\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport { StackRenderable } from \"../../common/rendering/StackRenderable\";\r\nimport Assets from \"../Assets\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport HexCell from \"./HexCell\";\r\nimport MultiPartCell, { StitchTileParts } from \"./MultiPartCell\";\r\nimport * as C from \"../Constants\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\n\r\nexport default class Lava extends HexCell {\r\n    public static TypeID = 1;\r\n\r\n    private lavaStatic: IRenderable;\r\n    private lavaOverlay: IRenderable;\r\n\r\n    private bg_renderable: IRenderable;\r\n    private assets: Assets;\r\n\r\n    constructor(assets: Assets) {\r\n        super(Lava.TypeID, false);\r\n        this.assets = assets;\r\n        \r\n        this.bg_renderable = new Sprite(assets.tiles.image, new Rect(11 * C.TILE_WIDTH, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    override AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] {\r\n        const steppingEnemy = state.enemies.find(e => e.position.x == x && e.position.y == y);\r\n        if(steppingEnemy !== undefined && !steppingEnemy.isFlying){\r\n            return [\r\n                new TileAttackInfo(new Point(x, y), [{ damage: 999, positions: [new Point(x,y)] }], 0, this.assets.getImpactAnimation(2))\r\n            ]\r\n        }\r\n        return [];\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n\r\n    override AfterWorldLoad(world: GameState, pt: Point): void {\r\n        this.lavaStatic = StitchTileParts(this.assets.lavaLayers.image, 0, 0, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        this.lavaOverlay = StitchTileParts(this.assets.lavaLayers.image, 0, 2, C.TILE_WIDTH, C.TILE_HEIGHT, (d:Direction) => {\r\n            const hexPt = Point.add(pt, DirectionHelper.ToPoint(d));\r\n            if(world.tiles.isInBounds(hexPt.x, hexPt.y)) {\r\n                return world.tiles.get(pt).typeId !== world.tiles.get(hexPt).typeId;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    override draw(ctx: CanvasRenderingContext2D, world: GameState, pt: Point): void {\r\n        let target = HexToPixel(pt);\r\n\r\n        this.bg_renderable.draw(ctx, new Rect(target.x, target.y + 24, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n        this.lavaStatic.draw(ctx, new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n\r\n        let overlayWaver = Math.round(Math.sin(world.renderTickNumber / 15 + pt.x/2) * 1.5);\r\n        this.lavaOverlay.draw(ctx, new Rect(target.x, target.y + overlayWaver, C.TILE_WIDTH, C.TILE_HEIGHT), 0);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Archer extends Enemy {\r\n    static sprite: IRenderable;\r\n    static fearsprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Archer.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n\r\n        Archer.fearsprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(C.TILE_WIDTH, 11 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n\r\n        Archer.projectileSprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(178, 96, 14, 4),\r\n            new Point(7, 2),\r\n        );\r\n\r\n        Archer.impactAnimation = assets.getImpactAnimation(1);\r\n    }\r\n\r\n\r\n    isAfraid: boolean;\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n        this.isAfraid = false;\r\n        \r\n        this.goldValue = 3;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len > 1 && len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Archer.projectileSprite, Archer.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            this.isAfraid = false;\r\n            return this.position;\r\n        }\r\n\r\n        let deltaPlayer = Point.subtract(state.player.position, this.position);\r\n        // IF the player is one hex away, the archer will become \"Afraid\" and run directly away.\r\n        // If they can't move away, they won't move. This makes them easier to catch.\r\n        // You can also scare them into lava, which is unhealthy.\r\n        if(HexLength(deltaPlayer) === 1) {\r\n            this.isAfraid = true;\r\n            \r\n            let targetPosition = Point.subtract(this.position, deltaPlayer);\r\n            const tile = state.tiles.isInBounds(targetPosition.x, targetPosition.y) ? state.tiles.get(targetPosition) : undefined;\r\n            if(tile === undefined || targetPosition.equals(state.player.position)) { \r\n                return this.position; \r\n            }\r\n            if(!tile.isPathable && tile.typeId !== Lava.TypeID) {\r\n                 // If the tile isn't pathable don't move\r\n                 // We DO allow archers to run into lava if they're afraid.\r\n                return this.position;\r\n            }\r\n            if(disallowed.some(p => p.equals(targetPosition))) {\r\n                return this.position;\r\n            }\r\n\r\n            return targetPosition;\r\n        } else {\r\n            this.isAfraid = false;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.isAfraid) {\r\n            return Archer.fearsprite;\r\n        }\r\n        return Archer.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Mage extends Enemy {\r\n    static sprite: IRenderable;\r\n    static cooldownsprite: IRenderable;\r\n    static projectileSprite: Sprite;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Mage.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(2 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n        Mage.cooldownsprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(2 * C.TILE_WIDTH, 11 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n        );\r\n\r\n        Mage.projectileSprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(178, 100, 14, 4),\r\n            new Point(7, 2),\r\n        );\r\n\r\n        Mage.impactAnimation = assets.getImpactAnimation(2);\r\n    }\r\n\r\n    attackOnCooldown: boolean;\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 1;\r\n        this.isFlying = false;\r\n\r\n        this.goldValue = 5;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.attackOnCooldown){\r\n            return [];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            if(ray.x === 0 || ray.y === 0 || ray.x === -ray.y) {\r\n                let delta = new Point(Math.sign(ray.x), Math.sign(ray.y));\r\n                let nextPt = Point.add(delta, this.position);\r\n                while(!nextPt.equals(playerLocation)) {\r\n                    if(state.entityAt(nextPt) !== undefined) {\r\n                        return []; // Can't shoot through entities\r\n                    }\r\n                    nextPt = Point.add(delta, nextPt);\r\n                }\r\n                this.attackOnCooldown = true;\r\n                return [AttackInfo.projectileAttack(this, state.player, 1, Mage.projectileSprite, Mage.impactAnimation)];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        if(this.attackOnCooldown) {\r\n            // Don't move if you're on cooldown\r\n            this.attackOnCooldown = false;\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            // // Mages COULD be smarter by trying to avoid ending up directly next to the player, but doing so makes them a little bit too strong.\r\n            // if(len === 1) {\r\n            //     continue;\r\n            // }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.attackOnCooldown) return Mage.cooldownsprite;\r\n        return Mage.sprite;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport DelayAnimation from \"../animation/DelayAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport RenderableAnimation from \"../animation/RenderableAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexToPixel } from \"../Hex\";\r\nimport IAttackInfo, { IAttackDamageInfo } from \"./IAttackInfo\";\r\nimport * as C from '../Constants';\r\n\r\nexport default class RadialAreaAttackInfo implements IAttackInfo {\r\n    constructor(private point: Point, private rings: {radius: number, damage: number}[], private delayPerRadius: number, private animationSource: IRenderableSource, public ignoreEnemies?: boolean, public ignorePlayer?: boolean) {\r\n        \r\n    }\r\n\r\n    getAffectedTiles(state: GameState): IAttackDamageInfo[] {\r\n        return this.rings.map(ring => {\r\n            return {\r\n                damage: ring.damage,\r\n                positions: GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y)),\r\n                ignoreEnemies: this.ignoreEnemies,\r\n                ignorePlayer: this.ignorePlayer\r\n            };\r\n        });\r\n    }\r\n\r\n    toAnimations(state: GameState): IAnimation[] {\r\n        const innerAnimations: IAnimation[] = [];\r\n        for(const ring of this.rings) {\r\n            const points = GetRing(ring.radius).map(p => Point.add(p, this.point)).filter(pt => state.tiles.isInBounds(pt.x, pt.y))\r\n            innerAnimations.push(\r\n                new DelayAnimation(new ParallelAnimation(\r\n                    points.map(point => new RenderableAnimation(this.animationSource.getRenderable(), new Rect(HexToPixel(point).x, HexToPixel(point).y, C.TILE_WIDTH, C.TILE_HEIGHT))),\r\n                ), ring.radius * this.delayPerRadius)\r\n            );\r\n        }\r\n\r\n        return [new ParallelAnimation(innerAnimations)];\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { DeltaRenderable } from \"../../common/rendering/DeltaRenderable\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport RadialAreaAttackInfo from \"../attackInfos/RadialAreaAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class Giant extends Enemy {\r\n    static renderable: IRenderable;\r\n    static bigAttackPrepImage: IRenderable;\r\n    static radialSmashAnimation: IRenderableSource;\r\n\r\n    static turnSequence: ('move'|'skip'|'smashPrep'|'smash')[] = [\r\n        'move', 'move', 'skip', 'move', 'smashPrep', 'smash'\r\n    ];\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        Giant.renderable = new DeltaRenderable(new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(7 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT * 2),\r\n        ), new Rect(0, -1, 1, 2));\r\n\r\n        Giant.bigAttackPrepImage = new DeltaRenderable(new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(8 * C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT * 2),\r\n        ), new Rect(0, -1, 1, 2));\r\n\r\n        this.radialSmashAnimation = assets.getImpactAnimation(3);\r\n    }\r\n\r\n    turnSequenceIndex: number;\r\n    lastTurn: ('move'|'skip'|'smashPrep'|'smash');\r\n\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 12;\r\n        this.isFlying = false;\r\n        this.turnSequenceIndex = Math.floor(Math.random() * Giant.turnSequence.length);\r\n        this.lastTurn = Giant.turnSequence[this.turnSequenceIndex === 0 ? Giant.turnSequence.length - 1 : this.turnSequenceIndex - 1];\r\n\r\n        this.goldValue = 15;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        switch(turn) {\r\n            case 'move':\r\n                const playerLocation = state.player.position;\r\n                const len = HexLength(Point.subtract(playerLocation, this.position));\r\n                if(len === 1) {\r\n                    return [AttackInfo.basicAttack(this, state.player, 3)];\r\n                }\r\n                return [];\r\n            case 'skip':\r\n            case 'smashPrep':\r\n                return [];\r\n            case 'smash':\r\n                return [new RadialAreaAttackInfo(this.position, [{radius: 1, damage: 3}, {radius: 2, damage: 1}], 8, Giant.radialSmashAnimation, true)];\r\n            default: return [];\r\n        }\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        const turn = Giant.turnSequence[this.turnSequenceIndex];\r\n        this.turnSequenceIndex = (this.turnSequenceIndex + 1) % Giant.turnSequence.length;\r\n        this.lastTurn = turn;\r\n\r\n        switch(turn) {\r\n            case 'move':\r\n                if(attack.length > 0) return this.position;\r\n                return this.internalGetMove(state, disallowed);\r\n            case 'smash':\r\n                // The giant is allowed to move immediately after the smash attack.\r\n                return this.internalGetMove(state, disallowed);\r\n            default:\r\n                return this.position;\r\n        }\r\n\r\n    }\r\n\r\n    private internalGetMove(state: GameState, disallowed: Point[]): Point {\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], false)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        return this.lastTurn === 'smashPrep' ? Giant.bigAttackPrepImage : Giant.renderable;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport Rectangle from \"../position/Rectangle\";\r\nimport IRenderable from \"./IRenderable\";\r\n\r\nexport default class OffsetRenderable implements IRenderable {\r\n\r\n    constructor(private source: IRenderable, public offset: Point, public rotation?: number) {\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.source.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Rectangle, rotation: number): void {\r\n        this.source.draw(ctx, position.shift(this.offset.x, this.offset.y), rotation + (this?.rotation ?? 0));\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport OffsetRenderable from '../../common/rendering/OffsetRenderable';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport * as C from \"../Constants\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { GetRing, HexLength } from \"../Hex\";\r\nimport Enemy from \"./Enemy\";\r\n\r\nconst MAX_RANGE = 5;\r\n\r\nexport default class StoneEye extends Enemy {\r\n    static sprite: IRenderable;\r\n    static impactAnimation: IRenderableSource;\r\n\r\n    static onAssetsLoaded(assets:Assets) {\r\n        StoneEye.sprite = new Sprite(\r\n            assets.tiles.image,\r\n            new Rect(4*C.TILE_WIDTH, 10 * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT),\r\n            new Point(C.TILE_WIDTH / 2, C.TILE_HEIGHT / 2),\r\n        );\r\n\r\n        StoneEye.impactAnimation = assets.getImpactAnimation(2);\r\n    }\r\n\r\n    prepFire: Direction|undefined;\r\n    constructor(position: Point) {\r\n        super(position);\r\n        this.hp = this.maxHp = 3;\r\n        this.isFlying = true;\r\n        this.prepFire = undefined;\r\n\r\n        this.goldValue = 5;\r\n    }\r\n\r\n    getAttacks(state: GameState): IAttackInfo[] {\r\n        if(this.prepFire !== undefined) {\r\n            const points: Point[] = [];\r\n            const delta = DirectionHelper.ToPoint(this.prepFire);\r\n            let pt = Point.add(this.position, delta);\r\n            for(let i = 0; i < MAX_RANGE && state.tiles.isInBounds(pt.x, pt.y); i++) {\r\n                points.push(pt);\r\n                pt = Point.add(pt, delta);\r\n            }\r\n            this.prepFire = undefined;\r\n            return [new TileAttackInfo(this.position, [{damage: 1, positions: points}], 4, StoneEye.impactAnimation)];\r\n        }\r\n\r\n        const playerLocation = state.player.position;\r\n        const len = HexLength(Point.subtract(playerLocation, this.position));\r\n        if(len <= MAX_RANGE) {\r\n            let ray = Point.subtract(playerLocation, this.position);\r\n            this.prepFire = DirectionHelper.FromPoint(ray);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getMove(state: GameState, attack: IAttackInfo[], disallowed: Point[]): Point {\r\n        if(attack.length > 0 || (this.prepFire !== undefined)) {\r\n            // Don't move if you've attacked.\r\n            return this.position;\r\n        }\r\n\r\n        const possibleMoves = GetRing(1).map(rp => Point.add(this.position, rp));\r\n        let minMoves: Point[] = [];\r\n        let minMoveDist = 99;\r\n        for(let i = 0; i < possibleMoves.length; i++) {\r\n            if(!state.isValidMoveIgnoreEnemies(possibleMoves[i], true)) \r\n                continue;\r\n            if(disallowed.some(p => p.equals(possibleMoves[i])))\r\n                continue;\r\n\r\n            const ray = Point.subtract(state.player.position, possibleMoves[i]);\r\n            const len = HexLength(ray);\r\n            if(len === 1) {\r\n                continue; // Dont move within 1 of the player if you can avoid it.\r\n            }\r\n            if(len < minMoveDist) { \r\n                minMoveDist = len;\r\n                minMoves = [possibleMoves[i]];\r\n            }\r\n            else if(len === minMoveDist) {\r\n                minMoves.push(possibleMoves[i]);\r\n            }\r\n        }\r\n\r\n        // Don't retreat\r\n        if(minMoveDist > HexLength(Point.subtract(state.player.position, this.position))) {\r\n            return this.position;\r\n        }\r\n\r\n        if(minMoves.length === 0) return this.position;\r\n        return minMoves[Math.floor(Math.random() * minMoves.length)];\r\n    }\r\n\r\n    override getRenderable(): IRenderable {\r\n        if(this.prepFire !== undefined) {\r\n            return new OffsetRenderable(StoneEye.sprite, new Point(C.TILE_WIDTH/2, C.TILE_HEIGHT/2), DirectionHelper.ToAngle(this.prepFire));\r\n        }\r\n\r\n        // The origin of the eye sprite is the center (to support rotation), so we need to offset it\r\n        return new OffsetRenderable(StoneEye.sprite, new Point(C.TILE_WIDTH/2, C.TILE_HEIGHT/2));\r\n    }\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\r\nimport floor_digits_url from './assets/floor_and_digits.png';\r\nimport hp_image_url from './assets/hp.png';\r\nimport impact_url from './assets/hoplite_impacts.png';\r\nimport lavaLayers_url from './assets/lava_layers.png';\r\nimport ImageLoader from \"../common/assets/ImageLoader\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Point from \"../common/position/Point\";\r\nimport HpRenderer from \"./HpRenderer\";\r\nimport { SpriteAnimation } from \"../common/rendering/SpriteAnimation\";\r\nimport Zombie from \"./entities/Zombie\";\r\nimport Archer from \"./entities/Archer\";\r\nimport Mage from \"./entities/Mage\";\r\nimport Giant from \"./entities/Giant\";\r\nimport StoneEye from \"./entities/StoneEye\";\r\n\r\nexport default class Assets {\r\n    tiles: SpriteSheet;\r\n    lavaLayers: SpriteSheet;\r\n    floor_and_digits: ImageLoader;\r\n    hpImage: ImageLoader;\r\n    hpRenderer: HpRenderer;\r\n    impacts: ImageLoader;\r\n\r\n    constructor(loader: AssetLoader) {\r\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\r\n        this.floor_and_digits = new ImageLoader(floor_digits_url, loader.registerAssetLoadCallback());\r\n        this.hpImage = new ImageLoader(hp_image_url, loader.registerAssetLoadCallback());\r\n        this.impacts = new ImageLoader(impact_url, loader.registerAssetLoadCallback());\r\n        this.lavaLayers = new SpriteSheet(32, 32, lavaLayers_url, loader.registerAssetLoadCallback());\r\n    }\r\n\r\n    getImpactAnimation(row: number) {\r\n        return new SpriteAnimation(this.impacts.image, new Rect(0, row * 32, 32, 32), new Point(0, 0), new Point(32, 0), 8, 16, false);\r\n    }\r\n\r\n    onLoadFinished(){\r\n        this.hpRenderer = new HpRenderer(this.hpImage);\r\n        Zombie.onAssetsLoaded(this);\r\n        Archer.onAssetsLoaded(this);\r\n        Mage.onAssetsLoaded(this);\r\n        Giant.onAssetsLoaded(this);\r\n        StoneEye.onAssetsLoaded(this);\r\n    }\r\n\r\n    getDigitSprite(digit: number, digitRow ?: number):Sprite {\r\n        return new Sprite(this.floor_and_digits.image, new Rect(41 + 7 * digit, (digitRow ?? 0) * 13, 7, 13));\r\n    }\r\n\r\n    drawNumber(ctx: CanvasRenderingContext2D, position: Point, value: number, digitRow ?: number) {\r\n        const digits = value.toString().split('').map(s => parseInt(s));\r\n        for(var i = 0; i < digits.length; i++) {\r\n            this.getDigitSprite(digits[i], digitRow).draw(ctx, new Rect(position.x + i * 7, position.y, 7, 13), 0);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\nimport { HexLength, TurnLeft, TurnRight } from \"../Hex\";\r\nimport PlayerWeapon from \"./PlayerWeapon\";\r\n\r\ninterface ISimpleAttack { onMove: Point, pattern: Point[], attack: (state: GameState, player:Player, target: Point) => AttackInfo | undefined}\r\n\r\nexport default class SimpleWeapon extends PlayerWeapon{\r\n    private attacks: ISimpleAttack[];\r\n    constructor(type: 'primary'|'secondary', assets: Assets, artTile: Point, private beforeMove: boolean, ...attacks: ISimpleAttack[]) {\r\n        super(type, assets, artTile);\r\n        this.attacks = attacks;\r\n    }\r\n\r\n    private getAttacks(state:GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        const attacks: AttackInfo[] = [];\r\n        const moveDelta = Point.subtract(moveTo, moveFrom);\r\n        for(const attack of this.attacks) {\r\n            if(HexLength(moveDelta) !== HexLength(attack.onMove)) continue;\r\n            const rot = SimpleWeapon.getRotation(moveDelta, attack.onMove);\r\n            if(rot === undefined) continue;\r\n            for(const pattern of attack.pattern) {\r\n                const target = Point.add(moveFrom, TurnLeft(pattern, rot));\r\n                const attackInfo = attack.attack(state, player, target);\r\n                if(attackInfo !== undefined) attacks.push(attackInfo);\r\n            }\r\n        }\r\n        return attacks;\r\n    }\r\n\r\n    override enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[] {\r\n        return [];\r\n    }\r\n\r\n    getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return this.getAttacks(state, player, moveFrom, moveTo);\r\n        return [];\r\n    }\r\n    \r\n    getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[] {\r\n        if(this.beforeMove) return [];\r\n        return this.getAttacks(state, player, moveFrom, moveTo);\r\n    }\r\n\r\n    static getRotation(delta: Point, target: Point) {\r\n        for(let i = 0; i < 6; i++) {\r\n            if(delta.equals(target)) return i;\r\n            delta = TurnRight(delta);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport IRenderable from \"../../common/rendering/IRenderable\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport * as C from '../Constants';\r\nimport Player from \"../entities/Player\";\r\nimport GameState from \"../GameState\";\r\n\r\nexport default abstract class PlayerWeapon {\r\n\r\n    public iconImage: IRenderable;\r\n    public sprite: IRenderable;\r\n\r\n    constructor(public type: 'primary'|'secondary', assets: Assets, artTile: Point) {\r\n        if(this.type === 'primary') {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n        else {\r\n\r\n            this.sprite = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH + C.TILE_WIDTH / 2, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n\r\n            this.iconImage = new Sprite(\r\n                assets.tiles.image, \r\n                new Rect(artTile.x * C.TILE_WIDTH, artTile.y * C.TILE_HEIGHT, C.TILE_WIDTH / 2, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n    abstract enableAdditionalMoves(state: GameState, player: Player): {dest: Point, forceMove: Point}[];\r\n    abstract getBeforeMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n    abstract getAfterMoveAttacks(state: GameState, player: Player, moveFrom: Point, moveTo: Point): AttackInfo[];\r\n}\r\n","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport IRenderableSource from \"../../common/rendering/IRenderableSource\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Sword extends SimpleWeapon {\r\n\r\n    impactAnimation: IRenderableSource;\r\n\r\n    constructor(assets: Assets) {\r\n        super('primary', assets, new Point(8, 1), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(0, -1), new Point(1, -1), new Point(-1, 1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n\r\n        this.impactAnimation = assets.getImpactAnimation(0);\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.animationAttack(player, e, 1, this.impactAnimation, false);\r\n    }\r\n}","import { timeStamp } from \"console\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport Player from \"../entities/Player\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport SimpleWeapon from \"./SimpleWeapon\";\r\n\r\nexport default class Dagger extends SimpleWeapon {\r\n    constructor(assets: Assets) {\r\n        super('secondary', assets, new Point(10, 0), true,\r\n        {\r\n            onMove: new Point(1, 0),\r\n            pattern: [new Point(1, -1), new Point(0, 1)],\r\n            attack: (s,p,t) => this.getAttack(s,p,t)\r\n        });\r\n    }\r\n\r\n    getAttack(state: GameState, player: Player, target: Point): AttackInfo | undefined {\r\n        const e = state.entityAt(target);\r\n        if(e === undefined || Entity.IsPlayer(e)) return undefined;\r\n        return AttackInfo.basicAttack(player, e, 1);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport PlayerWeapon from \"../weapons/PlayerWeapon\";\r\nimport * as C from '../Constants';\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport { HexToPixel } from \"../Hex\";\r\nimport Sword from \"../weapons/Sword\";\r\nimport Dagger from \"../weapons/Dagger\";\r\nimport HpRenderer from \"../HpRenderer\";\r\n\r\nexport default class Player extends Entity {\r\n\r\n    public primary: PlayerWeapon;\r\n    public secondary: PlayerWeapon;\r\n    private renderable: Sprite;\r\n    private hpRenderer: HpRenderer;\r\n\r\n    constructor(assets: Assets, pos: Point) {\r\n        super(pos);\r\n\r\n        this.hpRenderer = assets.hpRenderer;\r\n\r\n        this.maxHp = this.hp = 3;\r\n\r\n        this.primary = new Sword(assets);\r\n        this.secondary = new Dagger(assets);\r\n\r\n        this.renderable = new Sprite(assets.tiles.image, new Rect(C.TILE_WIDTH * 8, 0, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const target = HexToPixel(this.position);\r\n        const rect = new Rect(target.x, target.y, C.TILE_WIDTH, C.TILE_HEIGHT);\r\n\r\n        this.renderable.draw(ctx, rect, 0);\r\n        this.primary.sprite.draw(ctx, new Rect(rect.x, rect.y, rect.w / 2, rect.h), 0);\r\n        this.secondary.sprite.draw(ctx, new Rect(rect.x +rect.w / 2, rect.y, rect.w / 2, rect.h), 0);\r\n\r\n        this.hpRenderer.draw(ctx, this.position, this.hp, this.maxHp);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\nimport Assets from \"./Assets\";\r\nimport Player from \"./entities/Player\";\r\nimport HexArray from \"./HexArray\";\r\nimport HexCell from \"./tiles/HexCell\";\r\nimport IMapGen from \"./mapGen/IMapGen\";\r\nimport * as C from \"./Constants\";\r\nimport Entity from \"./Entity\";\r\nimport { HexToPixel } from \"./Hex\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport Sprite from \"../common/rendering/Sprite\";\r\nimport Enemy from \"./entities/Enemy\";\r\n\r\nexport default class GameState {\r\n\r\n    public player: Player;\r\n    public enemies: Enemy[] = [];\r\n\r\n    public tiles: HexArray<HexCell>;\r\n    public currentFloor: number;\r\n    public regionId: number;\r\n\r\n    public gold: number;\r\n\r\n    public renderTickNumber: number;\r\n    \r\n    constructor(private assets: Assets, size: number, floorNum: number, generator: IMapGen) {\r\n        this.changeFloor(floorNum, generator);\r\n        this.regionId = 0;\r\n\r\n        this.player = new Player(assets, C.PLAYER_START_POSITION);\r\n        this.gold = 0;\r\n\r\n        this.renderTickNumber = 0;\r\n    }\r\n\r\n    entityAt(to: Point) {\r\n        return [this.player, ...this.enemies].find(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMove(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        if(to.equals(this.player.position)) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMoveIgnorePlayer(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        return !this.enemies.some(e => e.position.equals(to));\r\n    }\r\n\r\n    isValidMoveIgnoreEnemies(to: Point, flying: boolean) {\r\n        const isValidTile = this.tiles.isInBounds(to.x, to.y) && \r\n            (this.tiles.get(to).isPathable || flying);\r\n        if(!isValidTile) return false;\r\n        return !to.equals(this.player.position);\r\n    }\r\n\r\n    changeFloor(floorNum: number, generator: IMapGen) {\r\n        this.enemies = [];\r\n        generator.generateMap(this.assets, floorNum, this);\r\n        this.currentFloor = floorNum;\r\n        this.tiles.iterate((x, y, tile) =>{\r\n            tile.AfterWorldLoad(this, new Point(x, y));\r\n        });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, excludeEntities?: Entity[]) {\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 13*this.regionId, 41, 13)).draw(ctx, new Rect(0, 0, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(42, 0), this.currentFloor);\r\n\r\n        new Sprite(this.assets.floor_and_digits.image, new Rect(0, 13*3, 41, 13)).draw(ctx, new Rect(0, 14, 41, 13), 0);\r\n        this.assets.drawNumber(ctx, new Point(42, 14), this.gold, 3);\r\n\r\n        this.tiles.iterate((x, y, cell) => {\r\n            cell.draw(ctx, this, new Point(x, y));\r\n        });\r\n\r\n        [this.player, ...this.enemies].forEach(entity => {\r\n            if(excludeEntities && excludeEntities.includes(entity)) {\r\n                return;\r\n            }\r\n            entity.draw(ctx);\r\n            if(entity.hp != entity.maxHp){\r\n                this.assets.hpRenderer.draw(ctx, entity.position, entity.hp, entity.maxHp);\r\n            }\r\n        });\r\n\r\n        this.renderTickNumber ++;\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport { SimpleCell } from \"./HexCell\";\r\n\r\nexport default class DownStairs extends SimpleCell {\r\n    public static TypeID = 2;\r\n    constructor(assets: Assets) {\r\n        super(DownStairs.TypeID, assets, new Point(5, 0), true, true);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default class AnimationPhase implements IGamePhase {\r\n\r\n    constructor(private animations: IAnimation[], private onFinish: (gs: GameState) => IGamePhase) {\r\n    }\r\n\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        for(let i = this.animations.length - 1; i >= 0; i--) {\r\n            if(this.animations[i].tick()) {\r\n                this.animations.splice(i, 1);\r\n            }\r\n        }\r\n        if(this.animations.length === 0) {\r\n            return this.onFinish(state);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        for(const animation of this.animations) { \r\n            animation.draw(ctx);\r\n        }\r\n    }\r\n}","import AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport Entity from \"../Entity\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function AttackResolutionPhase(state: GameState, attacks: IAttackInfo[], nextPhase: (state: GameState) => IGamePhase) : IGamePhase {\r\n    for(const attack of attacks) {\r\n        const damageGroups = attack.getAffectedTiles(state);\r\n        for(const damageGroup of damageGroups) {\r\n            for(const pt of damageGroup.positions) {\r\n                const entity = state.entityAt(pt);\r\n                if(entity === undefined || (Entity.IsPlayer(entity) && damageGroup.ignorePlayer) || (!Entity.IsPlayer(entity) && damageGroup.ignoreEnemies)) continue;\r\n                entity.hp -= damageGroup.damage;\r\n            }\r\n        }\r\n    }\r\n\r\n    let goldValues = state.enemies.filter(e => e.hp <= 0).map(e => e.goldValue);\r\n    if(goldValues.length > 0) {\r\n        state.gold += goldValues.reduce((a, b) => a + b, 0) * goldValues.length;\r\n    }\r\n\r\n    state.enemies = state.enemies.filter(e => e.hp > 0);\r\n    if(state.player.hp <= 0) {\r\n        // TODO: GAME OVER\r\n    }\r\n    return nextPhase(state);\r\n}","import SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function AfterMovePhase(state: GameState, isPlayerTurn: boolean, next: (state: GameState) => IGamePhase): IGamePhase {\r\n\r\n    let allAttacks: IAttackInfo[] = []\r\n    if(isPlayerTurn) {\r\n        state.tiles.iterate((x, y, c) => {\r\n            const attacks = c.AfterPlayerTurn(state, x, y);\r\n            if(attacks !== undefined && attacks.length > 0) {\r\n                allAttacks.push(...attacks);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        state.tiles.iterate((x, y, c) => {\r\n            const attacks = c.AfterEnemyTurn(state, x, y);\r\n            if(attacks !== undefined && attacks.length > 0) {\r\n                allAttacks.push(...attacks);\r\n            }\r\n        });\r\n    }\r\n\r\n    if(allAttacks.length === 0) return next(state);\r\n    else \r\n    {\r\n        return new AnimationPhase(allAttacks.map(atk => new SequentialAnimation(atk.toAnimations(state))), gs=>AttackResolutionPhase(gs, allAttacks, next));\r\n    }\r\n}","import { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport IAnimation from \"../animation/IAnimation\";\r\nimport GameState from \"../GameState\";\r\nimport AfterMovePhase from \"./AfterMovePhase\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\n\r\nconst duration = 20;\r\n\r\nexport default function EnemyMovePhase(state: GameState): IGamePhase {\r\n    const disallowed: Point[] = state.enemies.map(e => e.position);\r\n    const animations: IAnimation[] = [];\r\n    const stepped: boolean[] = [];\r\n    for(let i = 0; i < state.enemies.length; i++) { \r\n        const destination = state.enemies[i].getMove(state, state.enemies[i].lastAttacks, disallowed);\r\n        if(!destination.equals(state.enemies[i].position)) {\r\n            animations.push(new EntityMoveAnimation(state.enemies[i], Interpolated.linear<Point>(Point.interpolate, state.enemies[i].position, destination), destination, duration));\r\n            const rm = disallowed.findIndex(p => p.equals(state.enemies[i].position));\r\n            disallowed.splice(rm, 1, destination);\r\n            stepped.push(true);\r\n        }\r\n        else {\r\n            stepped.push(false);\r\n        }\r\n    }\r\n\r\n    return new AnimationPhase(animations, (gs) => AfterEnemyMovePhase(gs, stepped));\r\n}\r\n\r\nfunction AfterEnemyMovePhase(state: GameState, didMove: boolean[]): IGamePhase {\r\n    // Resolve who stepped where\r\n    for(let i = 0; i < didMove.length; i++){\r\n        if(didMove[i]){\r\n            const enemy = state.enemies[i];\r\n            const cell = state.tiles.get(enemy.position);\r\n            cell.OnEntityStep(enemy);\r\n        }\r\n    }\r\n\r\n    return AfterMovePhase(state, false, () => new PlayerTurnGamePhase());\r\n}","import Point from \"../../common/position/Point\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport { SimpleCell } from \"./HexCell\";\r\n\r\nexport default class Floor extends SimpleCell {\r\n    public static TypeID = 0;\r\n\r\n    constructor(assets: Assets, customSprite?: Point) {\r\n        super(Floor.TypeID, assets, customSprite ?? new Point(0, 0), true, customSprite !== undefined);\r\n    }\r\n\r\n    OnEntityStep(entity: Entity): void {\r\n    }\r\n}\r\n","import Point from \"../common/position/Point\";\r\n\r\nexport default class HexArray<T> {\r\n    private data: T[][];\r\n    private _size: number;\r\n\r\n    constructor(size: number, defaultValue: T) {\r\n        this._size = size;\r\n        this.data = [];\r\n        let midRowLength = size*2 - 1;\r\n        for(let dy = -size+1; dy <= size-1; dy++){\r\n            let row: T[] = [];\r\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\r\n                row.push(defaultValue);\r\n            }\r\n            this.data.push(row);\r\n        }\r\n    }\r\n\r\n    public size() {\r\n        return this._size;\r\n    }\r\n\r\n    public get(x: number, y: number): T;\r\n    public get(pt: Point): T;\r\n    public get(pt: [number, number]): T;\r\n    public get(xp: number|Point|[number, number], yp?: number): T {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        let [dx, row] = this.toArrayCoords(x, y);\r\n        return this.data[row][dx];\r\n    }\r\n\r\n    public set(value: T, x: number, y: number): void;\r\n    public set(value: T, pt: Point): void;\r\n    public set(value: T, pt: [number, number]): void;\r\n    public set(value: T, xp: number|Point|[number, number], yp?: number): void {\r\n        const [x, y] = this.extractInputCoords(xp, yp);\r\n        const [dx, row] = this.toArrayCoords(x, y);\r\n        this.data[row][dx] = value;\r\n    }\r\n\r\n    private extractInputCoords(xp: number|Point|[number, number], y?: number): [number, number] {\r\n        if(typeof xp === \"number\"){\r\n            return [xp as number, y];\r\n        }\r\n        else if ((xp as Point).x !== undefined) {\r\n            return [(xp as Point).x, (xp as Point).y];\r\n        }\r\n        else {\r\n            return xp as [number, number];\r\n        }\r\n    }\r\n\r\n    public getRowLength(y: number): number {\r\n        return this._size * 2 - 1 - Math.abs(y);\r\n    }\r\n\r\n    public isInBounds(x: number, y: number): boolean {\r\n        if(y <= -this._size || y >= this._size) {\r\n            return false;\r\n        }\r\n        let [xMin, xMax] = this.getXRange(y);\r\n        return x >= xMin && x < xMax;\r\n    }\r\n\r\n    public getXRange(y: number): [number, number] {\r\n        const minX = this.getMinX(y);\r\n        const len = this.getRowLength(y);\r\n        return [minX, minX + len];\r\n    }\r\n\r\n    public getMinX(y: number): number {\r\n        const row = this._size - 1 + y;\r\n        return -Math.min(row, this._size - 1);\r\n    }\r\n\r\n    public iterate(func: (x: number, y: number, value: T) => void) {\r\n        for(let y = -this._size+1; y < this._size; y++) {\r\n            let [xMin, xMax] = this.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                func(x, y, this.get(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    private toArrayCoords(x: number, y: number): [number, number] {\r\n        const row = this._size - 1 + y;\r\n        const firstX = -Math.min(row, this._size - 1);\r\n        const dx = x - firstX;\r\n\r\n        return [dx, row];\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport DownStairs from \"../tiles/DownStairs\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport Point from \"../../common/position/Point\";\r\nimport StoneEye from \"../entities/StoneEye\";\r\n\r\nconst playerMoveTileArts = [\r\n    new Point(6,2),\r\n    new Point(7,2),\r\n    new Point(9,2),\r\n    new Point(7,3),\r\n    new Point(6,3),\r\n    new Point(8,2),\r\n];\r\n\r\nexport default class FloorZeroGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n\r\n        const ring = GetRing(2);\r\n        for(var i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Lava(assets), ring[i]);\r\n        }\r\n\r\n        const ring2 = GetRing(3);\r\n        for(var i = 0; i < ring2.length; i += 3) {\r\n            state.tiles.set(new Lava(assets), ring2[i]);\r\n        }\r\n\r\n        const playerRing = GetRing(1).map(p => Point.add(p, C.PLAYER_START_POSITION));\r\n        for(let i = 0; i < playerRing.length; i++) {\r\n            state.tiles.set(\r\n                new Floor(assets, playerMoveTileArts[i]),\r\n                playerRing[i]\r\n            )\r\n        }\r\n\r\n\r\n        state.tiles.set(new DownStairs(assets), 2, -4);\r\n    }\r\n}","import Point from \"../common/position/Point\";\r\n\r\n\r\ninterface IPathfinderNode {\r\n    position: Point;\r\n    parent: IPathfinderNode | undefined;\r\n    cost: number;\r\n}\r\n\r\nfunction toPath(node: IPathfinderNode): Point[] {\r\n    if(node.parent === null) return [node.position];\r\n    const parentPath = toPath(node.parent);\r\n    parentPath.push(node.position);\r\n    return parentPath;\r\n}\r\n\r\n// TODO: This is a quick and dirty Djikstra implementation with a ton of room for optimization.\r\n//       Currently, bot the closed and open sets are unsorted arrays, which means each dequeue takes O(n) time and each neighbor check takes O(n) time.\r\nexport default function DjikstraPath(start: Point, isEnd: (pt: Point) => boolean, getNeighbors: (from: Point) => { to: Point, cost: number }[]): Point[] {\r\n    const closedSet: IPathfinderNode[] = [];\r\n    const openSet: IPathfinderNode[] = [{ position: start, parent: null, cost: 0 }];\r\n\r\n    while (openSet.length > 0) {\r\n        const minIndex = openSet.reduce((min, cur, i) => cur.cost < openSet[min].cost ? i : min, 0);\r\n        const current = openSet.splice(minIndex, 1)[0];\r\n        closedSet.push(current);\r\n\r\n        if(isEnd(current.position)) {\r\n            return toPath(current);\r\n        }\r\n\r\n        for(const neighbor of getNeighbors(current.position)) {\r\n            const neighborNode = { position: neighbor.to, parent: current, cost: current.cost + neighbor.cost };\r\n            if(closedSet.find(c => c.position.equals(neighborNode.position))) continue;\r\n            const open = openSet.findIndex(c => c.position.equals(neighborNode.position));\r\n            if(open === -1) {\r\n                openSet.push(neighborNode);\r\n            }\r\n            else if(openSet[open].cost > neighborNode.cost) {\r\n                openSet[open] = neighborNode;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null; // No path!\r\n}","import DjikstraPath from \"../DjikstraPath\";\r\nimport GameState from \"../GameState\";\r\nimport * as C from \"../Constants\";\r\nimport DownStairs from \"../tiles/DownStairs\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport Assets from \"../Assets\";\r\n\r\nexport function AssurePathTo(state: GameState, assets: Assets, checkEnd: (isValidEnd: Point) => boolean, pathLengthNoise?: number) {\r\n    function getNeighbors(point: Point):{to: Point, cost: number}[] {\r\n        const neighbors = [];\r\n        for(const dir of AllDirections) {\r\n            const destPt = Point.add(point, DirectionHelper.ToPoint(dir));\r\n            if(state.tiles.isInBounds(destPt.x, destPt.y)) {\r\n                neighbors.push({to: destPt, cost: state.tiles.get(destPt).isPathable ? 1 - (Math.random() * (pathLengthNoise??0)) : 99 });\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    const pathToEnd = DjikstraPath(C.PLAYER_START_POSITION, checkEnd, getNeighbors);\r\n    for(const pt of pathToEnd) {\r\n        if(!state.tiles.get(pt).isPathable) {\r\n            state.tiles.set(new Floor(assets), pt);\r\n        }\r\n    }\r\n}\r\n\r\nexport function AssurePathToEnd(state: GameState, assets: Assets, pathLengthNoise?: number) {\r\n    return AssurePathTo(state, assets, (pt) => state.tiles.get(pt).typeId === DownStairs.TypeID, pathLengthNoise);\r\n}","import Point from \"../../common/position/Point\";\r\nimport Rect from \"../../common/position/Rectangle\";\r\nimport Sprite from \"../../common/rendering/Sprite\";\r\nimport Assets from \"../Assets\";\r\nimport Entity from \"../Entity\";\r\nimport { SimpleCell } from \"./HexCell\";\r\nimport * as C from '../Constants';\r\nimport GameState from \"../GameState\";\r\nimport TileAttackInfo from \"../attackInfos/TileAttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\n\r\nexport type TrapDamage = 1|3|5;\r\nconst trapSprites: { [key in TrapDamage]: Point } = {\r\n    1: new Point(0, 6),\r\n    3: new Point(0, 7),\r\n    5: new Point(0, 8)\r\n}\r\nconst trapCooldown: { [key in TrapDamage]: number } = {\r\n    1: 0,\r\n    3: 1,\r\n    5: 2\r\n}\r\n\r\nexport default class Trap extends SimpleCell {\r\n    public static TypeID = 5;\r\n\r\n    public damage: TrapDamage;\r\n    public state: 'wait'|'prep'|'fire' = 'wait';\r\n    private cooldown = 0;\r\n    private assets: Assets;\r\n\r\n    constructor(assets: Assets, damage: TrapDamage) {\r\n        super(Trap.TypeID, assets, trapSprites[damage], true, false);\r\n        this.assets = assets;\r\n        this.damage = damage;\r\n        this.state = 'wait';\r\n        this.cooldown = trapCooldown[damage];\r\n    }\r\n\r\n    override OnEntityStep(entity: Entity): void {\r\n        if(this.state === 'wait') {\r\n            const spritePos = trapSprites[this.damage];\r\n            super.renderable = new Sprite(this.assets.tiles.image, new Rect((spritePos.x+1) * C.TILE_WIDTH, spritePos.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n        }\r\n    }\r\n\r\n    override AfterEnemyTurn(state: GameState, x: number, y: number): IAttackInfo[] {\r\n        if(this.state === 'wait'){\r\n            const entityHere = state.entityAt(new Point(x, y));\r\n            if(entityHere !== undefined) {\r\n                this.state = 'prep';\r\n            }\r\n        }\r\n        \r\n        if(this.state === 'prep' && this.cooldown === 0) {\r\n            this.state = 'fire';\r\n            const spritePos = trapSprites[this.damage];\r\n            super.renderable = new Sprite(this.assets.tiles.image, new Rect((spritePos.x+2) * C.TILE_WIDTH, spritePos.y * C.TILE_HEIGHT, C.TILE_WIDTH, C.TILE_HEIGHT));\r\n            const entityHere = state.entityAt(new Point(x, y));\r\n            if(entityHere !== undefined) {\r\n                return [\r\n                    new TileAttackInfo(new Point(x, y), [{ damage: this.damage, positions: [new Point(x,y)] }], 0, this.assets.getImpactAnimation(1))\r\n                ]\r\n            }\r\n        }\r\n        else if(this.state === 'prep') { this.cooldown --; }\r\n        return [];\r\n    }\r\n}\r\n","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport DownStairs from \"../tiles/DownStairs\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Zombie from \"../entities/Zombie\";\r\nimport Archer from \"../entities/Archer\";\r\nimport Mage from \"../entities/Mage\";\r\nimport Lava from \"../tiles/Lava\";\r\nimport { AllDirections, DirectionHelper } from \"../Direction\";\r\nimport { AssurePathTo, AssurePathToEnd } from \"./MapGenCommon\";\r\nimport StoneEye from \"../entities/StoneEye\";\r\nimport Trap, { TrapDamage } from \"../tiles/Trap\";\r\n\r\nexport default class StandardMapGen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.enemies = [];\r\n\r\n        let leftLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let leftLavaX = state.tiles.getMinX(leftLavaY);\r\n\r\n        this.genLava(assets, state, new Point(leftLavaX, leftLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        let rightLavaY = Math.floor(Math.random() * (C.MAP_SIZE - 2)) * (Math.random() >= 0.5 ? 1 : -1);\r\n        let rightLavaX = state.tiles.getXRange(rightLavaY)[1]-1;\r\n\r\n        this.genLava(assets, state, new Point(rightLavaX, rightLavaY), Math.floor(Math.random() * 20) + 8);\r\n\r\n        const downStairY = -C.MAP_SIZE + 1 + Math.floor(Math.random() * 3);\r\n        const [xMin, xMax] = state.tiles.getXRange(downStairY);\r\n        const downStairX = Math.floor(Math.random() * (xMax - xMin)) + xMin;\r\n        state.tiles.set(new DownStairs(assets), downStairX, downStairY);\r\n\r\n        // Replaces lava with floor to ensure there's a path from the start to the end.\r\n        AssurePathToEnd(state, assets, 1);\r\n\r\n        let validEnemySpawns: Point[] = [];\r\n        for(let y = -C.MAP_SIZE + 1; y <= 1; y++) {\r\n            const [xMin, xMax] = state.tiles.getXRange(y);\r\n            for(let x = xMin; x < xMax; x++) {\r\n                if(state.tiles.get(x, y).typeId === Floor.TypeID) {\r\n                    validEnemySpawns.push(new Point(x, y));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(12, floor); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const zombie = new Zombie(pos);\r\n            state.enemies.push(zombie);\r\n        }\r\n\r\n        for(let i = 0; i < Math.min(6, (floor - 3) / 3); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const archer = new Archer(pos);\r\n            state.enemies.push(archer);\r\n        }\r\n        \r\n        for(let i = 0; i < Math.min(3, (floor - 4) / 4); i++) {\r\n            let spawnId = Math.floor(Math.random() * validEnemySpawns.length);\r\n            const [pos] = validEnemySpawns.splice(spawnId, 1);\r\n            const enemy = (Math.random() < 0.2) ? new StoneEye(pos) : new Mage(pos);\r\n            state.enemies.push(enemy);\r\n        }\r\n        \r\n        // Don't spawn enemies where they can't get to you: Forge a path. (unless they're flying)\r\n        for(const enemy of state.enemies) {\r\n            if(enemy.isFlying) continue;\r\n            AssurePathTo(state, assets, (pt)=>pt.equals(enemy.position), 0.3);\r\n        }\r\n\r\n        let floorPositions: Point[] = [];\r\n        state.tiles.iterate((x, y, c) => {\r\n            if(c.typeId === Floor.TypeID) {\r\n                floorPositions.push(new Point(x, y));\r\n            }\r\n        });\r\n\r\n        for(let i = 0; i < 3 + Math.min(3, (floor - 4) / 4); i++) {\r\n            let replaceFloor = floorPositions.splice(Math.floor(Math.random() * floorPositions.length), 1)[0];\r\n            state.tiles.set(new Trap(assets, [1,3,5][Math.floor(Math.random() * 3)] as TrapDamage), replaceFloor.x, replaceFloor.y);\r\n        }\r\n    }\r\n\r\n    genLava(assets: Assets, state: GameState, pt: Point, len: number) {\r\n        state.tiles.set(new Lava(assets), pt);\r\n        if(len <= 1) return;\r\n\r\n        const validRiverDirections = AllDirections.filter(dir => {\r\n            // Check if this is a valid continuation for the lava river\r\n            const dest = Point.add(pt, DirectionHelper.ToPoint(dir));\r\n            if(!state.tiles.isInBounds(dest.x, dest.y) || state.tiles.get(dest).typeId !== Floor.TypeID || dest.equals(C.PLAYER_START_POSITION)) \r\n                return false;\r\n            return true;\r\n        });\r\n\r\n        if(validRiverDirections.length === 0) return;\r\n        const dir = validRiverDirections[Math.floor(Math.random() * validRiverDirections.length)];\r\n        this.genLava(assets, state, Point.add(pt, DirectionHelper.ToPoint(dir)), len - 1);\r\n    }\r\n}","import Assets from \"../Assets\";\r\nimport GameState from \"../GameState\";\r\nimport Floor12Gen from \"./Floor12Gen\";\r\nimport FloorZeroGen from \"./FloorZeroGen\";\r\nimport StandardMapGen from \"./StandardMapGen\";\r\n\r\nexport default interface IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void;\r\n}\r\n\r\nexport const MapGenerators: {range: [number, number], gen: IMapGen}[] = [\r\n    {range: [0,1], gen: new FloorZeroGen()},\r\n    {range: [1,12], gen: new StandardMapGen()},\r\n    {range: [12,13], gen: new Floor12Gen()},\r\n    {range: [13,-1], gen: new StandardMapGen()}\r\n]","import GameState from \"../GameState\";\r\nimport IMapGen from \"./IMapGen\";\r\nimport * as C from \"../Constants\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport DownStairs from \"../tiles/DownStairs\";\r\nimport Floor from \"../tiles/Floor\";\r\nimport HexArray from \"../HexArray\";\r\nimport Assets from \"../Assets\";\r\nimport { GetRing } from \"../Hex\";\r\nimport Point from \"../../common/position/Point\";\r\nimport Giant from \"../entities/Giant\";\r\nimport Archer from \"../entities/Archer\";\r\nimport StoneEye from \"../entities/StoneEye\";\r\nimport Lava from \"../tiles/Lava\";\r\n\r\nexport default class Floor12Gen implements IMapGen {\r\n    generateMap(assets: Assets, floor: number, state: GameState): void {\r\n        state.tiles = new HexArray<HexCell>(C.MAP_SIZE, new Floor(assets));\r\n        state.tiles.set(new DownStairs(assets), 0, 0);\r\n        const ring = GetRing(2);\r\n        for (let i = 0; i < ring.length; i++) {\r\n            state.tiles.set(new Floor(assets, new Point(12, 0)), ring[i]);\r\n        }\r\n\r\n        state.tiles.set(new Lava(assets), new Point(5, -1));\r\n        state.tiles.set(new Lava(assets), new Point(5, 0));\r\n        state.tiles.set(new Lava(assets), new Point(4, 1));\r\n        state.tiles.set(new Lava(assets), new Point(-4, -1));\r\n        state.tiles.set(new Lava(assets), new Point(-5, 0));\r\n        state.tiles.set(new Lava(assets), new Point(-5, 1));\r\n\r\n        state.enemies.push(new Giant(new Point(0, 0)));\r\n        state.enemies.push(new StoneEye(new Point(0, -2)));\r\n        state.enemies.push(new StoneEye(new Point(2, -2)));\r\n        state.enemies.push(new StoneEye(new Point(2, 0)));\r\n        state.enemies.push(new StoneEye(new Point(-2, 0)));\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport { MapGenerators } from \"../mapGen/IMapGen\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport Point from \"../../common/position/Point\";\r\n\r\nconst FADE_OUT_ANIM_TIME = 30;\r\nconst PLAYER_MOVE_TIME = 30;\r\n\r\nexport default class FloorTransitionPhase implements IGamePhase {\r\n\r\n    time = 0;\r\n\r\n    init(state: GameState): void {\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= FADE_OUT_ANIM_TIME) {\r\n            return new FloorTransitionPlayerMovePhase();\r\n        } else {\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.globalAlpha = this.time / FADE_OUT_ANIM_TIME;\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.globalAlpha = 1;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}\r\n\r\nclass FloorTransitionPlayerMovePhase implements IGamePhase {\r\n\r\n    time = 0;\r\n    playerStartPoint: Point;\r\n\r\n    init(state: GameState): void {\r\n        const floor = state.currentFloor + 1;\r\n        const generator = MapGenerators.filter(g => floor >= g.range[0] && (g.range[1] === -1 || floor < g.range[1]))[0].gen;\r\n        this.playerStartPoint = state.player.position;\r\n        state.changeFloor(floor, generator);\r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.time++;\r\n        if (this.time >= PLAYER_MOVE_TIME) {\r\n            state.player.position = C.PLAYER_START_POSITION.clone();\r\n            return new EntryAnimationPhase();\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        const lerp = this.time / PLAYER_MOVE_TIME;\r\n        const tgt = Point.interpolate(this.playerStartPoint, C.PLAYER_START_POSITION, lerp);\r\n        state.player.position = tgt;\r\n        state.player.draw(ctx);\r\n    }\r\n\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport { Interpolated } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport EntityMoveAnimation from \"../animation/EntityMoveAnimation\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport { HexToPixel, PixelToHex } from \"../Hex\";\r\nimport HexCell from \"../tiles/HexCell\";\r\nimport DownStairs from \"../tiles/DownStairs\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyAttackPhase from \"./EnemyAttackPhase\";\r\nimport FloorTransitionPhase from \"./FloorTransitionPhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport AfterMovePhase from \"./AfterMovePhase\";\r\n\r\n\r\nexport default function PlayerMoveAnimPhase(state: GameState, from: Point, to: Point, forceMotion: Point):IGamePhase {\r\n    const onFinish = (gs: GameState) => {\r\n        if(!forceMotion.equals(from)) {\r\n            gs.tiles.get(forceMotion).OnEntityStep(gs.player);\r\n        }\r\n\r\n        if(gs.tiles.get(gs.player.position).typeId === DownStairs.TypeID) {\r\n            return new FloorTransitionPhase();\r\n        }\r\n        else if(gs.enemies.length === 0) {\r\n            return AfterMovePhase(gs, true, (gs) => AfterMovePhase(gs, false, () => new PlayerTurnGamePhase()));\r\n        }\r\n        else return AfterMovePhase(gs, true, (gs) => EnemyAttackPhase(gs));\r\n    }\r\n\r\n    const postMoveAttacks: (gs:GameState)=>IGamePhase = (gs: GameState) => {\r\n        const attacks = [\r\n            ...state.player.primary.getAfterMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getAfterMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return onFinish(gs);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, onFinish));\r\n    };\r\n\r\n    const playerMove = (state: GameState) => {\r\n        if(!state.isValidMove(forceMotion, false)) {\r\n            return postMoveAttacks(state);\r\n        }\r\n        return new AnimationPhase(\r\n            [new EntityMoveAnimation(state.player, Interpolated.linear<Point>(Point.interpolate, from, forceMotion), forceMotion, state.enemies.length === 0 ? 2 : 10)],\r\n            postMoveAttacks\r\n        );\r\n    };\r\n\r\n    if(state.enemies.length === 0) {\r\n        return playerMove(state);\r\n    }\r\n    if(state.enemies.length > 0) {\r\n        const attacks = [\r\n            ...state.player.primary.getBeforeMoveAttacks(state, state.player, from, to),\r\n            ...state.player.secondary.getBeforeMoveAttacks(state, state.player, from, to)\r\n        ];\r\n        if(attacks.length === 0) return playerMove(state);\r\n        const animation = new SequentialAnimation(attacks.map(attack => new ParallelAnimation(attack.toAnimations())));\r\n        return new AnimationPhase([animation], state => AttackResolutionPhase(state, attacks, playerMove));\r\n    }\r\n} ","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport ParallelAnimation from \"../animation/ParallelAnimation\";\r\nimport SequentialAnimation from \"../animation/SequentialAnimation\";\r\nimport AttackInfo from \"../attackInfos/AttackInfo\";\r\nimport IAttackInfo from \"../attackInfos/IAttackInfo\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport AnimationPhase from \"./AnimationPhase\";\r\nimport AttackResolutionPhase from \"./AttackResolutionPhase\";\r\nimport EnemyMovePhase from \"./EnemyMovePhase\";\r\nimport IGamePhase from \"./IGamePhase\";\r\n\r\nexport default function EnemyAttackPhase(state: GameState):IGamePhase {\r\n    const enemyAttacks: IAttackInfo[][] = []\r\n    for(let i = 0; i < state.enemies.length; i++) {\r\n        state.enemies[i].lastAttacks = state.enemies[i].getAttacks(state);\r\n        enemyAttacks.push(state.enemies[i].lastAttacks);\r\n    }\r\n    if(enemyAttacks.some(e => e.length > 0)) {\r\n        const animations = enemyAttacks.map(attackSet => new SequentialAnimation(attackSet.map(attack => new ParallelAnimation(attack.toAnimations(state)))));\r\n        return new AnimationPhase(animations, ()=>\r\n            AttackResolutionPhase(state, enemyAttacks.reduce((acc, c) => acc.concat(c), []), state => EnemyMovePhase(state))\r\n        );\r\n    }\r\n    else{\r\n        return EnemyMovePhase(state);\r\n    }\r\n}","import KeyboardManager from \"../../common/input/KeyboardManager\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Direction, DirectionHelper } from \"../Direction\";\r\nimport GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport PlayerMoveAnimPhase from \"./PlayerMoveAnimPhase\";\r\n\r\ntype Move = Direction | 6 | undefined;\r\n\r\nconst dirKeys = [\r\n    { key: 'a', dir: Direction.Left },\r\n    { key: '4', dir: Direction.Left },\r\n    \r\n    { key: 'q', dir: Direction.UpLeft },\r\n    { key: '7', dir: Direction.UpLeft },\r\n\r\n    { key: 'w', dir: Direction.UpRight },\r\n    { key: '9', dir: Direction.UpRight },\r\n\r\n    { key: 'd', dir: Direction.Right },\r\n    { key: '6', dir: Direction.Right },\r\n\r\n    { key: 'x', dir: Direction.DownRight },\r\n    { key: '3', dir: Direction.DownRight },\r\n\r\n    { key: 'z', dir: Direction.DownLeft },\r\n    { key: '1', dir: Direction.DownLeft },\r\n\r\n    { key: 's', dir: 6 },\r\n    { key: '5', dir: 6 },\r\n]\r\n\r\nexport default class PlayerTurnGamePhase implements IGamePhase {\r\n    init(state: GameState): void {\r\n        \r\n    }\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        const dir = this.tryGetDirection(keys);\r\n        if(dir !== undefined) {\r\n            const destination = dir === 6 ? state.player.position : Point.add(state.player.position, DirectionHelper.ToPoint(dir));\r\n            const additionalMoves = [...state.player.primary.enableAdditionalMoves(state, state.player), ...state.player.secondary.enableAdditionalMoves(state, state.player)];\r\n\r\n            if(!state.isValidMoveIgnorePlayer(destination, false)) {\r\n                const specialMove = additionalMoves.find(move => move.dest.equals(destination));\r\n                if(specialMove !== undefined){\r\n                    return PlayerMoveAnimPhase(state, state.player.position, destination, specialMove.forceMove);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            return PlayerMoveAnimPhase(state, state.player.position, destination, destination);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tryGetDirection(keys: KeyboardManager): Move {\r\n        for(let i = 0; i < dirKeys.length; i++) {\r\n            if(keys.isKeyPressed(dirKeys[i].key)) {\r\n                return dirKeys[i].dir;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n    }\r\n\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 60;\r\n\r\nexport default class EntryAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new PlayerTurnGamePhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n        state.player.draw(ctx);\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport IGamePhase from \"./IGamePhase\";\r\nimport * as C from '../Constants';\r\nimport PlayerTurnGamePhase from \"./PlayerTurnGamePhase\";\r\nimport EntryAnimationPhase from \"./EntryAnimationPhase\";\r\nimport KeyboardManager from \"../../common/input/KeyboardManager\";\r\n\r\nconst ENTRY_ANIMATION_TIME = 120;\r\n\r\nexport default class GameStartAnimationPhase implements IGamePhase {\r\n    animationTime = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    init(state:GameState){}\r\n\r\n    tick(state: GameState, keys: KeyboardManager): IGamePhase {\r\n        this.animationTime++;\r\n        if(this.animationTime >= ENTRY_ANIMATION_TIME) { \r\n            return new EntryAnimationPhase();\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, state: GameState): void {\r\n        state.player.draw(ctx);\r\n        ctx.fillStyle = '#000000';\r\n        if(this.animationTime <= ENTRY_ANIMATION_TIME) {\r\n            ctx.globalAlpha = 1 - this.animationTime / ENTRY_ANIMATION_TIME;\r\n            ctx.fillRect( 0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Point from '../common/position/Point';\r\nimport { TILES_HIGH } from '../rpgt/Constants';\r\nimport * as C from \"./Constants\";\r\nimport Assets from './Assets';\r\nimport GameState from './GameState';\r\nimport StandardMapGen from './mapGen/StandardMapGen';\r\nimport EntryAnimationPhase from './phases/EntryAnimationPhase';\r\nimport IGamePhase from './phases/IGamePhase';\r\nimport GameStartAnimationPhase from './phases/GameStartAnimationPhase';\r\nimport FloorZeroGen from './mapGen/FloorZeroGen';\r\nimport Zombie from './entities/Zombie';\r\nimport Floor12Gen from './mapGen/Floor12Gen';\r\n\r\nexport default function Run(): (()=>void) {\r\n    let ctx: CanvasRenderingContext2D;\r\n    \r\n    let keys: KeyboardManager;\r\n    let scaleHelper: NearestNeighborScalingHelper;\r\n    \r\n    const assetLoader = new AssetLoader();\r\n    const assets = new Assets(assetLoader);\r\n\r\n    let state: GameState;\r\n    let currentPhase: IGamePhase = new GameStartAnimationPhase();\r\n\r\n    keys = new KeyboardManager(document.body);\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n    \r\n    function assetLoadDone() {\r\n        assets.onLoadFinished();\r\n        \r\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n        ctx = canvas.getContext('2d');\r\n        scaleHelper = new NearestNeighborScalingHelper(\r\n            canvas, \r\n            ctx, \r\n            C.MAP_PIXEL_SIZE, \r\n            C.MAP_PIXEL_SIZE, \r\n            true, \r\n            () => { return; }\r\n        );\r\n\r\n        state = new GameState(assets, C.MAP_SIZE, 0, new FloorZeroGen());\r\n        NearestNeighborScaling(ctx);\r\n        tick();\r\n    }\r\n    \r\n    function tick() {\r\n        scaleHelper.TryRescale();\r\n        NearestNeighborScaling(ctx);\r\n\r\n        const nextPhase = currentPhase.tick(state, keys);\r\n\r\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\r\n\r\n        currentPhase.draw(ctx, state);\r\n\r\n        if(nextPhase !== currentPhase) {\r\n            currentPhase = nextPhase;\r\n            nextPhase.init(state);\r\n        }\r\n\r\n        keys.update();\r\n        requestAnimationFrame(() => tick());\r\n    }\r\n\r\n    return (() => scaleHelper.Detatch());\r\n}\r\n","import * as React from 'react';\r\nimport Run from '../../../projects/hoplite/index';\r\n\r\nexport default function HopliteComponent() {\r\n    React.useEffect(()=>Run());\r\n    return <div className='rpgt rpgt_body full_body center' style={{background: \"black\"}}>\r\n        <canvas id=\"mainCanvas\"></canvas>\r\n    </div>;\r\n}\r\n"],"names":["Color","constructor","vals","h","s","v","this","hsv","rgb","undefined","static","r","g","b","reqRgb","reqHsv","componentToRgb","n","k","Math","max","min","calcRgb","calcHsv","mx","mn","toString","toByte","component","floor","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Interpolated","range","timingFunction","interpolator","args","t","InterpolationTimer","totalTime","elapsedTime","tick","sample","animation","numberInterpolator","a","p","fastColorInterpolator","EvenlySpacedKeyframes","percPer","length","keyframes","Keyframes","i","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","angle","distance","cos","sin","lengthSq","dot","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","splitArgsOrSingle","subtractWith","divideWith","equals","src","sy","pts","add","Bezier","rotate","theta","fromAngle","Rect","w","shift","xp","shiftBy","edge","corner","TILE_WIDTH","TILE_HEIGHT","HALF_TILE_SIZE","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","PLAYER_START_POSITION","source","sourceBounds","origin","getSprite","getPixelSize","getRenderable","width","height","draw","ctx","destination","rotation","oldTransform","getTransform","drawImage","setTransform","AllDirections","PI","pt","amount","TurnRight","amt","TurnLeft","point","HexLength","sign","abs","GetRing","radius","result","pos","dir","originDelta","HpRenderer","image","emptyHpImage","redHpImage","yellowHpImage","blueHpImage","hp","maxHp","rows","ceil","lastRowLength","fullImage","emptyImage","originPoint","row","dy","col","lastRowDx","SpriteAnimation","firstFrame","frameAdvance","numFrames","duration","loop","SpriteAnimationInstance","frameNumber","frame","overrideDuration","currentTick","position","EntityMoveAnimation","entity","motion","target","timer","RenderableAnimation","renderable","bounds","fixedDuraiton","SequentialAnimation","steps","ProjectileAnimation","size","fromPixel","toPixel","CreateProjectileAnimation","projectile","fromHex","toHex","onImpact","destPt","projAnimation","impactAnimation","AttackInfo","attacker","affectedTiles","damage","bumpAnimation","ignoreEnemies","ignorePlayer","startPoint","getAffectedTiles","state","positions","toAnimations","animations","pixTarget","Entity","primary","SimpleEnemy","rect","Enemy","Zombie","super","isFlying","goldValue","assets","sprite","tiles","getAttacks","playerLocation","player","basicAttack","getMove","attack","disallowed","possibleMoves","map","rp","minMoves","minMoveDist","some","isValidMoveIgnoreEnemies","random","DeltaRenderable","delta","Rectangle","StackRenderable","renderables","renderableFinishMode","finishMode","allFinished","anyFinished","f","typeId","pathable","isPathable","AfterPlayerTurn","AfterEnemyTurn","SimpleCell","spriteSheetPosition","includeDefaultRenderable","bg_renderable","AfterWorldLoad","world","tileParts","directions","tileCoords","tileSlice","StitchTileParts","tx","ty","tw","th","isEdge","adjacencyMap","images","part","index","reduceRight","acc","DelayAnimation","inner","delay","ParallelAnimation","step","TileAttackInfo","infos","delayPerDist","animationSource","allPts","reduce","info","concat","dist","pix","Lava","TypeID","steppingEnemy","enemies","find","e","getImpactAnimation","OnEntityStep","lavaStatic","lavaLayers","d","hexPt","isInBounds","get","lavaOverlay","overlayWaver","round","renderTickNumber","Archer","isAfraid","fearsprite","projectileSprite","ray","nextPt","entityAt","projectileAttack","deltaPlayer","targetPosition","tile","Mage","cooldownsprite","attackOnCooldown","RadialAreaAttackInfo","rings","delayPerRadius","ring","filter","innerAnimations","points","Giant","turnSequenceIndex","turnSequence","lastTurn","bigAttackPrepImage","radialSmashAnimation","turn","internalGetMove","OffsetRenderable","offset","StoneEye","prepFire","Assets","loader","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","floor_and_digits","ImageLoader","hpImage","impacts","onLoadFinished","hpRenderer","onAssetsLoaded","getDigitSprite","digit","digitRow","drawNumber","digits","split","parseInt","SimpleWeapon","type","artTile","iconImage","beforeMove","attacks","moveFrom","moveTo","moveDelta","onMove","rot","getRotation","pattern","attackInfo","enableAdditionalMoves","getBeforeMoveAttacks","getAfterMoveAttacks","Sword","getAttack","IsPlayer","animationAttack","Dagger","Player","secondary","GameState","floorNum","generator","changeFloor","regionId","gold","to","isValidMove","flying","isValidMoveIgnorePlayer","generateMap","currentFloor","iterate","excludeEntities","cell","forEach","includes","DownStairs","AnimationPhase","onFinish","init","AttackResolutionPhase","nextPhase","damageGroups","damageGroup","goldValues","AfterMovePhase","isPlayerTurn","next","allAttacks","c","atk","gs","EnemyMovePhase","stepped","lastAttacks","rm","findIndex","didMove","enemy","PlayerTurnGamePhase","AfterEnemyMovePhase","Floor","customSprite","HexArray","defaultValue","_size","data","midRowLength","dx","yp","extractInputCoords","toArrayCoords","set","getRowLength","xMin","xMax","getXRange","minX","getMinX","func","playerMoveTileArts","FloorZeroGen","ring2","playerRing","toPath","node","parent","parentPath","AssurePathTo","checkEnd","pathLengthNoise","pathToEnd","isEnd","getNeighbors","closedSet","openSet","cost","minIndex","cur","current","neighbor","neighborNode","open","DjikstraPath","neighbors","trapSprites","trapCooldown","Trap","cooldown","spritePos","StandardMapGen","leftLavaY","leftLavaX","genLava","rightLavaY","rightLavaX","downStairY","downStairX","AssurePathToEnd","validEnemySpawns","spawnId","zombie","archer","floorPositions","replaceFloor","validRiverDirections","dest","MapGenerators","gen","FloorTransitionPhase","FloorTransitionPlayerMovePhase","fillStyle","globalAlpha","fillRect","playerStartPoint","EntryAnimationPhase","lerp","tgt","PlayerMoveAnimPhase","from","forceMotion","enemyAttacks","attackSet","EnemyAttackPhase","postMoveAttacks","playerMove","dirKeys","tryGetDirection","additionalMoves","specialMove","move","forceMove","animationTime","GameStartAnimationPhase","Run","scaleHelper","assetLoader","AssetLoader","currentPhase","TryRescale","clearRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","style","background","id"],"sourceRoot":""}