{"version":3,"sources":["webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/3d/Vector.ts","webpack:///./src/projects/mandelbrot/ProgressiveRepaint.ts","webpack:///./src/projects/mandelbrot/Renderer.ts","webpack:///./src/projects/mandelbrot/Constants.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Mandelbrot.ts","webpack:///./src/projects/mandelbrot/iterativeFunctions/Julia.ts","webpack:///./src/projects/mandelbrot/ClickDragWrapper.ts","webpack:///./src/projects/mandelbrot/main.ts","webpack:///./src/projects/gravitation/rock.ts","webpack:///./src/projects/gravitation/Constants.ts","webpack:///./src/projects/gravitation/main.ts"],"names":["Color","vals","h","s","v","this","hsv","rgb","undefined","r","g","b","reqRgb","reqHsv","n","k","Math","max","min","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor","Vector","x","y","z","other","sqrt","lengthSq","multiply","sx","sy","sz","isVector","getxyz","dx","dy","dz","ProgressiveRepaint","canvasWidth","canvasHeight","finished","scale","maxScale","fastLog2","shift","paintColor","canvas","func","repainter","ctx","getContext","screenRange","offsetWidth","offsetHeight","windowRange","i","X","Y","Scale","worldCoords","ConvertTo","fillStyle","CalcColor","fillRect","Advance","coords","original","rolling","iter","absSq","MaxAbsSq","Iterate","perc","ToColor","Reset","Mandelbrot","multiplyWith","addWith","Julia","c","radius","abs","control","paintWindow","renderer","onSelect","addEventListener","handleMouseDown","bind","handleMouseUp","handleMouseLeave","handleMouseMove","handleScroll","screenBounds","ResetPaint","event","button","grabX","offsetX","grabY","offsetY","isGrabbed","preventDefault","result","buttons","GetPercentage","ShiftByPercentage","assertBounds","scalePercentage","deltaY","scalePerc","pow","AspectScale","xRange","Length","yRange","ScaleTo","assertRangeBounds","Shift","Paint","mandelRender","juliaRender","Run","document","getElementById","subCanvas","setAttribute","style","width","height","mandelbrotSelect","setTimeout","Tick","reset","requestAnimationFrame","pos","vel","mass","color","Position","Velocity","Mass","gravVector","subtract","minlength","LEN_SCALE","accel","normalize","add","project","save","depth","colorScale","toString","size","beginPath","arc","PI","fill","restore","rocks","randBetween","random","push","MAX_MASS","loop","length","j","applyGravitation","heaviest","reduce","m","forEach","rock","finishTick","sort","a","paint","projectPosition","tick","worldRange"],"mappings":"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","file":"mandelbrot.bundle.js","sourcesContent":["export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { VERSION } from \"@microsoft/signalr\";\r\n\r\nexport default class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n    }\r\n\r\n    dot(other: Vector) {\r\n        return this.x * other.x + this.y * other.y + this.z * other.z;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    normalize() {\r\n        return this.multiply(1 / this.lengthSq());\r\n    }\r\n    negate() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n\r\n    multiply(scale: number): Vector;\r\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\r\n    multiply(scale: Vector): Vector;\r\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\r\n        if(!isVector(sx))\r\n        {\r\n            sy = sy ?? <number>sx;\r\n            sz = sz ?? <number>sx;\r\n        }\r\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\r\n        return new Vector(this.x * x, this.y * y, this.z * z);\r\n    }\r\n\r\n    add(dx: number, dy: number, dz: number): Vector;\r\n    add(v: Vector): Vector;\r\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x + x, this.y + y, this.z + z);\r\n    }\r\n\r\n    subtract(dx: number, dy: number, dz: number): Vector;\r\n    subtract(v: Vector): Vector;\r\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\r\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\r\n        return new Vector(this.x - x, this.y - y, this.z - z);\r\n    }\r\n\r\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\r\n        if(isVector(x)) {\r\n            return [x.x, x.y, x.z];\r\n        }\r\n        else {\r\n            return [x, y, z];\r\n        }\r\n    }\r\n}\r\n\r\nfunction isVector(x: number | Vector) : x is Vector {\r\n    return (<any>x).x !== undefined;\r\n}","export class ProgressiveRepaint {\r\n    private x: number;\r\n    private y: number;\r\n    private scale: number;\r\n    private maxScale: number;\r\n    public finished: boolean;\r\n\r\n    constructor(private canvasWidth: number, private canvasHeight: number) {\r\n        this.finished = false;\r\n        this.scale = this.maxScale = (1 << this.fastLog2(Math.min(canvasWidth, canvasHeight)));\r\n        this.x = this.y = 0;\r\n    }\r\n\r\n    private fastLog2(v: number) {\r\n        let shift = 0;\r\n        while (v > 0) {\r\n            shift++;\r\n            v >>= 1;\r\n        }\r\n        return shift;\r\n    }\r\n\r\n    X(): number {\r\n        return this.x * this.scale;\r\n    }\r\n    Y(): number {\r\n        return this.y * this.scale;\r\n    }\r\n    Scale(): number {\r\n        return this.scale;\r\n    }\r\n\r\n    // Returns bool done\r\n    Advance(): boolean {\r\n        this.x++;\r\n        if (this.x * this.scale >= this.canvasWidth) {\r\n            this.x = 0;\r\n            this.y++;\r\n            if (this.y * this.scale >= this.canvasHeight) {\r\n                this.y = 0;\r\n                if (this.scale === 1) {\r\n                    this.finished = true;\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.scale /= 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Reset() {\r\n        this.finished = false;\r\n        this.scale = this.maxScale;\r\n        this.x = this.y = 0;\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Range2d, Range, ColorRange, Complex } from '../common';\r\nimport { IIterativeFunction } from './iterativeFunctions/IIterativeFunction';\r\nimport { ProgressiveRepaint } from './ProgressiveRepaint';\r\n\r\nconst MAX_DEPTH = 255;\r\nconst PAINT_PER_TICK = Const.CANVAS_WIDTH * 20;\r\nconst paintColor: ColorRange = new ColorRange(0, 255, 0, 200, 0, 0);\r\n\r\nexport class Renderer {\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private screenRange: Range2d;\r\n    private repainter: ProgressiveRepaint;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, public func: IIterativeFunction) {\r\n        this.repainter = new ProgressiveRepaint(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n        this.ctx = canvas.getContext('2d');\r\n        this.screenRange = new Range2d(new Range(0, canvas.offsetWidth), new Range(0, canvas.offsetHeight));\r\n    }\r\n\r\n    Paint(windowRange: Range2d) {\r\n        for (let i = 0; i < PAINT_PER_TICK && !this.repainter.finished; i++) {\r\n            const x = this.repainter.X();\r\n            const y = this.repainter.Y();\r\n            const s = this.repainter.Scale();\r\n            const worldCoords = this.screenRange.ConvertTo({x, y}, windowRange);\r\n            this.ctx.fillStyle = this.CalcColor(worldCoords);\r\n            this.ctx.fillRect(x, y, s, s);\r\n            this.repainter.Advance();\r\n        }\r\n    }\r\n\r\n    CalcColor(coords: {x: number, y: number}): string {\r\n\r\n        const original = new Complex(coords.x, coords.y);\r\n        let rolling = new Complex(coords.x, coords.y);\r\n        let iter = 0;\r\n\r\n        while (iter < MAX_DEPTH && rolling.absSq() < this.func.MaxAbsSq()) {\r\n            rolling = this.func.Iterate(rolling, original);\r\n            iter++;\r\n        }\r\n\r\n        if (rolling.absSq() < this.func.MaxAbsSq()) {\r\n            return 'white';\r\n        }\r\n\r\n        const perc = iter / MAX_DEPTH;\r\n        return paintColor.ToColor(perc);\r\n    }\r\n\r\n    ResetPaint() {\r\n        this.repainter.Reset();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Mandelbrot implements IIterativeFunction {\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(original);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return 2;\r\n    }\r\n}\r\n","import { IIterativeFunction } from './IIterativeFunction';\r\nimport { Complex } from '../../common';\r\n\r\nexport class Julia implements IIterativeFunction {\r\n\r\n    private radius: number;\r\n    constructor(private c: Complex) {\r\n        this.radius = (Math.sqrt(4 * c.abs() + 1) + 1) / 2;\r\n    }\r\n\r\n    Iterate(rolling: Complex, original: Complex): Complex {\r\n        rolling.multiplyWith(rolling);\r\n        rolling.addWith(this.c);\r\n        return rolling;\r\n    }\r\n\r\n    MaxAbsSq(): number {\r\n        return this.radius;\r\n    }\r\n}","import { Range2d, Range } from '../common';\r\nimport { Renderer } from './Renderer';\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nconst MAX_ZOOM_WIDTH = 4;\r\nconst MIN_WINDOW = -2;\r\nconst MAX_WINDOW = 2;\r\n\r\nexport class ClickDragWrapper {\r\n    screenBounds: Range2d;\r\n    constructor(private control: HTMLElement, private paintWindow: Range2d, public renderer: Renderer, private onSelect: (x: number, y: number) => void) {\r\n        control.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        control.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        control.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\r\n        control.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        control.addEventListener('wheel', this.handleScroll.bind(this));\r\n        this.screenBounds = new Range2d(new Range(0, control.offsetWidth), new Range(0, control.offsetHeight));\r\n    }\r\n\r\n    reset() {\r\n        this.paintWindow = new Range2d(new Range(-1, 1), new Range(-1, 1));\r\n        this.renderer.ResetPaint();\r\n    }\r\n\r\n    grabX: number;\r\n    grabY: number;\r\n    isGrabbed: boolean;\r\n    private handleMouseDown(event: MouseEvent) {\r\n        if (event.button === 0) {\r\n            this.grabX = event.offsetX;\r\n            this.grabY = event.offsetY;\r\n            this.isGrabbed = true;\r\n            event.preventDefault();\r\n        }\r\n        else if (event.button === 1) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    private handleMouseUp() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseLeave() {\r\n        this.isGrabbed = false;\r\n    }\r\n    private handleMouseMove(event: MouseEvent) {\r\n        if (event.buttons === 4) {\r\n            const result = this.screenBounds.ConvertTo({ x: event.offsetX, y: event.offsetY }, this.paintWindow);\r\n            this.onSelect(result.x, result.y);\r\n            event.preventDefault();\r\n        }\r\n        if (!this.isGrabbed) return;\r\n        const dx = event.offsetX - this.grabX;\r\n        const dy = event.offsetY - this.grabY;\r\n\r\n        const perc = this.screenBounds.GetPercentage(dx, dy);\r\n        this.paintWindow.ShiftByPercentage(-perc.x, -perc.y);\r\n        this.assertBounds();\r\n\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        this.grabX = event.offsetX;\r\n        this.grabY = event.offsetY;\r\n    }\r\n\r\n    private handleScroll(event: WheelEvent) {\r\n        const scalePercentage = event.deltaY / SCROLL_DIV;\r\n        const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n        const perc = this.screenBounds.GetPercentage(event.offsetX, event.offsetY);\r\n\r\n        this.paintWindow.AspectScale(scalePerc, perc.x, perc.y);\r\n        this.assertBounds();\r\n\r\n        this.renderer.ResetPaint();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private assertBounds() {\r\n        if (this.paintWindow.xRange.Length() > MAX_ZOOM_WIDTH || this.paintWindow.yRange.Length() > MAX_ZOOM_WIDTH) {\r\n            this.paintWindow.xRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n            this.paintWindow.yRange.ScaleTo(MAX_ZOOM_WIDTH, 0.5);\r\n        }\r\n        this.assertRangeBounds(this.paintWindow.xRange);\r\n        this.assertRangeBounds(this.paintWindow.yRange);\r\n    }\r\n\r\n    private assertRangeBounds(r: Range) {\r\n        if (r.min < MIN_WINDOW) r.Shift(MIN_WINDOW - r.min);\r\n        if (r.max > MAX_WINDOW) r.Shift(MAX_WINDOW - r.max);\r\n    }\r\n\r\n    public Tick() {\r\n        this.renderer.Paint(this.paintWindow);\r\n    }\r\n}","import * as Const from './Constants';\r\nimport { Renderer } from './Renderer';\r\nimport { Mandelbrot } from './iterativeFunctions/Mandelbrot';\r\nimport { Julia } from './iterativeFunctions/Julia';\r\nimport { Range2d, Range, Complex } from '../common';\r\nimport { ClickDragWrapper } from './ClickDragWrapper';\r\n\r\n\r\nlet mandelRender: ClickDragWrapper;\r\nlet juliaRender: ClickDragWrapper;\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n    const subCanvas = document.getElementById('subCanvas') as HTMLCanvasElement;\r\n\r\n    canvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    canvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    canvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    canvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    subCanvas.setAttribute('width', Const.CANVAS_WIDTH + '');\r\n    subCanvas.setAttribute('height', Const.CANVAS_HEIGHT + '');\r\n    subCanvas.style.width = Const.CANVAS_WIDTH + 'px';\r\n    subCanvas.style.height = Const.CANVAS_HEIGHT + 'px';\r\n\r\n    mandelRender = new ClickDragWrapper(canvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(canvas, new Mandelbrot()), mandelbrotSelect);\r\n    juliaRender = new ClickDragWrapper(subCanvas, new Range2d(new Range(-1, 1), new Range(-1, 1)), new Renderer(subCanvas,  new Julia(new Complex(0, 0))), (x, y) => undefined);\r\n\r\n    setTimeout(Tick, 0);\r\n}\r\n\r\nfunction mandelbrotSelect(x: number, y: number) {\r\n    juliaRender.renderer.func = new Julia(new Complex(x, y));\r\n    juliaRender.reset();\r\n}\r\n\r\nfunction Tick() {\r\n    mandelRender.Tick();\r\n    juliaRender.Tick();\r\n    requestAnimationFrame(Tick);\r\n}","import Vector from \"../common/3d/Vector\";\r\nimport { Color } from \"../common/Color\";\r\nimport * as C from './Constants';\r\n\r\nexport default class Rock {\r\n    Position: Vector;\r\n    Velocity: Vector;\r\n    Mass: number;\r\n    Color: Color;\r\n\r\n    constructor(pos: Vector, vel: Vector, mass: number, color: Color) {\r\n        this.Position = pos;\r\n        this.Velocity = vel;\r\n        this.Mass = mass;\r\n        this.Color = color;\r\n    }\r\n\r\n    applyGravitation(other: Rock) {\r\n        let gravVector = other.Position.subtract(this.Position);\r\n        const minlength = (this.Mass + other.Mass) * C.MASS_COLISION_SCALE;\r\n        const lengthSq = Math.max(gravVector.lengthSq() * C.LEN_SCALE_SQ, minlength * minlength);\r\n        let force = gravVector.normalize().multiply(other.Mass).multiply(C.G_CONST / lengthSq);\r\n        let accel = force.multiply(1/this.Mass);\r\n        this.Velocity = this.Velocity.add(accel);\r\n    }\r\n\r\n    finishTick() {\r\n        this.Position = this.Position.add(this.Velocity);\r\n    }\r\n\r\n    paint(ctx: CanvasRenderingContext2D, project: (v: Vector) => {x: number, y: number, depth: number}) {\r\n        ctx.save();\r\n        const { x, y, depth } = project(this.Position);\r\n        const colorScale = Math.max(Math.min(depth, 1), 0);\r\n        ctx.fillStyle = Color.rgb(this.Color.r() * colorScale, this.Color.g() * colorScale, this.Color.b() * colorScale).toString();\r\n        let size = C.SCALE_PER_MASS * this.Mass * depth;\r\n        size = Math.min(Math.max(size, 1), 100);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, size, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export const CANVAS_WIDTH = 800;\r\nexport const CANVAS_HEIGHT = 800;\r\nexport const SCALE_PER_MASS = 2;\r\nexport const G_CONST = 60;\r\nexport const MASS_COLISION_SCALE = 3;\r\nexport const LEN_SCALE = 1;\r\nexport const LEN_SCALE_SQ = LEN_SCALE * LEN_SCALE;","import { VERSION } from '@microsoft/signalr';\r\nimport { Range } from '../common';\r\nimport Vector from '../common/3d/Vector';\r\nimport { ResizeCanvas } from '../common/CanvasHelpers';\r\nimport { Color } from '../common/Color';\r\nimport { unitRange } from '../common/Range';\r\nimport * as Const from './Constants';\r\nimport Rock from './rock';\r\n\r\nconst NUM_ROCKS = 50;\r\n\r\nconst MIN_POS = -100;\r\nconst MAX_POS = 100;\r\nconst MAX_V = 0.3;\r\nconst MIN_MASS = 1;\r\nconst MAX_MASS = 5;\r\n\r\nlet rocks: Rock[] = [];\r\n\r\nfunction randBetween(min: number, max: number){\r\n    return Math.random() * (max-min) + min;\r\n}\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\r\n\r\n    ResizeCanvas(canvas, Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < NUM_ROCKS; i++){\r\n        rocks.push(new Rock(\r\n            new Vector(randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS), randBetween(MIN_POS, MAX_POS)),\r\n            new Vector(randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V),randBetween(-MAX_V, MAX_V)),\r\n            randBetween(MIN_MASS, MAX_MASS),\r\n            Color.rgb(1, 1, 1)\r\n        ));\r\n    }\r\n\r\n    rocks.push(new Rock(new Vector( 0,0,0),\r\n    new Vector(0,0,0),\r\n    MAX_MASS * 5,\r\n    Color.rgb(1, 0, 0)));\r\n\r\n    loop(canvas.getContext('2d'));\r\n}\r\n\r\nfunction loop(ctx: CanvasRenderingContext2D) {\r\n    tick(ctx);\r\n    requestAnimationFrame(()=>loop(ctx));\r\n}\r\n\r\nfunction tick(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0,0,Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT);\r\n\r\n    for(let i = 0; i < rocks.length; i++) {\r\n        for(let j = 0; j < rocks.length; j++) {\r\n            if(i !== j) { \r\n                rocks[i].applyGravitation(rocks[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    let heaviest = rocks.reduce((m, c) => m.Mass >= c.Mass ? m : c);\r\n\r\n    rocks.forEach(rock => {\r\n        rock.Position = rock.Position.subtract(heaviest.Position);\r\n        rock.finishTick();\r\n    });\r\n    rocks.sort((a, b) => a.Position.z - b.Position.z);\r\n    rocks.forEach(rock => {\r\n        rock.paint(ctx, projectPosition);\r\n    });\r\n}\r\n\r\nconst windowRange: Range = new Range(0, Math.min(Const.CANVAS_WIDTH, Const.CANVAS_HEIGHT));\r\nconst worldRange: Range = new Range(MIN_POS, MAX_POS);\r\n\r\nfunction projectPosition(v: Vector): {x: number, y: number, depth: number} {\r\n    return {\r\n        x: worldRange.ConvertTo(v.x, windowRange),\r\n        y: worldRange.ConvertTo(v.y, windowRange),\r\n        depth: worldRange.ConvertTo(v.z, unitRange),\r\n    };\r\n}"],"sourceRoot":""}