{"version":3,"file":"888.bundle.js","mappings":"4HAEe,MAAMA,EACjBC,YAAmBC,EAAuBC,GAAvB,KAAAD,KAAAA,EAAuB,KAAAC,QAAAA,EAInCC,UAAUC,GACb,OAAmC,IAA5BC,KAAKJ,KAAKK,QAAQF,GAGtBG,QAAQH,GACX,OAAmC,IAA5BC,KAAKJ,KAAKK,QAAQF,ICLlB,MAAMI,EAIjBR,YAAmBS,EAAsCC,GAAtC,KAAAD,gBAAAA,EAAsC,KAAAC,YAAAA,OAC3BC,IAArBN,KAAKK,cACNL,KAAKK,aAAc,GAEvBD,EAAgBG,iBAAiB,WAAWC,GAAKR,KAAKS,UAAUD,KAChEJ,EAAgBG,iBAAiB,SAASC,GAAKR,KAAKU,QAAQF,KAE5DR,KAAKW,SAAW,GAChBX,KAAKH,QAAU,GAGXY,UAAUV,GACVC,KAAKK,aAELO,QAAQC,IAAId,EAAIA,MAGP,IADDC,KAAKW,SAASV,QAAQF,EAAIA,OAElCC,KAAKH,QAAQiB,KAAK,CAAEf,IAAKA,EAAIA,IAAKgB,OAAQ,UAC1Cf,KAAKW,SAASG,KAAKf,EAAIA,MAIvBW,QAAQX,GACZC,KAAKH,QAAQiB,KAAK,CAAEf,IAAKA,EAAIA,IAAKgB,OAAQ,YAC1C,MAAMC,EAAMhB,KAAKW,SAASV,QAAQF,EAAIA,KACtCC,KAAKW,SAASM,OAAOD,EAAK,GAGvBE,SACH,MAAMC,EAAYnB,KAAKW,SACjBS,EAAepB,KAAKH,QAK1B,OAHAG,KAAKW,SAAWQ,EAAUE,QAC1BrB,KAAKH,QAAU,GAER,IAAIH,EAASyB,EAAWC,IC5CxB,MAAME,EAMjB3B,YAAY4B,EAAsBlB,GAC9BL,KAAKwB,QAAU,IAAIrB,EAAWoB,EAASlB,GACvCL,KAAKyB,SAAWzB,KAAK0B,aAAe1B,KAAKwB,QAAQN,SAG9CS,SACH3B,KAAKyB,SAAWzB,KAAK0B,aACrB1B,KAAK0B,aAAe1B,KAAKwB,QAAQN,SAG9BpB,UAAUC,GACb,OAAOC,KAAK0B,aAAa5B,UAAUC,GAGhCG,QAAQH,GACX,OAAOC,KAAK0B,aAAaxB,QAAQH,GAG9B6B,aAAa7B,GAChB,OAAOC,KAAK0B,aAAa5B,UAAUC,IAAQC,KAAKyB,SAASvB,QAAQH,GAG9D8B,cAAc9B,GACjB,OAAOC,KAAK0B,aAAaxB,QAAQH,IAAQC,KAAKyB,SAAS3B,UAAUC,GAG9DF,UACH,OAAOG,KAAK0B,aAAa7B,W,gCCpClB,MAAMiC,EAMjBnC,YAAmBoC,EAAkBC,GAAlB,KAAAD,EAAAA,EAAkB,KAAAC,EAAAA,EAJrCC,cACI,OAAO,IAAIH,EAAM,EAAE,GAOhBG,iBAAiBC,EAAeC,GACnC,OAAO,IAAIL,EAAMM,KAAKC,IAAIH,IAAUC,MAAAA,EAAAA,EAAY,GAAIC,KAAKE,IAAIJ,IAAUC,MAAAA,EAAAA,EAAY,IAGhFI,WACH,OAAOT,EAAMU,IAAIxC,KAAMA,MAGpByC,SACH,OAAOL,KAAKM,KAAK1C,KAAKuC,YAGnBI,QACH,OAAO,IAAIb,EAAM9B,KAAK+B,EAAG/B,KAAKgC,GAG3BY,SACH,OAAO,IAAId,GAAO9B,KAAK+B,GAAI/B,KAAKgC,GAG7Ba,gBAGH,OAFA7C,KAAK+B,GAAK/B,KAAK+B,EACf/B,KAAKgC,GAAKhC,KAAKgC,EACRhC,KAGJiC,WAAWa,EAAWC,GACzB,OAAOD,EAAGf,EAAIgB,EAAGhB,EAAIe,EAAGd,EAAIe,EAAGf,EAG5BgB,QAAQC,GACX,OAAOnB,EAAMU,IAAIxC,KAAMiD,GAGpBC,YACH,IAAIC,EAAMnD,KAAKyC,SACf,OAAOX,EAAMsB,SAASpD,KAAM,EAAImD,GAG7BE,YACH,OAAOjB,KAAKkB,MAAMtD,KAAKgC,EAAGhC,KAAK+B,GAG5BwB,WACH,OAAO,IAAIzB,EAAMM,KAAKoB,MAAMxD,KAAK+B,GAAIK,KAAKoB,MAAMxD,KAAKgC,IAKlDyB,QAAQR,EAAqBjB,GAChC,MAAOD,EAAG2B,EAAI1B,EAAG2B,GAAMC,EAAUX,EAAOjB,GAGxC,OAFAhC,KAAK+B,GAAK2B,EACV1D,KAAKgC,GAAK2B,EACH3D,KAMJ6D,SAASZ,EAAqBjB,GACjC,MAAOD,EAAG2B,EAAI1B,EAAG2B,GA4FzB,SAA2B5B,EAAiBC,GACxC,YAAS1B,IAAN0B,OAEuB1B,IAAlByB,EAAYA,EACL,CAAEA,EAAWA,EAAGA,EAAGC,EAAWD,EAAGC,GAErC,CAAED,EAAGA,EAAaC,EAAGD,GAEzB,CAACA,EAAWA,EAAGC,EAAAA,GApGK8B,CAAkBb,EAAOjB,GAGhD,OAFAhC,KAAK+B,GAAK2B,EACV1D,KAAKgC,GAAK2B,EACH3D,KAKJ+D,aAAad,EAAqBjB,GACrC,MAAOD,EAAG2B,EAAI1B,EAAG2B,GAAMC,EAAUX,EAAOjB,GAGxC,OAFAhC,KAAK+B,GAAK2B,EACV1D,KAAKgC,GAAK2B,EACH3D,KAKJgE,WAAWf,EAAqBjB,GACnC,MAAOD,EAAG2B,EAAI1B,EAAG2B,GAAMC,EAAUX,EAAOjB,GAGxC,OAFAhC,KAAK+B,GAAK2B,EACV1D,KAAKgC,GAAK2B,EACH3D,KAGJiE,OAAOhB,GACV,OAAOjD,KAAK+B,IAAMkB,EAAMlB,GAAK/B,KAAKgC,IAAMiB,EAAMjB,EAMlDC,WAAWiC,EAAYjB,EAAqBjB,GACxC,MAAOD,EAAG2B,EAAI1B,EAAG2B,GAAMC,EAAUX,EAAOjB,GACxC,OAAO,IAAIF,EAAMoC,EAAInC,EAAI2B,EAAIQ,EAAIlC,EAAI2B,GAKzC1B,gBAAgBiC,EAAYjB,EAAqBjB,GAC7C,MAAOD,EAAG2B,EAAI1B,EAAG2B,GAAMC,EAAUX,EAAOjB,GACxC,OAAO,IAAIF,EAAMoC,EAAInC,EAAI2B,EAAIQ,EAAIlC,EAAI2B,GAKzC1B,gBAAgBkC,EAAUC,EAAiBC,GACvC,YAAW/D,IAAP+D,EACO,IAAIvC,EAAMqC,EAAEpC,EAAKqC,EAAcD,EAAEnC,EAAIqC,QAEtB/D,IAAhB8D,EAAUrC,EACT,IAAID,EAAMqC,EAAEpC,EAAKqC,EAAYrC,EAAGoC,EAAEnC,EAAKoC,EAAYpC,GAEnD,IAAIF,EAAMqC,EAAEpC,EAAKqC,EAAcD,EAAEnC,EAAKoC,GAIrDnC,mBAAmBkC,EAAUC,EAAUE,GACnC,OAAO,IAAIxC,EAAMqC,EAAEpC,GAAKqC,EAAErC,EAAIoC,EAAEpC,GAAKuC,EAAGH,EAAEnC,GAAKoC,EAAEpC,EAAImC,EAAEnC,GAAKsC,GAGhErC,oBAAoBkC,EAAUC,GAC1B,OAAGD,EAAEpC,GAAKqC,EAAErC,GAAKoC,EAAEnC,GAAKoC,EAAEpC,EAAUmC,EACjCC,EAAErC,GAAKoC,EAAEpC,GAAKqC,EAAEpC,GAAKmC,EAAEnC,EAAUoC,EAC7B,IAAItC,EAAMM,KAAKmC,IAAIJ,EAAEpC,EAAGqC,EAAErC,GAAIK,KAAKmC,IAAIJ,EAAEnC,EAAGoC,EAAEpC,IAGzDC,oBAAoBkC,EAAUC,GAC1B,OAAGD,EAAEpC,GAAKqC,EAAErC,GAAKoC,EAAEnC,GAAKoC,EAAEpC,EAAUmC,EACjCC,EAAErC,GAAKoC,EAAEpC,GAAKqC,EAAEpC,GAAKmC,EAAEnC,EAAUoC,EAC7B,IAAItC,EAAMM,KAAKoC,IAAIL,EAAEpC,EAAGqC,EAAErC,GAAIK,KAAKoC,IAAIL,EAAEnC,EAAGoC,EAAEpC,IAGzDC,cAAcwC,EAAcC,GACxB,OAAkB,IAAfD,EAAIE,OAAqBF,EAAI,GACT,IAAfA,EAAIE,OAAqB7C,EAAM8C,IAAI9C,EAAMsB,SAASqB,EAAI,GAAIC,GAAI5C,EAAMsB,SAASqB,EAAI,GAAI,EAAEC,IACxF5C,EAAM8C,IACT9C,EAAMsB,SAAStB,EAAM+C,OAAOJ,EAAIpD,MAAM,GAAIqD,GAAIA,GAC9C5C,EAAMsB,SAAStB,EAAM+C,OAAOJ,EAAIpD,MAAM,EAAGoD,EAAIE,OAAS,GAAID,GAAI,EAAEA,IAGxEI,OAAOC,GACH,MAAM7C,EAAQE,KAAKkB,MAAMtD,KAAKgC,EAAGhC,KAAK+B,GAChCoB,EAAMnD,KAAKyC,SACjB,OAAOX,EAAMkD,UAAU9C,EAAQ6C,EAAO5B,IAI9C,SAASS,EAAU7B,EAAiBC,GAChC,YAAS1B,IAAN0B,EAAwB,CAAED,EAAWA,EAAGA,EAAGC,EAAWD,EAAGC,GACrD,CAACD,EAAWA,EAAGC,EAAAA,K,2GC7JnB,MAGMiD,EAAiB,IAAI,IAAM,GAAI,IAG/BC,EAAiB,IAEjBC,EAAsB,IAAI,IAAMD,IAAmCA,K,cCVhF,QAAe,IAA0B,uCCI1B,MAAME,EAGjBzF,YAAY0F,GACRrF,KAAKsF,MAAQ,IAAIC,EAAA,EAAY,GAAI,GAAIC,EAAmBH,EAAOI,8BCqChE,MAAMC,UAzBN,cAdQ,MAIX/F,YAAYgG,EAAgBC,GACxB5F,KAAK2F,OAASA,EACd3F,KAAK6F,WAAaD,IAWtBjG,YAAYgG,EAAgBG,EAA4BD,GACpDE,MAAMJ,EAAQE,GACd7F,KAAKgG,wBAA0BF,EAG1BG,eAAeC,EAAiBC,IAIhCC,KAAKC,EAA+BC,EAAgBJ,EAAiBC,GAC1EG,EAAOhB,MAAMiB,OACTF,EH9BkB,GG+BlBF,EAAGpE,EAAwBoE,EAAGnE,EAAI,IAAsB,IACvDmE,EAAGnE,EAAI,IAAsB,IHlChB,GACC,GGoCfhC,KAAKgG,wBAAwBjE,EAC7B/B,KAAKgG,wBAAwBhE,KAMrCrC,cACIoG,MAAM,EAAG,IAAI,IAAM,EAAE,IAAI,GAG7BS,aAAaC,KC9CF,MAAMC,EAIjB/G,YAAmBgH,GAAA,KAAAA,KAAAA,EAFnB,KAAAC,MAAqB,GAGjB,IAAIC,EAAoB,EAALF,EAAS,EAC5B,IAAI,IAAIG,EAAW,EAALH,EAAQG,GAAMH,EAAK,EAAGG,IAAK,CACrC,IAAIC,EAAiB,GACrB,IAAI,IAAIC,EAAK,EAAGA,EAAKH,EAAezE,KAAK6E,IAAIH,GAAKE,IAAK,CACnD,IAAIE,EAAO,IAAIxB,EACfqB,EAAIjG,KAAKoG,GAEblH,KAAK4G,MAAM9F,KAAKiG,GAGpB,IAAI,IAAID,EAAW,EAALH,EAAQG,GAAMH,EAAK,EAAGG,IAAM,CACtC,MAAMC,EAAM/G,KAAK2G,KAAO,EAAIG,EACtBK,EAAwB,EAAZnH,KAAK2G,KAAW,EAAIvE,KAAK6E,IAAIH,GACzCM,GAAUhF,KAAKmC,IAAIwC,EAAK/G,KAAK2G,KAAO,GAC1C,IAAI,IAAIK,EAAK,EAAGA,EAAKG,EAAWH,IAAM,CAClC,IAAKjF,EAAGC,GAAKhC,KAAKqH,cAAcL,EAAKI,EAAQN,GAClC9G,KAAK4G,MAAM5E,GAAGD,GACpBkE,eAAejG,KAAM,IAAI,IAAMgH,EAAKI,EAAQN,MAKtDQ,KAAKjB,EAA+BC,GACvC,IAAI,IAAIQ,EAAgB,EAAV9G,KAAK2G,KAAQG,GAAM9G,KAAK2G,KAAK,EAAGG,IAAM,CAChD,MAAMC,EAAM/G,KAAK2G,KAAO,EAAIG,EACtBK,EAAwB,EAAZnH,KAAK2G,KAAW,EAAIvE,KAAK6E,IAAIH,GACzCM,GAAUhF,KAAKmC,IAAIwC,EAAK/G,KAAK2G,KAAO,GAC1C,IAAI,IAAIK,EAAK,EAAGA,EAAKG,EAAWH,IAAM,CAClC,IAAKjF,EAAGC,GAAKhC,KAAKqH,cAAcL,EAAKI,EAAQN,GAClC9G,KAAK4G,MAAM5E,GAAGD,GAEpBqE,KAAKC,EAAKC,EAAQtG,KAAM,IAAI,IAAMgH,EAAKI,EAAQN,MAKxDO,cAActF,EAAWC,GAC7B,MAAM+E,EAAM/G,KAAK2G,KAAO,EAAI3E,EAK5B,OAJkBhC,KAAK2G,KAAevE,KAAK6E,IAAIjF,GAIxC,CAFID,IADKK,KAAKmC,IAAIwC,EAAK/G,KAAK2G,KAAO,GAG9BI,ICxCL,SAASQ,IACpB,IAAIlB,EAEAzG,EACA4H,EAEJ,MAAMC,EAAc,IAAIC,EAAA,EAClBpB,EAAS,IAAIlB,EAAOqC,GAE1B,IAAIvB,EAoBJ,SAASyB,KACL,QAAuBtB,GACvBA,EAAIuB,UAAU,EAAG,EAAG,EAAkB,GAEtCvB,EAAIwB,UAAY,UAChBxB,EAAIyB,SAAS,EAAG,EAAG,EAAkB,GAErC5B,EAAMoB,KAAKjB,EAAKC,GAGhByB,uBAAsB,IAAMJ,MAGhC,OA/BA/H,EAAO,IAAI0B,EAAA,EAAgB0G,SAASC,MACpCR,EAAYS,eAEZ,WACI,MAAMC,EAASH,SAASI,eAAe,cACvC/B,EAAM8B,EAAOE,WAAW,MACxBb,EAAc,IAAIc,EAAA,EACdH,EACA9B,EACA,EACA,GACA,GACA,SAEJH,EAAQ,IAAIQ,EL7BI,GK8BhBiB,OAgBG,IAAOH,EAAYe,UClDf,SAASC,IAEpB,OADA,aAAgB,IAAIjB,MACb,uBAAKkB,UAAU,mCAClB,0BAAQC,GAAG","sources":["webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/hoplite/Constants.ts","webpack://trading-game/./src/projects/hoplite/assets/hoplite_tiles.png","webpack://trading-game/./src/projects/hoplite/Assets.ts","webpack://trading-game/./src/projects/hoplite/HexCell.ts","webpack://trading-game/./src/projects/hoplite/HexWorld.ts","webpack://trading-game/./src/projects/hoplite/index.ts","webpack://trading-game/./src/views/projects/hoplite/HopliteComponent.tsx"],"sourcesContent":["import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public LengthSq(): number {\n        return Point.Dot(this, this);\n    }\n\n    public Length(): number {\n        return Math.sqrt(this.LengthSq());\n    }\n\n    public Clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public Negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public NegateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static Dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public DotWith(other: Point): number {\n        return Point.Dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.Length();\n        return Point.Multiply(this, 1 / len);\n    }\n\n    public Direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public Truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public AddWith(x: number, y: number): this;\n    public AddWith(other: Point): this;\n    public AddWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public MultWith(s: number): this;\n    public MultWith(x: number, y: number): this;\n    public MultWith(other: Point): this;\n    public MultWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public SubtractWith(x: number, y: number): this;\n    public SubtractWith(other: Point): this;\n    public SubtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public DivideWith(x: number, y: number): this;\n    public DivideWith(other: Point): this;\n    public DivideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public Equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static Multiply(a: Point, s: number, sy?: number): Point;\n    static Multiply(a: Point, b: Point): Point;\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\n        return Point.add(\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.Length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","import Point from \"../common/position/Point\";\n\nexport const TILE_WIDTH = 32;\nexport const TILE_HEIGHT = 32;\nexport const PIX_PER_CELL_X = 32;\nexport const PIX_PER_CELL_Y = new Point(16, 24);\n\nexport const MAP_SIZE = 6;\nexport const MAP_PIXEL_SIZE = (MAP_SIZE*2 - 1)*PIX_PER_CELL_X;\n\nexport const MAP_CENTER_POSITION = new Point(MAP_PIXEL_SIZE/2 - TILE_WIDTH / 2, MAP_PIXEL_SIZE/2 - TILE_HEIGHT / 2);","export default __webpack_public_path__ + \"81cce123ff2af92952a4c56e73756c3e.png\";","import AssetLoader from \"../common/assets/AssetLoader\";\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\nimport hoplite_tiles_url from './assets/hoplite_tiles.png';\n\nexport default class Assets {\n    tiles: SpriteSheet;\n\n    constructor(loader: AssetLoader) {\n        this.tiles = new SpriteSheet(32, 32, hoplite_tiles_url, loader.registerAssetLoadCallback());\n    }\n\n}","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport Entity from \"./Entity\";\nimport HexWorld from \"./HexWorld\";\nimport * as C from \"./Constants\";\n\nexport default abstract class HexCell {\n    isPathable: boolean;\n    typeId: number;\n\n    constructor(typeId: number, pathable: boolean){\n        this.typeId = typeId;\n        this.isPathable = pathable;\n    }\n\n    abstract OnEntityStep(entity: Entity): void;\n    abstract AfterWorldLoad(world: HexWorld, pt: Point): void;\n    abstract Draw(ctx: CanvasRenderingContext2D, assets: Assets, world: HexWorld, pt: Point): void;\n}\n\nexport abstract class SimpleCell extends HexCell{\n    public spriteSheetTilePosition: Point;\n\n    constructor(typeId: number, spriteSheetPosition: Point, isPathable: boolean){\n        super(typeId, isPathable);\n        this.spriteSheetTilePosition = spriteSheetPosition;\n    }\n\n    override AfterWorldLoad(world: HexWorld, pt: Point): void {\n        \n    }\n\n    override Draw(ctx: CanvasRenderingContext2D, assets: Assets, world: HexWorld, pt: Point): void {\n        assets.tiles.render(\n            ctx,\n            pt.x * C.PIX_PER_CELL_X + (pt.y * C.PIX_PER_CELL_Y.x) + C.MAP_CENTER_POSITION.x,\n            (pt.y * C.PIX_PER_CELL_Y.y) + C.MAP_CENTER_POSITION.y,\n            C.TILE_WIDTH,\n            C.TILE_HEIGHT,\n            this.spriteSheetTilePosition.x,\n            this.spriteSheetTilePosition.y\n        )\n    }\n}\n\nexport class Floor extends SimpleCell {\n    constructor() {\n        super(0, new Point(0,0), true);\n    }\n\n    OnEntityStep(entity: Entity): void {\n    }\n}\n\n\nexport class Lava extends SimpleCell {\n    constructor() {\n        super(1, new Point(1,0), false);\n    }\n\n    OnEntityStep(entity: Entity): void {\n        if(!entity.isFlying)\n            entity.TakeDamage(999);\n    }\n}\n","import Point from \"../common/position/Point\";\nimport Assets from \"./Assets\";\nimport HexCell, { Floor, Lava } from \"./HexCell\";\n\nexport default class HexWorld {\n\n    cells: HexCell[][] = [];\n\n    constructor(public size: number) {\n        let midRowLength = size*2 - 1;\n        for(let dy = -size+1; dy <= size-1; dy++){\n            let row: HexCell[] = [];\n            for(let dx = 0; dx < midRowLength - Math.abs(dy); dx++){\n                let cell = new Floor();\n                row.push(cell);\n            }\n            this.cells.push(row);\n        }\n\n        for(let dy = -size+1; dy <= size-1; dy++) {\n            const row = this.size - 1 + dy;\n            const rowLength = this.size * 2 - 1 - Math.abs(dy);\n            const firstX = -Math.min(row, this.size - 1);\n            for(let dx = 0; dx < rowLength; dx++) {\n                let [x, y] = this.coordsToArray(dx + firstX, dy);\n                let cell = this.cells[y][x];\n                cell.AfterWorldLoad(this, new Point(dx + firstX, dy));\n            }\n        }\n    }\n\n    public draw(ctx: CanvasRenderingContext2D, assets: Assets) {\n        for(let dy = -this.size+1; dy <= this.size-1; dy++) {\n            const row = this.size - 1 + dy;\n            const rowLength = this.size * 2 - 1 - Math.abs(dy);\n            const firstX = -Math.min(row, this.size - 1);\n            for(let dx = 0; dx < rowLength; dx++) {\n                let [x, y] = this.coordsToArray(dx + firstX, dy);\n                let cell = this.cells[y][x];\n\n                cell.Draw(ctx, assets, this, new Point(dx + firstX, dy));\n            }\n        }\n    }\n\n    private coordsToArray(x: number, y: number): [number, number] {\n        const row = this.size - 1 + y;\n        const rowLength = this.size * 2 - 1 - Math.abs(y);\n        const firstX = -Math.min(row, this.size - 1);\n        const dx = x - firstX;\n\n        return [dx, row];\n    }\n}","import AssetLoader from '../common/assets/AssetLoader';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Point from '../common/position/Point';\nimport { TILES_HIGH } from '../rpgt/Constants';\nimport * as C from \"./Constants\";\nimport Assets from './Assets';\nimport HexWorld from './HexWorld';\n\nexport default function Run(): (()=>void) {\n    let ctx: CanvasRenderingContext2D;\n    \n    let keys: KeyboardManager;\n    let scaleHelper: NearestNeighborScalingHelper;\n    \n    const assetLoader = new AssetLoader();\n    const assets = new Assets(assetLoader);\n\n    let world: HexWorld;\n\n    keys = new KeyboardManager(document.body);\n    assetLoader.onAllFinished(assetLoadDone);\n    \n    function assetLoadDone() {\n        const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n        ctx = canvas.getContext('2d');\n        scaleHelper = new NearestNeighborScalingHelper(\n            canvas, \n            ctx, \n            C.MAP_PIXEL_SIZE, \n            C.MAP_PIXEL_SIZE, \n            true, \n            () => { return; }\n        );\n        world = new HexWorld(C.MAP_SIZE);\n        tick();\n    }\n    \n    function tick() {\n        NearestNeighborScaling(ctx);\n        ctx.clearRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n\n        ctx.fillStyle = '#000000';\n        ctx.fillRect(0, 0, C.MAP_PIXEL_SIZE, C.MAP_PIXEL_SIZE);\n\n        world.draw(ctx, assets);\n\n\n        requestAnimationFrame(() => tick());\n    }\n\n    return (() => scaleHelper.Detatch());\n}\n","import * as React from 'react';\nimport Run from '../../../projects/hoplite/index';\n\nexport default function HopliteComponent() {\n    React.useEffect(()=>Run());\n    return <div className='rpgt rpgt_body full_body center'>\n        <canvas id=\"mainCanvas\"></canvas>\n    </div>;\n}\n"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Point","x","y","static","angle","distance","Math","cos","sin","LengthSq","Dot","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","Direction","atan2","Truncate","trunc","AddWith","nx","ny","splitArgs","MultWith","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","rotate","theta","fromAngle","PIX_PER_CELL_Y","MAP_PIXEL_SIZE","MAP_CENTER_POSITION","Assets","loader","tiles","SpriteSheet","hoplite_tiles","registerAssetLoadCallback","Floor","typeId","pathable","isPathable","spriteSheetPosition","super","spriteSheetTilePosition","AfterWorldLoad","world","pt","Draw","ctx","assets","render","OnEntityStep","entity","HexWorld","size","cells","midRowLength","dy","row","dx","abs","cell","rowLength","firstX","coordsToArray","draw","Run","scaleHelper","assetLoader","AssetLoader","tick","clearRect","fillStyle","fillRect","requestAnimationFrame","document","body","onAllFinished","canvas","getElementById","getContext","NearestNeighborScalingHelper","Detatch","HopliteComponent","className","id"],"sourceRoot":""}