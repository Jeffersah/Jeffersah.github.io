{"version":3,"file":"wave-collapse.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/wave-collapse-2/AdjacencyMap.ts","webpack://trading-game/./src/projects/wave-collapse-2/assets/isoTiles2.png","webpack://trading-game/./src/projects/wave-collapse-2/Generator.ts","webpack://trading-game/./src/projects/wave-collapse-2/index.ts","webpack://trading-game/./src/views/projects/wave-collapse-2/WaveCollapse2Component.tsx","webpack://trading-game/./src/projects/wave-collapse/assets/TileInfo.ts","webpack://trading-game/./src/projects/wave-collapse/AdjacencyMap.ts","webpack://trading-game/./src/projects/wave-collapse/assets/isotiles.png","webpack://trading-game/./src/projects/wave-collapse/Generator.ts","webpack://trading-game/./src/projects/wave-collapse/index.ts","webpack://trading-game/./src/views/projects/wave-collapse/WaveCollapseComponent.tsx"],"sourcesContent":["import { TILE_SIZE } from \".\";\r\n\r\nexport default interface ITileNeighborInfo {\r\n    id: number,\r\n    // x+, y+, x-, y-, z+, z-\r\n    neighbors: number[][],\r\n}\r\n\r\nexport const NeighborDirections = [\r\n    { x: 1, y: 0, z: 0 },\r\n    { x: 0, y: 1, z: 0 },\r\n    { x: -1, y: 0, z: 0 },\r\n    { x: 0, y: -1, z: 0 },\r\n    { x: 0, y: 0, z: 1 },\r\n    { x: 0, y: 0, z: -1 },\r\n]\r\n\r\ntype ISingleBoundary = number[];\r\ntype IBoundaryInfo = ISingleBoundary[]\r\n\r\nexport function GenerateNeighborInfo(tileCanvas: HTMLCanvasElement, tileCtx: CanvasRenderingContext2D): ITileNeighborInfo[] {\r\n    let tilesWide = tileCanvas.width / TILE_SIZE;\r\n    let tilesTall = tileCanvas.height / (3 * TILE_SIZE); // Image row and two data rows\r\n    let results: ITileNeighborInfo[] = [];\r\n    let boundaryInfo: IBoundaryInfo[] = [];\r\n\r\n    const masks = GenerateMasks(tileCtx);\r\n    console.log('MASKS:');\r\n    console.log(masks);\r\n\r\n    results.push({ id: 0, neighbors: [[],[],[],[],[],[]] });\r\n    let defaultBoundaryInfo = [];\r\n    for(let i = 0; i < masks.length; i++) {\r\n        defaultBoundaryInfo.push(masks[i].flatMap(p => [0, 0, 0, 0]));\r\n    }\r\n    boundaryInfo.push(defaultBoundaryInfo);\r\n\r\n\r\n    for(let y = 0; y < tilesTall; y++) {\r\n        for(let x = 0; x < tilesWide; x++){\r\n            if(x === 0 && y === 0) continue; // the 0,0 tile is special\r\n\r\n            const boundaryData = tileCtx.getImageData(x * TILE_SIZE, y * TILE_SIZE * 3 + TILE_SIZE, TILE_SIZE, TILE_SIZE * 2);\r\n            const info = GetBoundaryInfo(masks, boundaryData);\r\n            const myNeighbors:number[][] = [[],[],[],[],[],[]];\r\n            const myId: number = results.length;\r\n            \r\n            results.push({ id: myId, neighbors: myNeighbors });\r\n            boundaryInfo.push(info);\r\n\r\n            for(let otherId = 0; otherId < results.length; otherId++){\r\n                const otherInfo = boundaryInfo[otherId];\r\n                // Check if we can be a neighbor of another tile\r\n                for(let direction = 0; direction < 4; direction++) {\r\n                    if(BoundariesMatch(info[direction], otherInfo[(direction + 2) % 4])) {\r\n                        results[otherId].neighbors[(direction + 2) % 4].push(myId);\r\n                        myNeighbors[direction].push(otherId);\r\n                    }\r\n                }\r\n\r\n                // Can I support on him?\r\n                if(TopBottomBoundariesMatch(info[4], otherInfo[5])) {\r\n                    results[otherId].neighbors[5].push(myId);\r\n                    myNeighbors[4].push(otherId);\r\n                }\r\n                // Can he support me?\r\n                if(TopBottomBoundariesMatch(otherInfo[4], info[5])){\r\n                    results[otherId].neighbors[4].push(myId);\r\n                    myNeighbors[5].push(otherId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction BoundariesMatch(t0: ISingleBoundary, t1: ISingleBoundary): boolean{\r\n    if(t0.length !== t1.length) {\r\n        return false;\r\n    }\r\n    for(let i = 0; i < t0.length; i++) {\r\n        if(t0[i] !== t1[i]) {\r\n            return false\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction TopBottomBoundariesMatch(top: ISingleBoundary, bottom: ISingleBoundary){\r\n    if(top.length !== bottom.length) return false;\r\n    for(let i = 0; i < top.length; i += 4) {\r\n        if(bottom[i+3] === 0) // Bottom is transparent, we don't care about the top cell here\r\n            continue;\r\n        else if (top[i+3] === 0) // Bottom is NOT transparent, top is. Fail\r\n            return false;\r\n        for(let j = 0; j < 3; j++) {\r\n            if(top[i+j] !== bottom[i+j]) return false; // Check the RGB values\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction GetBoundaryInfo(masks: number[][], imageData: ImageData): IBoundaryInfo {\r\n    let results: ISingleBoundary[] = [];\r\n    for(let dir = 0; dir < masks.length; dir++) {\r\n        let pixelIndecies = masks[dir];\r\n        let singleResult: number[] = pixelIndecies.flatMap(pi => [\r\n            imageData.data[pi * 4 + 0],\r\n            imageData.data[pi * 4 + 1],\r\n            imageData.data[pi * 4 + 2],\r\n            imageData.data[pi * 4 + 3],\r\n        ]);\r\n\r\n        results.push(singleResult);\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction GenerateMasks(tileCtx: CanvasRenderingContext2D): number[][]{\r\n    let frontMask = tileCtx.getImageData(0, TILE_SIZE, TILE_SIZE, TILE_SIZE);\r\n    let rearMask = tileCtx.getImageData(0, TILE_SIZE * 2, TILE_SIZE, TILE_SIZE);\r\n\r\n    let frontPix = GetMaskPixelIndecies(frontMask);\r\n    let rearPix = GetMaskPixelIndecies(rearMask);\r\n\r\n    let rearOffset = frontMask.width * frontMask.height;\r\n\r\n    return [ rearPix.g.map(i => i + rearOffset), rearPix.r.map(i => i + rearOffset), frontPix.g, frontPix.r, frontPix.b, rearPix.b.map(i => i + rearOffset) ];\r\n}\r\nfunction GetMaskPixelIndecies(mask: ImageData){\r\n    let r: number[] = [];\r\n    let g: number[] = [];\r\n    let b: number[] = [];\r\n    for(let i = 0; i < mask.data.length; i += 4) {\r\n        if(mask.data[i + 3] === 0) {\r\n            continue;\r\n        }\r\n        if(mask.data[i + 0] > 0) {\r\n            r.push(i/4);\r\n        }\r\n        else if(mask.data[i + 1] > 0) {\r\n            g.push(i/4);\r\n        }\r\n        else if (mask.data[i+2] > 0) {\r\n            b.push(i/4);\r\n        }\r\n    }\r\n    return {r, g, b};\r\n}","export default __webpack_public_path__ + \"8693b769ef61bbb07341b64f03c65956.png\";","import ITileNeighborInfo, { NeighborDirections } from \"./AdjacencyMap\";\r\n\r\nexport type WaveCell = number | number[];\r\nexport type WaveFunction = WaveCell[][][];\r\n\r\nexport function CreateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number)\r\n{\r\n    let defaultCell = [];\r\n    for(let i = 0; i < neighborInfos.length; i++) { defaultCell.push(i); }\r\n\r\n    let waveFunction: WaveFunction = [];\r\n    for(let x = 0; x < xSize; x++) {\r\n        let plane = [];\r\n        for(let y = 0; y < ySize; y++) {\r\n            let row = [];\r\n            for(let z = 0; z < zSize; z++) {\r\n                row.push([...defaultCell]);\r\n            }\r\n            plane.push(row);\r\n        }\r\n        waveFunction.push(plane);\r\n    }\r\n    return waveFunction;\r\n}\r\n\r\nexport function GenerateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number) {\r\n    let waveFunction = CreateChunk(neighborInfos, xSize, ySize, zSize);\r\n\r\n    while(!Step(neighborInfos, waveFunction)){}\r\n\r\n    return waveFunction as number[][][];\r\n}\r\n\r\nexport function Step(neighborInfos: ITileNeighborInfo[], waveFunction: WaveFunction) {\r\n    let minCount = Infinity;\r\n    let minCells: {x: number, y: number, z: number}[] = [];\r\n    for(let x = 0; x < waveFunction.length; x++) {\r\n        for(let y = 0; y < waveFunction[x].length; y++) {\r\n            for(let z = 0; z < waveFunction[x][y].length; z++) {\r\n                if(!isFinalizedCell(waveFunction[x][y][z])){\r\n                    let count = (waveFunction[x][y][z] as number[]).length;\r\n                    if(count < minCount) {\r\n                        minCount = count;\r\n                        minCells = [{x, y, z}];\r\n                    }\r\n                    else if(count === minCount) {\r\n                        minCells.push({x, y, z});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!isFinite(minCount)) { return true; }\r\n\r\n    let chosenIndex = Math.floor(Math.random() * minCells.length);\r\n    let {x, y, z} = minCells[chosenIndex];\r\n    let waveCell = waveFunction[x][y][z];\r\n    let options = getPossibilities(waveCell);\r\n    let chosen = options[Math.floor(Math.random() * options.length)];\r\n\r\n    waveFunction[x][y][z] = chosen;\r\n\r\n    PropagateChanges(neighborInfos, waveFunction, x, y, z);\r\n    return false;\r\n}\r\n\r\nexport function PropagateChanges(neighborInfos: ITileNeighborInfo[], waveFunction: WaveFunction, x: number, y: number, z: number)\r\n{\r\n    let stack = [{x, y, z}];\r\n    while(stack.length > 0) {\r\n        let {x, y, z} = stack.pop();\r\n        let waveCell = waveFunction[x][y][z];\r\n\r\n        for(let directionIndex = 0; directionIndex < 6; directionIndex++) {\r\n            let direction = NeighborDirections[directionIndex];\r\n            if(x + direction.x < 0 || y + direction.y < 0 || z + direction.z < 0 || x + direction.x >= waveFunction.length || y + direction.y >= waveFunction[x].length || z + direction.z >= waveFunction[x][y].length) {\r\n                continue;\r\n            }\r\n\r\n            let neighborCell = waveFunction[x + direction.x][y + direction.y][z + direction.z];\r\n\r\n            let newNeighbor = tryAdjustNeighbor(neighborInfos, waveCell, neighborCell, directionIndex);\r\n            if(newNeighbor !== null) {\r\n                waveFunction[x + direction.x][y + direction.y][z + direction.z] = newNeighbor;\r\n                stack.push({x: x + direction.x, y: y + direction.y, z: z + direction.z});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction tryAdjustNeighbor(neighborInfos: ITileNeighborInfo[], cell: WaveCell, neighbor: WaveCell, direction: number): null | WaveCell {\r\n    if(isFinalizedCell(neighbor)) {\r\n        return null;\r\n    }\r\n\r\n    let options: number[] = [];\r\n\r\n    getPossibilities(cell).forEach(self => {\r\n        let neighborInfo = neighborInfos[self];\r\n        let results = neighborInfo.neighbors[direction];\r\n        results.forEach(result => {\r\n            if(options.indexOf(result) === -1) options.push(result);\r\n        });\r\n    });\r\n\r\n    let other = getPossibilities(neighbor);\r\n    let diff = false;\r\n    for(var i = other.length - 1; i >= 0; i--) {\r\n        if(options.indexOf(other[i]) === -1) {\r\n            other.splice(i, 1);\r\n            diff = true;\r\n        }\r\n    }\r\n\r\n    if(diff) {\r\n        if(other.length === 1) {\r\n            return other[0];\r\n        }\r\n        else if(other.length === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return other;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport function getPossibilities(waveCell: WaveCell){\r\n    if(isFinalizedCell(waveCell)) {\r\n        return [waveCell];\r\n    }\r\n    else {\r\n        return waveCell;\r\n    }\r\n}\r\nexport function isFinalizedCell(waveCell: WaveCell): waveCell is number {\r\n    return typeof waveCell === 'number';\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport { NearestNeighborScaling } from \"../common/CanvasHelpers\";\r\nimport NearestNeighborScalingHelper from \"../common/NearestNeighborScalingHelper\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport ITileNeighborInfo, { GenerateNeighborInfo } from \"./AdjacencyMap\";\r\nimport tileUrl from './assets/isoTiles2.png'\r\nimport { CreateChunk, GenerateChunk, getPossibilities, isFinalizedCell, PropagateChanges, Step, WaveFunction } from \"./Generator\";\r\n\r\nexport const TILE_SIZE = 64;\r\n\r\nlet spriteSheet: SpriteSheet;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    spriteSheet = new SpriteSheet(64, 64, tileUrl, assetLoader.registerAssetLoadCallback());\r\n\r\n    assetLoader.onAllFinished(() => Start());\r\n}\r\n\r\nfunction Start(){\r\n\r\n    const offscreenCanvas = document.createElement('canvas');\r\n    offscreenCanvas.width = spriteSheet.image.width;\r\n    offscreenCanvas.height = spriteSheet.image.height;\r\n    const offscreenCtx = offscreenCanvas.getContext('2d');\r\n    offscreenCtx.drawImage(spriteSheet.image, 0, 0);\r\n\r\n    const neighbors = GenerateNeighborInfo(offscreenCanvas, offscreenCtx);\r\n\r\n\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    console.log(\"Generating!\");\r\n    let tiles = CreateChunk(neighbors, 28, 28, 4);\r\n\r\n    for(let x = 0; x < tiles.length; x++) {\r\n        for(let z = 0; z < tiles[0][0].length; z++){\r\n            tiles[x][0][z] = 0;\r\n            PropagateChanges(neighbors, tiles, x, 0, z);\r\n            tiles[x][tiles[0].length - 1][z] = 0;\r\n            PropagateChanges(neighbors, tiles, x, tiles[0].length - 1, z);\r\n        }\r\n    }    \r\n    for(let y = 0; y < tiles[0].length; y++) {\r\n        for(let z = 0; z < tiles[0][0].length; z++){\r\n            tiles[0][y][z] = 0;\r\n            PropagateChanges(neighbors, tiles, 0, y, z);\r\n            tiles[tiles.length-1][y][z] = 0;\r\n            PropagateChanges(neighbors, tiles, tiles.length-1, y, z);\r\n        }\r\n    }\r\n\r\n    let scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, 1600, 1200, true, () => Paint(spriteSheet, tiles, ctx));\r\n\r\n    tickLoop(neighbors, spriteSheet, tiles, ctx);\r\n}\r\n\r\nfunction tickLoop(neighborInfos: ITileNeighborInfo[], assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    Paint(assets, cells, ctx);\r\n\r\n    if(!Step(neighborInfos, cells)){\r\n        requestAnimationFrame(() => tickLoop(neighborInfos, assets, cells, ctx));\r\n    }\r\n}\r\n\r\n\r\nfunction Paint(assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(0, 0, 1600, 1200);\r\n\r\n    let origin = [800, 1200];\r\n\r\n    for(let z = 0; z < cells[0][0].length; z++){\r\n        // ctx.globalAlpha = 1-(z / cells[0][0].length);\r\n        for(let x = cells.length - 1; x >= 0; x--) {\r\n            for(let y = cells[x].length - 1; y >= 0; y--) {\r\n                let options = getPossibilities(cells[x][y][z]);\r\n\r\n                if(options.length <= 8) {\r\n                    if(options.length === 0) continue;\r\n\r\n                    ctx.globalAlpha = 1 / options.length;\r\n                    let tx = (x-y) * (TILE_SIZE/2);\r\n                    let ty = -(x+y) * (TILE_SIZE/4) - z*(TILE_SIZE/2);\r\n                    \r\n                    for(const cellId of options) {\r\n                        let cellX = cellId % (spriteSheet.tilesWide);\r\n                        let cellY = Math.floor(cellId / (spriteSheet.tilesWide));\r\n\r\n                        let sprite = assets.getSprite(cellX, cellY * 3, TILE_SIZE, TILE_SIZE);\r\n\r\n                        sprite.draw(ctx, new Rect(tx + origin[0], ty + origin[1], TILE_SIZE, TILE_SIZE), 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport Run from '../../../projects/wave-collapse-2';\r\n\r\nexport default function WaveCollapse2Component() {\r\n    React.useEffect(() => Run());\r\n    return <div style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}>\r\n        <canvas id='canvas' style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}></canvas>\r\n    </div>;\r\n}","\r\nexport interface ITileInfo {\r\n    tile: [number, number];\r\n    edges: number[];\r\n\r\n    // If omitted, bottom = edges but 0 => 'any'\r\n    bottom?: (number[]|'any')[];\r\n    // If omitted, top = edges but 2 => 'any'\r\n    top?: (number[]|'any')[];\r\n}\r\n\r\nexport function getTop(ti: ITileInfo): (number[]|'any')[] {\r\n    return ti.top ?? ti.edges.map(t => t === 2 ? 'any' : [t]);\r\n}\r\n\r\nexport function getBottom(ti: ITileInfo): (number[]|'any')[] { \r\n    return ti.bottom ?? ti.edges.map(t => t === 0 ? 'any' : [t]);\r\n}\r\n\r\nexport function canStack(bottom: (number[]|'any')[], top: (number[]|'any')[]){\r\n    for(let i = 0; i < bottom.length; i++)\r\n    {\r\n        if(bottom[i] === 'any' || top[i] === 'any') continue;\r\n        if(bottom[i].length === 0 || top[i].length === 0) return false;\r\n        if(!hasIntersection(bottom[i] as number[], top[i] as number[])) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction hasIntersection(a: number[], b: number[]){\r\n    for(let i = 0; i < a.length; i++)\r\n    {\r\n        if(b.indexOf(a[i]) !== -1) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst TileInfos: ITileInfo[] = [\r\n    { \r\n        tile: [0, 0],\r\n        edges: [2, 2, 2, 2]\r\n    },\r\n    { \r\n        tile: [1, 0],\r\n        edges: [1, 0, 1, 0]\r\n    },\r\n    {\r\n        tile: [2, 0],\r\n        edges: [0, 1, 0, 1]\r\n    },\r\n    {\r\n        tile: [3, 0],\r\n        edges: [1, 0, 0, 0],\r\n        bottom: [[1, 2], 'any', [1, 2], 'any'],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [4, 0],\r\n        edges: [0, 0, 1, 0],\r\n        bottom: [[1, 2], 'any', [1, 2], 'any'],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [5, 0],\r\n        edges: [0, 1, 0, 0],\r\n        bottom: ['any', [1, 2], 'any', [1, 2]],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [6, 0],\r\n        edges: [0, 0, 0, 1],\r\n        bottom: ['any', [1, 2], 'any', [1, 2]],\r\n        top: [[], [], [] , []]\r\n    },\r\n    {\r\n        tile: [7, 0],\r\n        edges: [1, 1, 1, 1]\r\n    },\r\n    {\r\n        tile: [0, 1],\r\n        edges: [1, 1, 0, 1]\r\n    },\r\n    {\r\n        tile: [1, 1],\r\n        edges: [1, 1, 1, 0]\r\n    },\r\n    {\r\n        tile: [2, 1],\r\n        edges: [0, 1, 1, 1]\r\n    },\r\n    {\r\n        tile: [3, 1],\r\n        edges: [1, 0, 1, 1]\r\n    },\r\n    {\r\n        tile: [4, 1],\r\n        edges: [1, 1, 0, 0]\r\n    },\r\n    {\r\n        tile: [5, 1],\r\n        edges: [0, 1, 1, 0]\r\n    },\r\n    {\r\n        tile: [6, 1],\r\n        edges: [0, 0, 1, 1]\r\n    },\r\n    {\r\n        tile: [7, 1],\r\n        edges: [1, 0, 0, 1]\r\n    },\r\n    {\r\n        tile: [0, 2],\r\n        edges: [1, 0, 2, 0]\r\n    },\r\n    {\r\n        tile: [1, 2],\r\n        edges: [0, 1, 0, 2]\r\n    },\r\n    {\r\n        tile: [2, 2],\r\n        edges: [2, 0, 1, 0],\r\n    },\r\n    {\r\n        tile: [3, 2],\r\n        edges: [0, 2, 0, 1],\r\n    },\r\n    { \r\n        tile: [4, 2],\r\n        edges: [1, 0, 1, 0],\r\n        bottom: [[1,2],[1,2],[1,2],[1,2]],\r\n    },\r\n    {\r\n        tile: [5, 2],\r\n        edges: [0, 1, 0, 1],\r\n        bottom: [[1,2],[1,2],[1,2],[1,2]],\r\n    },\r\n    {\r\n        tile: [5, 3],\r\n        edges: [0, 0, 0, 0]\r\n    },\r\n]\r\n\r\n\r\nexport default TileInfos;","import { canStack, getBottom, getTop, ITileInfo } from \"./assets/TileInfo\";\r\n\r\nexport default interface ITileNeighborInfo {\r\n    id: number,\r\n    // x+, y+, x-, y-, z+, z-\r\n    neighbors: number[][],\r\n}\r\n\r\nexport const NeighborDirections = [\r\n    { x: 1, y: 0, z: 0 },\r\n    { x: 0, y: 1, z: 0 },\r\n    { x: -1, y: 0, z: 0 },\r\n    { x: 0, y: -1, z: 0 },\r\n    { x: 0, y: 0, z: 1 },\r\n    { x: 0, y: 0, z: -1 },\r\n]\r\n\r\nexport function GenerateNeighborInfo(tiles: ITileInfo[]) {\r\n    const result: ITileNeighborInfo[] = [];\r\n    tiles.forEach(tile => {\r\n        let neighborInfo: ITileNeighborInfo = {\r\n            id: result.length,\r\n            neighbors: [[], [], [], [], [], []],\r\n        };\r\n\r\n        for(let otherId = 0; otherId < tiles.length; otherId++){\r\n            let otherTile = tiles[otherId];\r\n            for(let dir = 0; dir < 4; dir++) {\r\n                if(otherTile.edges[(dir + 2)%4] === tile.edges[dir])\r\n                {\r\n                    neighborInfo.neighbors[dir].push(otherId);\r\n                }\r\n            }\r\n            if(canStack(getTop(otherTile), getBottom(tile))) {\r\n                neighborInfo.neighbors[4].push(otherId);\r\n            }\r\n            \r\n            if(canStack(getTop(tile), getBottom(otherTile))) {\r\n                neighborInfo.neighbors[5].push(otherId);\r\n            }\r\n        }\r\n\r\n        for(var i = 0; i < neighborInfo.neighbors.length; i++){\r\n            neighborInfo.neighbors[i].sort((a, b) => a - b);\r\n        }\r\n        result.push(neighborInfo);\r\n    });\r\n\r\n    return result;\r\n}","export default __webpack_public_path__ + \"c169d19bb90720608b4e6ba8299edfb4.png\";","import ITileNeighborInfo, { NeighborDirections } from \"./AdjacencyMap\";\r\n\r\nexport type WaveCell = number | number[];\r\nexport type WaveFunction = WaveCell[][][];\r\n\r\nexport function CreateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number)\r\n{\r\n    let defaultCell = [];\r\n    for(let i = 0; i < neighborInfos.length; i++) { defaultCell.push(i); }\r\n\r\n    let waveFunction: WaveFunction = [];\r\n    for(let x = 0; x < xSize; x++) {\r\n        let plane = [];\r\n        for(let y = 0; y < ySize; y++) {\r\n            let row = [];\r\n            for(let z = 0; z < zSize; z++) {\r\n                row.push([...defaultCell]);\r\n            }\r\n            plane.push(row);\r\n        }\r\n        waveFunction.push(plane);\r\n    }\r\n    return waveFunction;\r\n}\r\n\r\nexport function GenerateChunk(neighborInfos: ITileNeighborInfo[], xSize: number, ySize: number, zSize: number) {\r\n    let waveFunction = CreateChunk(neighborInfos, xSize, ySize, zSize);\r\n\r\n    while(!Step(neighborInfos, waveFunction)){}\r\n\r\n    return waveFunction as number[][][];\r\n}\r\n\r\nexport function Step(neighborInfos: ITileNeighborInfo[], waveFunction: WaveFunction) {\r\n    let minCount = Infinity;\r\n    let minCells: {x: number, y: number, z: number}[] = [];\r\n    for(let x = 0; x < waveFunction.length; x++) {\r\n        for(let y = 0; y < waveFunction[x].length; y++) {\r\n            for(let z = 0; z < waveFunction[x][y].length; z++) {\r\n                if(!isFinalizedCell(waveFunction[x][y][z])){\r\n                    let count = (waveFunction[x][y][z] as number[]).length;\r\n                    if(count < minCount) {\r\n                        minCount = count;\r\n                        minCells = [{x, y, z}];\r\n                    }\r\n                    else if(count === minCount) {\r\n                        minCells.push({x, y, z});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!isFinite(minCount)) { return true; }\r\n\r\n    let chosenIndex = Math.floor(Math.random() * minCells.length);\r\n    let {x, y, z} = minCells[chosenIndex];\r\n    let waveCell = waveFunction[x][y][z];\r\n    let options = getPossibilities(waveCell);\r\n    let chosen = options[Math.floor(Math.random() * options.length)];\r\n\r\n    waveFunction[x][y][z] = chosen;\r\n\r\n    PropagateChanges(neighborInfos, waveFunction, x, y, z);\r\n    return false;\r\n}\r\n\r\nfunction PropagateChanges(neighborInfos: ITileNeighborInfo[],waveFunction: WaveFunction, x: number, y: number, z: number)\r\n{\r\n    let stack = [{x, y, z}];\r\n    while(stack.length > 0) {\r\n        let {x, y, z} = stack.pop();\r\n        let waveCell = waveFunction[x][y][z];\r\n\r\n        for(let directionIndex = 0; directionIndex < 6; directionIndex++) {\r\n            let direction = NeighborDirections[directionIndex];\r\n            if(x + direction.x < 0 || y + direction.y < 0 || z + direction.z < 0 || x + direction.x >= waveFunction.length || y + direction.y >= waveFunction[x].length || z + direction.z >= waveFunction[x][y].length) {\r\n                continue;\r\n            }\r\n\r\n            let neighborCell = waveFunction[x + direction.x][y + direction.y][z + direction.z];\r\n\r\n            let newNeighbor = tryAdjustNeighbor(neighborInfos, waveCell, neighborCell, directionIndex);\r\n            if(newNeighbor !== null) {\r\n                waveFunction[x + direction.x][y + direction.y][z + direction.z] = newNeighbor;\r\n                stack.push({x: x + direction.x, y: y + direction.y, z: z + direction.z});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction tryAdjustNeighbor(neighborInfos: ITileNeighborInfo[], cell: WaveCell, neighbor: WaveCell, direction: number): null | WaveCell {\r\n    if(isFinalizedCell(neighbor)) {\r\n        return null;\r\n    }\r\n\r\n    let options: number[] = [];\r\n\r\n    getPossibilities(cell).forEach(self => {\r\n        let neighborInfo = neighborInfos[self];\r\n        let results = neighborInfo.neighbors[direction];\r\n        results.forEach(result => {\r\n            if(options.indexOf(result) === -1) options.push(result);\r\n        });\r\n    });\r\n\r\n    let other = getPossibilities(neighbor);\r\n    let diff = false;\r\n    for(var i = other.length - 1; i >= 0; i--) {\r\n        if(options.indexOf(other[i]) === -1) {\r\n            other.splice(i, 1);\r\n            diff = true;\r\n        }\r\n    }\r\n\r\n    if(diff) {\r\n        if(other.length === 1) {\r\n            return other[0];\r\n        }\r\n        else if(other.length === 0) {\r\n            return options[0];\r\n        }\r\n        else {\r\n            return other;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport function getPossibilities(waveCell: WaveCell){\r\n    if(isFinalizedCell(waveCell)) {\r\n        return [waveCell];\r\n    }\r\n    else {\r\n        return waveCell;\r\n    }\r\n}\r\nexport function isFinalizedCell(waveCell: WaveCell): waveCell is number {\r\n    return typeof waveCell === 'number';\r\n}","import AssetLoader from \"../common/assets/AssetLoader\";\r\nimport { SpriteSheet } from \"../common/assets/SpriteSheet\";\r\nimport { NearestNeighborScaling } from \"../common/CanvasHelpers\";\r\nimport NearestNeighborScalingHelper from \"../common/NearestNeighborScalingHelper\";\r\nimport Rect from \"../common/position/Rectangle\";\r\nimport ITileNeighborInfo, { GenerateNeighborInfo } from \"./AdjacencyMap\";\r\nimport tileUrl from './assets/isotiles.png'\r\nimport TileInfos, { ITileInfo } from \"./assets/TileInfo\";\r\nimport { CreateChunk, GenerateChunk, getPossibilities, isFinalizedCell, Step, WaveFunction } from \"./Generator\";\r\n\r\nlet spriteSheet: SpriteSheet;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    spriteSheet = new SpriteSheet(32, 32, tileUrl, assetLoader.registerAssetLoadCallback());\r\n\r\n    assetLoader.onAllFinished(() => Start());\r\n}\r\n\r\nfunction Start(){\r\n    const neighbors = GenerateNeighborInfo(TileInfos);\r\n\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    let tiles = CreateChunk(neighbors, 40, 40, 1);\r\n\r\n\r\n    let scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, 1200, 800, true, () => Paint(TileInfos, spriteSheet, tiles, ctx));\r\n\r\n    tickLoop(TileInfos, neighbors, spriteSheet, tiles, ctx);\r\n}\r\n\r\nfunction tickLoop(tileInfos: ITileInfo[], neighborInfos: ITileNeighborInfo[], assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    Paint(tileInfos, assets, cells, ctx);\r\n\r\n    if(!Step(neighborInfos, cells)){\r\n        requestAnimationFrame(() => tickLoop(tileInfos, neighborInfos, assets, cells, ctx));\r\n    }\r\n}\r\n\r\n\r\nfunction Paint(tileInfos: ITileInfo[], assets: SpriteSheet, cells: WaveFunction, ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(0, 0, 1200, 800);\r\n\r\n    let origin = [600, 800];\r\n\r\n    for(let z = 0; z < cells[0][0].length; z++){\r\n        // ctx.globalAlpha = 1-(z / cells[0][0].length);\r\n        for(let x = cells.length - 1; x >= 0; x--) {\r\n            for(let y = cells[x].length - 1; y >= 0; y--) {\r\n                let options = getPossibilities(cells[x][y][z]);\r\n\r\n                if(options.length <= 12) {\r\n                    if(options.length === 0) continue;\r\n\r\n                    ctx.globalAlpha = 1 / options.length;\r\n                    let tx = (x-y) * 16;\r\n                    let ty = -(x+y) * 8 - z*16;\r\n                    \r\n                    for(const cell of options) {\r\n                        let tileInfo = tileInfos[cell];\r\n                        let sprite = assets.getSprite(tileInfo.tile[0], tileInfo.tile[1], 32, 32);\r\n\r\n                        sprite.draw(ctx, new Rect(tx + origin[0], ty + origin[1], 32, 32), 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport Run from '../../../projects/wave-collapse';\r\n\r\nexport default function WaveCollapseComponent() {\r\n    React.useEffect(() => Run());\r\n    return <div style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}>\r\n        <canvas id='canvas' style={{ top: 0, bottom: 0, left: 0, right: 0, position: 'absolute'}}></canvas>\r\n    </div>;\r\n}"],"names":["NeighborDirections","x","y","z","BoundariesMatch","t0","t1","length","i","TopBottomBoundariesMatch","top","bottom","j","GetBoundaryInfo","masks","imageData","results","dir","singleResult","flatMap","pi","data","push","GetMaskPixelIndecies","mask","r","g","b","PropagateChanges","neighborInfos","waveFunction","stack","pop","waveCell","directionIndex","direction","newNeighbor","tryAdjustNeighbor","cell","neighbor","isFinalizedCell","options","getPossibilities","forEach","self","neighbors","result","indexOf","other","diff","splice","TILE_SIZE","spriteSheet","Run","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished","offscreenCanvas","document","createElement","width","image","height","offscreenCtx","getContext","drawImage","tileCanvas","tileCtx","tilesWide","tilesTall","boundaryInfo","frontMask","getImageData","rearMask","frontPix","rearPix","rearOffset","map","GenerateMasks","console","log","id","defaultBoundaryInfo","p","info","myNeighbors","myId","otherId","otherInfo","GenerateNeighborInfo","canvas","getElementById","ctx","tiles","xSize","ySize","zSize","defaultCell","plane","row","CreateChunk","NearestNeighborScalingHelper","Paint","tickLoop","Start","assets","cells","minCount","Infinity","minCells","count","isFinite","chosenIndex","Math","floor","random","chosen","Step","requestAnimationFrame","clearRect","origin","globalAlpha","tx","ty","cellId","cellX","cellY","getSprite","draw","WaveCollapse2Component","style","left","right","position","getTop","ti","edges","t","getBottom","canStack","hasIntersection","a","tile","neighborInfo","otherTile","sort","TileInfo","tileInfos","tileInfo","WaveCollapseComponent"],"sourceRoot":""}