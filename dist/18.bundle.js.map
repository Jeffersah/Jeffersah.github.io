{"version":3,"sources":["webpack:///./src/projects/diplo/Map.ts","webpack:///./src/views/projects/diplo/DiploComponent.tsx","webpack:///./src/projects/common/position/Point.ts"],"names":["areNeighbors","p1","p2","pol1","polygons","pol2","arePolysTouching","pt2","i","length","line","j","otherLine","Point","subtract","LengthSq","key","json","this","neighbors","owner","supply","type","name","abbr","svgPath","data","split","svgMode","svgRelative","polygon","component","toUpperCase","push","lastPt","pt","parsed","parseFloat","y","x","isNaN","console","log","add","maxX","minX","maxY","minY","poly","midpoint","mapJson","provinces","Object","keys","province","key2","other","connect","indexOf","map","DiploComponent","selProvince","setSelection","undefined","className","viewBox","fill","stroke","d","p","join","onClick","fontSize","style","pointerEvents","fromPt","n","x1","y1","x2","y2","angle","distance","Math","cos","sin","Dot","sqrt","len","Length","Multiply","atan2","nx","ny","splitArgs","splitArgsOrSingle","src","a","b","sy","min","max","pts","t","Bezier","slice","theta","fromAngle"],"mappings":"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","file":"18.bundle.js","sourcesContent":["import { findMax, flatMap } from \"../../LinqLike\";\r\nimport Point from \"../common/position/Point\";\r\nimport IMapDataJson, { IProvinceJson } from \"./assets/IMapDataJson\";\r\nimport { FactionType, ProvinceType } from \"./Enums\";\r\n\r\nexport default class Map {\r\n    provinces: { [key: string]: Province };\r\n\r\n    constructor(mapJson: IMapDataJson) {\r\n        this.provinces = {};\r\n\r\n        for(let key of Object.keys(mapJson)) {\r\n            let json = mapJson[key];\r\n            this.provinces[key] = new Province(key, json);\r\n        }\r\n\r\n        for(let key of Object.keys(this.provinces)){\r\n            let province = this.provinces[key];\r\n            if(province.type === 'impassable') continue;\r\n            for(let key2 of Object.keys(this.provinces)){\r\n                let other = this.provinces[key2];\r\n                if(other == province || other.type === 'impassable') continue;\r\n                if((mapJson[province.name].connect?.indexOf(other.name)??-1) !== -1 || areNeighbors(province, other)) {\r\n                    province.neighbors.push(other);\r\n                    other.neighbors.push(province);\r\n                    if(other.type === 'sea' && province.type === 'land') province.type = 'coast';\r\n                    if(other.type === 'land' && province.type === 'sea') other.type = 'coast';\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction areNeighbors(p1: Province, p2: Province): boolean {\r\n    for(const pol1 of p1.polygons) {\r\n        for(const pol2 of p2.polygons) {\r\n            if(arePolysTouching(pol1, pol2)) return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst ADJ_THRESH = 4;\r\nfunction arePolysTouching(p1: Point[], pt2: Point[]): boolean {\r\n    for(let i = 0; i < p1.length; i++) {\r\n        let line = [p1[i], p1[(i+1)%p1.length]];\r\n        for(let j = 0; j < pt2.length; j++) {\r\n            let otherLine = [pt2[j], pt2[(j+1)%pt2.length]];\r\n            if(Point.subtract(otherLine[0], line[0]).LengthSq() < ADJ_THRESH\r\n                && Point.subtract(otherLine[1], line[1]).LengthSq() < ADJ_THRESH)\r\n                return true;\r\n                \r\n            if(Point.subtract(otherLine[1], line[0]).LengthSq() < ADJ_THRESH\r\n                && Point.subtract(otherLine[0], line[1]).LengthSq() < ADJ_THRESH)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport class Province {\r\n    name: string;\r\n    abbr: string;\r\n    type: ProvinceType;\r\n    supply: boolean;\r\n    owner?: FactionType;\r\n    polygons: Point[][];\r\n    neighbors: Province[];\r\n    midpoint: Point;\r\n\r\n    constructor(key: string, json: IProvinceJson) {\r\n        this.neighbors = [];\r\n        this.polygons = [];\r\n        this.owner = json.owner;\r\n        this.supply = json.supply ?? false;\r\n        this.type = json.type;\r\n        this.name = key;\r\n        this.abbr = json.abbr;\r\n\r\n        let svgPath = json.data.split(' ');\r\n        let svgMode: 'm' | 'v' | 'h' = 'm';\r\n        let svgRelative: boolean = false;\r\n        let polygon: Point[] = [];\r\n        for(let component of svgPath) {\r\n            switch(component) {\r\n                case 'm':\r\n                case 'l':\r\n                case 'M':\r\n                case 'L':\r\n                    svgMode = 'm';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'v':\r\n                case 'V':\r\n                    svgMode = 'v';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'h':\r\n                case 'H':\r\n                    svgMode = 'h';\r\n                    svgRelative = component.toUpperCase() != component;\r\n                    break;\r\n                case 'z':\r\n                case 'Z':\r\n                    this.polygons.push(polygon);\r\n                    polygon = [];\r\n                    break;\r\n                default:\r\n                    var lastPt = polygon.length === 0 \r\n                        ? this.polygons.length === 0 ? new Point(0,0) : this.polygons[this.polygons.length - 1][this.polygons[this.polygons.length - 1].length - 1]\r\n                        : polygon[polygon.length - 1];\r\n\r\n                    var pt = component.split(',');\r\n\r\n                    var parsed = svgMode === 'm' \r\n                        ? new Point(parseFloat(pt[0]), parseFloat(pt[1]))\r\n                        : svgMode === 'h'\r\n                        ? new Point(parseFloat(pt[0]), svgRelative ? 0 : lastPt.y)\r\n                        : new Point(svgRelative ? 0 : lastPt.x, parseFloat(pt[0]));\r\n\r\n                    if(isNaN(parsed.x) || isNaN(parsed.y))\r\n                    {\r\n                        console.log(key + ' parse FAILED: ' + component);\r\n                    }\r\n\r\n                    polygon.push(\r\n                        svgRelative ? Point.add(lastPt, parsed) : parsed\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n        if(polygon.length !== 0) this.polygons.push(polygon);\r\n        \r\n        let maxX = 0;\r\n        let minX = 1024;\r\n        let maxY = 0; \r\n        let minY = 1024;\r\n        for(const poly of this.polygons) {\r\n            for(const pt of poly) {\r\n                if(pt.x < minX) minX = pt.x;\r\n                if(pt.y < minY) minY = pt.y;\r\n                if(pt.x > maxX) maxX = pt.x;\r\n                if(pt.y > maxY) maxY = pt.y;\r\n            }\r\n        }\r\n        this.midpoint = new Point((minX + maxX) / 2, (minY + maxY) / 2);\r\n    }\r\n}","import * as React from 'react';\r\nimport Map from '../../../projects/diplo/Map';\r\nimport mapJson from '../../../projects/diplo/assets/map.json';\r\nimport IMapDataJson from '../../../projects/diplo/assets/IMapDataJson';\r\n\r\nconst map = new Map(mapJson as IMapDataJson);\r\n\r\nexport default function DiploComponent() {\r\n    const [selProvince, setSelection] = React.useState<string|undefined>(undefined);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <svg viewBox='0 0 1024 1024' fill='#888'>\r\n            {Object.keys(map.provinces).map(key => \r\n            {\r\n                let province = map.provinces[key];\r\n                return <g key={key}>\r\n                    <path \r\n                        fill={\r\n                            key === selProvince ? '#ffff00' :\r\n                            province.type == 'impassable' ? '#888' :\r\n                            province.type == 'coast' ? '#00aa00' :\r\n                            province.type == 'land' ? '#00ff00' : '#0000ff'} \r\n                        stroke='black'\r\n                        d={province.polygons.map(poly => 'M ' + poly.map(p => p.x + ',' + p.y).join(' ') + ' z').join(' ')}\r\n                        onClick={()=>setSelection(key)}\r\n                    />\r\n                    <text fontSize='10' fill='black' x={province.midpoint.x} y={province.midpoint.y} style={{ pointerEvents: 'none' }}>{province.abbr}</text>\r\n                </g>;\r\n            })}\r\n            <g>\r\n                {Object.keys(map.provinces).map(key => {\r\n                    let province = map.provinces[key];\r\n                    let fromPt = province.midpoint;\r\n                    return <g key={key}>\r\n                        {province.neighbors.map(n => \r\n                            <line x1={fromPt.x} y1={fromPt.y} x2={n.midpoint.x} y2={n.midpoint.y} stroke='red' />)}\r\n                    </g>\r\n                })}\r\n            </g>\r\n        </svg>\r\n    </div>;\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}"],"sourceRoot":""}