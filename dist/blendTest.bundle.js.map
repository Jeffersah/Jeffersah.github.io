{"version":3,"sources":["webpack:///./src/projects/tile-blend-test-1/Terrain.ts","webpack:///./src/projects/common-assets/RockLavaAllBlends_crop.png","webpack:///./src/projects/common-assets/Selectors16x16.png","webpack:///./src/projects/tile-blend-test-1/index.ts","webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/position/Direction.ts"],"names":["TileType","tilesWide","tilesHigh","this","tiles","Array","x","Rock","subTileIds","y","updateTile","d","Direction","UpRight","Lava","fixCoords","coords","fixSubCoords","t","updateSelfAndAdjacent","tx","ty","dx","dy","tid","type","adjacency","forEach","dir","i","adjMask","pt","getTile","DownRight","DownLeft","UpLeft","selectors","pvMousePos","terrain","context","assetLoadDone","canvas","document","getElementById","getContext","ctx","terr","sprites","RenderTerrainCell","RenderTerrain","addEventListener","onMouseMove","onMouseLeave","onMouseClick","spriteSheetX","getSubTileId","spriteSheetY","rtx","rty","render","ev","mouseCoords","Point","Math","floor","offsetX","offsetY","undefined","Equals","tile","setTile","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished","angle","distance","cos","sin","Dot","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","splitArgsOrSingle","src","a","b","sy","p","min","max","pts","length","add","Bezier","slice","theta","fromAngle","directionValues","allDirections","Up","Right","Down","Left","ToPoint","direction"],"mappings":"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","file":"blendTest.bundle.js","sourcesContent":["import { Direction, cardinalDirections, diagonalDirections, ToPoint, allDirections } from '../common/position/Direction';\r\n\r\nexport enum TileType {\r\n    Rock,\r\n    Lava\r\n}\r\n\r\nexport class Terrain {\r\n    private tiles: TileType[];\r\n    private subTileIds: number[];\r\n\r\n    constructor(public tilesWide: number, public tilesHigh: number) {\r\n        this.tiles = new Array(tilesHigh * tilesWide);\r\n        for (let x = 0; x < tilesWide * tilesHigh; x++) {\r\n            this.tiles[x] = TileType.Rock;\r\n        }\r\n\r\n        this.subTileIds = new Array(tilesHigh * tilesWide * 4);\r\n        for (let x = 0; x < tilesWide * tilesHigh * 4; x++) {\r\n            this.subTileIds[x] = 0;\r\n        }\r\n\r\n        for (let x = 0; x < tilesWide; x++) {\r\n            for (let y = 0; y < tilesHigh; y++) {\r\n                this.updateTile(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private fixCoords(x: number, y: number) {\r\n        return x + y * this.tilesWide;\r\n    }\r\n\r\n    private fixSubCoords(x: number, y: number, d: Direction) {\r\n        return x * 4 + (y * this.tilesWide * 4) + ((d - Direction.UpRight) / 2);\r\n    }\r\n\r\n    public getTile(x: number, y: number): TileType {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return TileType.Lava;\r\n        const coords = this.fixCoords(x, y);\r\n        return this.tiles[this.fixCoords(x, y)];\r\n    }\r\n\r\n    public getSubTileId(x: number, y: number, d: Direction) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return 0;\r\n        const coords = this.fixSubCoords(x, y, d);\r\n        return this.subTileIds[coords];\r\n    }\r\n\r\n    public setTile(x: number, y: number, t: TileType) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return;\r\n        const coords = this.fixCoords(x, y);\r\n        if (this.tiles[coords] === t) return;\r\n\r\n        this.tiles[coords] = t;\r\n        this.updateSelfAndAdjacent(x, y);\r\n    }\r\n\r\n    private updateSelfAndAdjacent(tx: number, ty: number) {\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                this.updateTile(tx + dx, ty + dy);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateTile(tx: number, ty: number): void {\r\n        if (tx < 0 || ty < 0 || tx >= this.tilesWide || ty >= this.tilesWide) return;\r\n        const tid = this.fixCoords(tx, ty);\r\n        const type = this.tiles[tid];\r\n\r\n        let adjacency = 0x00;\r\n        allDirections.forEach((dir, i) => {\r\n            const adjMask = 1 << i;\r\n            const pt = ToPoint(dir);\r\n            if (this.getTile(pt.x + tx, pt.y + ty) !== type) {\r\n                adjacency |= adjMask;\r\n            }\r\n        });\r\n\r\n        // adjacency now contains a bitmask of (adjacent=different) where\r\n        // b[0] == T diff, b[1] = TR diff, b[2] = R diff, etc...\r\n        // Therefore, bits [0..2] are the TopRight id,\r\n        // bits [2..4] are the BottomRight id,\r\n        // bits [4..6] are the BottomLeft id,\r\n        // bits [6, 7, 0] are the TopLeft id\r\n\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpRight)] = adjacency & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownRight)] = (adjacency >> 2) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownLeft)] = (adjacency >> 4) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpLeft)] = (adjacency >> 6) | ((adjacency & 1) << 2) & 0b111;\r\n    }\r\n}","export default __webpack_public_path__ + \"e6ca7ebcac9136ce5511288e898c8371.png\";","export default __webpack_public_path__ + \"f1cd5c392c5447559f3a20ac58e20646.png\";","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { ResizeCanvas, NearestNeighborScaling } from '../common/CanvasHelpers';\r\nimport blendTilesUrl from '../common-assets/RockLavaAllBlends_crop.png';\r\nimport seletorsUrl from '../common-assets/Selectors16x16.png';\r\nimport { Terrain, TileType } from './Terrain';\r\nimport { Direction, ToPoint } from '../common/position/Direction';\r\nimport Point from '../common/position/Point';\r\n\r\nlet tiles: SpriteSheet;\r\nlet selectors: SpriteSheet;\r\nlet pvMousePos: Point | undefined;\r\nlet terrain: Terrain;\r\nlet context: CanvasRenderingContext2D;\r\n\r\nconst SCALE_FACTOR = 3;\r\n\r\n\r\nfunction Run() {\r\n    const assetLoader = new AssetLoader();\r\n    tiles = new SpriteSheet(8, 8, blendTilesUrl, assetLoader.registerAssetLoadCallback());\r\n    selectors = new SpriteSheet(16, 16, seletorsUrl, assetLoader.registerAssetLoadCallback());\r\n    pvMousePos = undefined;\r\n\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    terrain = new Terrain(20, 20);\r\n\r\n    ResizeCanvas(canvas, terrain.tilesWide * 16 * SCALE_FACTOR, terrain.tilesHigh * 16 * SCALE_FACTOR);\r\n    context = canvas.getContext('2d');\r\n    NearestNeighborScaling(context);\r\n\r\n    RenderTerrain(context, terrain, tiles);\r\n\r\n    canvas.addEventListener('mousemove', onMouseMove);\r\n    canvas.addEventListener('mouseleave', onMouseLeave);\r\n    canvas.addEventListener('mousedown', onMouseClick);\r\n}\r\n\r\nfunction RenderTerrain(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet) {\r\n    for (let x = 0; x < terr.tilesWide; x++) {\r\n        for (let y = 0; y < terr.tilesHigh; y++) {\r\n            RenderTerrainCell(ctx, terr, sprites, x, y);\r\n        }\r\n    }\r\n}\r\nfunction RenderTerrainCell(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet, x: number, y: number) {\r\n    for (let d = 0; d < 4; d++) {\r\n        const dir = Direction.UpRight + (d * 2);\r\n        const spriteSheetX = terr.getSubTileId(x, y, dir);\r\n        let spriteSheetY = d;\r\n        if (terr.getTile(x, y) === TileType.Lava) spriteSheetY += 4;\r\n\r\n        const rtx = x * 16 + (ToPoint(dir).x === 1 ? 8 : 0);\r\n        const rty = y * 16 + (ToPoint(dir).y === 1 ? 8 : 0);\r\n        sprites.render(ctx, rtx * SCALE_FACTOR, rty * SCALE_FACTOR, 8 * SCALE_FACTOR, 8 * SCALE_FACTOR,\r\n            spriteSheetX, spriteSheetY);\r\n    }\r\n}\r\n\r\nfunction onMouseMove(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    if (pvMousePos !== undefined) {\r\n        if (!mouseCoords.Equals(pvMousePos)) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x, pvMousePos.y);\r\n            selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n                1, 0);\r\n            pvMousePos = mouseCoords;\r\n        }\r\n    }\r\n    else {\r\n        selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n            1, 0);\r\n        pvMousePos = mouseCoords;\r\n    }\r\n}\r\n\r\nfunction onMouseLeave(ev: MouseEvent) {\r\n    if (pvMousePos !== undefined) {\r\n        pvMousePos = undefined;\r\n    }\r\n}\r\n\r\nfunction onMouseClick(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    const tile = terrain.getTile(mouseCoords.x, mouseCoords.y);\r\n    terrain.setTile(mouseCoords.x, mouseCoords.y, tile === TileType.Lava ? TileType.Rock : TileType.Lava);\r\n\r\n    for (let dx = -1; dx <= 1; dx ++) {\r\n        for (let dy = -1; dy <= 1; dy++) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x + dx, pvMousePos.y + dy);\r\n        }\r\n    }\r\n\r\n    selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n        1, 0);\r\n}\r\n\r\nexport default Run;","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}"],"sourceRoot":""}