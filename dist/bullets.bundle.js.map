{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/Color.ts","webpack:///./src/projects/common/input/KeyState.ts","webpack:///./src/projects/common/input/KeyWatcher.ts","webpack:///./src/projects/common/input/KeyboardManager.ts","webpack:///./src/projects/common/assets/SpriteAnimation.ts","webpack:///./src/projects/common/assets/SpriteAtlas.ts","webpack:///./src/projects/bullets/const.ts","webpack:///./src/projects/bullets/assets/bullets_entities.png","webpack:///./src/projects/bullets/assets/Ships.png","webpack:///./src/projects/bullets/assets/Flares.png","webpack:///./src/projects/common/position/Angle.ts","webpack:///./src/projects/bullets/Player.ts","webpack:///./src/projects/bullets/ETeam.ts","webpack:///./src/projects/bullets/GameState.ts","webpack:///./src/projects/common/interpolation/Interpolated.ts","webpack:///./src/projects/bullets/Effects/SingleExplosion.ts","webpack:///./src/projects/common/interpolation/TimingFunction.ts","webpack:///./src/projects/common/interpolation/InterpolationFunction.ts","webpack:///./src/projects/common/interpolation/Keyframes.ts","webpack:///./src/projects/bullets/Effects/Explosion.ts","webpack:///./src/projects/common/Angle.ts","webpack:///./src/projects/bullets/ShipDefinitions/FlareDefinition.ts","webpack:///./src/projects/common/position/Line.ts","webpack:///./src/projects/common/position/Bounds.ts","webpack:///./src/projects/bullets/Ship.ts","webpack:///./src/projects/common/assets/AnimationControl.ts","webpack:///./src/projects/bullets/data/parsing/parsers.ts","webpack:///./src/projects/bullets/Effects/EffectControl.ts","webpack:///./src/projects/bullets/Effects/EffectFuncs.ts","webpack:///./src/projects/bullets/weapons/Weapon.ts","webpack:///./src/projects/bullets/weapons/WeaponGroup.ts","webpack:///./src/projects/bullets/weapons/WeaponTimer.ts","webpack:///./src/projects/bullets/ShipDefinitions/ShipDefinition.ts","webpack:///./src/projects/bullets/ai/IDebugMarker.ts","webpack:///./src/projects/bullets/ai/ShipAI.ts","webpack:///./src/projects/bullets/ai/BroadsideAI.ts","webpack:///./src/projects/bullets/ai/FighterAI.ts","webpack:///./src/projects/bullets/ai/IShipAI.ts","webpack:///./src/projects/bullets/data/parsing/weapons.ts","webpack:///./src/projects/bullets/ShipDefinitions/AllShipDefinitions.ts","webpack:///./src/projects/bullets/index.ts"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","src","a","b","sy","undefined","p","min","max","theta","fromAngle","Color","vals","h","s","v","hsv","rgb","r","g","reqRgb","reqHsv","n","k","calcRgb","componentToRgb","calcHsv","mx","mn","toByte","component","floor","KeyState","keys","changes","key","indexOf","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","storeKeys","storeChanges","slice","element","watcher","prvState","currentState","Update","isKeyDown","isKeyUp","atlas","sourceOffset","sourceSize","numFrames","origin","ctx","position","size","frame","rotation","save","translate","rotate","scale","drawImage","image","restore","args","loop","animation","PlayingAnimation","maxTime","source","currentTime","frameNumber","draw","spriteUrl","onload","document","createElement","loadFinished","sourceRotation","offset","frameCount","twoPi","PI","Angle","relativeNormalize","PHYS","sprites","velocity","angularVelocity","engineDeflect","tgtDeflect","isEngineOn","vDirection","diffDir","relativeAngle","diffPerc","friction","abs","MultWith","vTotal","vAngle","Direction","anglePullAmt","AddWith","rotrender","random","render","ETeam","player","Player","Entities","neutral","ally","enemy","Effects","update","i","length","tick","updateEntities","entities","drawEntities","originPoint","team","maxRange","ships","filter","item","currentHp","rangeSq","subtract","shipsAndRanges","map","ship","range","sort","Interpolated","timingFunction","InterpolationTimer","totalTime","elapsedTime","sample","outerRadius","innerRadius","fillColor","timing","outer","inner","fill","beginPath","arc","closePath","fillStyle","toString","TimingFunctions","linear","t","clamp","fastIn","Bezier","fastOut","pts","b_recurse","pi","pc","numberInterpolator","fastColorInterpolator","EvenlySpacedKeyframes","interpolator","arguments","percPer","keyframes","addKeyFrame","start","time","value","keyIndex","sampleRange","samplePerc","burstXVariance","burstYVariance","numBursts","burstDelay","burstLifetime","burstOuterRadius","currentBurstDelay","maxExplosionIndex","nb","GetValue","explosions","Array","triggerExplosions","spawnBurst","bx","by","lifetime","startingOuterRadius","anyStillRunning","norm","normalize","from","to","EFlareConditions","end","interpolate","denom","parallelIntersection","percentA","percentB","basis","ray","getBasisValue","pt","aRange","Range","bRange","bMinP","GetPercentage","bMaxP","relativePoints","dist","add","getVertecies","arr","line","edges","getEdges","minLinePerc","colision","intersection","definition","ai","weaponGroups","Velocity","lastAccel","lastDeccel","lastTurn","maxHp","flares","f","clone","gs","tgtVel","tgtHeading","TickAI","actualAccelPercent","maxDeccel","delta","maxAccel","turnAmt","accuteAngle","turnDirection","sign","maxTurnRate","maxSpeed","sprite","debugDraw","initial","queue","scaleFactor","isSprite","advance","rot","getRenderSize","parseJsonPoint","jpt","parseJsonRange","parseJsonSprite","input","atlases","file","srcOffset","srcSize","parseJsonAnimation","anim","getAnimation","imgOffset","frameSize","effects","effectArgs","effect","type","CreateEffect","shipDef","turretAngle","actualAnchor","Clone","SubtractWith","imgControl","result","getWeaponAnchorAngle","self","possibleTargets","location","getWeaponLocation","pDist","minRange","turret","anchorAngle","angleToTarget","turretRelAngle","acquisitionAngle","turnRate","getWeaponCurrentAngle","target","targetAngle","targetTurretAngle","targetAbsoluteAngle","maxAngle","finalTurretAngle","finalRelAngle","shootAnimation","enqueue","play","shootEffect","spawnEffect","realPoint","realRot","timer","weapons","burstAllWeapons","targets","acqCount","findNearestShips","getTeam","acq","acquireTargets","bi","onShoot","burstIndex","shoot","WeaponTimer","Object","assign","currentlyShooting","currentReload","currentBurstIndex","canShoot","reloadTime","shouldShoot","shell","shotsPerBurst","burstCount","srcPoint","turnAccel","buildAi","getSprite","jsonWeaponGroup","w","burstAll","conditions","minTrigger","rotPerTurn","playing","shouldRender","accel","turn","Accel","Deccel","TurnLeft","TurnRight","adjRot","shipOrigin","shipSize","DebugPoint","point","color","radius","strokeStyle","stroke","DebugCross","moveTo","lineTo","DebugPlus","direction","tgt","DebugLine","point2","markers","doDebug","debug","pt2","defaultArgs","minDistance","maxDistance","orbitSpeed","super","targetLocation","toLocation","currentHeading","inwardHeading","tangentHeadings","fleeHeadings","orbitDist","debugPoint","tgtPoints","tangent","debugLine","bestHeading","getMinHeading","betterHeading","selfHeading","targetHeadings","relativeHeadings","minHeading","actualTarget","angleBetween","deltaHeading","AllAIGenerators","fighter","broadside","parseWeaponGroupDefinition","json","defs","imgAtlases","weaponJson","isWeapon","def","error","parseWeaponDefinition","buildAllDefinitions","animationData","animations","anims","parsedFlares","flare","condition","aiFunc","hp","maxTurnSpeed","group","weaponDefinitions","aiParams","parseShipDefinition","scalingHelper","shipSprite","Run","assetLoader","AssetLoader","entitySheet","SpriteSheet","registerAssetLoadCallback","shipAtlas","SpriteAtlas","flareAtlas","onAllFinished","then","definitions","canvas","getElementById","getContext","NearestNeighborScalingHelper","KeyboardManager","body","buildShip","repaintLoop","gameState","fillRect","focusPoint","ty","tx","repaint","requestAnimationFrame","onLoadDone","loadJson"],"mappings":"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","file":"bullets.bundle.js","sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}","export class Color {\r\n    private rgb?: { r: number, g: number, b: number };\r\n    private hsv?: { h: number, s: number, v: number };\r\n\r\n    constructor(vals: {r: number, g: number, b: number}|{h: number, s: number, v: number}) {\r\n        if ((vals as any).h || (vals as any).s || (vals as any).v) {\r\n            this.hsv = vals as any;\r\n            this.rgb = undefined;\r\n        }\r\n        else  {\r\n            this.rgb = vals as any;\r\n            this.hsv = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate an RGB color\r\n     * @param r Red component [0, 1]\r\n     * @param g Green component [0, 1]\r\n     * @param b Blue component [0, 1]\r\n     */\r\n    public static rgb(r: number, g: number, b: number): Color {\r\n        return new Color({ r, g, b });\r\n    }\r\n\r\n    /**\r\n     * Generate an HSV color\r\n     * @param r Hue component [0, 1]\r\n     * @param g Saturation component [0, 1]\r\n     * @param b Value component [0, 1]\r\n     */\r\n    public static hsv(h: number, s: number, v: number): Color {\r\n        return new Color({ h, s, v });\r\n    }\r\n\r\n    public r(): number;\r\n    public r(v: number): void;\r\n    public r(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.r = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.r;\r\n        }\r\n    }\r\n\r\n    public g(): number;\r\n    public g(v: number): void;\r\n    public g(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.g = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.g;\r\n        }\r\n    }\r\n\r\n    public b(): number;\r\n    public b(v: number): void;\r\n    public b(v?: number): number|void {\r\n        this.reqRgb();\r\n        if (v !== undefined) {\r\n            this.rgb.b = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.rgb.b;\r\n        }\r\n    }\r\n\r\n    public h(): number;\r\n    public h(v: number): void;\r\n    public h(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.h = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.h;\r\n        }\r\n    }\r\n\r\n    public s(): number;\r\n    public s(v: number): void;\r\n    public s(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.s = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.s;\r\n        }\r\n    }\r\n\r\n    public v(): number;\r\n    public v(v: number): void;\r\n    public v(v?: number): number|void {\r\n        this.reqHsv();\r\n        if (v !== undefined) {\r\n            this.hsv.v = v;\r\n            this.hsv = undefined;\r\n        } else {\r\n            return this.hsv.v;\r\n        }\r\n    }\r\n\r\n    private componentToRgb(n: number) {\r\n        const k = (n + this.hsv.h * 6) % 6;\r\n        return this.hsv.v - this.hsv.v * this.hsv.s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n    }\r\n\r\n\r\n    private reqRgb() {\r\n        if (this.rgb === undefined) {\r\n            this.calcRgb();\r\n        }\r\n    }\r\n    private calcRgb() {\r\n        this.rgb = {\r\n            r: this.componentToRgb(5),\r\n            g: this.componentToRgb(3),\r\n            b: this.componentToRgb(1),\r\n        };\r\n    }\r\n\r\n    private reqHsv() {\r\n        if (this.hsv === undefined) {\r\n            this.calcHsv();\r\n        }\r\n    }\r\n    private calcHsv() {\r\n        const {r, g, b} = this.rgb;\r\n        const mx = Math.max(r, g, b);\r\n        const mn = Math.min(r, g, b);\r\n        let h = mx === mn ? 0\r\n            : mx === r ? (g - b) / (mx - mn)\r\n            : mx === g ? 2 + (b - r) / (mx - mn)\r\n            : 4 + (r - g) / (mx - mn);\r\n        h /= 6;\r\n        while (h < 0) {\r\n            h++;\r\n        }\r\n        this.hsv = {\r\n            h,\r\n            s: mx === mn ? 0 : (mx - mn) / mx,\r\n            v: mx\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        this.reqRgb();\r\n        return 'rgb(' + this.toByte(this.rgb.r) + ', ' + this.toByte(this.rgb.g) + ', ' + this.toByte(this.rgb.b) + ')';\r\n    }\r\n\r\n    private toByte(component: number) {\r\n        return Math.floor(component * 255);\r\n    }\r\n}","import { IKeyChange } from './KeyWatcher';\r\n\r\nexport default class KeyState {\r\n    constructor(public keys: string[], public changes: IKeyChange[]) {\r\n\r\n    }\r\n\r\n    public isKeyDown(key: string) {\r\n        return this.keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    public isKeyUp(key: string) {\r\n        return this.keys.indexOf(key) === -1;\r\n    }\r\n}","import KeyState from './KeyState';\r\n\r\nexport interface IKeyChange {\r\n    key: string;\r\n    change: 'press'|'release';\r\n}\r\n\r\nexport default class KeyWatcher {\r\n    downKeys: string[];\r\n    changes: IKeyChange[];\r\n\r\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\r\n        if  (this.logKeyNames === undefined) {\r\n            this.logKeyNames = false;\r\n        }\r\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\r\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\r\n\r\n        this.downKeys = [];\r\n        this.changes = [];\r\n    }\r\n\r\n    private onKeyDown(key: KeyboardEvent) {\r\n        if (this.logKeyNames) {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(key.key);\r\n        }\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        if (idx === -1) {\r\n            this.changes.push({ key: key.key, change: 'press' });\r\n            this.downKeys.push(key.key);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(key: KeyboardEvent) {\r\n        this.changes.push({ key: key.key, change: 'release' });\r\n        const idx = this.downKeys.indexOf(key.key);\r\n        this.downKeys.splice(idx, 1);\r\n    }\r\n\r\n    public Update(): KeyState {\r\n        const storeKeys = this.downKeys;\r\n        const storeChanges = this.changes;\r\n\r\n        this.downKeys = storeKeys.slice();\r\n        this.changes = [];\r\n\r\n        return new KeyState(storeKeys, storeChanges);\r\n    }\r\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\r\nimport KeyState from './KeyState';\r\n\r\nexport default class KeyboardManager {\r\n\r\n    watcher: KeyWatcher;\r\n    prvState: KeyState;\r\n    currentState: KeyState;\r\n\r\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\r\n        this.watcher = new KeyWatcher(element, logKeyNames);\r\n        this.prvState = this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public update(): void {\r\n        this.prvState = this.currentState;\r\n        this.currentState = this.watcher.Update();\r\n    }\r\n\r\n    public isKeyDown(key: string): boolean {\r\n        return this.currentState.isKeyDown(key);\r\n    }\r\n\r\n    public isKeyUp(key: string): boolean {\r\n        return this.currentState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyPressed(key: string): boolean {\r\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\r\n    }\r\n\r\n    public isKeyReleased(key: string): boolean {\r\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\r\n    }\r\n\r\n    public changes(): IKeyChange[] {\r\n        return this.currentState.changes;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAtlas } from \"./SpriteAtlas\";\r\n\r\nexport class SpriteAnimation {\r\n    public origin: Point;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, public numFrames: number, origin?: Point) {\r\n        this.origin = origin ?? new Point(0,0);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, frame: number, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        if(rotation !== undefined)\r\n            ctx.rotate(rotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x + frame * this.sourceSize.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n    play(args: ISpriteAnimationArgs): PlayingAnimation;\r\n    play(maxTime: number, loop?: boolean): PlayingAnimation;\r\n    play(args: ISpriteAnimationArgs | number, loop?: boolean): PlayingAnimation {\r\n        if((<ISpriteAnimationArgs>args).animation !== undefined) {\r\n            return new PlayingAnimation(this, (<ISpriteAnimationArgs>args).maxTime, (<ISpriteAnimationArgs>args).loop ?? false)\r\n        }\r\n        else {\r\n            return new PlayingAnimation(this, <number>args, loop ?? false);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISpriteAnimationArgs {\r\n    animation: SpriteAnimation,\r\n    maxTime: number,\r\n    loop?: boolean\r\n}\r\n\r\nexport class PlayingAnimation {\r\n    private currentTime: number;\r\n    constructor(public source: SpriteAnimation, public maxTime: number, public loop: boolean)\r\n    {\r\n        this.currentTime = 0;\r\n    }\r\n\r\n    tick(): boolean {\r\n        this.currentTime++;\r\n        if(this.currentTime < this.maxTime) {\r\n            return false;\r\n        } else {\r\n            if(this.loop) this.currentTime = 0;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        const frameNumber = Math.floor(this.currentTime * this.source.numFrames / this.maxTime);\r\n        this.source.draw(ctx, position, size, frameNumber, rotation);\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { SpriteAnimation } from \"./SpriteAnimation\";\r\n\r\nexport class SpriteAtlas {\r\n    public image: HTMLImageElement;\r\n    constructor(spriteUrl: string, private onload: () => void) {\r\n        this.image = document.createElement('img');\r\n        this.image.src = spriteUrl;\r\n        this.image.addEventListener('load', () => this.loadFinished());\r\n    }\r\n\r\n    private loadFinished() {\r\n        this.onload();\r\n    }\r\n\r\n    getSprite(sourceOffset: Point, sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        return new AtlasSprite(this, sourceOffset, sourceSize, origin, sourceRotation);\r\n    }\r\n\r\n    getAnimation(offset: Point, sourceSize: Point, origin: Point, frameCount: number) {\r\n        return new SpriteAnimation(this, offset, sourceSize, frameCount, origin);\r\n    }\r\n}\r\n\r\nexport class AtlasSprite {\r\n    public origin: Point;\r\n    public sourceRotation: number;\r\n\r\n    constructor(public atlas: SpriteAtlas, public sourceOffset: Point, public sourceSize: Point, origin?: Point, sourceRotation?: number) {\r\n        this.origin = origin ?? new Point(0,0);\r\n        this.sourceRotation = sourceRotation ?? 0;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, position: Point, size: Point, rotation?: number) {\r\n        ctx.save();\r\n        ctx.translate(position.x, position.y);\r\n        ctx.rotate((rotation ?? 0) + this.sourceRotation);\r\n        ctx.scale(size.x, size.y);\r\n        ctx.translate(-this.origin.x, -this.origin.y);\r\n        ctx.drawImage(this.atlas.image, this.sourceOffset.x, this.sourceOffset.y, this.sourceSize.x, this.sourceSize.y, 0, 0, 1, 1);\r\n        ctx.restore();\r\n    }\r\n}","export default {\r\n    Width: 1000,\r\n    Height: 800\r\n};","export default __webpack_public_path__ + \"12a4e8650485f6c9e051cf30dfcfc746.png\";","export default __webpack_public_path__ + \"099f5ee348a27002555007bd55523f94.png\";","export default __webpack_public_path__ + \"4491ebbcec40a56c8cb02c9b36b8f12a.png\";","const twoPi = Math.PI * 2;\r\n\r\nexport default class Angle {\r\n    static normalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle < 0) angle += twoPi;\r\n        return angle;\r\n    }\r\n\r\n    static relativeNormalize(angle: number): number {\r\n        angle = angle % twoPi;\r\n        if (angle > Math.PI) {\r\n            angle -= twoPi;\r\n        } else if(angle < - Math.PI) {\r\n            angle += twoPi;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    static relativeAngle(a: number, b: number) {\r\n        return Angle.relativeNormalize(a - b);\r\n    }\r\n}","import Point from '../common/position/Point';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport { RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport Angle from '../common/position/Angle';\r\n\r\nconst PHYS = {\r\n    acceleration: 0.2,\r\n    maxvelocity: 20,\r\n    vFricMin: 0.998,\r\n    vFricMax: 0.99,\r\n\r\n    engineAdjSpeed: 0.06,\r\n\r\n    turnBaseAccel: 0.002,\r\n    turnEngineMaxAccel: 0.004,\r\n    turnFric: 0.98,\r\n    turnPullMax: 0.003,\r\n    turnPullMaxV: 120,\r\n};\r\n\r\nexport default class Player {\r\n    position: Point;\r\n    velocity: Point;\r\n    angularVelocity: number;\r\n    rotation: number;\r\n\r\n    private isEngineOn: boolean;\r\n    private engineDeflect: number;\r\n    private tgtDeflect: number;\r\n\r\n    constructor(private sprites: SpriteSheet) {\r\n        this.position = new Point(0, 0);\r\n        this.velocity = new Point(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.rotation = 0;\r\n        this.engineDeflect = 0;\r\n        this.tgtDeflect = 0;\r\n    }\r\n\r\n    tick(keys: KeyboardManager) {\r\n        if (keys.isKeyDown('w')) {\r\n            this.isEngineOn = true;\r\n        } else {\r\n            this.isEngineOn = false;\r\n        }\r\n\r\n        if (keys.isKeyDown('a')) {\r\n            this.tgtDeflect = 1;\r\n        } else if (keys.isKeyDown('d')) {\r\n            this.tgtDeflect = -1;\r\n        } else {\r\n            this.tgtDeflect = 0;\r\n        }\r\n\r\n        if (this.tgtDeflect >= this.engineDeflect) {\r\n            this.engineDeflect = Math.min(this.engineDeflect + PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        } else {\r\n            this.engineDeflect = Math.max(this.engineDeflect - PHYS.engineAdjSpeed, this.tgtDeflect);\r\n        }\r\n\r\n        const vDirection = Math.atan2(this.velocity.y, this.velocity.x);\r\n        const diffDir = Angle.relativeAngle(this.rotation, vDirection);\r\n        const diffPerc = diffDir / Math.PI;\r\n\r\n        this.angularVelocity *= PHYS.turnFric;\r\n        this.angularVelocity -= this.tgtDeflect * PHYS.turnBaseAccel + this.engineDeflect * PHYS.turnEngineMaxAccel * (this.isEngineOn ? 1 : 0);\r\n\r\n        this.rotation += this.angularVelocity;\r\n\r\n        const friction = (1 - Math.abs(diffPerc)) * PHYS.vFricMin + (Math.abs(diffPerc)) * PHYS.vFricMax;\r\n        this.velocity.MultWith(friction, friction);\r\n\r\n        if (this.isEngineOn) {\r\n            this.velocity.x += PHYS.acceleration * Math.cos(this.rotation);\r\n            this.velocity.y += PHYS.acceleration * Math.sin(this.rotation);\r\n        }\r\n\r\n        let vTotal = this.velocity.Length();\r\n        let vAngle = this.velocity.Direction();\r\n\r\n        if (vTotal >= PHYS.maxvelocity) {\r\n            vTotal = PHYS.maxvelocity;\r\n        }\r\n\r\n        let anglePullAmt = Math.sin(diffDir);\r\n        anglePullAmt *= Math.min(vTotal / PHYS.turnPullMaxV, 1);\r\n        anglePullAmt *= PHYS.turnPullMax;\r\n\r\n        vAngle += anglePullAmt;\r\n        this.velocity.x = Math.cos(vAngle) * vTotal;\r\n        this.velocity.y = Math.sin(vAngle) * vTotal;\r\n\r\n\r\n        this.position.AddWith(this.velocity);\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        RotTransformCanvas(ctx, this.position.x, this.position.y, 4, 8, this.rotation + Math.PI / 2);\r\n        if (this.isEngineOn) {\r\n            this.sprites.rotrender(ctx, 4, 11, 8, 16, Math.floor(4 * Math.random()), 1, this.engineDeflect * Math.PI / 4, 4, 2);\r\n        }\r\n        if (this.tgtDeflect > 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 7, 4, 8, 16, Math.floor(Math.random() * 2), 2, 0, 3, 4);\r\n        }\r\n        else if (this.tgtDeflect < 0) {\r\n            // Render spin flame\r\n            this.sprites.rotrender(ctx, 1, 4, 8, 16, 2 + Math.floor(Math.random() * 2), 2, 0, 6, 4);\r\n        }\r\n        this.sprites.render(ctx, 0, 0, 8, 16, 0, 0);\r\n        ctx.restore();\r\n    }\r\n}","import { type } from \"os\"\r\nexport enum ETeam\r\n{\r\n    ally,\r\n    enemy,\r\n    neutral\r\n}","import KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Point from \"../common/position/Point\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport { IEffect } from \"./IEffect\";\r\nimport IEntity from \"./IEntity\";\r\nimport Player from \"./Player\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nexport default class GameState {\r\n    public Player: Player;\r\n    public Entities: { [key in ETeam]: IEntity[] }\r\n    public Effects: IEffect[];\r\n\r\n    constructor(player: Player, public keys: KeyboardManager){\r\n        this.Player = player;\r\n        this.Entities = <any>{};\r\n        this.Entities[ETeam.neutral] = [];\r\n        this.Entities[ETeam.ally] = [];\r\n        this.Entities[ETeam.enemy] = [];\r\n        this.Effects = [];\r\n    }\r\n\r\n    public tick(){\r\n        this.keys.update();\r\n        for(let i = this.Effects.length - 1; i >= 0; i --) {\r\n            if(this.Effects[i].tick())\r\n                this.Effects.splice(i, 1);\r\n        }\r\n        this.updateEntities(this.Entities[ETeam.neutral]);\r\n        this.updateEntities(this.Entities[ETeam.ally]);\r\n        this.updateEntities(this.Entities[ETeam.enemy]);\r\n    }\r\n\r\n    private updateEntities(entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            if(!entities[i].tick(this.keys, this))\r\n                entities.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D){\r\n        this.drawEntities(ctx, this.Entities[ETeam.neutral]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.ally]);\r\n        this.drawEntities(ctx, this.Entities[ETeam.enemy]);\r\n        for(let i = 0; i < this.Effects.length; i++) {\r\n            this.Effects[i].draw(ctx);\r\n        }\r\n    }\r\n    \r\n    private drawEntities(ctx: CanvasRenderingContext2D, entities: IEntity[]) {\r\n        for(let i = entities.length - 1; i >= 0; i --) {\r\n            entities[i].render(ctx);\r\n        }\r\n    }\r\n\r\n    public findNearestShips(originPoint: Point, team?:ETeam, maxRange?: number): Ship[] {\r\n        const allItems = team === undefined ? [...this.Entities[ETeam.ally], ...this.Entities[ETeam.enemy], ...this.Entities[ETeam.neutral]] : this.Entities[team];\r\n        let ships = <Ship[]> allItems.filter(item => (<Ship>item).currentHp !== undefined);\r\n        if(maxRange !== undefined) {\r\n            const rangeSq = maxRange * maxRange;\r\n            ships = ships.filter(s => Point.subtract(s.position, originPoint).LengthSq() <= rangeSq);\r\n        }\r\n        const shipsAndRanges = ships.map(ship => ({ ship, range: Point.subtract(ship.position, originPoint).LengthSq() }));\r\n        shipsAndRanges.sort((a, b) => a.range - b.range);\r\n        return shipsAndRanges.map(s => s.ship);\r\n    }\r\n}","import { TimingFunction } from \"./TimingFunction\";\r\nimport { Keyframes } from './Keyframes';\r\n\r\nexport class Interpolated<T> {\r\n    constructor(public range: Keyframes<T>, public timingFunction: TimingFunction) {\r\n\r\n    }\r\n}\r\n\r\nexport class InterpolationTimer {\r\n    public elapsedTime: number;\r\n    constructor(public totalTime: number) {\r\n        this.elapsedTime = 0;\r\n    }\r\n    tick(): boolean {\r\n        this.elapsedTime ++;\r\n        return this.elapsedTime >= this.totalTime;\r\n    }\r\n    sample<T>(animation: Interpolated<T>) {\r\n        return animation.range.sample(animation.timingFunction(this.elapsedTime / this.totalTime));\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\n\r\nexport class SingleExplosion implements IEffect {\r\n\r\n    private timing: InterpolationTimer;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public outerRadius: Interpolated<number>,\r\n        public innerRadius: Interpolated<number>,\r\n        public fillColor: Interpolated<Color>,\r\n        totalTime: number)\r\n    {\r\n        this.timing = new InterpolationTimer(totalTime);\r\n    }\r\n\r\n    tick(): boolean {\r\n        return this.timing.tick();\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const outer = this.timing.sample(this.outerRadius);\r\n        const inner = this.timing.sample(this.innerRadius);\r\n        const fill = this.timing.sample(this.fillColor);\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, outer, 0, Math.PI * 2, false);\r\n        if(inner >= 0) {\r\n            ctx.arc(this.position.x, this.position.y, inner, 0, Math.PI * 2, true);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toString();\r\n        ctx.fill();\r\n    }\r\n\r\n}","export type TimingFunction = (t: number)=> number;\r\n\r\nexport const TimingFunctions = {\r\n    linear: (t:number) => t,\r\n    clamp: (t:number) => Math.max(Math.min(t, 1), 0),\r\n    fastIn: Bezier(0, 0.8, 1),\r\n    fastOut: Bezier(0, 0.2, 1),\r\n};\r\n\r\nexport function Bezier(...pts: number[]): TimingFunction {\r\n    return (t: number) => b_recurse(t, pts, 0, pts.length);\r\n}\r\n\r\nfunction b_recurse(p: number, pts: number[], pi: number, pc: number): number {\r\n    if(pc === 1) return pts[pi];\r\n    return b_recurse(p, pts, pi, pc - 1) * (1-p) + b_recurse(p, pts, pi + 1, pc - 1) * p;\r\n}","import { Color } from \"../Color\";\r\n\r\nexport type InterpolationFunction<T> = (start: T, end: T, percentage: number) => T;\r\n\r\nexport const numberInterpolator: InterpolationFunction<number> = (a, b, p) => a + (b-a)*p;\r\n\r\nexport const fastColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        numberInterpolator(a.r(), b.r(), p),\r\n        numberInterpolator(a.g(), b.g(), p),\r\n        numberInterpolator(a.b(), b.b(), p));\r\n\r\n        \r\nexport const trueColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.rgb(\r\n        Math.sqrt(numberInterpolator(a.r() * a.r(), b.r() * b.r(), p)),\r\n        Math.sqrt(numberInterpolator(a.g() * a.g(), b.g() * b.g(), p)),\r\n        Math.sqrt(numberInterpolator(a.b() * a.b(), b.b() * b.b(), p)));\r\n\r\n        \r\nexport const hsvColorInterpolator: InterpolationFunction<Color> = (a,b,p) => \r\n    Color.hsv(\r\n        numberInterpolator(a.h(), b.h(), p),\r\n        numberInterpolator(a.s(), b.s(), p),\r\n        numberInterpolator(a.v(), b.v(), p));","import { exception } from \"console\";\r\nimport { Color } from \"../Color\";\r\nimport { fastColorInterpolator, InterpolationFunction, numberInterpolator } from \"./InterpolationFunction\";\r\n\r\nexport function EvenlySpacedKeyframes<T>(...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator: InterpolationFunction<T>, ...args: T[]): Keyframes<T>;\r\nexport function EvenlySpacedKeyframes<T>(interpolator?: InterpolationFunction<T>, ...args: T[]): Keyframes<T> {\r\n    if(interpolator.arguments === undefined) {\r\n        args.splice(0, 0, <T><any>interpolator);\r\n        interpolator = undefined;\r\n    }\r\n\r\n    let numFrames = args.length - 1;\r\n    let percPer = 1 / numFrames;\r\n    let keyframes = new Keyframes<T>(args[0], interpolator);\r\n    for(let i = 1; i < args.length; i++) {\r\n        keyframes.addKeyFrame(percPer * i, args[i]);\r\n    }\r\n    return keyframes;\r\n}\r\n\r\nexport class Keyframes<T> \r\n{\r\n    private interpolator: InterpolationFunction<T>;\r\n    private keys: {time: number, value: T}[];\r\n\r\n    constructor(start: T, interpolator?: InterpolationFunction<T>)\r\n    {\r\n        if(interpolator === undefined) {\r\n            if(typeof(start) === \"number\") {\r\n                this.interpolator = <any>numberInterpolator;\r\n            } else if((<Color><unknown>start).r !== undefined) {\r\n                // Assume this is color\r\n                this.interpolator = <any>fastColorInterpolator;\r\n            }\r\n            else {\r\n                throw 'No default interpolator found';\r\n            }\r\n        } else {\r\n            this.interpolator = interpolator;\r\n        }\r\n        this.keys = [{time: 0, value: start}];\r\n    }\r\n\r\n    public addKeyFrame(time: number, value: T) {\r\n        for(let i = 0; i < this.keys.length; i++)\r\n        {\r\n            if(time < this.keys[i].time) {\r\n                this.keys.splice(i, 0, {time, value});\r\n                return;\r\n            }\r\n        }\r\n        this.keys.push({time, value});\r\n    }\r\n\r\n    public sample(p: number): T {\r\n        if(this.keys.length === 1) return this.keys[0].value;\r\n\r\n        var keyIndex = 0;\r\n        while(this.keys[keyIndex + 1].time < p && keyIndex + 2 < this.keys.length) {\r\n            keyIndex ++;\r\n        }\r\n\r\n        let sampleRange = this.keys[keyIndex + 1].time - this.keys[keyIndex].time;\r\n        let samplePerc = (p - this.keys[keyIndex].time) / sampleRange;\r\n\r\n        return this.interpolator(this.keys[keyIndex].value, this.keys[keyIndex + 1].value, samplePerc);\r\n    }\r\n}","import { Color } from \"../../common/Color\";\r\nimport { Interpolated, InterpolationTimer } from \"../../common/interpolation/Interpolated\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Range } from '../../common/Range';\r\nimport { SingleExplosion } from \"./SingleExplosion\";\r\nimport { EvenlySpacedKeyframes } from \"../../common/interpolation/Keyframes\";\r\nimport { TimingFunctions } from \"../../common/interpolation/TimingFunction\";\r\nimport { any } from \"../../../LinqLike\";\r\n\r\nexport class Explosion implements IEffect {\r\n\r\n    private explosions: SingleExplosion[];\r\n    private currentBurstDelay = 0;\r\n    private maxExplosionIndex = 0;\r\n\r\n    constructor(\r\n        public position: Point,\r\n        public burstXVariance: Range,\r\n        public burstYVariance: Range,\r\n        public numBursts: Range,\r\n        public burstDelay: number,\r\n        public burstLifetime: Range,\r\n        public burstOuterRadius: Range,\r\n        )\r\n    {\r\n        const nb = Math.floor(numBursts.GetValue(Math.random()));\r\n        this.explosions = new Array(nb);\r\n        this.triggerExplosions();\r\n    }\r\n\r\n    triggerExplosions() {\r\n        while(this.currentBurstDelay === 0 && this.maxExplosionIndex < this.explosions.length) {\r\n            this.currentBurstDelay = this.burstDelay;\r\n            this.spawnBurst();\r\n        }\r\n    }\r\n\r\n    spawnBurst() {\r\n        const bx = this.position.x + this.burstXVariance.GetValue(Math.random());\r\n        const by = this.position.y + this.burstYVariance.GetValue(Math.random());\r\n        const lifetime = this.burstLifetime.GetValue(Math.random());\r\n        const outerRadius = this.burstOuterRadius.GetValue(Math.random());\r\n        const startingOuterRadius = outerRadius / 4;\r\n\r\n        this.explosions[this.maxExplosionIndex++] = new SingleExplosion(\r\n            new Point(bx, by),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(startingOuterRadius, outerRadius), TimingFunctions.linear),\r\n            new Interpolated<number>(EvenlySpacedKeyframes(-startingOuterRadius, outerRadius), TimingFunctions.fastOut),\r\n            new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n            lifetime\r\n        );\r\n    }\r\n\r\n    tick(): boolean {\r\n        let anyStillRunning = false;\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                if(this.explosions[i].tick()){\r\n                    this.explosions[i] = null;\r\n                } else {\r\n                    anyStillRunning = true;\r\n                }\r\n            }\r\n        }\r\n        this.currentBurstDelay --;\r\n        if(this.currentBurstDelay === 0) this.triggerExplosions();\r\n        return (!anyStillRunning && this.maxExplosionIndex === this.explosions.length);\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        for(let i = 0; i < this.maxExplosionIndex; i++) {\r\n            if(this.explosions[i] !== null && this.explosions[i] !== undefined) {\r\n                this.explosions[i].draw(ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Point from \"./position/Point\";\r\n\r\nexport default class Angle {\r\n    /** Takes an angle and returns it in the range of [0, 2 PI) */\r\n    static normalize(angle: number) {\r\n        angle %= Math.PI * 2;\r\n        if(angle < 0) angle += Math.PI * 2;\r\n        return angle;\r\n    }\r\n\r\n    /** Takes an angle and returns it in the range of [-PI, PI) */\r\n    static relativeNormalize(angle: number){\r\n        var norm = Angle.normalize(angle);\r\n        if(norm >= Math.PI) {\r\n            return norm - Math.PI * 2;;\r\n        } else {\r\n            return norm;\r\n        }\r\n    }   \r\n\r\n    static accuteAngle(from: number, to: number){\r\n        return Angle.relativeNormalize(to - from);\r\n    }\r\n\r\n    static angleBetween(from: Point, to: Point) {\r\n        return Math.atan2(to.y - from.y, to.x - from.x);\r\n    }\r\n}","import { PlayingAnimation, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { Ship } from \"../Ship\";\r\n\r\nexport enum EFlareConditions {\r\n    Accel = \"accel\",\r\n    Deccel = \"deccel\",\r\n    TurnLeft = \"turnLeft\",\r\n    TurnRight = \"turnRight\"\r\n}\r\n\r\nexport class FlareDefinition {\r\n    private minTrigger: number;\r\n    private rotPerTurn: number;\r\n    private playing: PlayingAnimation;\r\n\r\n    private shouldRender: boolean;\r\n    private adjRot: number;\r\n\r\n    public conditions: EFlareConditions[];\r\n    \r\n    constructor(\r\n        public animation: SpriteAnimation,\r\n        public offset: Point,\r\n        public rotation: number,\r\n        conditions: EFlareConditions | EFlareConditions[],\r\n        minTrigger?: number,\r\n        rotPerTurn?: number) {\r\n        \r\n        if(typeof(conditions) === \"string\")\r\n            this.conditions = [<EFlareConditions>conditions];\r\n        else\r\n            this.conditions = <EFlareConditions[]>conditions;\r\n\r\n        this.rotPerTurn = rotPerTurn ?? 0;\r\n        this.minTrigger = minTrigger ?? 0\r\n        this.playing = animation.play(30, true);\r\n        this.shouldRender = false;\r\n    }\r\n\r\n    clone(): FlareDefinition {\r\n        const result = new FlareDefinition(this.animation, this.offset, this.rotation, this.conditions, this.minTrigger, this.rotPerTurn);\r\n        return result;\r\n    }\r\n\r\n    tick(accel: number, turn: number) {\r\n        this.shouldRender = false;\r\n        for(let i = 0; i < this.conditions.length; i++)\r\n        {\r\n            switch(this.conditions[i]) {\r\n                case EFlareConditions.Accel: \r\n                    this.shouldRender = this.shouldRender || accel > this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.Deccel: \r\n                    this.shouldRender = this.shouldRender || accel < -this.minTrigger;\r\n                    break;\r\n                case EFlareConditions.TurnLeft:\r\n                    this.shouldRender = this.shouldRender || turn < -this.minTrigger\r\n                    break;\r\n                case EFlareConditions.TurnRight:\r\n                    this.shouldRender = this.shouldRender || turn > this.minTrigger\r\n                    break;\r\n            }\r\n        }\r\n        this.adjRot = turn * this.rotPerTurn;\r\n        if(this.shouldRender) this.playing.tick();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, location: Point, shipOrigin: Point, shipSize: Point, rotation: number) {\r\n        if(!this.shouldRender) return;\r\n        let realPoint = this.offset.Clone();\r\n        realPoint.SubtractWith(Point.Multiply(shipOrigin, shipSize));\r\n        realPoint = realPoint.rotate(rotation);\r\n        realPoint.AddWith(location);\r\n        let realRot = this.adjRot + this.rotation + rotation;\r\n        this.playing.draw(ctx, realPoint, this.animation.sourceSize, realRot);\r\n    }\r\n}","import Point from \"./Point\";\r\nimport { Range } from '../Range';\r\n\r\nexport default class Line {\r\n\r\n    constructor(public start: Point, public end: Point)\r\n    {\r\n\r\n    }\r\n\r\n    ray(): Point {\r\n        return Point.subtract(this.end, this.start);\r\n    }\r\n\r\n    midpoint(): Point {\r\n        return Point.interpolate(this.start, this.end, 0.5);\r\n    }\r\n\r\n    interpolate(p: number): Point {\r\n        return Point.interpolate(this.start, this.end, p);\r\n    }\r\n\r\n    static intersection(a: Line, b: Line): { percentA: number, percentB: number } {\r\n        const denom = (a.start.x - a.end.x) * (b.start.y - b.end.y) - (a.start.y - a.end.y) * (b.start.x - b.end.x);\r\n\r\n        if(denom === 0) {\r\n            return Line.parallelIntersection(a, b);\r\n        }\r\n        const percentA = ((a.start.x - b.start.x) * (b.start.y - b.end.y) - (a.start.y - b.start.y) * (b.start.x - b.end.x)) / denom;\r\n        const percentB = ((a.end.x - a.start.x) * (a.start.y - b.start.y) - (a.end.y - a.start.y) * (a.start.x - b.start.x)) / denom;\r\n\r\n        return { percentA, percentB };\r\n    }\r\n\r\n    private static parallelIntersection(a: Line, b: Line): { percentA: number, percentB: number } | null {\r\n        const basis = a.ray().normalize();\r\n        function getBasisValue(pt: Point) {\r\n            return Point.Dot(Point.subtract(pt, a.start), basis);\r\n        }\r\n        let aRange = new Range(getBasisValue(a.start), getBasisValue(a.end));\r\n        let bRange = new Range(getBasisValue(b.start), getBasisValue(b.end));\r\n\r\n        let bMinP = aRange.GetPercentage(bRange.min);\r\n        let bMaxP = aRange.GetPercentage(bRange.max);\r\n        \r\n        if(Math.abs(bMinP) <= Math.abs(bMaxP)) {\r\n            return { percentA: bMinP, percentB: 0 };\r\n        }  else {\r\n            return { percentA: bMaxP, percentB: 1 };\r\n        }\r\n    }\r\n}","import Line from \"./Line\";\r\nimport Point from \"./Point\";\r\n\r\nexport default class Bounds {\r\n    constructor(public position: Point, public size: Point, public origin: Point, public rotation: number)\r\n    {\r\n\r\n    }\r\n\r\n    getVertecies(): Point[] {\r\n        let relativePoints = [\r\n            new Point(0, 0),\r\n            new Point(this.size.x, 0),\r\n            new Point(this.size.x, this.size.y),\r\n            new Point(0, this.size.y)\r\n        ];\r\n\r\n        relativePoints = relativePoints.map(pt => Point.subtract(pt, this.origin));\r\n        relativePoints = relativePoints.map(pt => {\r\n            const angle = Math.atan2(pt.y, pt.x);\r\n            const dist = pt.Length();\r\n            return Point.fromAngle(angle + this.rotation, dist);\r\n        });\r\n        relativePoints = relativePoints.map(pt => Point.add(pt, this.position));\r\n        return relativePoints;\r\n    }\r\n\r\n    getEdges(): Line[] {\r\n        return this.getVertecies().map((pt, idx, arr) => new Line(pt, arr[(idx + 1) % arr.length]));\r\n    }\r\n\r\n    findLineIntersection(line: Line): number | null  {\r\n        let edges = this.getEdges();\r\n        let minLinePerc: number | null = null;\r\n        for(let i = 0; i < edges.length; i++) {\r\n            let colision = Line.intersection(line, edges[i]);\r\n            if( colision.percentA >= 0 && \r\n                colision.percentA < 1 && \r\n                colision.percentB >= 0 && \r\n                colision.percentB < 1 &&\r\n                (minLinePerc === null || colision.percentA < minLinePerc)) {\r\n                    minLinePerc = colision.percentA;\r\n            }\r\n        }\r\n        return minLinePerc;\r\n    }\r\n}","import Angle from \"../common/Angle\";\r\nimport KeyboardManager from \"../common/input/KeyboardManager\";\r\nimport Bounds from \"../common/position/Bounds\";\r\nimport Point from \"../common/position/Point\";\r\nimport { IShipAI } from \"./ai/IShipAI\";\r\nimport { ETeam } from \"./ETeam\";\r\nimport GameState from \"./GameState\";\r\nimport IEntity from \"./IEntity\";\r\nimport { FlareDefinition } from \"./ShipDefinitions/FlareDefinition\";\r\nimport { ShipDefinition } from \"./ShipDefinitions/ShipDefinition\";\r\nimport { Weapon } from \"./weapons/Weapon\";\r\nimport { WeaponGroup } from \"./weapons/WeaponGroup\";\r\n\r\nexport class Ship implements IEntity{\r\n    \r\n    public Velocity: number;\r\n    private lastAccel: number;\r\n    private lastDeccel: number;\r\n    private lastTurn: number;\r\n    public currentHp: number;\r\n    private flares: FlareDefinition[];\r\n    \r\n    constructor(\r\n        public definition: ShipDefinition,\r\n        public position: Point,\r\n        public rotation: number,\r\n        public ai: IShipAI,\r\n        private team: ETeam,\r\n        private weaponGroups: WeaponGroup[]) {\r\n            this.Velocity = 0;\r\n            this.lastAccel = this.lastDeccel = this.lastTurn = 0;\r\n            this.currentHp = this.definition.maxHp;\r\n            this.flares = this.definition.flares.map(f => f.clone());\r\n    }\r\n\r\n    getBounds(): Bounds {\r\n        return new Bounds(this.position, this.definition.size, Point.Multiply(this.definition.origin, this.definition.size), this.rotation);\r\n    }\r\n\r\n    tick(keys: KeyboardManager, gs: GameState): boolean {\r\n        const { tgtVel, tgtHeading } = this.ai.TickAI(gs, this);\r\n        let actualAccelPercent = 0;\r\n        if(tgtVel < this.Velocity && this.definition.maxDeccel > 0) {\r\n            // Try deccel\r\n            var delta = this.Velocity - tgtVel;\r\n            this.lastDeccel = Math.min(1, delta / this.definition.maxDeccel);\r\n            actualAccelPercent = -this.lastDeccel;\r\n            this.Velocity -= this.lastDeccel * this.definition.maxDeccel;\r\n        } else if(tgtVel > this.Velocity) {\r\n            // Try accel\r\n            var delta = tgtVel - this.Velocity;\r\n            this.lastAccel = Math.min(1, delta / this.definition.maxAccel);\r\n            actualAccelPercent = this.lastAccel;\r\n            this.Velocity += this.lastAccel * this.definition.maxAccel;\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].tick(gs, this);\r\n        }\r\n\r\n        // Try turn\r\n        var turnAmt = Angle.accuteAngle(this.rotation, tgtHeading);\r\n\r\n        var turnDirection = Math.sign(turnAmt);\r\n        turnAmt = Math.abs(turnAmt);\r\n        this.lastTurn = Math.min(turnAmt / this.definition.maxTurnRate, 1) * turnDirection;\r\n\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].tick(actualAccelPercent, this.lastTurn);\r\n        }\r\n\r\n        this.rotation += this.lastTurn * this.definition.maxTurnRate;\r\n\r\n        if(this.Velocity >= 0) this.Velocity = Math.min(this.Velocity, this.definition.maxSpeed);\r\n        else this.Velocity = Math.max(this.Velocity, - this.definition.maxSpeed);\r\n        this.position.AddWith(Point.fromAngle(this.rotation, this.Velocity));\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.flares.length; i++){\r\n            this.flares[i].draw(ctx, this.position, this.definition.origin, this.definition.size, this.rotation);\r\n        }\r\n\r\n        for(let i = 0; i < this.weaponGroups.length; i++){\r\n            this.weaponGroups[i].draw(ctx, this);\r\n        }\r\n        this.definition.sprite.draw(ctx, this.position, this.definition.size, this.rotation);\r\n\r\n        this.ai.debugDraw(ctx, this);\r\n    }\r\n\r\n    getTeam() {\r\n        return this.team;\r\n    }\r\n}","import Point from \"../position/Point\";\r\nimport { PlayingAnimation } from \"./SpriteAnimation\";\r\nimport { AtlasSprite } from \"./SpriteAtlas\";\r\n\r\nexport class AnimationControl {\r\n    queue: (PlayingAnimation | AtlasSprite)[];\r\n    scaleFactor: Point;\r\n\r\n    constructor(initial: PlayingAnimation | AtlasSprite, size?:Point) {\r\n        this.queue = [initial];\r\n        if(size === undefined) {\r\n            this.scaleFactor = new Point(1, 1);\r\n        }\r\n        else if(isSprite(initial)) {\r\n            this.scaleFactor = new Point(size.x / initial.sourceSize.x, size.y / initial.sourceSize.y);\r\n        }\r\n        else {\r\n            this.scaleFactor = new Point(size.x / initial.source.sourceSize.x, size.y / initial.source.sourceSize.y);\r\n        }\r\n    }\r\n\r\n    play(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue = [src];\r\n    }\r\n\r\n    enqueue(src: PlayingAnimation | AtlasSprite) {\r\n        this.queue.push(src);\r\n    }\r\n\r\n    tick() {\r\n        if(isSprite(this.queue[0])) {\r\n            this.advance();\r\n        }\r\n        else {\r\n            if(this.queue[0].tick()) this.advance();\r\n        }\r\n    }\r\n\r\n    advance() {\r\n        if(this.queue.length > 1) {\r\n            this.queue.splice(0, 1);\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, pt: Point, rot?: number) {\r\n        this.queue[0].draw(ctx, pt, this.getRenderSize(this.queue[0]), rot);\r\n    }\r\n\r\n    private getRenderSize(src: PlayingAnimation | AtlasSprite): Point {\r\n        if(isSprite(src)) return Point.Multiply(src.sourceSize, this.scaleFactor);\r\n        else return Point.Multiply(src.source.sourceSize, this.scaleFactor);\r\n    }\r\n}\r\n\r\nfunction isSprite(src: PlayingAnimation | AtlasSprite): src is AtlasSprite {\r\n    return (<AtlasSprite>src).origin !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport Point from \"../../../common/position/Point\";\r\nimport { Range } from '../../../common/Range';\r\nimport { IJsonAnimationDefinition, IJsonSpriteDefinition } from \"../IJsonShipDefinition\";\r\n\r\nexport function parseJsonPoint(jpt: [number, number]) {\r\n    return new Point(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonRange(jpt: [number, number]) {\r\n    return new Range(jpt[0], jpt[1]);\r\n}\r\n\r\nexport function parseJsonAngle(input: number) {\r\n    return input * Math.PI * 2;\r\n}\r\n\r\nexport function parseJsonSprite(input: IJsonSpriteDefinition, atlases: INamedCollection<SpriteAtlas>) {\r\n    return new AtlasSprite(atlases[input.file], parseJsonPoint(input.srcOffset), parseJsonPoint(input.srcSize), parseJsonPoint(input.origin), 0);\r\n}\r\n\r\nexport function parseJsonAnimation( anim: IJsonAnimationDefinition, atlases: INamedCollection<SpriteAtlas>){\r\n    return atlases[anim.file].getAnimation(\r\n        parseJsonPoint(anim.imgOffset),\r\n        parseJsonPoint(anim.frameSize),\r\n        parseJsonPoint(anim.origin),\r\n        anim.numFrames\r\n    );\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { CreateEffect } from \"./EffectFuncs\";\r\n\r\nexport default class EffectControl {\r\n    public effects: IEffect[];\r\n    constructor() {\r\n        this.effects = [];\r\n    }\r\n\r\n    spawnEffect(effectArgs:IJsonEffect, pt: Point, rot: number) {\r\n        this.effects.push(CreateEffect(effectArgs, pt, rot));\r\n    }\r\n\r\n    tick() {\r\n        for(let i = this.effects.length - 1; i >= 0; i --) {\r\n            if(this.effects[i].tick()) this.effects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        for(let i = 0; i < this.effects.length; i++) {\r\n            this.effects[i].draw(ctx);\r\n        }\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport { parseJsonRange } from \"../data/parsing/parsers\";\r\nimport { IEffect } from \"../IEffect\";\r\nimport { Explosion } from \"./Explosion\";\r\n\r\nexport function CreateEffect(effect: IJsonEffect, pt: Point, rot: number): IEffect {\r\n    switch(effect.type) {\r\n        case \"explosion\":\r\n            return new Explosion(pt, \r\n                parseJsonRange(effect.burstXVariance),\r\n                parseJsonRange(effect.burstYVariance),\r\n                parseJsonRange(effect.numBursts),\r\n                effect.burstDelay,\r\n                parseJsonRange(effect.burstLifetime),\r\n                parseJsonRange(effect.burstOuterRadius));\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport { AnimationControl } from \"../../common/assets/AnimationControl\";\r\nimport { ISpriteAnimationArgs, SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { AtlasSprite } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport { IJsonEffect } from \"../data/IJsonEffect\";\r\nimport EffectControl from \"../Effects/EffectControl\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipDefinition } from \"../ShipDefinitions/ShipDefinition\";\r\n\r\nexport interface IWeaponArgs {\r\n    offset: Point;\r\n    sprite?: AtlasSprite;\r\n    shootAnimation?: ISpriteAnimationArgs;\r\n    shootEffect?: IJsonEffect;\r\n\r\n    rotation: number;\r\n\r\n    turret?: {\r\n        maxAngle: number;\r\n        turnRate: number;\r\n    }\r\n\r\n    acquisitionAngle: number;\r\n    minRange?: number;\r\n    range: number;\r\n}\r\n\r\nexport class Weapon {\r\n    turretAngle: number;\r\n    actualAnchor: Point;\r\n    imgControl ?: AnimationControl;\r\n    effects: EffectControl;\r\n\r\n    constructor(public args: IWeaponArgs, shipDef: ShipDefinition) {\r\n        this.turretAngle = 0;\r\n        this.actualAnchor = this.args.offset.Clone();\r\n        this.actualAnchor.SubtractWith(Point.Multiply(shipDef.origin, shipDef.size));\r\n        if(args.sprite !== undefined) {\r\n            this.imgControl = new AnimationControl(args.sprite);\r\n        }\r\n        this.effects = new EffectControl();\r\n    }\r\n\r\n    getWeaponLocation(ship: Ship): Point {\r\n        const result = this.actualAnchor.rotate(ship.rotation);\r\n        result.AddWith(ship.position);\r\n        return result;\r\n    }\r\n    getWeaponAnchorAngle(ship: Ship) {\r\n        return this.args.rotation + ship.rotation;\r\n    }\r\n    getWeaponCurrentAngle(ship: Ship) {\r\n        return this.turretAngle + this.getWeaponAnchorAngle(ship);\r\n    }\r\n\r\n    /**\r\n     * @returns Returns a point if the turret is ready to fire on a provided possibleTarget (other than reload times) and null otherwise.\r\n     */\r\n    tick(self: Ship, possibleTargets: Point[]): Point | null {\r\n\r\n        this.effects.tick();\r\n        this.imgControl?.tick();\r\n\r\n        const location = this.getWeaponLocation(self);\r\n\r\n        // Filter down targets to those in range\r\n        possibleTargets = possibleTargets.filter(p => {\r\n            const pDist = Point.subtract(p, location).LengthSq();\r\n            return (\r\n                (this.args.minRange === undefined || \r\n                    (pDist > this.args.minRange * this.args.minRange)\r\n                ) &&\r\n                (pDist < this.args.range * this.args.range)\r\n            );\r\n        });\r\n\r\n        if(this.args.turret === undefined) {\r\n            if(possibleTargets.length === 0) return null; // No target in range.\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n\r\n            // I have no turret, fire if anyone is in spray range\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                // Find absolute direction to target\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                // Find angle to target relative to turret anchor angle\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                // Check if relAngle is less than the spray angle (he's in range)\r\n                if(Math.abs(turretRelAngle) < this.args.acquisitionAngle)\r\n                    return possibleTargets[i];\r\n            }\r\n            return null;\r\n        }\r\n        else {\r\n            if(possibleTargets.length === 0) {\r\n                // No targets. Return to angle 0.\r\n                if(this.turretAngle > 0) this.turretAngle -= Math.min(this.turretAngle, this.args.turret.turnRate);\r\n                else if(this.turretAngle < 0) this.turretAngle += Math.min(Math.abs(this.turretAngle), this.args.turret.turnRate);\r\n                return null;\r\n            }\r\n\r\n            const anchorAngle = this.getWeaponAnchorAngle(self);\r\n            const angle = this.getWeaponCurrentAngle(self);\r\n\r\n            let target: Point | null = null;\r\n            let targetAngle: number = 0;\r\n            let targetTurretAngle: number = 0;\r\n            let targetAbsoluteAngle: number = 0;\r\n\r\n            // Choose the target closest to anchor angle\r\n            for(let i = 0; i < possibleTargets.length; i++) {\r\n                const angleToTarget = Point.subtract(possibleTargets[i], self.position).Direction();\r\n                const turretRelAngle = Angle.accuteAngle(anchorAngle, angleToTarget);\r\n                if(target === null || Math.abs(turretRelAngle) < Math.abs(targetAngle)) {\r\n                    target = possibleTargets[i];\r\n                    targetAngle = turretRelAngle;\r\n                    if(Math.abs(turretRelAngle) > this.args.turret.maxAngle) {\r\n                        // Target is outside of firing arc, we'll need to aim as close as possible\r\n                        targetTurretAngle = this.args.turret.maxAngle * Math.sign(turretRelAngle);\r\n                        targetAbsoluteAngle = angleToTarget;\r\n                    } else {\r\n                        // If we choose this target, we'll aim right at them\r\n                        targetTurretAngle = targetAbsoluteAngle = angleToTarget;\r\n                    }\r\n                }\r\n            }\r\n            // target is not null. If it was, we'd've exited earlier.\r\n            // Turn gun towards target\r\n            const turretRelAngle = Angle.accuteAngle(angle, targetTurretAngle);\r\n            if(Math.abs(turretRelAngle) < this.args.turret.turnRate) {\r\n                this.turretAngle += turretRelAngle;\r\n            }\r\n\r\n            const finalTurretAngle = this.getWeaponCurrentAngle(self);\r\n            const finalRelAngle = Angle.accuteAngle(finalTurretAngle, targetAbsoluteAngle);\r\n\r\n            if(Math.abs(finalRelAngle) < this.args.acquisitionAngle) return target;\r\n            else return null;\r\n        }\r\n    }\r\n\r\n    /** TODO: SHOOT */\r\n    shoot(gs: GameState, self: Ship) {\r\n        // Play the shoot animation, if necessary\r\n        if(this.imgControl !== undefined && this.args.shootAnimation !== undefined) {\r\n            this.imgControl.enqueue(this.args.shootAnimation.animation.play(this.args.shootAnimation));\r\n            this.imgControl.enqueue(this.args.sprite);\r\n        }\r\n        if(this.args.shootEffect !== undefined) this.effects.spawnEffect(this.args.shootEffect, this.getWeaponLocation(self), this.getWeaponCurrentAngle(self));\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, ship: Ship) {\r\n        if(this.imgControl === undefined) return;\r\n        const realPoint = this.getWeaponLocation(ship);\r\n        let realRot = this.getWeaponCurrentAngle(ship);\r\n        this.imgControl.render(ctx, realPoint, realRot);\r\n        this.effects.draw(ctx);\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { IWeaponArgs, Weapon } from \"./Weapon\";\r\nimport { IWeaponTimingArgs, WeaponTimer } from \"./WeaponTimer\";\r\n\r\nexport interface IWeaponGroupArgs {\r\n    timer: IWeaponTimingArgs,\r\n    weapons: IWeaponArgs[],\r\n    burstAll?: boolean\r\n}\r\n\r\nexport class WeaponGroup {\r\n    burstAllWeapons: boolean;\r\n    constructor(public timer: WeaponTimer, private weapons: Weapon[], burstAllWeapons?: boolean) {\r\n        this.burstAllWeapons = burstAllWeapons ?? true;\r\n    }\r\n\r\n    /** Call once per tick, makes all turrets attempt to acquire targets\r\n     * @returns the number of weapons which have acquired targets\r\n     */\r\n    acquireTargets(ship: Ship, targets: Ship[]): number {\r\n        let acqCount = 0;\r\n        for(let i = 0; i < this.weapons.length; i++){\r\n            if(this.weapons[i].tick(ship, targets.map(t => t.position)) !== null) {\r\n                acqCount++;\r\n            }\r\n        }\r\n        return acqCount;\r\n    }\r\n\r\n    tick(gs: GameState, self: Ship) {\r\n        const targets = gs.findNearestShips(self.position, self.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy, this.weapons[0].args.range);\r\n        const acq = this.acquireTargets(self, targets);\r\n\r\n        this.timer.tick(acq > 0, bi => this.onShoot(bi, gs, self));\r\n    }\r\n\r\n    onShoot(burstIndex: number, gs: GameState, ship: Ship) {\r\n        if(!this.burstAllWeapons) {\r\n            this.weapons[burstIndex % this.weapons.length].shoot(gs, ship);\r\n        } else {\r\n            for(let i = 0; i < this.weapons.length; i++) {\r\n                this.weapons[i].shoot(gs, ship);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, self: Ship) {\r\n        for(let i = 0; i < this.weapons.length; i++) {\r\n            this.weapons[i].render(ctx, self);\r\n        }\r\n    }\r\n}","export interface IWeaponTimingArgs {\r\n    reloadTime: number;\r\n\r\n    burstCount: number;\r\n    burstDelay: number;\r\n\r\n    shotsPerBurst: number;\r\n}\r\n\r\nexport class WeaponTimer implements IWeaponTimingArgs {\r\n    public reloadTime: number; \r\n    public burstCount: number;\r\n    public burstDelay: number; \r\n    public shotsPerBurst: number;\r\n\r\n    private currentlyShooting: boolean;\r\n\r\n    public currentReload: number;\r\n    public currentBurstDelay: number;\r\n    public currentBurstIndex: number;\r\n\r\n    constructor(args: IWeaponTimingArgs) {\r\n        Object.assign(this, args);\r\n        this.currentlyShooting = false;\r\n        this.currentReload = this.currentBurstDelay = this.currentBurstIndex = 0;\r\n    }\r\n\r\n    isShooting(): boolean {\r\n        return this.currentlyShooting;\r\n    }\r\n\r\n    canShoot(): boolean {\r\n        return !this.currentlyShooting && this.currentReload === 0;\r\n    }\r\n\r\n    shoot(): boolean {\r\n        if(this.canShoot()){\r\n            this.currentlyShooting = true;\r\n            this.currentReload = this.reloadTime;\r\n            this.currentBurstDelay = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tick(shouldShoot: boolean, onShoot: (burstIndex: number, shellIndex: number) => void): void {\r\n        if(shouldShoot) this.shoot();\r\n        if(this.currentlyShooting) {\r\n            if(this.currentBurstDelay === 0) {\r\n                // Fire burst\r\n                for(let shell = 0; shell < this.shotsPerBurst; shell++) {\r\n                    onShoot(this.currentBurstIndex, shell);\r\n                }\r\n                this.currentBurstIndex++;\r\n                if(this.currentBurstIndex === this.burstCount) {\r\n                    // Done burst! Reset and start reload\r\n                    this.currentReload = this.reloadTime;\r\n                    this.currentBurstIndex = 0;\r\n                    this.currentlyShooting = false;\r\n                } else {\r\n                    this.currentBurstDelay = this.burstDelay;\r\n                }\r\n            } else {\r\n                // Timedown for burst\r\n                this.currentBurstDelay --;\r\n            }\r\n        } else if (this.currentReload !== 0) {\r\n            // Timedown for reload\r\n            this.currentReload--;\r\n        }\r\n    }\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { IShipAI } from \"../ai/IShipAI\";\r\nimport IJsonShipDefinition from \"../data/IJsonShipDefinition\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport { Ship } from \"../Ship\";\r\nimport { Weapon } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs, WeaponGroup } from \"../weapons/WeaponGroup\";\r\nimport { WeaponTimer } from \"../weapons/WeaponTimer\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\n\r\nexport class ShipDefinition {\r\n    sprite: AtlasSprite;\r\n    \r\n    constructor(\r\n        atlas: SpriteAtlas, \r\n        public size: Point,\r\n        srcPoint: Point,\r\n        srcSize: Point,\r\n        public origin: Point,\r\n        public maxHp: number,\r\n        public maxAccel: number,\r\n        public maxDeccel: number,\r\n        public maxSpeed: number,\r\n        public turnAccel: number, // NOT CURRENTLY USED because it makes AI tough\r\n        public maxTurnRate: number,\r\n        public flares: FlareDefinition[],\r\n        public weapons: IWeaponGroupArgs[],\r\n        public buildAi: ()=>IShipAI) {\r\n        this.sprite = atlas.getSprite(srcPoint, srcSize, origin)\r\n    }\r\n\r\n    buildShip(team: ETeam, position: Point, rotation?:number): Ship {\r\n        return new Ship(\r\n            this,\r\n            position,\r\n            rotation ?? 0,\r\n            this.buildAi(),\r\n            team,\r\n            this.weapons.map(\r\n                jsonWeaponGroup => new WeaponGroup(\r\n                    new WeaponTimer(jsonWeaponGroup.timer),\r\n                    jsonWeaponGroup.weapons.map(w => new Weapon(w, this)),\r\n                    jsonWeaponGroup.burstAll\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n","import Point from \"../../common/position/Point\";\r\n\r\nexport interface IDebugMarker {\r\n    draw(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class DebugPoint implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.arc(this.point.x, this.point.y, this.radius ?? 10, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugCross implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x - radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x + radius, this.point.y + radius);\r\n        ctx.moveTo(this.point.x + radius, this.point.y - radius);\r\n        ctx.lineTo(this.point.x - radius, this.point.y + radius);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport class DebugPlus implements IDebugMarker {\r\n    constructor(public point: Point, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const radius = this.radius ?? 10;\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y - radius);\r\n        ctx.lineTo(this.point.x, this.point.y + radius);\r\n        ctx.moveTo(this.point.x - radius, this.point.y);\r\n        ctx.lineTo(this.point.x + radius, this.point.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugRay implements IDebugMarker {\r\n    constructor(public point: Point, public direction: number, public color?: string, public radius?: number) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        const tgt = Point.add(this.point, Point.fromAngle(this.direction, this.radius ?? 50));\r\n        ctx.lineTo(tgt.x, tgt.y)\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\nexport class DebugLine implements IDebugMarker {\r\n    constructor(public point: Point, public point2: Point, public color?: string) {\r\n\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this.color ?? 'red';\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.point.x, this.point.y);\r\n        ctx.lineTo(this.point2.x, this.point2.y)\r\n        ctx.stroke();\r\n    }\r\n}","import Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\nimport { DebugCross, DebugLine, DebugPlus, DebugPoint, DebugRay, IDebugMarker } from \"./IDebugMarker\";\r\n\r\nexport abstract class ShipAI {\r\n    markers: IDebugMarker[];\r\n    doDebug: boolean;\r\n    constructor(args ?: { debug?: boolean }) {\r\n        this.markers = [];\r\n        this.doDebug = args?.debug ?? false;\r\n    }\r\n\r\n    abstract TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n\r\n    debug(debug: IDebugMarker) {\r\n        if(!this.doDebug) return;\r\n        this.markers.push(debug);\r\n    }\r\n    debugPoint(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPoint(pt, color, radius));\r\n    }\r\n    debugCross(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugCross(pt, color, radius));\r\n    }\r\n    debugPlus(pt: Point, color?:string, radius?:number) {\r\n        this.debug(new DebugPlus(pt, color, radius));\r\n    }\r\n    debugRay(pt: Point, angle: number, color?:string, dist?:number) {\r\n        this.debug(new DebugRay(pt, angle, color, dist));\r\n    }\r\n    debugLine(pt: Point, pt2: Point, color?:string) {\r\n        this.debug(new DebugLine(pt, pt2, color));\r\n    }\r\n\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship){\r\n        if(this.markers.length === 0) return;\r\n        for(let i = 0; i < this.markers.length; i++) {\r\n            this.markers[i].draw(ctx);\r\n        }\r\n        this.markers = [];\r\n    }\r\n}","import Angle from \"../../common/Angle\";\r\nimport Point from \"../../common/position/Point\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { DebugLine, DebugPoint, DebugRay } from \"./IDebugMarker\";\r\nimport { IShipAI } from \"./IShipAI\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport interface IBroadsideAiArgs {\r\n    minDistance: number,\r\n    maxDistance: number,\r\n    orbitSpeed: number,\r\n    debug: boolean\r\n}\r\nconst defaultArgs = {\r\n    minDistance: 100,\r\n    maxDistance: 500,\r\n    orbitSpeed: 0.5,\r\n    debug: false,\r\n}\r\nexport default class BroadsideAI extends ShipAI {\r\n    private args: IBroadsideAiArgs;\r\n    constructor(args: Partial<IBroadsideAiArgs>) {\r\n        super(args);\r\n        this.args = { ...defaultArgs, ...args };\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        const targetLocation = gs.Player.position;\r\n        const toLocation = Point.subtract(targetLocation, ship.position);\r\n        const currentHeading = ship.rotation;\r\n        const inwardHeading = toLocation.Direction();\r\n        const tangentHeadings = [\r\n            Angle.normalize(inwardHeading - (Math.PI / 2)),\r\n            Angle.normalize(inwardHeading + (Math.PI / 2))\r\n        ];\r\n\r\n        if(toLocation.LengthSq() < this.args.minDistance * this.args.minDistance) {\r\n            const fleeHeadings = [\r\n                Angle.normalize(inwardHeading - (Math.PI * 5 / 6)),\r\n                Angle.normalize(inwardHeading + (Math.PI * 5 / 6))\r\n            ];\r\n            const orbitDist = this.args.minDistance;\r\n            // Run away, but look for a tangent\r\n            this.debugPoint(targetLocation, 'orange', orbitDist);\r\n            const tgtPoints = fleeHeadings.map(tangent => Point.add(ship.position, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugLine(ship.position, tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else if (toLocation.LengthSq() > this.args.maxDistance * this.args.maxDistance) {\r\n            const orbitDist = (this.args.minDistance + this.args.maxDistance)/2;\r\n            // Close the gap\r\n            this.debugPoint(targetLocation, undefined, orbitDist);\r\n            const tgtPoints = tangentHeadings.map(tangent => Point.add(targetLocation, Point.fromAngle(tangent, orbitDist)));\r\n            for(let i = 0; i < tgtPoints.length; i++) {\r\n                this.debugPoint(tgtPoints[i]);\r\n            }\r\n            const tgtHeadings = tgtPoints.map(tgt => Point.subtract(tgt, ship.position).Direction());\r\n            const bestHeading = getMinHeading(currentHeading, tgtHeadings); \r\n            \r\n            return { \r\n                tgtVel: ship.definition.maxSpeed, \r\n                tgtHeading: bestHeading\r\n            };\r\n        } else {\r\n            // Orbit\r\n            this.debugPoint(targetLocation, 'green', this.args.minDistance);\r\n            this.debugPoint(targetLocation, 'yellow', this.args.maxDistance);\r\n            const betterHeading = getMinHeading(currentHeading, tangentHeadings);\r\n            return { \r\n                tgtVel: ship.definition.maxSpeed * this.args.orbitSpeed, \r\n                tgtHeading: betterHeading\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMinHeading(selfHeading: number, targetHeadings: number[]): number {\r\n    const relativeHeadings = targetHeadings.map(target => Angle.accuteAngle(selfHeading, target));\r\n    let minHeading = relativeHeadings[0];\r\n    let actualTarget = targetHeadings[0];\r\n    for(let i = 1; i < relativeHeadings.length; i++) {\r\n        if(Math.abs(relativeHeadings[i]) < Math.abs(minHeading)) {\r\n            minHeading = relativeHeadings[i];\r\n            actualTarget = targetHeadings[i];\r\n        }\r\n    }\r\n    return actualTarget;\r\n}","import Angle from \"../../common/Angle\";\r\nimport { ETeam } from \"../ETeam\";\r\nimport GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport { ShipAI } from \"./ShipAI\";\r\n\r\nexport default class FigherAI extends ShipAI {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    TickAI(gs: GameState, ship: Ship): { tgtVel: number; tgtHeading: number; } {\r\n        var nearest = gs.findNearestShips(ship.position, ship.getTeam() === ETeam.enemy ? ETeam.ally : ETeam.enemy);\r\n        var target = nearest[0];\r\n\r\n        if(target === undefined) {\r\n            // Nothing to do, no ships.\r\n            return {tgtHeading: 0, tgtVel: 0};\r\n        }\r\n\r\n        const tgtHeading = Angle.angleBetween(ship.position, target.position);\r\n\r\n        const deltaHeading = Angle.accuteAngle(ship.rotation, tgtHeading);\r\n        const tgtSpeed = 1 - Math.max(0, Math.min(1, Math.abs(deltaHeading) / Math.PI));\r\n\r\n        return { tgtVel: tgtSpeed * ship.definition.maxSpeed, tgtHeading: tgtHeading };\r\n    }\r\n}","import GameState from \"../GameState\";\r\nimport { Ship } from \"../Ship\";\r\nimport BroadsideAI from \"./BroadsideAI\";\r\nimport FigherAI from \"./FighterAI\";\r\n\r\nexport interface IShipAI {\r\n    TickAI(gs: GameState, ship: Ship): {tgtVel: number, tgtHeading: number};\r\n    debugDraw(ctx: CanvasRenderingContext2D, ship: Ship): void;\r\n}\r\n\r\nexport const AllAIGenerators: {[key: string]: (args?: {[key: string]: any})=>IShipAI} = {\r\n    fighter: (args) => new FigherAI(),\r\n    broadside: (args) => new BroadsideAI(<any>(args ?? {}))\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../../common/assets/SpriteAtlas\";\r\nimport INamedCollection from \"../../../common/INamedCollection\";\r\nimport { IWeaponArgs } from \"../../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../../weapons/WeaponGroup\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../IJsonWeapon\";\r\nimport { parseJsonPoint, parseJsonSprite } from \"./parsers\";\r\n\r\nexport function parseWeaponGroupDefinition(json: IJsonWeaponGroup, defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>): IWeaponGroupArgs {\r\n    return {\r\n        timer: json.timer,\r\n        weapons: json.weapons.map(weaponJson => parseWeaponDefinition(weaponJson, defs, imgAtlases)),\r\n        burstAll: json.burstAll\r\n    }\r\n}\r\n\r\nfunction parseWeaponDefinition(json: (IJsonWeapon | IJsonWeaponReference), defs: INamedCollection<IJsonWeaponStats>, imgAtlases: INamedCollection<SpriteAtlas>) : IWeaponArgs{\r\n    if(isWeapon(json)) {\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(json.sprite !== undefined) {\r\n            sprite = parseJsonSprite(json.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: json.turret,\r\n            acquisitionAngle: json.acquisitionAngle,\r\n            minRange: json.minRange,\r\n            range: json.range\r\n        };\r\n    }\r\n    else {\r\n        const def = defs[json.definition];\r\n        if(def === undefined) {\r\n            console.error(\"Weapon referenced def \" + json.definition + \" which could not be found\");\r\n        }\r\n        let sprite: AtlasSprite | undefined = undefined;\r\n        if(def.sprite !== undefined) {\r\n            sprite = parseJsonSprite(def.sprite, imgAtlases);\r\n        }\r\n        return {\r\n            offset: parseJsonPoint(json.offset),\r\n            sprite: sprite,\r\n            rotation: json.rotation,\r\n            turret: def.turret,\r\n            acquisitionAngle: def.acquisitionAngle,\r\n            minRange: def.minRange,\r\n            range: def.range\r\n        };\r\n    }\r\n}\r\n\r\nfunction isWeapon(json: IJsonWeapon | IJsonWeaponReference): json is IJsonWeapon {\r\n    return (<any>json).range !== undefined;\r\n}","import { AtlasSprite, SpriteAtlas } from \"../../common/assets/SpriteAtlas\";\r\nimport Point from \"../../common/position/Point\";\r\nimport FigherAI from \"../ai/FighterAI\";\r\nimport { ShipDefinition } from \"./ShipDefinition\";\r\nimport IShipDefinitionsFile, { IJsonShipDefinition, IJsonAnimationDefinition } from \"../data/IJsonShipDefinition\";\r\nimport { SpriteAnimation } from \"../../common/assets/SpriteAnimation\";\r\nimport { FlareDefinition } from \"./FlareDefinition\";\r\nimport { AllAIGenerators } from \"../ai/IShipAI\";\r\nimport { IWeaponArgs } from \"../weapons/Weapon\";\r\nimport { IWeaponGroupArgs } from \"../weapons/WeaponGroup\";\r\nimport INamedCollection from \"../../common/INamedCollection\";\r\nimport { parseJsonAngle, parseJsonAnimation, parseJsonPoint } from \"../data/parsing/parsers\";\r\nimport { IJsonWeapon, IJsonWeaponGroup, IJsonWeaponReference, IJsonWeaponStats } from \"../data/IJsonWeapon\";\r\nimport { parseWeaponGroupDefinition } from \"../data/parsing/weapons\";\r\n\r\nexport function buildAllDefinitions(json: IShipDefinitionsFile, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition[] {\r\n    const animationData: { [key:string]: SpriteAnimation } = <any>{};\r\n    for(let key in json.animations) {\r\n        animationData[key] = parseJsonAnimation(json.animations[key], imgAtlases);\r\n    }\r\n    return json.ships.map(def => \r\n        parseShipDefinition(def, animationData, imgAtlases)\r\n    );\r\n}\r\n\r\nfunction parseShipDefinition(def: IJsonShipDefinition, anims: { [key:string]: SpriteAnimation }, imgAtlases: INamedCollection<SpriteAtlas>): ShipDefinition {\r\n    const parsedFlares: FlareDefinition[] = [];\r\n    for(let i = 0; i < def.flares.length; i++)\r\n    {\r\n        const flare = def.flares[i];\r\n        const animation = typeof(flare.animation) === 'string' ? anims[flare.animation] : parseJsonAnimation(flare.animation, imgAtlases);\r\n\r\n        parsedFlares.push(new FlareDefinition(\r\n            animation,\r\n            parseJsonPoint(flare.offset),\r\n            parseJsonAngle(flare.rotation),\r\n            flare.condition,\r\n            flare.minTrigger,\r\n            flare.rotPerTurn\r\n        ));\r\n    }\r\n\r\n    const aiFunc = AllAIGenerators[def.ai];\r\n    const aiGen = () => aiFunc(def.aiParams);\r\n\r\n    return new ShipDefinition(\r\n        imgAtlases[def.sprite.file],\r\n        parseJsonPoint(def.size),\r\n        parseJsonPoint(def.sprite.srcOffset),\r\n        parseJsonPoint(def.sprite.srcSize),\r\n        parseJsonPoint(def.sprite.origin),\r\n        def.hp,\r\n        def.maxAccel,\r\n        def.maxDeccel,\r\n        def.maxSpeed,\r\n        def.turnAccel,\r\n        def.maxTurnSpeed,\r\n        parsedFlares,\r\n        def.weaponGroups.map(group => \r\n            parseWeaponGroupDefinition(group, def.weaponDefinitions ?? {}, imgAtlases)),\r\n        aiGen\r\n    );\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport Const from './const';\r\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\r\nimport { NearestNeighborScaling, RotTransformCanvas } from '../common/CanvasHelpers';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport entitySheetUrl from './assets/bullets_entities.png';\r\nimport shipSheetUrl from './assets/Ships.png';\r\nimport flareSheetUrl from './assets/Flares.png';\r\nimport playerUrl from './assets/bullets_ship.png';\r\nimport ImageLoader from '../common/assets/ImageLoader';\r\nimport Player from './Player';\r\nimport KeyboardManager from '../common/input/KeyboardManager';\r\nimport KeyState from '../common/input/KeyState';\r\nimport Point from '../common/position/Point';\r\nimport GameState from './GameState';\r\nimport { SingleExplosion } from './Effects/SingleExplosion';\r\nimport { Interpolated } from '../common/interpolation/Interpolated';\r\nimport { TimingFunctions } from '../common/interpolation/TimingFunction';\r\nimport { Color } from '../common/Color';\r\nimport { EvenlySpacedKeyframes, Keyframes } from '../common/interpolation/Keyframes';\r\nimport { Explosion } from './Effects/Explosion';\r\nimport { Range } from '../common';\r\nimport { AtlasSprite, SpriteAtlas } from '../common/assets/SpriteAtlas';\r\nimport { buildAllDefinitions } from './ShipDefinitions/AllShipDefinitions';\r\nimport { ETeam } from './ETeam';\r\nimport IShipDefinitionsFile from './data/IJsonShipDefinition';\r\nimport { ShipDefinition } from './ShipDefinitions/ShipDefinition';\r\nimport INamedCollection from '../common/INamedCollection';\r\n\r\nlet atlases: INamedCollection<SpriteAtlas>;\r\nlet scalingHelper: NearestNeighborScalingHelper;\r\nlet shipSprite: AtlasSprite;\r\n\r\nexport default function Run() {\r\n    const assetLoader = new AssetLoader();\r\n    const entitySheet = new SpriteSheet(8, 16, entitySheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const shipAtlas = new SpriteAtlas(shipSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    const flareAtlas = new SpriteAtlas(flareSheetUrl, assetLoader.registerAssetLoadCallback());\r\n    atlases = {\r\n        \"Ships\": shipAtlas,\r\n        \"Flares\": flareAtlas\r\n    };\r\n\r\n    assetLoader.onAllFinished(() => loadJson(entitySheet));\r\n}\r\n\r\nfunction loadJson(entitySheet: SpriteSheet){\r\n    import(\r\n        /* webpackChunkName: \"bullets-ship-definitions\" */\r\n        './data/shipDefinitions.json'\r\n    ).then(value => {\r\n        console.log('Got shipDefinitions.json');\r\n        const definitions = buildAllDefinitions(<IShipDefinitionsFile><any>value, atlases);\r\n        onLoadDone(entitySheet, definitions);\r\n    });\r\n}\r\n\r\nfunction onLoadDone(entitySheet: SpriteSheet, definitions: ShipDefinition[]) {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    scalingHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.Width, Const.Height, true, () => { return; });\r\n    NearestNeighborScaling(ctx);\r\n\r\n    shipSprite = atlases[\"Ships\"].getSprite(new Point(96, 0), new Point(32, 48), new Point(0.5, 1));\r\n\r\n    const keys = new KeyboardManager(document.body, false);\r\n    const player = new Player(entitySheet);\r\n\r\n    const gs = new GameState(player, keys);\r\n\r\n    gs.Effects.push(new SingleExplosion(\r\n        new Point(0, 0),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(0, 30), TimingFunctions.linear),\r\n        new Interpolated<number>(EvenlySpacedKeyframes(-10, 30), TimingFunctions.fastOut),\r\n        new Interpolated<Color>(EvenlySpacedKeyframes(Color.rgb(1, 1, 0.5), Color.rgb(1, 0, 0), Color.rgb(0.2, 0.2, 0)), TimingFunctions.linear),\r\n        120\r\n    ));\r\n\r\n    gs.Effects.push(new Explosion(\r\n        new Point(100, 0),\r\n        new Range(-30, 30),\r\n        new Range(-30, 30),\r\n        new Range(30, 30),\r\n        4,\r\n        new Range(20, 40),\r\n        new Range(20, 60)));\r\n\r\n    for(let i = 0; i < definitions.length; i++){\r\n        const team = i % 2 === 0 ? ETeam.enemy : ETeam.ally;\r\n        gs.Entities[team].push(definitions[i].buildShip(team, new Point(-100 * (i+1), 0), Math.random() * Math.PI * 2));\r\n    }\r\n\r\n    repaintLoop(gs, player, keys, canvas, ctx);\r\n}\r\n\r\nfunction repaintLoop(gameState: GameState, player: Player, keys: KeyboardManager, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    keys.update();\r\n    gameState.tick();\r\n    player.tick(keys);\r\n    repaint(gameState, player, canvas, ctx);\r\n    requestAnimationFrame(() => repaintLoop(gameState, player, keys, canvas, ctx));\r\n}\r\n\r\nfunction repaint(gameState: GameState, player: Player, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\r\n    NearestNeighborScaling(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, Const.Width, Const.Height);\r\n    ctx.save();\r\n\r\n    const focusPoint = Point.add(player.position, Point.Multiply(player.velocity, 10));\r\n\r\n    ctx.translate(-(focusPoint.x - Const.Width / 2), -(focusPoint.y - Const.Height / 2));\r\n    ctx.fillStyle = 'gray';\r\n\r\n    const bg_line_size = 400;\r\n\r\n    // Render some bg lines so we can see motion\r\n    for (let ty = Math.floor((focusPoint.y - Const.Height / 2) / bg_line_size) * bg_line_size; ty <= Math.floor((focusPoint.y + Const.Height / 2) / bg_line_size) * bg_line_size; ty += bg_line_size) {\r\n        ctx.fillRect(focusPoint.x - Const.Width / 2, ty, Const.Width, 3);\r\n    }\r\n\r\n    for (let tx = Math.floor((focusPoint.x - Const.Width / 2) / bg_line_size) * bg_line_size; tx <= Math.floor((focusPoint.x + Const.Width / 2) / bg_line_size) * bg_line_size; tx += bg_line_size) {\r\n        ctx.fillRect(tx, focusPoint.y - Const.Height / 2, 3, Const.Height);\r\n    }\r\n\r\n    player.render(ctx);\r\n\r\n    gameState.draw(ctx);\r\n\r\n    ctx.restore();\r\n}"],"sourceRoot":""}