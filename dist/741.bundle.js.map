{"version":3,"file":"741.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/3d/Matrix4.ts","webpack://trading-game/./src/projects/common/3d/Point3.ts","webpack://trading-game/./src/projects/common/3d/Quaternion.ts","webpack://trading-game/./src/projects/common/3d/Vector.ts","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/raymarch/debuilder/GlslValue.ts","webpack://trading-game/./src/projects/raymarch/debuilder/DistanceEstimatePrimitives.ts","webpack://trading-game/./src/projects/raymarch/index.ts","webpack://trading-game/./src/projects/raymarch/debuilder/DistanceEstimateBuilder.ts","webpack://trading-game/./src/views/projects/raymarch/RaymarchComponent.tsx"],"sourcesContent":["import Point3 from \"./Point3\";\n\nconst identity = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1]\n];\n\nexport default class Matrix4 {\n    components: [\n        [number, number, number, number],\n        [number, number, number, number],\n        [number, number, number, number],\n        [number, number, number, number]\n    ];\n\n    constructor(identity: boolean = true) {\n        if(identity) {\n            this.components = [\n                [1, 0, 0, 0],\n                [0, 1, 0, 0],\n                [0, 0, 1, 0],\n                [0, 0, 0, 1]\n            ];\n        } else {\n            this.components = [\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 1]\n            ];\n        }\n    }\n\n    public transform(p: Point3) : Point3 {\n        let x = this.multRow(this.components[0], p);\n        let y = this.multRow(this.components[1], p);\n        let z = this.multRow(this.components[2], p);\n        let w = this.multRow(this.components[3], p);\n        return new Point3(x/w, y/w, z/w);\n    }\n\n    public mult(other: Matrix4): Matrix4 {\n        const output = new Matrix4();\n        for(let row = 0; row < 4; row++) {\n            for(let col = 0; col < 4; col ++) {\n                output.components[row][col] = 0;\n                for(let i = 0; i < 4; i++) {\n                    output.components[row][col] +=\n                        this.components[row][i] *\n                        other.components[i][col];\n                }\n            }\n        }\n\n        return output;\n    }\n\n    private multRow(row: [number, number, number, number], p: Point3) {\n        return row[0] * p.x + row[1] * p.y + row[2] * p.z + row[3];\n    }\n    \n    public colMajor(): number[] {\n        let output = new Array(16);\n        let i = 0;\n        for(let row = 0; row < 4; row++) {\n            for(let col = 0; col < 4; col++) {\n                output[i++] = this.components[row][col];\n            }\n        }\n        return output;\n    }\n    \n    public rowMajor(): number[] {\n        let output = new Array(16);\n        let i = 0;\n        for(let col = 0; col < 4; col++) {\n            for(let row = 0; row < 4; row++) {\n                output[i++] = this.components[row][col];\n            }\n        }\n        return output;\n    }\n\n    public static translate(pt: Point3) {\n        let output = new Matrix4();\n        output.components[0][3] = pt.x;\n        output.components[1][3] = pt.y;\n        output.components[2][3] = pt.z;\n        return output;\n    }\n}","export default class Point3 {\n\n    static zero(): Point3  {\n        return new Point3(0,0,0);\n    }\n\n    constructor(public x: number, public y: number, public z: number) {\n\n    }\n    public lengthSq(): number {\n        return this.dot(this);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    public clone(): Point3 {\n        return new Point3(this.x, this.y, this.z);\n    }\n\n    public dot(other: Point3): number {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    }\n\n    public normalize(): Point3 {\n        let len = this.length();\n        return this.div(len);\n    }\n\n    public mult(p: Point3): Point3\n    public mult(x: number, y: number, z: number): Point3\n    public mult(s: number): Point3\n    public mult(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\n        return new Point3(x * this.x, y * this.y, z * this.z);\n    }\n\n    \n    public div(p: Point3): Point3\n    public div(x: number, y: number, z: number): Point3\n    public div(s: number): Point3\n    public div(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz, true);\n        return new Point3(this.x / x, this.y / y, this.z / z);\n    }\n\n    public add(p: Point3): Point3\n    public add(x: number, y: number, z: number): Point3\n    public add(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz);\n        return new Point3(this.x + x, this.y + y, this.z + z);\n    }\n\n    public sub(p: Point3): Point3\n    public sub(x: number, y: number, z: number): Point3\n    public sub(pxs: Point3 | number, iy?: number, iz?: number): Point3 {\n        let {x, y, z} = splitArgs(pxs, iy, iz);\n        return new Point3(this.x - x, this.y - y, this.z - z);\n    }\n}\n\nfunction splitArgs(pxs: Point3 | number, y?: number, z?: number, allowSingle: boolean = false): {x: number, y: number, z: number} {\n    if(y === undefined) {\n        if(!allowSingle || (pxs as Point3).x !== undefined) {\n            return (pxs as Point3);\n        } else {\n            return { x: pxs as number, y: pxs as number, z: pxs as number };\n        }\n    }\n    else {\n        return { x: pxs as number, y, z };\n    }\n}","import Vector from './Vector';\nimport { vec2 } from 'gl-matrix';\nimport Matrix4 from './Matrix4';\n\nexport default class Quaternion {\n    constructor(public real: number, public i: number, public j: number, public k: number) {\n    }\n\n    public inverse(): Quaternion {\n        const denom = Quaternion.Dot(this, this);\n        return new Quaternion(this.real / denom, -this.i / denom, -this.j / denom, -this.k / denom);\n    }\n\n    public static Dot(a: Quaternion, b: Quaternion): number {\n        return a.real * b.real + a.i * b.i + a.j * b.j + a.k * b.k;\n    }\n\n    public static axisRotation(axis: Vector, radians: number): Quaternion {\n        const cos = Math.cos(radians / 2);\n        const sin = Math.sin(radians / 2);\n        const len = axis.length();\n\n        return new Quaternion(cos, sin * axis.x / len, sin * axis.y / len, sin * axis.z / len);\n    }\n\n    public static multiply(a: Quaternion, b: Quaternion) {\n        return new Quaternion (\n            a.real * b.real - a.i * b.i - a.j * b.j - a.k * b.k,\n            a.real * b.i + a.i * b.real + a.j * b.k - a.k * b.j,\n            a.real * b.j - a.i * b.k + a.j * b.real + a.k * b.i,\n            a.real * b.k + a.i * b.j - a.j * b.i + a.k * b.real\n        );\n    }\n\n    public applyTransform(point: Quaternion): Quaternion;\n    public applyTransform(vec3: Vector): Vector;\n    public applyTransform(point: Quaternion|Vector): Quaternion|Vector {\n        if ((point as any).real !== undefined) {\n            return Quaternion.multiply(this, Quaternion.multiply(point as Quaternion, this.inverse()));\n        }\n        else {\n            const inputQ = new Quaternion(0, (point as Vector).x, (point as Vector).y, (point as Vector).z);\n            const qOut = Quaternion.multiply(this, Quaternion.multiply(inputQ, this.inverse()));\n            return new Vector(qOut.i, qOut.j, qOut.k);\n        }\n    }\n\n    // Stolen from https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n    public toMatrix():Matrix4 {\n        const mtx = new Matrix4();\n        mtx.components[0][0] = 1 - 2 * this.j * this.j - 2 * this.k * this.k;\n        mtx.components[0][1] = 2 * this.i * this.j - 2 * this.k * this.real;\n        mtx.components[0][2] = 2 * this.i * this.k + 2 * this.j * this.real;\n        \n        mtx.components[1][0] = 2 * this.i * this.j + 2 * this.k * this.real;\n        mtx.components[1][1] = 1 - 2 * this.i * this.i - 2 * this.k * this.k;\n        mtx.components[1][2] = 2 * this.j * this.k - 2 * this.i * this.real;\n        \n        mtx.components[2][0] = 2 * this.i * this.k - 2 * this.j * this.real;\n        mtx.components[2][1] = 2 * this.j * this.k + 2 * this.i * this.real;\n        mtx.components[2][2] = 1 - 2 * this.i * this.i - 2 * this.j * this.j;\n\n        return mtx;\n    }\n}","\nexport default class Vector {\n    constructor(public x: number, public y: number, public z: number) {\n    }\n\n    dot(other: Vector) {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    }\n\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    normalize() {\n        return this.multiply(1 / this.lengthSq());\n    }\n    negate() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    multiply(scale: number): Vector;\n    multiply(xscale: number, yscale: number, zscale: number): Vector;\n    multiply(scale: Vector): Vector;\n    multiply(sx: number | Vector, sy ?: number, sz ?: number): Vector {\n        if(!isVector(sx))\n        {\n            sy = sy ?? <number>sx;\n            sz = sz ?? <number>sx;\n        }\n        var [x, y, z] = Vector.getxyz(sx, sy, sz);\n        return new Vector(this.x * x, this.y * y, this.z * z);\n    }\n\n    add(dx: number, dy: number, dz: number): Vector;\n    add(v: Vector): Vector;\n    add(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x + x, this.y + y, this.z + z);\n    }\n\n    subtract(dx: number, dy: number, dz: number): Vector;\n    subtract(v: Vector): Vector;\n    subtract(dx: number | Vector, dy ?: number, dz ?: number): Vector {\n        var [x, y, z] = Vector.getxyz(dx, dy, dz);\n        return new Vector(this.x - x, this.y - y, this.z - z);\n    }\n\n    private static getxyz(x: number | Vector, y?: number, z?: number): [number, number, number] {\n        if(isVector(x)) {\n            return [x.x, x.y, x.z];\n        }\n        else {\n            return [x, y, z];\n        }\n    }\n}\n\nfunction isVector(x: number | Vector) : x is Vector {\n    return (<any>x).x !== undefined;\n}","import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","export type GlslConstant = number | GlslTimeVariable;\n\nexport function GlslSin(rate: number, min?: number, max?: number): GlslTimeVariable {\n    const useMin = min === undefined ? -1 : min;\n    const useMax = max === undefined ? 1 : max;\n    return new GlslTimeVariable('sin', useMin, useMax, rate);\n}\n\nexport function GlslCos(rate: number, min?: number, max?: number): GlslTimeVariable {\n    const useMin = min === undefined ? -1 : min;\n    const useMax = max === undefined ? 1 : max;\n    return new GlslTimeVariable('cos', useMin, useMax, rate);\n}\n\nexport class GlslTimeVariable {\n    constructor (public timeFunc: 'sin' | 'cos', public min: number, public max: number, public rate: number) {\n    }\n}\n\nfunction constIsTimeVar(c: GlslConstant): c is GlslTimeVariable {\n    return (c as GlslTimeVariable).timeFunc !== undefined;\n}\n\nexport function glslFloatConst(n: GlslConstant): string {\n    if (constIsTimeVar(n)) {\n        const range = (n.max - n.min);\n        const halfRange = range / 2;\n        const midp = (n.max + n.min) / 2;\n        const rate = `(t/60.0 * ${glslFloatConst(n.rate)})`;\n        switch (n.timeFunc) {\n            case 'sin': return `sin(${rate} * PI * 2.0) * ${glslFloatConst(halfRange)} + ${glslFloatConst(midp)}`;\n            case 'cos': return `cos(${rate} * PI * 2.0) * ${glslFloatConst(halfRange)} + ${glslFloatConst(midp)}`;\n        }\n    } else {\n        const asstr = n.toString();\n        if (asstr.indexOf('.') === -1) return asstr + '.0';\n        return asstr;\n    }\n}","import Vector from \"../../common/3d/Vector\";\nimport { glslFloatConst, GlslConstant } from \"./GlslValue\";\n\nexport default interface IDEPrimitive {\n    emitGlsl(): string;\n}\n\nexport function glslVec3Const(x: GlslConstant, y: GlslConstant, z: GlslConstant) {\n    return 'vec3(' + glslFloatConst(x) + ',' + glslFloatConst(y) + ',' + glslFloatConst(z)+')';\n}\n\nexport function glslUnitVec3Const(x: GlslConstant, y: GlslConstant, z: GlslConstant) {\n    return 'normalize(vec3(' + glslFloatConst(x) + ',' + glslFloatConst(y) + ',' + glslFloatConst(z) + '))';\n}\n\nexport class SphereDE implements IDEPrimitive {\n    constructor(public radius: number) { }\n    emitGlsl() {\n        return `return length(p) - ${glslFloatConst(this.radius)};\\r\\n`;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BoxDE implements IDEPrimitive {\n    constructor(public xlen: number, public ylen: number, public zlen: number) { }\n    emitGlsl() {\n        return `vec3 q = abs(p) - ${glslVec3Const(this.xlen, this.ylen, this.zlen)};\\r\\nreturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);`;\n    }\n}\n\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BoundingBoxDE implements IDEPrimitive {\n    constructor(public xlen: number, public ylen: number, public zlen: number, public segLen: number) { }\n    emitGlsl() {\n        return `p = abs(p)-${glslVec3Const(this.xlen, this.ylen, this.zlen)};\nvec3 q = abs(p+${glslFloatConst(this.segLen)})-${glslFloatConst(this.segLen)};\nreturn min(min(\n    length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n    length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n    length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\\r\\n`;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class MengerSpongeDE implements IDEPrimitive {\n    constructor(private scale: number, private c: Vector, private maxIterations: number, private bailoutRange: number) {\n\n    }\n\n    emitGlsl() {\n        return `\nconst float bailout = ${glslFloatConst(this.bailoutRange)};\nconst vec3 C = ${glslVec3Const(this.c.x, this.c.y, this.c.z)};\nconst float scale = ${glslFloatConst(this.scale)};\nconst int MI = ${this.maxIterations};\nfloat r = dot(p, p);\nint numi = 0;\nfor(int i = 0; i < MI; i++){\n    numi = i;\n    if(r >= bailout) break;\n\n    // Rotate 1\n    \n    p = abs(p);\n    if(p.x - p.y < 0.0){ float x1=p.y; p.y=p.x; p.x=x1;}\n    if(p.x - p.z < 0.0){ float x1=p.z; p.z=p.x; p.x=x1;}\n    if(p.y - p.z < 0.0){ float y1=p.z; p.z=p.y; p.y=y1;}\n\n    // Rotate 2\n\n    p.xy = scale * p.xy - C.xy * (scale-1.0);\n    p.z=scale*p.z;\n    if(p.z>0.5*C.z*(scale-1.0)) p.z-=C.z*(scale-1.0);\n    \n    r = dot(p, p);\n}\nreturn (length(p)-2.0)*pow(scale,-float(numi));\\r\\n`;\n    }\n}\n\n\n// tslint:disable-next-line: max-classes-per-file\nexport class RotaryMengerSpongeDE implements IDEPrimitive {\n    constructor(private scale: number, private c: Vector, private maxIterations: number, private bailoutRange: number, private rRate: number) {\n\n    }\n\n    emitGlsl() {\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(this.rRate);\n        return `\nmat3 mx = mat3(\n    cos(${radians}), 0.0, -sin(${radians}),\n    0.0, 1.0, 0.0,\n    sin(${radians}), 0.0, cos(${radians})\n);\n\nconst float bailout = ${glslFloatConst(this.bailoutRange)};\nconst vec3 C = ${glslVec3Const(this.c.x, this.c.y, this.c.z)};\nconst float scale = ${glslFloatConst(this.scale)};\nconst int MI = ${this.maxIterations};\nfloat r = dot(p, p);\nint numi = 0;\nfor(int i = 0; i < MI; i++){\n    numi = i;\n    if(r >= bailout) break;\n\n    // Rotate 1\n    p = mx * p;\n    \n    p = abs(p);\n    if(p.x - p.y < 0.0){ float x1=p.y; p.y=p.x; p.x=x1;}\n    if(p.x - p.z < 0.0){ float x1=p.z; p.z=p.x; p.x=x1;}\n    if(p.y - p.z < 0.0){ float y1=p.z; p.z=p.y; p.y=y1;}\n\n    // Rotate 2\n\n    p.xy = scale * p.xy - C.xy * (scale-1.0);\n    p.z=scale*p.z;\n    if(p.z>0.5*C.z*(scale-1.0)) p.z-=C.z*(scale-1.0);\n    \n    r = dot(p, p);\n}\nreturn (length(p)-2.0)*pow(scale,-float(numi));\\r\\n`;\n    }\n}","import { ResizeCanvas } from '../common/CanvasHelpers';\nimport { mat4 } from 'gl-matrix';\nimport DistanceEstimateBuilder from './debuilder/DistanceEstimateBuilder';\nimport { BoundingBoxDE, SphereDE, BoxDE, MengerSpongeDE, RotaryMengerSpongeDE } from './debuilder/DistanceEstimatePrimitives';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Quaternion from '../common/3d/Quaternion';\nimport Vector from '../common/3d/Vector';\nimport { GlslSin, GlslCos } from './debuilder/GlslValue';\n\n// TODO: Use asset loader to load these?\n\nconst distanceFunc: DistanceEstimateBuilder =\n    new DistanceEstimateBuilder(new MengerSpongeDE(3, new Vector(1, 1, 1), 100, 100))\n        .symAxis(GlslSin(0.03), GlslCos(0.03), GlslCos(1, -.01, .01))\n        .symAxis(-.8, .2, 0)\n        .symAxis(.4, 0.6, 0)\n        .symAxis(-.4, .6, 0)\n        .rXt(0.03)\n        .rYt(0.003)\n        .rZt(-.0009)\n        .translate(GlslSin(0.1, -.4, .4), GlslCos(0.2, -.2, .2), 0)\n        ;\n\nconst dglsl = distanceFunc.emitGlsl();\n\nconsole.log('DISTF: ');\nconsole.log(dglsl);\n\nconst vertexShaderSource = `\nattribute vec4 aVertexPosition;\nvoid main() {\n  gl_Position = aVertexPosition;\n}\n`;\n\nconst fragmentShaderSource = `\nprecision mediump float;\n#define PI 3.1415926538\n\nuniform vec2 WindowSize;\nuniform vec3 cam_pos;\nuniform vec4 cam_orient;\nuniform float t;\n\nconst int MaximumRaySteps = 50;\nconst float MinimumDistance = 0.001;\nconst float MaxFogDist = 20.0;\n\nconst float nscale = 0.001;\nconst vec3 xdir = vec3(1.0, 0.0, 0.0);\nconst vec3 ydir = vec3(0.0, 1.0, 0.0);\nconst vec3 zdir = vec3(0.0, 0.0, 1.0);\nconst vec3 lightdir = normalize(vec3(1.0, 0.0, -1.0));\nconst vec3 lightsrc = lightdir * 10.0;\nconst vec3 amblight = vec3(0.1, 0.1, 0.1);\nconst vec3 normlight = vec3(1, .95, .9);\nconst float ambocc = 0.2;\nconst float shadowLightness = .3;\n\nconst float scale = 3.0;\nconst vec3 C = vec3(1, 1, 1);\nconst int MI = 100;\nconst float bailout = 10.0;\n\nvec4 qInverse(vec4 q) {\n    float denom = dot(q, q);\n    return vec4(-q.x / denom, -q.y / denom, -q.z / denom, q.w / denom);\n}\n\nvec4 qMult(vec4 a, vec4 b) {\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n    res.x = a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y;\n    res.y = a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x;\n    res.z = a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w;\n    res.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return res;\n}\n\nvec4 qTransform(vec4 f, vec4 pt) {\n    return qMult(f, qMult(pt, qInverse(f)));\n}\n\n${dglsl}\n\nvec3 trace(vec3 from, vec3 direction) {\n\tfloat totalDistance = 0.0;\n    int nsteps;\n    bool hit = false;\n\tfor (int steps = 0; steps < MaximumRaySteps; steps++) {\n        nsteps = steps;\n\t\tvec3 p = from + totalDistance * direction;\n\t\tfloat distance = dist(p);\n\t\ttotalDistance += distance;\n        if (distance < MinimumDistance) \n        {\n            hit = true;\n            break;\n        }\n    }\n\treturn vec3(totalDistance, 1.0-float(nsteps)/float(MaximumRaySteps), hit ? 1.0 : 0.0);\n}\n\nfloat derel(float f) {\n    return f + 1.0 / 2.0;\n}\n\nvoid main() {\n\n    float losx = (gl_FragCoord.x / WindowSize.x) * 2.0 - 1.0;\n    float losy = (gl_FragCoord.y / WindowSize.y) * 2.0 - 1.0;\n    vec3 losFwd = normalize(vec3(losx, losy, 1));\n    vec3 dir = qTransform(cam_orient, vec4(losFwd.x, losFwd.y, losFwd.z, 0)).xyz;\n\n    vec3 colis = trace(cam_pos, dir);\n\n    if(colis.z == 0.0)\n    {\n        gl_FragColor = vec4(0, 0, 0, 1.0);\n    }\n    else\n    {\n        vec3 pos = cam_pos + colis.x * dir;\n        vec3 dlight = 1.0 - amblight;\n        vec3 n = normalize(vec3(\n            dist(pos+xdir*nscale)-dist(pos-xdir*nscale),\n            dist(pos+ydir*nscale)-dist(pos-ydir*nscale),\n            dist(pos+zdir*nscale)-dist(pos-zdir*nscale)\n        ));\n\n        vec3 lightCastSrc = pos + n * MinimumDistance * 2.0;\n        vec3 lcolis = trace(lightCastSrc, normalize(lightsrc - lightCastSrc));\n\n        float shadow = 1.0 - lcolis.z;\n        shadow = min(shadow + shadowLightness, 1.0);\n\n        float normalLightAmt = clamp(dot(n, lightdir), 0.0, 1.0);\n                        \n        float fog = 1.0 - min(1.0, colis.x / MaxFogDist);\n        float cplx = colis.y;\n\n        vec3 color = (amblight + (1.0 - amblight) * normlight * normalLightAmt * (1.0 - ambocc + ambocc * colis.y)) * fog * shadow;\n        gl_FragColor = vec4(color.x, color.y, color.z, 1.0);\n    }\n}\n`;\n\nconst fastCamMove = 0.05;\nconst camMove = 0.005;\nconst cam = {x: 0, y: 0, z: -2};\nlet keys: KeyboardManager;\nlet repaintCount = 0;\nlet camRotation: Quaternion = new Quaternion(1, 0, 0, 0);\n\nconst moveKeys: [string, Vector][] = [\n    ['w', new Vector(0, 0, 1)],\n    ['a', new Vector(-1, 0, 0)],\n    ['s', new Vector(0, 0, -1)],\n    ['d', new Vector(1, 0, 0)],\n    ['q', new Vector(0, 1, 0)],\n    ['z', new Vector(0, -1, 0)],\n];\n\nconst camTurnRate = -Math.PI / 120;\nconst lookKeys: [string, Vector][] = [\n    ['ArrowUp', new Vector(1, 0, 0)],\n    ['ArrowDown', new Vector(-1, 0, 0)],\n    ['ArrowLeft', new Vector(0, 1, 0)],\n    ['ArrowRight', new Vector(0, -1, 0)],\n];\n\nexport default function main() {\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    ResizeCanvas(canvas, 800, 600);\n    const gl = canvas.getContext('webgl');\n\n    // Only continue if WebGL is available and working\n    if (gl === null) {\n        alert('Unable to initialize WebGL. Your browser may not support it.');\n        return;\n    }\n\n    // Clear black\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    const shaderProgram = initShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\n    // Here's where we call the routine that builds all the\n    // objects we'll be drawing.\n    const buffers = initBuffers(gl);\n\n    // Draw the scene\n    drawScene(gl, shaderProgram, buffers, canvas);\n\n    keys = new KeyboardManager(document.body, false);\n    renderLoop(gl, shaderProgram, buffers, canvas);\n}\n\nfunction renderLoop(gl: WebGLRenderingContext, program: WebGLProgram, buffers: { position: WebGLBuffer }, canvas: HTMLCanvasElement) {\n    keys.update();\n    let doRepaint = false;\n\n    for (const [key, dir] of moveKeys) {\n        if (keys.isKeyDown(key)) {\n            const speed = keys.isKeyDown('Shift') ? fastCamMove : camMove;\n            const rel = camRotation.applyTransform(dir);\n            cam.x += rel.x * speed;\n            cam.y += rel.y * speed;\n            cam.z += rel.z * speed;\n            doRepaint = true;\n        }\n    }\n\n    for (const [key, axis] of lookKeys) {\n        if (keys.isKeyDown(key)) {\n            camRotation = Quaternion.multiply(camRotation, Quaternion.axisRotation(axis, camTurnRate));\n        }\n    }\n\n    drawScene(gl, program, buffers, canvas);\n    requestAnimationFrame(() => renderLoop(gl, program, buffers, canvas));\n}\n\n\nfunction drawScene(gl: WebGLRenderingContext, program: WebGLProgram, buffers: { position: WebGLBuffer }, canvas: HTMLCanvasElement) {\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const numComponents = 2;  // pull out 2 values per iteration\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n      const normalize = false;  // don't normalize\n      const stride = 0;         // how many bytes to get from one set of values to the next\n                                // 0 = use type and numComponents above\n      const offset = 0;         // how many bytes inside the buffer to start from\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n      gl.vertexAttribPointer(\n            gl.getAttribLocation(program, 'aVertexPosition'),\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n      gl.enableVertexAttribArray(\n        gl.getAttribLocation(program, 'aVertexPosition'));\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(program);\n    gl.uniform2fv(gl.getUniformLocation(program, 'WindowSize'), [canvas.width, canvas.height]);\n    gl.uniform3fv(gl.getUniformLocation(program, 'cam_pos'), [cam.x, cam.y, cam.z]);\n    gl.uniform4fv(gl.getUniformLocation(program, 'cam_orient'), [camRotation.i, camRotation.j, camRotation.k, camRotation.real]);\n    gl.uniform1f(gl.getUniformLocation(program, 't'), repaintCount);\n    repaintCount = (repaintCount + 1);\n    {\n      const offset = 0;\n      const vertexCount = 4;\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\n    }\n  }\n\nfunction initBuffers(gl: WebGLRenderingContext) {\n    // Create a buffer for the square's positions.\n    const positionBuffer = gl.createBuffer();\n\n    // Select the positionBuffer as the one to apply buffer\n    // operations to from here out.\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    // Now create an array of positions for the square.\n    const positions = [\n        -1.0,  1.0,\n        1.0,  1.0,\n       -1.0, -1.0,\n        1.0, -1.0,\n    ];\n\n    // Now pass the list of positions into WebGL to build the\n    // shape. We do this by creating a Float32Array from the\n    // JavaScript array, then use it to fill the current buffer.\n    gl.bufferData(gl.ARRAY_BUFFER,\n                  new Float32Array(positions),\n                  gl.STATIC_DRAW);\n\n    return {\n      position: positionBuffer,\n    };\n  }\n\nfunction initShaderProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n      return undefined;\n    }\n\n    return shaderProgram;\n  }\n\n  //\n  // creates a shader of the given type, uploads the source and\n  // compiles it.\n  //\nfunction loadShader(gl: WebGLRenderingContext, type: number, source: string) {\n    const shader = gl.createShader(type);\n\n    // Send the source to the shader object\n\n    gl.shaderSource(shader, source);\n\n    // Compile the shader program\n\n    gl.compileShader(shader);\n\n    // See if it compiled successfully\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return undefined;\n    }\n\n    return shader;\n}\n","import IDEPrimitive, { glslVec3Const, glslUnitVec3Const } from './DistanceEstimatePrimitives';\nimport { GlslConstant, glslFloatConst } from './GlslValue';\n\nexport default class DistanceEstimateBuilder {\n    private glsl: string;\n    private nextTempVar = 0;\n    constructor(private primitive: IDEPrimitive) {\n        this.glsl = 'float dist(vec3 p) {\\r\\n';\n    }\n\n    protected getTempVarName() {\n        return 't' + (this.nextTempVar++);\n    }\n\n\n    public elongate(x: number, y: number, z: number): DistanceEstimateBuilder {\n        this.glsl += `p = p - clamp(p, -${glslVec3Const(x, y, z)}, ${glslVec3Const(x, y, z)} );\\r\\n`;\n        return this;\n    }\n\n    public repeat(xd: number, yd: number, zd: number): DistanceEstimateBuilder {\n        const glslc = glslVec3Const(xd, yd, zd);\n        this.glsl += `p = mod(p+0.5*${glslc},${glslc})-0.5*${glslc};\\r\\n`;\n        return this;\n    }\n\n    public symX(): DistanceEstimateBuilder {\n        this.glsl += `p.x = abs(p.x);\\r\\n`;\n        return this;\n    }\n\n    public symY(): DistanceEstimateBuilder {\n        this.glsl += `p.y = abs(p.y);\\r\\n`;\n        return this;\n    }\n\n    public symZ(): DistanceEstimateBuilder {\n        this.glsl += `p.z = abs(p.z);\\r\\n`;\n        return this;\n    }\n\n    public symAxis(normalX: GlslConstant, normalY: GlslConstant, normalZ: GlslConstant) {\n        const glslc = glslUnitVec3Const(normalX, normalY, normalZ);\n        this.glsl += `p -= 2.0 * min(0.00, dot(p, ${glslc})) * ${glslc};\\r\\n`;\n        return this;\n    }\n\n    public rXt(rate: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\n        this.glsl += `mat3 ${mtx} = mat3(\n            1.0, 0.0, 0.0,\n            0.0, cos(${radians}), sin(${radians}),\n            0.0, -sin(${radians}), cos(${radians})\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n    public rYt(rate: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\n        this.glsl += `mat3 ${mtx} = mat3(\n            cos(${radians}), 0.0, -sin(${radians}),\n            0.0, 1.0, 0.0,\n            sin(${radians}), 0.0, cos(${radians})\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n    public rZt(rate: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = 'PI * t/30.0 * ' + glslFloatConst(rate);\n        this.glsl += `mat3 ${mtx} = mat3(\n            cos(${radians}), sin(${radians}), 0.0,\n            -sin(${radians}), cos(${radians}), 0.0,\n            0.0, 0.0, 1.0\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n\n    public rX(rad: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = glslFloatConst(rad);\n        this.glsl += `mat3 ${mtx} = mat3(\n            1.0, 0.0, 0.0,\n            0.0, cos(${radians}), sin(${radians}),\n            0.0, -sin(${radians}), cos(${radians})\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n    public rY(rad: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = glslFloatConst(rad);\n        this.glsl += `mat3 ${mtx} = mat3(\n            cos(${radians}), 0.0, -sin(${radians}),\n            0.0, 1.0, 0.0,\n            sin(${radians}), 0.0, cos(${radians})\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n    public rZ(rad: number): DistanceEstimateBuilder {\n        const mtx = this.getTempVarName();\n        const radians = glslFloatConst(rad);\n        this.glsl += `mat3 ${mtx} = mat3(\n            cos(${radians}), sin(${radians}), 0.0,\n            -sin(${radians}), cos(${radians}), 0.0,\n            0.0, 0.0, 1.0\n        );\n        p = ${mtx} * p;\\r\\n`;\n        return this;\n    }\n\n    public translate(x: GlslConstant, y: GlslConstant, z: GlslConstant): DistanceEstimateBuilder {\n        this.glsl += `p = p-vec3(${glslFloatConst(x)},${glslFloatConst(y)},${glslFloatConst(z)});\\r\\n`;\n        return this;\n    }\n\n    public customGlsl(glsl: string) {\n        this.glsl += glsl;\n        return this;\n    }\n\n    public emitGlsl(): string {\n        this.glsl += this.primitive.emitGlsl();\n        this.glsl += '}';\n        return this.glsl;\n    }\n}","import * as React from 'react';\nimport main from '../../../projects/raymarch';\n\nexport default function RaymarchComponent() {\n    React.useEffect(() => main());\n    return <div className='conway conway_body full_body'>\n        <canvas id='canvas'></canvas>\n    </div>;\n}"],"names":["Matrix4","constructor","identity","this","components","transform","p","x","multRow","y","z","w","mult","other","output","row","col","i","colMajor","Array","rowMajor","static","pt","Point3","lengthSq","dot","length","Math","sqrt","clone","normalize","len","div","pxs","iy","iz","splitArgs","add","sub","allowSingle","undefined","Quaternion","real","j","k","inverse","denom","Dot","a","b","axis","radians","cos","sin","applyTransform","point","multiply","inputQ","qOut","toMatrix","mtx","Vector","negate","sx","sy","sz","isVector","getxyz","dx","dy","dz","subtract","KeyState","keys","changes","isKeyDown","key","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","addEventListener","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","GlslSin","rate","min","max","GlslTimeVariable","GlslCos","timeFunc","n","asstr","toString","halfRange","midp","glslVec3Const","dglsl","primitive","nextTempVar","glsl","getTempVarName","elongate","repeat","xd","yd","zd","glslc","symX","symY","symZ","symAxis","normalX","normalY","normalZ","rXt","rYt","rZt","rX","rad","rY","rZ","translate","customGlsl","emitGlsl","scale","c","maxIterations","bailoutRange","fragmentShaderSource","cam","repaintCount","camRotation","moveKeys","camTurnRate","PI","lookKeys","main","canvas","document","getElementById","gl","getContext","alert","clearColor","clear","COLOR_BUFFER_BIT","shaderProgram","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","buffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","position","initBuffers","drawScene","body","renderLoop","program","doRepaint","dir","speed","rel","requestAnimationFrame","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","numComponents","type","FLOAT","stride","offset","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","uniform2fv","getUniformLocation","width","height","uniform3fv","uniform4fv","uniform1f","vertexCount","drawArrays","TRIANGLE_STRIP","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","RaymarchComponent","className","id"],"sourceRoot":""}