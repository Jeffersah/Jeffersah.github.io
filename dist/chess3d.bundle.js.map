{"version":3,"sources":["webpack:///./src/projects/common/Complex.ts","webpack:///./src/projects/common/AspectRatioScalingHelper.ts","webpack:///./src/projects/chess3d/renderHelpers.ts","webpack:///./src/projects/chess3d/engine/board.ts","webpack:///./src/projects/chess3d/index.ts","webpack:///./src/projects/common/Range.ts","webpack:///./src/projects/common/Range2d.ts","webpack:///./src/projects/common/ColorRange.ts"],"names":["isComplex","a","undefined","real","Complex","imaginary","this","Math","sqrt","absSq","other","tmpReal","power","rs","theta","atan2","pow","cos","sin","b","i","conj","conjugate","scale","scalarMultiplyWith","n","expi","multiplyWith","exp","canvas","context","baseWidth","baseHeight","scaleByWindowSize","onResize","Rescale","window","addEventListener","parentElement","currentWidth","currentHeight","innerWidth","innerHeight","clientWidth","clientHeight","maxXScale","maxYScale","scaleFactor","max","min","floor","setTransform","sqCoords","Board","size","pieces","Array","x","y","z","Error","getIndex","p","Run","document","getElementById","ctx","getContext","board","renderLoop","scaleHelper","fillStyle","fillRect","sidebarSize","save","paintFlatBoards","boardRotation","l","restore","translate","beginPath","cx","cy","squish","height","angle","transform","organized","pts","xMin","yMin","xMax","yMax","length","coordExtents","map","coord","mult","moveTo","lineTo","pathCubeOutside","invsqrt2","fill","PI","repaintBoard","requestAnimationFrame","sqrt2","SQRT2","rotation","translationPerLayer","coordFunc","layer","rotate","cellSize","Range","percentage","point","amt","range","anchor","ScaleTo","Length","targetWidth","deltaRange","value","targetRange","GetValue","GetPercentage","ConvertTo","Range2d","xRange","yRange","xPercent","yPercent","xValue","yValue","xAmt","yAmt","Shift","xShift","yShift","ShiftByPercentage","percent","xAnchor","yAnchor","Scale","target","intermediate","rMin","rMax","gMin","gMax","bMin","bMax","rRange","gRange","bRange"],"mappings":"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","file":"chess3d.bundle.js","sourcesContent":["export function isComplex(a: number|Complex): a is Complex {\r\n    return (a as Complex).real !== undefined;\r\n}\r\n\r\nexport class Complex {\r\n    constructor(public real: number, public imaginary: number) { }\r\n\r\n    public absSq(): number {\r\n        return this.real * this.real + this.imaginary * this.imaginary;\r\n    }\r\n    public abs(): number {\r\n        return Math.sqrt(this.absSq());\r\n    }\r\n\r\n    public addWith(other: Complex): Complex {\r\n        this.real += other.real;\r\n        this.imaginary += other.imaginary;\r\n        return this;\r\n    }\r\n\r\n    public multiplyWith(other: Complex): Complex {\r\n        const tmpReal = this.real * other.real - this.imaginary * other.imaginary;\r\n        this.imaginary = this.real * other.imaginary + other.real * this.imaginary;\r\n        this.real = tmpReal;\r\n        return this;\r\n    }\r\n\r\n    public scalarMultiplyWith(other: Complex): Complex;\r\n    public scalarMultiplyWith(r: number, i: number): Complex;\r\n    public scalarMultiplyWith(other: Complex | number, imaginary?: number): Complex {\r\n        if (isComplex(other)) {\r\n            this.real *= other.real;\r\n            this.imaginary *= other.imaginary;\r\n        }\r\n        else {\r\n            this.real *= other;\r\n            this.imaginary *= imaginary;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public negate(): Complex {\r\n        this.real = -this.real;\r\n        this.imaginary = -this.imaginary;\r\n        return this;\r\n    }\r\n\r\n    public pow(power: number): Complex {\r\n        const rs = this.absSq();\r\n        const theta = Math.atan2(this.imaginary, this.real);\r\n        this.real = Math.pow(rs, power / 2) * Math.cos(theta);\r\n        this.imaginary = Math.pow(rs, power / 2) * Math.sin(theta);\r\n        return this;\r\n    }\r\n\r\n    public static add(a: Complex, b: Complex) {\r\n        return new Complex(a.real + b.real, a.imaginary + b.imaginary);\r\n    }\r\n\r\n    public static mult(a: Complex, b: Complex) {\r\n        return new Complex(a.real * b.real - a.imaginary * b.imaginary, a.real * b.imaginary + a.imaginary * b.real);\r\n    }\r\n\r\n    public static scalarMultiply(a: Complex, b: Complex): Complex;\r\n    public static scalarMultiply(a: Complex, r: number, i: number): Complex;\r\n    public static scalarMultiply(a: Complex, b: Complex | number, i ?: number): Complex {\r\n        if (isComplex(b)) return new Complex(a.real * b.real, a.imaginary * b.imaginary);\r\n        return new Complex(a.real * b, a.imaginary * i);\r\n    }\r\n\r\n    public static conjugate(a: Complex) {\r\n        return new Complex(a.real, -a.imaginary);\r\n    }\r\n\r\n    public static negate(a: Complex) {\r\n        return new Complex(-a.real, -a.imaginary);\r\n    }\r\n\r\n    public static inverse(a: Complex) {\r\n        const conj = Complex.conjugate(a);\r\n        const scale = 1 / a.absSq();\r\n        return conj.scalarMultiplyWith(scale, scale);\r\n    }\r\n\r\n    public static expi(n: number): Complex {\r\n        return new Complex(Math.cos(n), Math.sin(n));\r\n    }\r\n\r\n    public static exp(n: Complex): Complex {\r\n        return this.expi(n.imaginary).multiplyWith(new Complex(Math.exp(n.real), 0));\r\n    }\r\n}","import { ResizeCanvas } from './CanvasHelpers';\r\n\r\nexport default class AspectRatioScalingHelper {\r\n\r\n    public scaleFactor: number;\r\n    constructor(public canvas: HTMLCanvasElement, public context: CanvasRenderingContext2D, public baseWidth: number, public baseHeight: number, private scaleByWindowSize: boolean, public onResize: (() => void)|undefined) {\r\n        this.Rescale();\r\n        if (this.scaleByWindowSize) {\r\n            window.addEventListener('resize', () => this.Rescale());\r\n        }\r\n        else {\r\n            canvas.parentElement.addEventListener('resize', () => this.Rescale());\r\n        }\r\n    }\r\n\r\n    public Rescale() {\r\n        let currentWidth: number;\r\n        let currentHeight: number;\r\n        if (this.scaleByWindowSize) {\r\n            currentWidth = window.innerWidth;\r\n            currentHeight = window.innerHeight;\r\n        }\r\n        else {\r\n            currentWidth = this.canvas.parentElement.clientWidth;\r\n            currentHeight = this.canvas.parentElement.clientHeight;\r\n        }\r\n        const maxXScale = currentWidth / this.baseWidth;\r\n        const maxYScale = currentHeight / this.baseHeight;\r\n\r\n        this.scaleFactor = Math.max(Math.min(maxXScale, maxYScale), 1);\r\n        ResizeCanvas(this.canvas, Math.floor(this.scaleFactor * this.baseWidth), Math.floor(this.baseHeight * this.scaleFactor));\r\n\r\n        this.context.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, 0, 0);\r\n\r\n        if (this.onResize !== undefined) {\r\n            this.onResize();\r\n        }\r\n    }\r\n}","import { Complex } from '../common';\r\nimport { isComplex } from '../common/Complex';\r\n\r\nexport const sqCoords = [\r\n    new Complex(-1, -1),\r\n    new Complex(1, -1),\r\n    new Complex(1, 1),\r\n    new Complex(-1, 1),\r\n];\r\n\r\nexport function pathCubeOutside(ctx: CanvasRenderingContext2D, cx: number, cy: number, scale: number, squish: number, height: number, angle: number | Complex) {\r\n    const transform = isComplex(angle) ? angle : Complex.expi(angle);\r\n    const transformedCoords = sqCoords\r\n        .map(coord => Complex.mult(coord, transform))\r\n        .map(coord => new Complex(cx + scale * coord.real, cy + scale * coord.imaginary * squish)); // to screen coords: Scale, Center, and Squish Y\r\n    const organized = coordExtents(transformedCoords);\r\n    ctx.moveTo(organized.xMin.real, organized.xMin.imaginary - height / 2);\r\n    ctx.lineTo(organized.yMin.real, organized.yMin.imaginary - height / 2);\r\n    ctx.lineTo(organized.xMax.real, organized.xMax.imaginary - height / 2);\r\n\r\n    ctx.lineTo(organized.xMax.real, organized.xMax.imaginary + height / 2);\r\n    ctx.lineTo(organized.yMax.real, organized.yMax.imaginary + height / 2);\r\n    ctx.lineTo(organized.xMin.real, organized.xMin.imaginary + height / 2);\r\n    ctx.lineTo(organized.xMin.real, organized.xMin.imaginary - height / 2);\r\n}\r\n\r\n\r\nexport function coordExtents(pts: Complex[]): { xMin: Complex, yMin: Complex, xMax: Complex, yMax: Complex } {\r\n    // tslint:disable-next-line: one-variable-per-declaration\r\n    let xMin = pts[0],\r\n        yMin = pts[0],\r\n        xMax = pts[0],\r\n        yMax = pts[0];\r\n\r\n    for (let i = 1; i < pts.length; i++) {\r\n        if (pts[i].real < xMin.real) xMin = pts[i];\r\n        if (pts[i].real > xMax.real) xMax = pts[i];\r\n        if (pts[i].imaginary < yMin.imaginary) yMin = pts[i];\r\n        if (pts[i].imaginary > yMax.imaginary) yMax = pts[i];\r\n    }\r\n\r\n    return { xMin, xMax, yMin, yMax };\r\n}","import Piece from './piece';\r\n\r\nexport class Board {\r\n    private pieces: (Piece|undefined) [];\r\n    constructor(public size: number) {\r\n        this.pieces = new Array(size * size * size);\r\n    }\r\n\r\n    piece(x: number, y: number, z: number) {\r\n        if (x < 0 || y < 0 || z < 0 || x >= this.size || y >= this.size || z >= this.size) {\r\n            throw new Error('Out of range');\r\n        }\r\n        return this.pieces[this.getIndex(x, y, z)];\r\n    }\r\n\r\n    setPiece(x: number, y: number, z: number, p?: Piece) {\r\n        if (x < 0 || y < 0 || z < 0 || x >= this.size || y >= this.size || z >= this.size) {\r\n            throw new Error('Out of range');\r\n        }\r\n        this.pieces[this.getIndex(x, y, z)] = p;\r\n    }\r\n\r\n    getIndex(x: number, y: number, z: number): number {\r\n        return x + y * this.size + z * this.size * this.size;\r\n    }\r\n}","import AspectRatioScalingHelper from '../common/AspectRatioScalingHelper';\r\nimport { Complex } from '../common';\r\nimport { pathCubeOutside } from './renderHelpers';\r\nimport { Board } from './engine/board';\r\n\r\nconst cellColor1 = '#888888';\r\nconst cellColor2 = '#444444';\r\n\r\nexport default function Run() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx  = canvas.getContext('2d');\r\n    const helper = new AspectRatioScalingHelper(canvas, ctx, 3, 2, true, () => { });\r\n    const board = new Board(5);\r\n\r\n    function renderLoop() {\r\n        repaintBoard(ctx, board, helper);\r\n        requestAnimationFrame(() => renderLoop());\r\n    }\r\n    renderLoop();\r\n}\r\n\r\nlet boardRotation = 0;\r\nconst sqrt2 = Math.SQRT2;\r\nconst invsqrt2 = 1 / sqrt2;\r\n\r\nfunction repaintBoard(ctx: CanvasRenderingContext2D, board: Board, scaleHelper: AspectRatioScalingHelper) {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, 3, 2);\r\n    const sidebarSize = 2 / (board.size);\r\n\r\n    ctx.fillStyle = 'Gray';\r\n    ctx.save();\r\n    ctx.scale(sidebarSize, sidebarSize);\r\n    // Left side bar\r\n    paintFlatBoards(ctx, board, boardRotation, 0, (x, y, l) => ({x, y, z: l}));\r\n    ctx.restore();\r\n\r\n    ctx.save();\r\n    ctx.translate(3 - sidebarSize, 0);\r\n    ctx.scale(sidebarSize, sidebarSize);\r\n    // Paint right-side boards\r\n    paintFlatBoards(ctx, board, boardRotation, 0, (x, y, l) => ({x, y, z: l}));\r\n    ctx.restore();\r\n\r\n    ctx.beginPath();\r\n    pathCubeOutside(ctx, 1.5, 1, invsqrt2, 0.4, 1, boardRotation);\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n    ctx.fill();\r\n\r\n    boardRotation += Math.PI / 240;\r\n}\r\n\r\n// During this call, ctx is effectively 1xN, where N is the number of boards.\r\nfunction paintFlatBoards(ctx: CanvasRenderingContext2D, board: Board, rotation: number, translationPerLayer: number, coordFunc: (x: number, y: number, l: number) => ({x: number, y: number, z: number })) {\r\n    for (let layer = 0; layer < board.size; layer++) {\r\n        ctx.save();\r\n        ctx.translate(0, layer);\r\n\r\n        ctx.scale(invsqrt2, invsqrt2);\r\n\r\n        ctx.translate((sqrt2 - 1) / 2, (sqrt2 - 1) / 2);\r\n\r\n        ctx.translate(0.5, 0.5);\r\n        ctx.rotate(rotation);\r\n        ctx.translate(-0.5, -0.5);\r\n\r\n        const cellSize = 1 / board.size;\r\n        for (let x = 0; x < board.size; x++) {\r\n            for (let y = 0; y < board.size; y++) {\r\n                ctx.fillStyle = (x + y + layer) % 2 === 0 ? cellColor1 : cellColor2;\r\n                ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n}","export class Range {\r\n    constructor(public min: number, public max: number) { }\r\n\r\n    Length() {\r\n        return this.max - this.min;\r\n    }\r\n\r\n    GetValue(percentage: number) {\r\n        return this.min + (this.max - this.min) * percentage;\r\n    }\r\n\r\n    GetPercentage(point: number) {\r\n        return (point - this.min) / (this.max - this.min);\r\n    }\r\n\r\n    Shift(amt: number) {\r\n        this.min += amt;\r\n        this.max += amt;\r\n    }\r\n\r\n    ShiftByPercentage(percentage: number) {\r\n        const range = this.max - this.min;\r\n        this.min += range * percentage;\r\n        this.max += range * percentage;\r\n    }\r\n\r\n    Scale(percentage: number, anchor = 0.5) {\r\n        this.ScaleTo(this.Length() * percentage, anchor);\r\n    }\r\n\r\n    ScaleTo(targetWidth: number, anchor: number) {\r\n        const range = this.max - this.min;\r\n        const deltaRange = targetWidth - range;\r\n        this.min -= deltaRange * anchor;\r\n        this.max += deltaRange * (1 - anchor);\r\n    }\r\n\r\n    ConvertTo(value: number, targetRange: Range) {\r\n        return targetRange.GetValue(this.GetPercentage(value));\r\n    }\r\n    ConvertFrom(value: number, targetRange: Range) {\r\n        return targetRange.ConvertTo(value, this);\r\n    }\r\n}\r\nexport const unitRange: Range = new Range(0, 1);\r\n(window as any).range = Range;","import { Range } from './Range';\r\n\r\nexport class Range2d {\r\n    constructor(public xRange: Range, public yRange: Range) { }\r\n\r\n    public GetValue(xPercent: number, yPercent: number) {\r\n        return { x: this.xRange.GetValue(xPercent), y: this.yRange.GetValue(yPercent) };\r\n    }\r\n\r\n    public GetPercentage(xValue: number, yValue: number) {\r\n        return { x: this.xRange.GetPercentage(xValue), y: this.yRange.GetPercentage(yValue) };\r\n    }\r\n\r\n    public Shift(xAmt: number, yAmt: number) {\r\n        this.xRange.Shift(xAmt);\r\n        this.yRange.Shift(yAmt);\r\n    }\r\n    public ShiftByPercentage(xShift: number, yShift: number) {\r\n        this.xRange.ShiftByPercentage(xShift);\r\n        this.yRange.ShiftByPercentage(yShift);\r\n    }\r\n\r\n    public AspectScale(percent: number, xAnchor = 0.5, yAnchor = 0.5) {\r\n        return this.Scale(percent, xAnchor, percent, yAnchor);\r\n    }\r\n    public Scale(xPercent: number, xAnchor: number, yPercent: number, yAnchor: number) {\r\n        this.xRange.Scale(xPercent, xAnchor);\r\n        this.yRange.Scale(yPercent, yAnchor);\r\n    }\r\n\r\n    public ConvertTo(value: {x: number, y: number}, target: Range2d) {\r\n        const intermediate = this.GetPercentage(value.x, value.y);\r\n        return target.GetValue(intermediate.x, intermediate.y);\r\n    }\r\n}","import { Range } from './Range';\r\nexport class ColorRange {\r\n    public rRange: Range;\r\n    public gRange: Range;\r\n    public bRange: Range;\r\n    constructor(rMin: number, rMax: number, gMin: number, gMax: number, bMin: number, bMax: number) {\r\n        this.rRange = new Range(rMin, rMax);\r\n        this.gRange = new Range(gMin, gMax);\r\n        this.bRange = new Range(bMin, bMax);\r\n    }\r\n\r\n    public ToColor(percentage: number): string {\r\n        return 'rgb(' + Math.floor(this.rRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.gRange.GetValue(percentage)) + ','\r\n                      + Math.floor(this.bRange.GetValue(percentage)) + ')';\r\n    }\r\n}"],"sourceRoot":""}