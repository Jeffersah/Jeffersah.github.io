{"version":3,"file":"rpgTest.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common-assets/arrows.png","webpack://trading-game/./src/projects/common/input/KeyState.ts","webpack://trading-game/./src/projects/common/input/KeyWatcher.ts","webpack://trading-game/./src/projects/common/input/KeyboardManager.ts","webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/rpgt/Constants.ts","webpack://trading-game/./src/projects/common-assets/rpg1.png","webpack://trading-game/./src/projects/common-assets/wizard16.png","webpack://trading-game/./src/projects/common/Iterate.ts","webpack://trading-game/./src/projects/rpgt/world/World.ts","webpack://trading-game/./src/projects/rpgt/SheetGraphic.ts","webpack://trading-game/./src/projects/rpgt/world/Cell.ts","webpack://trading-game/./src/projects/common/position/Rectangle.ts","webpack://trading-game/./src/projects/common/assets/FileResource.ts","webpack://trading-game/./src/projects/rpgt/index.ts"],"sourcesContent":["export default __webpack_public_path__ + \"bbb298f00b41bbd627d27aa0529a20ba.png\";","import { IKeyChange } from './KeyWatcher';\n\nexport default class KeyState {\n    constructor(public keys: string[], public changes: IKeyChange[]) {\n\n    }\n\n    public isKeyDown(key: string) {\n        return this.keys.indexOf(key) !== -1;\n    }\n\n    public isKeyUp(key: string) {\n        return this.keys.indexOf(key) === -1;\n    }\n}","import KeyState from './KeyState';\n\nexport interface IKeyChange {\n    key: string;\n    change: 'press'|'release';\n}\n\nexport default class KeyWatcher {\n    downKeys: string[];\n    changes: IKeyChange[];\n\n    constructor(public attachedElement: HTMLElement, private logKeyNames?: boolean) {\n        if  (this.logKeyNames === undefined) {\n            this.logKeyNames = false;\n        }\n        attachedElement.addEventListener('keydown', k => this.onKeyDown(k));\n        attachedElement.addEventListener('keyup', k => this.onKeyUp(k));\n\n        this.downKeys = [];\n        this.changes = [];\n    }\n\n    private onKeyDown(key: KeyboardEvent) {\n        if (this.logKeyNames) {\n            // tslint:disable-next-line: no-console\n            console.log(key.key);\n        }\n        const idx = this.downKeys.indexOf(key.key);\n        if (idx === -1) {\n            this.changes.push({ key: key.key, change: 'press' });\n            this.downKeys.push(key.key);\n        }\n    }\n\n    private onKeyUp(key: KeyboardEvent) {\n        this.changes.push({ key: key.key, change: 'release' });\n        const idx = this.downKeys.indexOf(key.key);\n        this.downKeys.splice(idx, 1);\n    }\n\n    public Update(): KeyState {\n        const storeKeys = this.downKeys;\n        const storeChanges = this.changes;\n\n        this.downKeys = storeKeys.slice();\n        this.changes = [];\n\n        return new KeyState(storeKeys, storeChanges);\n    }\n}","import KeyWatcher, { IKeyChange } from './KeyWatcher';\nimport KeyState from './KeyState';\n\nexport default class KeyboardManager {\n\n    watcher: KeyWatcher;\n    prvState: KeyState;\n    currentState: KeyState;\n\n    constructor(element: HTMLElement, logKeyNames?: boolean) {\n        this.watcher = new KeyWatcher(element, logKeyNames);\n        this.prvState = this.currentState = this.watcher.Update();\n    }\n\n    public update(): void {\n        this.prvState = this.currentState;\n        this.currentState = this.watcher.Update();\n    }\n\n    public isKeyDown(key: string): boolean {\n        return this.currentState.isKeyDown(key);\n    }\n\n    public isKeyUp(key: string): boolean {\n        return this.currentState.isKeyUp(key);\n    }\n\n    public isKeyPressed(key: string): boolean {\n        return this.currentState.isKeyDown(key) && this.prvState.isKeyUp(key);\n    }\n\n    public isKeyReleased(key: string): boolean {\n        return this.currentState.isKeyUp(key) && this.prvState.isKeyDown(key);\n    }\n\n    public changes(): IKeyChange[] {\n        return this.currentState.changes;\n    }\n}","import Point from './Point';\n\nexport enum Direction {\n    Up = 0,\n    UpRight,\n    Right,\n    DownRight,\n    Down,\n    DownLeft,\n    Left,\n    UpLeft,\n}\n\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\n\nexport const directionValues: Point[] = [\n    new Point(0, -1),\n    new Point(1, -1),\n    new Point(1, 0),\n    new Point(1, 1),\n    new Point(0, 1),\n    new Point(-1, 1),\n    new Point(-1, 0),\n    new Point(-1, -1),\n];\n\nexport const allDirections: Direction[] = [\n    Direction.Up,\n    Direction.UpRight,\n    Direction.Right,\n    Direction.DownRight,\n    Direction.Down,\n    Direction.DownLeft,\n    Direction.Left,\n    Direction.UpLeft,\n];\nexport const cardinalDirections: ECardinalDirection[] = [\n    Direction.Up,\n    Direction.Right,\n    Direction.Down,\n    Direction.Left\n];\nexport const diagonalDirections: EDiagonalDirection[] = [\n    Direction.UpRight,\n    Direction.DownRight,\n    Direction.DownLeft,\n    Direction.UpLeft,\n];\n\nexport function ToPoint(direction: Direction): Point {\n    return directionValues[direction];\n}","export default class Point {\n\n    static zero(): Point  {\n        return new Point(0,0);\n    }\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public static fromAngle(angle: number, distance?: number) : Point {\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\n    }\n\n    public LengthSq(): number {\n        return Point.Dot(this, this);\n    }\n\n    public Length(): number {\n        return Math.sqrt(this.LengthSq());\n    }\n\n    public Clone(): Point {\n        return new Point(this.x, this.y);\n    }\n\n    public Negate(): Point {\n        return new Point(-this.x, -this.y);\n    }\n\n    public NegateInPlace(): this {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    public static Dot(p1: Point, p2: Point): number {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    public DotWith(other: Point): number {\n        return Point.Dot(this, other);\n    }\n\n    public normalize(): Point {\n        let len = this.Length();\n        return Point.Multiply(this, 1 / len);\n    }\n\n    public Direction(): number {\n        return Math.atan2(this.y, this.x);\n    }\n\n    public Truncate(): Point {\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public AddWith(x: number, y: number): this;\n    public AddWith(other: Point): this;\n    public AddWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x += nx;\n        this.y += ny;\n        return this;\n    }\n\n    public MultWith(s: number): this;\n    public MultWith(x: number, y: number): this;\n    public MultWith(other: Point): this;\n    public MultWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\n        this.x *= nx;\n        this.y *= ny;\n        return this;\n    }\n\n    public SubtractWith(x: number, y: number): this;\n    public SubtractWith(other: Point): this;\n    public SubtractWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x -= nx;\n        this.y -= ny;\n        return this;\n    }\n\n    public DivideWith(x: number, y: number): this;\n    public DivideWith(other: Point): this;\n    public DivideWith(other: number|Point, y?: number): this {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        this.x /= nx;\n        this.y /= ny;\n        return this;\n    }\n\n    public Equals(other: Point): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    \n    static add(src: Point, x: number, y: number): Point;\n    static add(src: Point, other: Point): Point;\n    static add(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x + nx, src.y + ny);\n    }\n\n    static subtract(src: Point, x: number, y: number): Point;\n    static subtract(src: Point, other: Point): Point;\n    static subtract(src: Point, other: number|Point, y?: number): Point {\n        const {x: nx, y: ny} = splitArgs(other, y);\n        return new Point(src.x - nx, src.y - ny);\n    }\n\n    static Multiply(a: Point, s: number, sy?: number): Point;\n    static Multiply(a: Point, b: Point): Point;\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\n        if (sy !== undefined) {\n            return new Point(a.x * (b as number), a.y * sy);\n        }\n        else if ((b as any).x !== undefined) {\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\n        } else {\n            return new Point(a.x * (b as number), a.y * (b as number));\n        }\n    }\n\n    static interpolate(a: Point, b: Point, p: number): Point {\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\n    }\n\n    static componentMin(a: Point, b: Point): Point {\n        if(a.x <= b.x && a.y <= b.y) return a;\n        if(b.x <= a.x && b.y <= a.y) return b;\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    }\n    \n    static componentMax(a: Point, b: Point): Point {\n        if(a.x >= b.x && a.y >= b.y) return a;\n        if(b.x >= a.x && b.y >= a.y) return b;\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\n    }\n\n    static Bezier(pts: Point[], t: number): Point {\n        if(pts.length === 1) return pts[0];\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\n        return Point.add(\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\n    }\n\n    rotate(theta: number): Point {\n        const angle = Math.atan2(this.y, this.x);\n        const len = this.Length();\n        return Point.fromAngle(angle + theta, len);\n    }\n}\n\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\n    return {x: <number>x, y};\n}\n\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\n    if(y === undefined)\n    {\n        if((x as Point).x !== undefined) {\n            return { x: (<Point>x).x, y: (<Point>x).y };\n        }\n        return { x: x as number, y: x as number };\n    } \n    return {x: <number>x, y};\n}","export const TILES_WIDE = 28;\nexport const TILES_HIGH = 28;\nexport const TILE_SIZE = 16;","export default __webpack_public_path__ + \"42ace1eb95edbc899165c10bb9cc20ab.png\";","export default __webpack_public_path__ + \"e5352b303b79e08de36a8c4248cdbb28.png\";","\nexport interface ILoopControl {\n    break(): void;\n}\n\nexport function IterateRange(start: number, end: number, handle: (value: number, control: ILoopControl) => void): void {\n    let breakIteration = false;\n    const loopControl = {\n        break: () => {\n            breakIteration = true;\n        }\n    };\n\n    if (end === start) {\n        handle(start, loopControl);\n        return;\n    }\n\n    const direction = end > start ? 1 : -1;\n    const finalValue = end + direction;\n\n    for (let i = start; i !== finalValue && !breakIteration; i += direction) {\n        handle(i, loopControl);\n    }\n}","import Cell from './Cell';\nimport Rect from '../../common/position/Rectangle';\nimport Point from '../../common/position/Point';\nimport { Direction } from '../../common/position/Direction';\nimport { IterateRange } from '../../common/Iterate';\nimport * as Const from '../Constants';\nimport { createContext } from 'react';\nimport { ResizeCanvas } from '../../common/CanvasHelpers';\n\nexport default class World {\n    cells: Cell[][];\n\n    public prerender: HTMLCanvasElement;\n\n    constructor(public width: number, public height: number, generateCell: () => Cell) {\n        this.cells = [];\n        for (let x = 0; x < width; x++) {\n            const col = [];\n            for (let y = 0; y < height; y++) {\n                col.push(generateCell());\n            }\n            this.cells.push(col);\n        }\n\n        this.prerender = document.getElementById('world_prerender') as HTMLCanvasElement;\n    }\n\n    updatePrerender() {\n        ResizeCanvas(this.prerender, Const.TILE_SIZE * this.width, Const.TILE_SIZE * this.height);\n        const pctx = this.prerender.getContext('2d');\n        for (let x = 0; x < this.width; x++) {\n            for (let y = 0; y < this.height; y++) {\n                this.cells[x][y].paint(pctx, x * Const.TILE_SIZE, y * Const.TILE_SIZE);\n            }\n        }\n    }\n\n    tryMoveEntity(pos: Rect, vel: Point, onChecked?: (x: number, y: number) => void): void {\n        const xDirection = vel.x >= 0 ? Direction.Right : Direction.Left;\n        const yDirection = vel.y >= 0 ? Direction.Down : Direction.Up;\n        if (vel.x !== 0) {\n            const startXTile = Math.floor(pos.Edge(xDirection) / Const.TILE_SIZE);\n            const endXTile = Math.floor((pos.Edge(xDirection) + vel.x) / Const.TILE_SIZE);\n            const startYTile = Math.floor(pos.Edge(Direction.Up) / Const.TILE_SIZE);\n            const endYTile = Math.floor((pos.Edge(Direction.Down) - 1) / Const.TILE_SIZE);\n\n            let xColision: number | undefined;\n            IterateRange(startXTile, endXTile, (x, ctrl) => {\n                for (let y = startYTile; y <= endYTile; y++) {\n                    if (x < 0 || x >= this.width) {\n                        xColision = x;\n                        ctrl.break();\n                        return;\n                    }\n                    if (onChecked) onChecked(x, y);\n                    if (!this.cells[x][y].pathable) {\n                        ctrl.break();\n                        xColision = x;\n                    }\n                }\n            });\n\n            if (xColision === undefined) {\n                pos.x += vel.x;\n            } else {\n                if (vel.x >= 0) pos.x = xColision * Const.TILE_SIZE - pos.w;\n                else pos.x = (xColision + 1) * Const.TILE_SIZE;\n            }\n        }\n        if (vel.y !== 0) {\n            const startYTile = Math.floor(pos.Edge(yDirection) / Const.TILE_SIZE);\n            const endYTile = Math.floor((pos.Edge(yDirection) + vel.y) / Const.TILE_SIZE);\n            const startXTile = Math.floor(pos.Edge(Direction.Left) / Const.TILE_SIZE);\n            const endXTile = Math.floor((pos.Edge(Direction.Right) - 1) / Const.TILE_SIZE);\n\n            let yColision: number | undefined;\n            IterateRange(startYTile, endYTile, (y, ctrl) => {\n                for (let x = startXTile; x <= endXTile; x++) {\n                    if (y < 0 || y >= this.height) {\n                        yColision = y;\n                        ctrl.break();\n                        return;\n                    }\n                    if (onChecked) onChecked(x, y);\n                    if (!this.cells[x][y].pathable) {\n                        ctrl.break();\n                        yColision = y;\n                    }\n                }\n            });\n\n            if (yColision === undefined) {\n                pos.y += vel.y;\n            } else {\n                if (vel.y >= 0) pos.y = yColision * Const.TILE_SIZE - pos.h;\n                else pos.y = (yColision + 1) * Const.TILE_SIZE;\n            }\n        }\n    }\n}","import { IGraphic } from './IGraphic';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\n\nexport default class SheetGraphic implements IGraphic {\n\n    width: number;\n    height: number;\n\n    constructor(public sheet: SpriteSheet, private tileX: number, private tileY: number) {\n        this.width = sheet.spriteWidth;\n        this.height = sheet.spriteHeight;\n    }\n\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number, tw: number, th: number): void {\n        this.sheet.render(ctx, tx, ty, tw, th, this.tileX, this.tileY);\n    }\n\n}","import { IGraphic } from '../IGraphic';\nimport * as Const from '../Constants';\nimport { SpriteSheet } from '../../common/assets/SpriteSheet';\nimport SheetGraphic from '../SheetGraphic';\n\nconst GRASS_TILES: [number, number][] =\n[\n    [10, 0],\n    [10, 0],\n    [10, 0],\n    [10, 0],\n    [10, 0],\n    [7, 1],\n    [7, 1],\n    [10, 1],\n    [10, 2],\n    [9, 2]\n];\n\nexport default class Cell {\n    constructor(public pathable: boolean, public graphic: IGraphic) {\n\n    }\n\n    paint(ctx: CanvasRenderingContext2D, tx: number, ty: number) {\n        this.graphic.paint(ctx, tx, ty, Const.TILE_SIZE, Const.TILE_SIZE);\n    }\n\n    static GrassFloor(sheet: SpriteSheet): Cell {\n        const grassCoords = GRASS_TILES[Math.floor(Math.random() * GRASS_TILES.length)];\n        return new Cell(true, new SheetGraphic(sheet, grassCoords[0], grassCoords[1]));\n    }\n\n    static RockWall(sheet: SpriteSheet): Cell {\n        return new Cell(false, new SheetGraphic(sheet, 7, 24));\n    }\n}","import Point from './Point';\nimport { Direction, ECardinalDirection, EDiagonalDirection } from './Direction';\n\nexport default class Rect {\n    constructor(public x: number, public y: number, public w: number, public h: number) { }\n\n    Shift(x: number, y: number): Rect;\n    Shift(p: Point): Rect;\n    Shift(xp: number | Point, y?: number): Rect {\n        if (y === undefined) {\n            return new Rect(this.x + (xp as Point).x, this.y + (xp as Point).y, this.w, this.h);\n        }\n        return new Rect(this.x + (xp as number), this.y + y, this.w, this.h);\n    }\n\n    ShiftBy(x: number, y: number): void;\n    ShiftBy(p: Point): void;\n    ShiftBy(xp: number | Point, y?: number): void {\n        if (y === undefined) {\n            this.x += (xp as Point).x;\n            this.y += (xp as Point).y;\n        } else {\n            this.x += (xp as number);\n            this.y += y;\n        }\n    }\n\n    Edge(direction: ECardinalDirection): number {\n        switch (direction) {\n            case Direction.Up: return this.y;\n            case Direction.Down: return this.y + this.h;\n            case Direction.Left: return this.x;\n            case Direction.Right: return this.x + this.w;\n        }\n    }\n\n    Corner(direction: EDiagonalDirection): Point {\n        switch (direction) {\n            case Direction.UpRight: return new Point(this.x, this.y);\n            case Direction.DownRight: return new Point(this.x, this.y);\n            case Direction.DownLeft: return new Point(this.x, this.y);\n            case Direction.UpLeft: return new Point(this.x, this.y);\n        }\n    }\n\n    equals(r: Rect) {\n        return r.x === this.x && r.y === this.y && r.w === this.w && r.h === this.h;\n    }\n}","import Axios from 'axios-observable';\n\nexport class FileResource<T> {\n    public body: T;\n    constructor(fileUrl: string, private onload: () => void) {\n        Axios.get(fileUrl).subscribe(data => {\n            this.body = data.data as T;\n            this.onload();\n        });\n    }\n}","import * as Const from './Constants';\nimport AssetLoader from '../common/assets/AssetLoader';\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\nimport arrowsUrl from '../common-assets/arrows.png';\nimport tilesUrl from '../common-assets/rpg1.png';\nimport wizardUrl from '../common-assets/wizard16.png';\nimport { NearestNeighborScaling, ResizeCanvas } from '../common/CanvasHelpers';\nimport NearestNeighborScalingHelper from '../common/NearestNeighborScalingHelper';\nimport World from './world/World';\nimport Cell from './world/Cell';\nimport Rect from '../common/position/Rectangle';\nimport KeyboardManager from '../common/input/KeyboardManager';\nimport Point from '../common/position/Point';\nimport { FileResource } from '../common/assets/FileResource';\n\nconst CAMERA_SLOWDOWN_FACTOR = 3;\n\nlet assets: {\n    tiles: SpriteSheet,\n    wizard: SpriteSheet,\n    arrows: SpriteSheet,\n    tilesets: FileResource<any>\n};\n\nlet ctx: CanvasRenderingContext2D;\n\nlet world: World;\n\nlet keys: KeyboardManager;\n\nexport default function Run() {\n    const assetLoader = new AssetLoader();\n    assets = {\n        tiles: new SpriteSheet(16, 16, tilesUrl, assetLoader.registerAssetLoadCallback()),\n        wizard: new SpriteSheet(16, 16, wizardUrl, assetLoader.registerAssetLoadCallback()),\n        arrows: new SpriteSheet(16, 16, arrowsUrl, assetLoader.registerAssetLoadCallback()),\n        tilesets: new FileResource('../dist/assets/rpgtest/tilesets.json', assetLoader.registerAssetLoadCallback()),\n    };\n    keys = new KeyboardManager(document.body);\n    assetLoader.onAllFinished(assetLoadDone);\n}\n\nfunction assetLoadDone() {\n    world = new World(Const.TILES_WIDE * 2, Const.TILES_HIGH * 2, () => {\n        if (Math.random() <= 0.15) {\n            return Cell.RockWall(assets.tiles);\n        }\n        else {\n            return Cell.GrassFloor(assets.tiles);\n        }\n    });\n    world.updatePrerender();\n    const canvas = document.getElementById('mainCanvas') as HTMLCanvasElement;\n    ctx = canvas.getContext('2d');\n    const scaleHelper = new NearestNeighborScalingHelper(canvas, ctx, Const.TILE_SIZE * Const.TILES_WIDE, Const.TILE_SIZE * Const.TILES_HIGH, true, () => { return; });\n    tick();\n}\n\nconst camPos = new Point(0, 0);\nconst playerPos = new Rect(0, 0, 14, 14);\nlet toggle = false;\nfunction tick() {\n    ctx.clearRect(0, 0, Const.TILES_WIDE * Const.TILE_SIZE, Const.TILES_HIGH * Const.TILE_SIZE);\n    NearestNeighborScaling(ctx);\n    ctx.save();\n    let cx = 0;\n    let cy = 0;\n    if (world.width > Const.TILES_WIDE) {\n        cx = Math.max(0, Math.min((world.width - Const.TILES_WIDE) * Const.TILE_SIZE, playerPos.x - (Const.TILE_SIZE * Const.TILES_WIDE / 2)));\n    }\n    if (world.height > Const.TILES_HIGH) {\n        cy = Math.max(0, Math.min((world.height - Const.TILES_HIGH) * Const.TILE_SIZE, playerPos.y - (Const.TILE_SIZE * Const.TILES_HIGH / 2)));\n    }\n\n    camPos.MultWith(CAMERA_SLOWDOWN_FACTOR, CAMERA_SLOWDOWN_FACTOR)\n          .AddWith(cx, cy)\n          .DivideWith(CAMERA_SLOWDOWN_FACTOR + 1, CAMERA_SLOWDOWN_FACTOR + 1);\n\n    ctx.translate(-camPos.x, -camPos.y);\n    ctx.drawImage(world.prerender, 0, 0);\n    keys.update();\n\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(playerPos.x, playerPos.y, playerPos.w, playerPos.h);\n    const vel = new Point(0, 0);\n    if (keys.isKeyDown('a')) {\n        vel.x = -3;\n    }\n    if (keys.isKeyDown('d')) {\n        vel.x = 3;\n    }\n    if (keys.isKeyDown('w')) {\n        vel.y = -3;\n    }\n    if (keys.isKeyDown('s')) {\n        vel.y = 3;\n    }\n    ctx.fillStyle = 'yellow';\n    ctx.globalAlpha = 0.6;\n    world.tryMoveEntity(playerPos, vel, (tx, ty) => {\n        ctx.fillRect(tx * Const.TILE_SIZE, ty * Const.TILE_SIZE, Const.TILE_SIZE, Const.TILE_SIZE);\n    });\n    ctx.globalAlpha = 1;\n\n    toggle = !toggle;\n    if (toggle) {\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, 10, 10);\n    }\n    ctx.restore();\n    requestAnimationFrame(() => tick());\n}"],"names":["KeyState","constructor","keys","changes","isKeyDown","key","this","indexOf","isKeyUp","KeyWatcher","attachedElement","logKeyNames","undefined","addEventListener","k","onKeyDown","onKeyUp","downKeys","console","log","push","change","idx","splice","Update","storeKeys","storeChanges","slice","KeyboardManager","element","watcher","prvState","currentState","update","isKeyPressed","isKeyReleased","Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","x","y","static","angle","distance","Math","cos","sin","LengthSq","Dot","Length","sqrt","Clone","Negate","NegateInPlace","p1","p2","DotWith","other","normalize","len","Multiply","atan2","Truncate","trunc","AddWith","nx","ny","splitArgs","MultWith","splitArgsOrSingle","SubtractWith","DivideWith","Equals","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","rotate","theta","fromAngle","TILE_SIZE","IterateRange","start","end","handle","breakIteration","loopControl","break","finalValue","i","World","width","height","generateCell","cells","col","prerender","document","getElementById","updatePrerender","pctx","getContext","paint","tryMoveEntity","pos","vel","onChecked","xDirection","yDirection","startXTile","floor","Edge","endXTile","startYTile","endYTile","xColision","ctrl","pathable","w","yColision","h","SheetGraphic","sheet","tileX","tileY","spriteWidth","spriteHeight","ctx","tx","ty","tw","th","render","GRASS_TILES","Cell","graphic","grassCoords","random","Rect","Shift","xp","ShiftBy","Corner","equals","r","FileResource","fileUrl","onload","subscribe","data","body","assets","world","Run","assetLoader","AssetLoader","tiles","SpriteSheet","registerAssetLoadCallback","wizard","arrows","tilesets","onAllFinished","assetLoadDone","RockWall","GrassFloor","canvas","NearestNeighborScalingHelper","tick","camPos","playerPos","toggle","clearRect","save","cx","cy","CAMERA_SLOWDOWN_FACTOR","translate","drawImage","fillStyle","fillRect","globalAlpha","restore","requestAnimationFrame"],"sourceRoot":""}