{"version":3,"sources":["webpack:///./src/projects/common/position/Point.ts","webpack:///./src/projects/common/3d/GlslHelpers.ts","webpack:///./src/projects/glsl-mandelbrot/GlslFrameRenderer.ts","webpack:///./src/projects/glsl-mandelbrot/GlslJuliaFrameRenderer.ts","webpack:///./src/projects/glsl-mandelbrot/GlslMandelbrotRunner.ts","webpack:///./src/projects/glsl-mandelbrot/ShaderCode.ts","webpack:///./src/views/projects/glsl-mandelbrot/GlslMandelbrotComponent.tsx"],"names":["Point","x","y","angle","distance","Math","cos","sin","Dot","this","sqrt","LengthSq","p1","p2","other","len","Length","Multiply","atan2","nx","ny","splitArgs","undefined","splitArgsOrSingle","src","a","b","sy","p","min","max","pts","t","length","add","Bezier","slice","theta","fromAngle","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","deleteShader","initShaderProgram","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderDrawMultiple","positionBuffer","positionNumComponents","renderMode","drawCounts","getGeom","bindUniforms","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","enableVertexAttribArray","useProgram","i","bufferOffset","bufferCount","drawArrays","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","fragmentShaderOnlyDraw","numComponents","fragmentShaderOnlyInitBuffer","left","top","right","bottom","createBuffer","l","r","positions","bufferData","Float32Array","STATIC_DRAW","initGLBuffer","components","defaultVertexShader","canvas","fragment_code","onMiddleClick","cursor_anchor","mm_down","getContext","touch_anchors","canvasRange","windowRange","height","width","init","initProgram","program","buffer","renderFrame","addEventListener","e","button","offsetX","offsetY","perc","GetPercentage","GetValue","preventDefault","dx","dy","panCameraByScreenDelta","scalePercentage","deltaY","scalePerc","pow","AspectScale","ev","targetTouches","touch","item","identifier","touchOffset","touches","moves","pos","oldPos","push","subtract","dragStart","dragEnd","worldPos","SubtractWith","scaleAmt","delta","ShiftByPercentage","uniform2fv","getUniformLocation","xRange","yRange","tgt","target","getBoundingClientRect","pageX","pageY","super","setJuliaPoint","pt","julia_point","real","imaginary","julia_escape","abs","uniform1fv","juliaCanvas","mandelbrot","jpt","julia","run","cleanup","GlslMandelbrotComponent","jcanvas","renderer","current","className","id","ref"],"mappings":"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","file":"17.bundle.js","sourcesContent":["export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public LengthSq(): number {\r\n        return Point.Dot(this, this);\r\n    }\r\n\r\n    public Length(): number {\r\n        return Math.sqrt(this.LengthSq());\r\n    }\r\n\r\n    public Clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public Negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public NegateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static Dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public DotWith(other: Point): number {\r\n        return Point.Dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.Length();\r\n        return Point.Multiply(this, 1 / len);\r\n    }\r\n\r\n    public Direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public AddWith(x: number, y: number): this;\r\n    public AddWith(other: Point): this;\r\n    public AddWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public MultWith(s: number): this;\r\n    public MultWith(x: number, y: number): this;\r\n    public MultWith(other: Point): this;\r\n    public MultWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public SubtractWith(x: number, y: number): this;\r\n    public SubtractWith(other: Point): this;\r\n    public SubtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public DivideWith(x: number, y: number): this;\r\n    public DivideWith(other: Point): this;\r\n    public DivideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static Multiply(a: Point, s: number, sy?: number): Point;\r\n    static Multiply(a: Point, b: Point): Point;\r\n    static Multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.Multiply(pts[1], t), Point.Multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.Multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.Multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.Length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      alert(`An error occurred compiling the ${(type === gl.VERTEX_SHADER ? 'vertex' : type === gl.FRAGMENT_SHADER ? 'fragment' : '')} shaders: ` + gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return undefined;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\n\r\nexport function initShaderProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return undefined;\r\n    }\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n\r\nexport function shaderDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', bufferOffset: number, bufferCount: number, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            positionNumComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n}\r\n\r\n\r\nexport function shaderDrawMultiple(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, positionNumComponents: number, renderMode: 'triangle'|'tristrip'|'trifan', drawCounts: number, getGeom: (i: number) => {bufferOffset: number, bufferCount: number}, bindUniforms: (gl: WebGLRenderingContext, i: number) => void) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n    const normalize = false;  // don't normalize\r\n    const stride = 0;         // how many bytes to get from one set of values to the next\r\n                              // 0 = use type and numComponents above\r\n    const offset = 0;         // how many bytes inside the buffer to start from\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n          gl.getAttribLocation(shader, 'aVertexPosition'),\r\n          positionNumComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n    gl.enableVertexAttribArray(\r\n      gl.getAttribLocation(shader, 'aVertexPosition'));\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(shader);\r\n  for(let i = 0; i < drawCounts; i++) {\r\n    bindUniforms(gl, i);\r\n    let {bufferOffset, bufferCount} = getGeom(i);\r\n    gl.drawArrays(\r\n      renderMode === 'triangle' ? gl.TRIANGLES :\r\n      renderMode === 'tristrip' ? gl.TRIANGLE_STRIP :\r\n      gl.TRIANGLE_FAN, bufferOffset, bufferCount);\r\n  }\r\n}\r\n\r\nexport function fragmentShaderOnlyDraw(gl: WebGLRenderingContext, shader: WebGLProgram, positionBuffer: WebGLBuffer, bindUniforms: (gl: WebGLRenderingContext) => void) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n    // Clear the canvas before we start drawing on it.\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // Tell WebGL how to pull out the positions from the position\r\n    // buffer into the vertexPosition attribute.\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.vertexAttribPointer(\r\n            gl.getAttribLocation(shader, 'aVertexPosition'),\r\n            numComponents,\r\n            type,\r\n            normalize,\r\n            stride,\r\n            offset);\r\n      gl.enableVertexAttribArray(\r\n        gl.getAttribLocation(shader, 'aVertexPosition'));\r\n    }\r\n\r\n    // Tell WebGL to use our program when drawing\r\n\r\n    gl.useProgram(shader);\r\n    bindUniforms(gl);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n}\r\n\r\nexport function fragmentShaderOnlyInitBuffer(gl: WebGLRenderingContext, left?: number, top?: number, right?: number, bottom?: number) {\r\n     // Create a buffer for the square's positions.\r\n     const positionBuffer = gl.createBuffer();\r\n\r\n     // Select the positionBuffer as the one to apply buffer\r\n     // operations to from here out.\r\n     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n     const l = left ?? -1.0;\r\n     const r = right ?? 1.0;\r\n     const t = top ?? -1.0;\r\n     const b = bottom ?? 1.0;\r\n \r\n     // Now create an array of positions for the square.\r\n     const positions = [\r\n         b, r,\r\n         t, r,\r\n         b, l,\r\n         t, l,\r\n     ];\r\n \r\n     // Now pass the list of positions into WebGL to build the\r\n     // shape. We do this by creating a Float32Array from the\r\n     // JavaScript array, then use it to fill the current buffer.\r\n     gl.bufferData(gl.ARRAY_BUFFER,\r\n                   new Float32Array(positions),\r\n                   gl.STATIC_DRAW);\r\n \r\n     return positionBuffer;\r\n}\r\n\r\nexport function initGLBuffer(gl: WebGLRenderingContext, components: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(components),\r\n                gl.STATIC_DRAW);\r\n\r\n  return positionBuffer;\r\n}\r\n\r\nexport const defaultVertexShader = `attribute vec4 aVertexPosition;\r\nvarying vec3 vPos;\r\nvoid main() {\r\n  vPos = vec3(aVertexPosition.xy, 0.0);\r\n  gl_Position = aVertexPosition;\r\n}`;","import { Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport Rect from \"../common/position/Rectangle\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslFrameRenderer {\r\n    protected gl: WebGLRenderingContext;\r\n    protected program: WebGLProgram;\r\n    protected buffer: WebGLBuffer;\r\n\r\n    private cursor_anchor: Point | null;\r\n    private mm_down: boolean;\r\n\r\n    protected canvasRange: Range2d;\r\n    protected windowRange: Range2d;\r\n\r\n    private touch_anchors: { [key: number]: Point }\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private fragment_code: string, private onMiddleClick?: (pt: Point) => void) {\r\n        ResizeCanvas(canvas, 1200, 600);\r\n        this.cursor_anchor = null;\r\n        this.mm_down = false;\r\n        this.gl = canvas.getContext('webgl');\r\n        this.touch_anchors = {};\r\n        \r\n        this.canvasRange = new Range2d(new Range(0, 1200), new Range(0, 600));\r\n        this.windowRange = new Range2d(new Range(-1, 1), new Range(-1, (canvas.height / canvas.width)));\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        this.initProgram();\r\n    }\r\n\r\n    initProgram() {\r\n        this.program = GLSL.initShaderProgram(this.gl, GLSL.defaultVertexShader, this.fragment_code);\r\n        this.buffer = GLSL.fragmentShaderOnlyInitBuffer(this.gl);\r\n    }\r\n\r\n    run() {\r\n        this.renderFrame();\r\n\r\n        this.canvas.addEventListener('mousedown', e => {\r\n            if(e.button === 0) {\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n            }\r\n            else if(e.button === 1) {\r\n                this.mm_down = true;\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                if(this.onMiddleClick !== undefined) {\r\n                    this.onMiddleClick(new Point(perc.x, perc.y));\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mouseup', e => {\r\n            if(e.button === 0)\r\n                this.cursor_anchor = null;\r\n            else if(e.button === 1)\r\n                this.mm_down = false;\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            if(this.cursor_anchor != null) {\r\n                const dx = e.offsetX - this.cursor_anchor.x;\r\n                const dy = e.offsetY - this.cursor_anchor.y;\r\n                this.panCameraByScreenDelta(new Point(dx, dy));\r\n                this.cursor_anchor = new Point(e.offsetX, e.offsetY);\r\n                this.renderFrame();\r\n                e.preventDefault();\r\n            }\r\n            if(this.mm_down && this.onMiddleClick !== undefined){\r\n                let perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n                perc = this.windowRange.GetValue(perc.x, 1-perc.y);\r\n                this.onMiddleClick(new Point(perc.x, perc.y));\r\n            }\r\n        });\r\n        this.canvas.addEventListener('wheel', e => {\r\n            const scalePercentage = e.deltaY / SCROLL_DIV;\r\n            const scalePerc = Math.pow(SCROLL_POW, scalePercentage);\r\n            const perc = this.canvasRange.GetPercentage(e.offsetX, e.offsetY);\r\n\r\n            this.windowRange.AspectScale(scalePerc, perc.x, 1-perc.y);\r\n            this.renderFrame();\r\n            e.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchstart', ev => { \r\n            if(ev.targetTouches.length >= 3 || ev.targetTouches.length === 0) return;\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                this.touch_anchors[touch.identifier] = touchOffset(touch);\r\n            }\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchmove', ev => {\r\n            if(ev.touches.length >= 3 || ev.touches.length === 0) return;\r\n            const moves: [Point, Point][] = [];\r\n            for(let i = 0; i < ev.targetTouches.length; i++){\r\n                const touch = ev.targetTouches.item(i);\r\n                const pos = touchOffset(touch);\r\n                const oldPos = this.touch_anchors[touch.identifier];\r\n                if(oldPos === undefined) return;\r\n                moves.push([oldPos, pos]);\r\n                this.touch_anchors[touch.identifier] = pos;\r\n            }\r\n\r\n            if(moves.length === 1) {\r\n                // Just pan the camera\r\n                this.panCameraByScreenDelta(Point.subtract(moves[0][1], moves[0][0]));\r\n            }\r\n            else if(moves.length === 2) {\r\n                // Average the start + End positions to find the move amt\r\n                const dragStart = Point.Multiply(Point.add(moves[0][0], moves[1][0]), 0.5, 0.5);\r\n                const dragEnd = Point.Multiply(Point.add(moves[0][1], moves[1][1]), 0.5, 0.5);\r\n                const worldPos = this.panCameraByScreenDelta(dragEnd.SubtractWith(dragStart));\r\n                const startDist = Point.subtract(moves[0][0], moves[1][0]).Length();\r\n                const endDist = Point.subtract(moves[0][1], moves[1][1]).Length();\r\n                const scaleAmt = startDist / endDist;\r\n                this.windowRange.AspectScale(scaleAmt, worldPos.x, 1-worldPos.y);\r\n            }\r\n\r\n            this.renderFrame();\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchend', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n        this.canvas.addEventListener('touchcancel', ev => {\r\n            this.touch_anchors = {};\r\n            ev.preventDefault();\r\n        });\r\n    }\r\n\r\n    private panCameraByScreenDelta(delta: Point) {\r\n        const perc = this.canvasRange.GetPercentage(delta.x, delta.y);\r\n        this.windowRange.ShiftByPercentage(-perc.x, perc.y);\r\n        return perc;\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n        });\r\n    }\r\n\r\n    cleanup() {\r\n        \r\n    }\r\n}\r\n\r\nfunction touchOffset(touch: Touch): Point {\r\n    const tgt = (touch.target as HTMLElement).getBoundingClientRect();\r\n    return new Point(touch.pageX - tgt.left, touch.pageY - tgt.top);\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslJuliaFrameRenderer extends GlslFrameRenderer {\r\n    \r\n    private julia_point: Point;\r\n    private julia_escape: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, fragment_code: string) {\r\n        super(canvas, fragment_code);\r\n        this.setJuliaPoint(new Complex(0,0));\r\n    }\r\n\r\n    setJuliaPoint(pt: Complex)\r\n    {\r\n        this.julia_point = new Point(pt.real, pt.imaginary);\r\n        this.julia_escape = (Math.sqrt(4 * pt.abs() + 1) + 1) / 2;\r\n        this.renderFrame();\r\n    }\r\n\r\n    renderFrame() {\r\n        GLSL.fragmentShaderOnlyDraw(this.gl, this.program, this.buffer, gl => {\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_pos'), [this.windowRange.xRange.min, this.windowRange.yRange.min]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'window_size'), [this.windowRange.xRange.Length(), this.windowRange.yRange.Length()]);\r\n            gl.uniform2fv(gl.getUniformLocation(this.program, 'julia_coord'), [this.julia_point.x, this.julia_point.y]);\r\n            gl.uniform1fv(gl.getUniformLocation(this.program, 'julia_escape'), [this.julia_escape]);\r\n        });\r\n    }\r\n}","import { Complex, Range, Range2d } from \"../common\";\r\nimport * as GLSL from \"../common/3d/GlslHelpers\";\r\nimport { ResizeCanvas } from \"../common/CanvasHelpers\";\r\nimport Point from \"../common/position/Point\";\r\nimport GlslFrameRenderer from \"./GlslFrameRenderer\";\r\nimport GlslJuliaFrameRenderer from \"./GlslJuliaFrameRenderer\";\r\nimport { JULIA_SHADER, MANDELBROT_SHADER } from \"./ShaderCode\";\r\n\r\nconst SCROLL_DIV = 3;\r\nconst SCROLL_POW = 1.1;\r\n\r\nexport default class GlslMandelbrotWrapperComponent {\r\n    private mandelbrot: GlslFrameRenderer;\r\n    private julia: GlslJuliaFrameRenderer;\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private juliaCanvas: HTMLCanvasElement) {\r\n        this.mandelbrot = new GlslFrameRenderer(canvas, MANDELBROT_SHADER, (jpt) => {\r\n            this.julia.setJuliaPoint(new Complex(jpt.x, jpt.y));\r\n        });\r\n        this.julia = new GlslJuliaFrameRenderer(juliaCanvas, JULIA_SHADER);\r\n\r\n        this.mandelbrot.run();\r\n        this.julia.run();\r\n    }\r\n\r\n    cleanup() {\r\n        this.mandelbrot.cleanup();\r\n        this.julia.cleanup();\r\n    }\r\n}","export const MANDELBROT_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\nconst float MAX_ABSSQ = 2.0;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_mandelbrot(vec2 v, vec2 c) {\r\n    return cplx_mult(v, v) + c;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_mandelbrot(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_mandelbrot(roll, coords);\r\n        if (cplx_abssq(roll) >= MAX_ABSSQ) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_mandelbrot(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;\r\n\r\nexport const JULIA_SHADER = `\r\nprecision highp float;\r\nvarying vec3 vPos;\r\nuniform vec2 julia_coord;\r\nuniform float julia_escape;\r\nuniform vec2 window_pos;\r\nuniform vec2 window_size;\r\n\r\nconst int MAX_ITER = 256;\r\n\r\nvec2 cplx_mult(vec2 a, vec2 b) {\r\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\r\n}\r\n\r\nvec2 step_julia(vec2 v) {\r\n    return cplx_mult(v, v) + julia_coord;\r\n}\r\n\r\nfloat cplx_abssq(vec2 v) {\r\n    return dot(v, v);\r\n}\r\n\r\nfloat iterate_julia(vec2 coords) {\r\n    vec2 roll = coords;\r\n    for(int iter = 0; iter < MAX_ITER; iter++) {\r\n        roll = step_julia(roll);\r\n        if (cplx_abssq(roll) >= julia_escape) {\r\n            return float(iter)/float(MAX_ITER);\r\n        }\r\n    }\r\n    return 1.0;\r\n}\r\n\r\nvec3 floatToColor(float perc) {\r\n    if(perc <= 0.5) {\r\n        return vec3(perc * 2.0, perc, 0.0);\r\n    }\r\n    perc = (perc - 0.5) * 2.0;\r\n    return vec3(1.0, 0.5 + perc / 2.0, perc);\r\n}\r\n\r\nvoid main() {\r\n    vec2 adjpos = vPos.xy;\r\n    adjpos += 1.0;\r\n    adjpos /= 2.0;\r\n    // adjpos is now 0, 1\r\n    // Convert that to world-space\r\n    adjpos = window_pos + adjpos * window_size;\r\n\r\n    float mb_perc = iterate_julia(adjpos);\r\n    gl_FragColor = vec4(floatToColor(mb_perc), 1.0);\r\n}`;","import * as React from 'react';\r\nimport GlslMandelbrotRunner from '../../../projects/glsl-mandelbrot/GlslMandelbrotRunner';\r\n\r\nexport default function GlslMandelbrotComponent() {\r\n    const canvas = React.useRef<HTMLCanvasElement>();\r\n    const jcanvas = React.useRef<HTMLCanvasElement>();\r\n\r\n    React.useEffect(() => {\r\n        const renderer = new GlslMandelbrotRunner(canvas.current, jcanvas.current);\r\n        return () => renderer.cleanup();\r\n    }, [canvas]);\r\n\r\n    return <div className='conway conway_body full_body'>\r\n        <canvas id='canvas' ref={canvas}></canvas>\r\n        <canvas id='jcanvas' ref={jcanvas}></canvas>\r\n    </div>;\r\n}"],"sourceRoot":""}