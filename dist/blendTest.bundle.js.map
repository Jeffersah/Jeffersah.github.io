{"version":3,"file":"blendTest.bundle.js","mappings":"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","sources":["webpack://trading-game/./src/projects/common/position/Direction.ts","webpack://trading-game/./src/projects/common/position/Point.ts","webpack://trading-game/./src/projects/common-assets/RockLavaAllBlends_crop.png","webpack://trading-game/./src/projects/common-assets/Selectors16x16.png","webpack://trading-game/./src/projects/tile-blend-test-1/Terrain.ts","webpack://trading-game/./src/projects/tile-blend-test-1/index.ts"],"sourcesContent":["import Point from './Point';\r\n\r\nexport enum Direction {\r\n    Up = 0,\r\n    UpRight,\r\n    Right,\r\n    DownRight,\r\n    Down,\r\n    DownLeft,\r\n    Left,\r\n    UpLeft,\r\n}\r\n\r\nexport type ECardinalDirection = Direction.Up | Direction.Right | Direction.Down | Direction.Left;\r\nexport type EDiagonalDirection = Direction.UpRight | Direction.DownRight | Direction.DownLeft | Direction.UpLeft;\r\n\r\nexport const directionValues: Point[] = [\r\n    new Point(0, -1),\r\n    new Point(1, -1),\r\n    new Point(1, 0),\r\n    new Point(1, 1),\r\n    new Point(0, 1),\r\n    new Point(-1, 1),\r\n    new Point(-1, 0),\r\n    new Point(-1, -1),\r\n];\r\n\r\nexport const allDirections: Direction[] = [\r\n    Direction.Up,\r\n    Direction.UpRight,\r\n    Direction.Right,\r\n    Direction.DownRight,\r\n    Direction.Down,\r\n    Direction.DownLeft,\r\n    Direction.Left,\r\n    Direction.UpLeft,\r\n];\r\nexport const cardinalDirections: ECardinalDirection[] = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left\r\n];\r\nexport const diagonalDirections: EDiagonalDirection[] = [\r\n    Direction.UpRight,\r\n    Direction.DownRight,\r\n    Direction.DownLeft,\r\n    Direction.UpLeft,\r\n];\r\n\r\nexport function ToPoint(direction: Direction): Point {\r\n    return directionValues[direction];\r\n}","export default class Point {\r\n\r\n    static zero(): Point  {\r\n        return new Point(0,0);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public static fromAngle(angle: number, distance?: number) : Point {\r\n        return new Point(Math.cos(angle) * (distance ?? 1), Math.sin(angle) * (distance ?? 1));\r\n    }\r\n\r\n    public lengthSq(): number {\r\n        return Point.dot(this, this);\r\n    }\r\n\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    public clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    public negate(): Point {\r\n        return new Point(-this.x, -this.y);\r\n    }\r\n\r\n    public negateInPlace(): this {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n\r\n    public static dot(p1: Point, p2: Point): number {\r\n        return p1.x * p2.x + p1.y * p2.y;\r\n    }\r\n\r\n    public dotWith(other: Point): number {\r\n        return Point.dot(this, other);\r\n    }\r\n\r\n    public normalize(): Point {\r\n        let len = this.length();\r\n        return Point.multiply(this, 1 / len);\r\n    }\r\n\r\n    public direction(): number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    public truncate(): Point {\r\n        return new Point(Math.trunc(this.x), Math.trunc(this.y));\r\n    }\r\n\r\n    public addWith(x: number, y: number): this;\r\n    public addWith(other: Point): this;\r\n    public addWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x += nx;\r\n        this.y += ny;\r\n        return this;\r\n    }\r\n\r\n    public multWith(s: number): this;\r\n    public multWith(x: number, y: number): this;\r\n    public multWith(other: Point): this;\r\n    public multWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgsOrSingle(other, y);\r\n        this.x *= nx;\r\n        this.y *= ny;\r\n        return this;\r\n    }\r\n\r\n    public subtractWith(x: number, y: number): this;\r\n    public subtractWith(other: Point): this;\r\n    public subtractWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x -= nx;\r\n        this.y -= ny;\r\n        return this;\r\n    }\r\n\r\n    public divideWith(x: number, y: number): this;\r\n    public divideWith(other: Point): this;\r\n    public divideWith(other: number|Point, y?: number): this {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        this.x /= nx;\r\n        this.y /= ny;\r\n        return this;\r\n    }\r\n\r\n    public equals(other: Point): boolean {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    \r\n    static add(src: Point, x: number, y: number): Point;\r\n    static add(src: Point, other: Point): Point;\r\n    static add(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x + nx, src.y + ny);\r\n    }\r\n\r\n    static subtract(src: Point, x: number, y: number): Point;\r\n    static subtract(src: Point, other: Point): Point;\r\n    static subtract(src: Point, other: number|Point, y?: number): Point {\r\n        const {x: nx, y: ny} = splitArgs(other, y);\r\n        return new Point(src.x - nx, src.y - ny);\r\n    }\r\n\r\n    static multiply(a: Point, s: number, sy?: number): Point;\r\n    static multiply(a: Point, b: Point): Point;\r\n    static multiply(a: Point, b: Point|number, sy ?: number): Point {\r\n        if (sy !== undefined) {\r\n            return new Point(a.x * (b as number), a.y * sy);\r\n        }\r\n        else if ((b as any).x !== undefined) {\r\n            return new Point(a.x * (b as Point).x, a.y * (b as Point).y);\r\n        } else {\r\n            return new Point(a.x * (b as number), a.y * (b as number));\r\n        }\r\n    }\r\n\r\n    static interpolate(a: Point, b: Point, p: number): Point {\r\n        return new Point(a.x + (b.x - a.x) * p, a.y + (b.y - a.y) * p);\r\n    }\r\n\r\n    static componentMin(a: Point, b: Point): Point {\r\n        if(a.x <= b.x && a.y <= b.y) return a;\r\n        if(b.x <= a.x && b.y <= a.y) return b;\r\n        return new Point(Math.min(a.x, b.x), Math.min(a.y, b.y));\r\n    }\r\n    \r\n    static componentMax(a: Point, b: Point): Point {\r\n        if(a.x >= b.x && a.y >= b.y) return a;\r\n        if(b.x >= a.x && b.y >= a.y) return b;\r\n        return new Point(Math.max(a.x, b.x), Math.max(a.y, b.y));\r\n    }\r\n\r\n    static Bezier(pts: Point[], t: number): Point {\r\n        if(pts.length === 1) return pts[0];\r\n        else if(pts.length === 2) return Point.add(Point.multiply(pts[1], t), Point.multiply(pts[0], 1-t));\r\n        return Point.add(\r\n            Point.multiply(Point.Bezier(pts.slice(1), t), t),\r\n            Point.multiply(Point.Bezier(pts.slice(0, pts.length - 1), t), 1-t));\r\n    }\r\n\r\n    rotate(theta: number): Point {\r\n        const angle = Math.atan2(this.y, this.x);\r\n        const len = this.length();\r\n        return Point.fromAngle(angle + theta, len);\r\n    }\r\n}\r\n\r\nfunction splitArgs(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined) return { x: (<Point>x).x, y: (<Point>x).y };\r\n    return {x: <number>x, y};\r\n}\r\n\r\nfunction splitArgsOrSingle(x: Point|number, y ?: number): {x: number, y: number} {\r\n    if(y === undefined)\r\n    {\r\n        if((x as Point).x !== undefined) {\r\n            return { x: (<Point>x).x, y: (<Point>x).y };\r\n        }\r\n        return { x: x as number, y: x as number };\r\n    } \r\n    return {x: <number>x, y};\r\n}","export default __webpack_public_path__ + \"e6ca7ebcac9136ce5511288e898c8371.png\";","export default __webpack_public_path__ + \"f1cd5c392c5447559f3a20ac58e20646.png\";","import { Direction, cardinalDirections, diagonalDirections, ToPoint, allDirections } from '../common/position/Direction';\r\n\r\nexport enum TileType {\r\n    Rock,\r\n    Lava\r\n}\r\n\r\nexport class Terrain {\r\n    private tiles: TileType[];\r\n    private subTileIds: number[];\r\n\r\n    constructor(public tilesWide: number, public tilesHigh: number) {\r\n        this.tiles = new Array(tilesHigh * tilesWide);\r\n        for (let x = 0; x < tilesWide * tilesHigh; x++) {\r\n            this.tiles[x] = TileType.Rock;\r\n        }\r\n\r\n        this.subTileIds = new Array(tilesHigh * tilesWide * 4);\r\n        for (let x = 0; x < tilesWide * tilesHigh * 4; x++) {\r\n            this.subTileIds[x] = 0;\r\n        }\r\n\r\n        for (let x = 0; x < tilesWide; x++) {\r\n            for (let y = 0; y < tilesHigh; y++) {\r\n                this.updateTile(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private fixCoords(x: number, y: number) {\r\n        return x + y * this.tilesWide;\r\n    }\r\n\r\n    private fixSubCoords(x: number, y: number, d: Direction) {\r\n        return x * 4 + (y * this.tilesWide * 4) + ((d - Direction.UpRight) / 2);\r\n    }\r\n\r\n    public getTile(x: number, y: number): TileType {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return TileType.Lava;\r\n        const coords = this.fixCoords(x, y);\r\n        return this.tiles[this.fixCoords(x, y)];\r\n    }\r\n\r\n    public getSubTileId(x: number, y: number, d: Direction) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return 0;\r\n        const coords = this.fixSubCoords(x, y, d);\r\n        return this.subTileIds[coords];\r\n    }\r\n\r\n    public setTile(x: number, y: number, t: TileType) {\r\n        if (x < 0 || y < 0 || x >= this.tilesWide || y >= this.tilesWide) return;\r\n        const coords = this.fixCoords(x, y);\r\n        if (this.tiles[coords] === t) return;\r\n\r\n        this.tiles[coords] = t;\r\n        this.updateSelfAndAdjacent(x, y);\r\n    }\r\n\r\n    private updateSelfAndAdjacent(tx: number, ty: number) {\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                this.updateTile(tx + dx, ty + dy);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateTile(tx: number, ty: number): void {\r\n        if (tx < 0 || ty < 0 || tx >= this.tilesWide || ty >= this.tilesWide) return;\r\n        const tid = this.fixCoords(tx, ty);\r\n        const type = this.tiles[tid];\r\n\r\n        let adjacency = 0x00;\r\n        allDirections.forEach((dir, i) => {\r\n            const adjMask = 1 << i;\r\n            const pt = ToPoint(dir);\r\n            if (this.getTile(pt.x + tx, pt.y + ty) !== type) {\r\n                adjacency |= adjMask;\r\n            }\r\n        });\r\n\r\n        // adjacency now contains a bitmask of (adjacent=different) where\r\n        // b[0] == T diff, b[1] = TR diff, b[2] = R diff, etc...\r\n        // Therefore, bits [0..2] are the TopRight id,\r\n        // bits [2..4] are the BottomRight id,\r\n        // bits [4..6] are the BottomLeft id,\r\n        // bits [6, 7, 0] are the TopLeft id\r\n\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpRight)] = adjacency & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownRight)] = (adjacency >> 2) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.DownLeft)] = (adjacency >> 4) & 0b111;\r\n        this.subTileIds[this.fixSubCoords(tx, ty, Direction.UpLeft)] = (adjacency >> 6) | ((adjacency & 1) << 2) & 0b111;\r\n    }\r\n}","import AssetLoader from '../common/assets/AssetLoader';\r\nimport { SpriteSheet } from '../common/assets/SpriteSheet';\r\nimport { ResizeCanvas, NearestNeighborScaling } from '../common/CanvasHelpers';\r\nimport blendTilesUrl from '../common-assets/RockLavaAllBlends_crop.png';\r\nimport seletorsUrl from '../common-assets/Selectors16x16.png';\r\nimport { Terrain, TileType } from './Terrain';\r\nimport { Direction, ToPoint } from '../common/position/Direction';\r\nimport Point from '../common/position/Point';\r\n\r\nlet tiles: SpriteSheet;\r\nlet selectors: SpriteSheet;\r\nlet pvMousePos: Point | undefined;\r\nlet terrain: Terrain;\r\nlet context: CanvasRenderingContext2D;\r\n\r\nconst SCALE_FACTOR = 3;\r\n\r\n\r\nfunction Run() {\r\n    const assetLoader = new AssetLoader();\r\n    tiles = new SpriteSheet(8, 8, blendTilesUrl, assetLoader.registerAssetLoadCallback());\r\n    selectors = new SpriteSheet(16, 16, seletorsUrl, assetLoader.registerAssetLoadCallback());\r\n    pvMousePos = undefined;\r\n\r\n    assetLoader.onAllFinished(assetLoadDone);\r\n}\r\n\r\nfunction assetLoadDone() {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    terrain = new Terrain(20, 20);\r\n\r\n    ResizeCanvas(canvas, terrain.tilesWide * 16 * SCALE_FACTOR, terrain.tilesHigh * 16 * SCALE_FACTOR);\r\n    context = canvas.getContext('2d');\r\n    NearestNeighborScaling(context);\r\n\r\n    RenderTerrain(context, terrain, tiles);\r\n\r\n    canvas.addEventListener('mousemove', onMouseMove);\r\n    canvas.addEventListener('mouseleave', onMouseLeave);\r\n    canvas.addEventListener('mousedown', onMouseClick);\r\n}\r\n\r\nfunction RenderTerrain(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet) {\r\n    for (let x = 0; x < terr.tilesWide; x++) {\r\n        for (let y = 0; y < terr.tilesHigh; y++) {\r\n            RenderTerrainCell(ctx, terr, sprites, x, y);\r\n        }\r\n    }\r\n}\r\nfunction RenderTerrainCell(ctx: CanvasRenderingContext2D, terr: Terrain, sprites: SpriteSheet, x: number, y: number) {\r\n    for (let d = 0; d < 4; d++) {\r\n        const dir = Direction.UpRight + (d * 2);\r\n        const spriteSheetX = terr.getSubTileId(x, y, dir);\r\n        let spriteSheetY = d;\r\n        if (terr.getTile(x, y) === TileType.Lava) spriteSheetY += 4;\r\n\r\n        const rtx = x * 16 + (ToPoint(dir).x === 1 ? 8 : 0);\r\n        const rty = y * 16 + (ToPoint(dir).y === 1 ? 8 : 0);\r\n        sprites.render(ctx, rtx * SCALE_FACTOR, rty * SCALE_FACTOR, 8 * SCALE_FACTOR, 8 * SCALE_FACTOR,\r\n            spriteSheetX, spriteSheetY);\r\n    }\r\n}\r\n\r\nfunction onMouseMove(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    if (pvMousePos !== undefined) {\r\n        if (!mouseCoords.equals(pvMousePos)) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x, pvMousePos.y);\r\n            selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n                1, 0);\r\n            pvMousePos = mouseCoords;\r\n        }\r\n    }\r\n    else {\r\n        selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n            1, 0);\r\n        pvMousePos = mouseCoords;\r\n    }\r\n}\r\n\r\nfunction onMouseLeave(ev: MouseEvent) {\r\n    if (pvMousePos !== undefined) {\r\n        pvMousePos = undefined;\r\n    }\r\n}\r\n\r\nfunction onMouseClick(ev: MouseEvent) {\r\n    const mouseCoords = new Point(Math.floor(ev.offsetX / (16 * SCALE_FACTOR)), Math.floor(ev.offsetY / (16 * SCALE_FACTOR)));\r\n    const tile = terrain.getTile(mouseCoords.x, mouseCoords.y);\r\n    terrain.setTile(mouseCoords.x, mouseCoords.y, tile === TileType.Lava ? TileType.Rock : TileType.Lava);\r\n\r\n    for (let dx = -1; dx <= 1; dx ++) {\r\n        for (let dy = -1; dy <= 1; dy++) {\r\n            RenderTerrainCell(context, terrain, tiles, pvMousePos.x + dx, pvMousePos.y + dy);\r\n        }\r\n    }\r\n\r\n    selectors.render(context, mouseCoords.x * 16 * SCALE_FACTOR, mouseCoords.y * 16 * SCALE_FACTOR, 16 * SCALE_FACTOR, 16 * SCALE_FACTOR,\r\n        1, 0);\r\n}\r\n\r\nexport default Run;"],"names":["Direction","directionValues","allDirections","Up","UpRight","Right","DownRight","Down","DownLeft","Left","UpLeft","ToPoint","direction","Point","constructor","x","y","angle","distance","Math","cos","sin","lengthSq","dot","this","length","sqrt","clone","negate","negateInPlace","p1","p2","dotWith","other","normalize","len","multiply","atan2","truncate","trunc","addWith","nx","ny","splitArgs","multWith","undefined","splitArgsOrSingle","subtractWith","divideWith","equals","src","a","b","sy","p","min","max","pts","t","add","Bezier","slice","rotate","theta","fromAngle","TileType","Terrain","tilesWide","tilesHigh","tiles","Array","Rock","subTileIds","updateTile","fixCoords","fixSubCoords","d","getTile","Lava","getSubTileId","coords","setTile","updateSelfAndAdjacent","tx","ty","dx","dy","tid","type","adjacency","dir","i","adjMask","pt","selectors","pvMousePos","terrain","context","assetLoadDone","canvas","document","getElementById","getContext","ctx","terr","sprites","RenderTerrainCell","RenderTerrain","addEventListener","onMouseMove","onMouseLeave","onMouseClick","spriteSheetX","spriteSheetY","rtx","rty","render","ev","mouseCoords","floor","offsetX","offsetY","tile","assetLoader","AssetLoader","SpriteSheet","registerAssetLoadCallback","onAllFinished"],"sourceRoot":""}